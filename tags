!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/nfs/homes/gecarval/42projects/42_Cursus/Testers/FlockSim/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(NAME)	Makefile	/^$(NAME): $(OBJ)$/;"	t
%.o	Makefile	/^%.o: %.cpp$/;"	t
0	.vscode/c_cpp_properties.json	/^                "${workspaceFolder}\/**"$/;"	s	array:configurations.0.includePath
0	.vscode/c_cpp_properties.json	/^        {$/;"	o	array:configurations
APIENTRY	includes/rlgl.h	/^                #define APIENTRY /;"	d
APIENTRY	includes/rlgl.h	/^                #define APIENTRY$/;"	d
AcceptDragDropPayload	imgui.cpp	/^const ImGuiPayload* ImGui::AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags)$/;"	f	class:ImGui	typeref:typename:const ImGuiPayload *
ActivateItemByID	imgui.cpp	/^void ImGui::ActivateItemByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Active	includes/imgui_internal.h	/^    bool                    Active;                             \/\/ Set to true on Begin(), unl/;"	m	struct:ImGuiWindow	typeref:typename:bool
ActiveId	includes/imgui_internal.h	/^    ImGuiID                 ActiveId;                           \/\/ Active widget$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdAllowOverlap	includes/imgui_internal.h	/^    bool                    ActiveIdAllowOverlap;               \/\/ Active widget allows anothe/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdClickOffset	includes/imgui_internal.h	/^    ImVec2                  ActiveIdClickOffset;                \/\/ Clicked offset from upper-l/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
ActiveIdFromShortcut	includes/imgui_internal.h	/^    bool                    ActiveIdFromShortcut;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenEditedBefore	includes/imgui_internal.h	/^    bool                    ActiveIdHasBeenEditedBefore;        \/\/ Was the value associated to/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenEditedThisFrame	includes/imgui_internal.h	/^    bool                    ActiveIdHasBeenEditedThisFrame;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenPressedBefore	includes/imgui_internal.h	/^    bool                    ActiveIdHasBeenPressedBefore;       \/\/ Track whether the active id/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdIsAlive	includes/imgui_internal.h	/^    ImGuiID                 ActiveIdIsAlive;                    \/\/ Active widget has been seen/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdIsJustActivated	includes/imgui_internal.h	/^    bool                    ActiveIdIsJustActivated;            \/\/ Set at the time of activati/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdMouseButton	includes/imgui_internal.h	/^    int                     ActiveIdMouseButton : 8;$/;"	m	struct:ImGuiContext	typeref:typename:int:8
ActiveIdNoClearOnFocusLoss	includes/imgui_internal.h	/^    bool                    ActiveIdNoClearOnFocusLoss;         \/\/ Disable losing active id if/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrame	includes/imgui_internal.h	/^    ImGuiID                 ActiveIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdSource	includes/imgui_internal.h	/^    ImGuiInputSource        ActiveIdSource;                     \/\/ Activating source: ImGuiInp/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputSource
ActiveIdTimer	includes/imgui_internal.h	/^    float                   ActiveIdTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
ActiveIdUsingAllKeyboardKeys	includes/imgui_internal.h	/^    bool                    ActiveIdUsingAllKeyboardKeys;       \/\/ Active widget will want to /;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdUsingNavDirMask	includes/imgui_internal.h	/^    ImU32                   ActiveIdUsingNavDirMask;            \/\/ Active widget will want to /;"	m	struct:ImGuiContext	typeref:typename:ImU32
ActiveIdValueOnActivation	includes/imgui_internal.h	/^    ImGuiDataTypeStorage    ActiveIdValueOnActivation;          \/\/ Backup of initial value at /;"	m	struct:ImGuiContext	typeref:typename:ImGuiDataTypeStorage
ActiveIdWindow	includes/imgui_internal.h	/^    ImGuiWindow*            ActiveIdWindow;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
AdapterIndexToStorageId	includes/imgui.h	/^    ImGuiID         (*AdapterIndexToStorageId)(ImGuiSelectionBasicStorage* self, int idx);      /;"	m	struct:ImGuiSelectionBasicStorage	typeref:typename:ImGuiID (*)(ImGuiSelectionBasicStorage * self,int idx)
AdapterSetItemSelected	includes/imgui.h	/^    void            (*AdapterSetItemSelected)(ImGuiSelectionExternalStorage* self, int idx, bool/;"	m	struct:ImGuiSelectionExternalStorage	typeref:typename:void (*)(ImGuiSelectionExternalStorage * self,int idx,bool selected)
Add	includes/imgui_internal.h	/^    T*          Add()                               { int idx = FreeIdx; if (idx == Buf.Size) { /;"	f	struct:ImPool	typeref:typename:T *
Add	includes/imgui_internal.h	/^    void        Add(const ImRect& r)                { if (Min.x > r.Min.x) Min.x = r.Min.x; if (/;"	f	struct:ImRect	typeref:typename:void
Add	includes/imgui_internal.h	/^    void        Add(const ImVec2& p)                { if (Min.x > p.x)     Min.x = p.x;     if (/;"	f	struct:ImRect	typeref:typename:void
AddBezierCubic	imgui_draw.cpp	/^void ImDrawList::AddBezierCubic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVe/;"	f	class:ImDrawList	typeref:typename:void
AddBezierQuadratic	imgui_draw.cpp	/^void ImDrawList::AddBezierQuadratic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 /;"	f	class:ImDrawList	typeref:typename:void
AddCallback	imgui_draw.cpp	/^void ImDrawList::AddCallback(ImDrawCallback callback, void* userdata, size_t userdata_size)$/;"	f	class:ImDrawList	typeref:typename:void
AddChar	includes/imgui.h	/^    inline void     AddChar(ImWchar c)      { SetBit(c); }                      \/\/ Add charact/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
AddCircle	imgui_draw.cpp	/^void ImDrawList::AddCircle(const ImVec2& center, float radius, ImU32 col, int num_segments, floa/;"	f	class:ImDrawList	typeref:typename:void
AddCircleFilled	imgui_draw.cpp	/^void ImDrawList::AddCircleFilled(const ImVec2& center, float radius, ImU32 col, int num_segments/;"	f	class:ImDrawList	typeref:typename:void
AddConcavePolyFilled	imgui_draw.cpp	/^void ImDrawList::AddConcavePolyFilled(const ImVec2* points, const int points_count, ImU32 col)$/;"	f	class:ImDrawList	typeref:typename:void
AddContextHook	imgui.cpp	/^ImGuiID ImGui::AddContextHook(ImGuiContext* ctx, const ImGuiContextHook* hook)$/;"	f	class:ImGui	typeref:typename:ImGuiID
AddConvexPolyFilled	imgui_draw.cpp	/^void ImDrawList::AddConvexPolyFilled(const ImVec2* points, const int points_count, ImU32 col)$/;"	f	class:ImDrawList	typeref:typename:void
AddCustomRectFontGlyph	imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float a/;"	f	class:ImFontAtlas	typeref:typename:int
AddCustomRectRegular	imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectRegular(int width, int height)$/;"	f	class:ImFontAtlas	typeref:typename:int
AddDrawCmd	imgui_draw.cpp	/^void ImDrawList::AddDrawCmd()$/;"	f	class:ImDrawList	typeref:typename:void
AddDrawList	imgui_draw.cpp	/^void ImDrawData::AddDrawList(ImDrawList* draw_list)$/;"	f	class:ImDrawData	typeref:typename:void
AddDrawListToDrawDataEx	imgui_draw.cpp	/^void ImGui::AddDrawListToDrawDataEx(ImDrawData* draw_data, ImVector<ImDrawList*>* out_list, ImDr/;"	f	class:ImGui	typeref:typename:void
AddEllipse	imgui_draw.cpp	/^void ImDrawList::AddEllipse(const ImVec2& center, const ImVec2& radius, ImU32 col, float rot, in/;"	f	class:ImDrawList	typeref:typename:void
AddEllipseFilled	imgui_draw.cpp	/^void ImDrawList::AddEllipseFilled(const ImVec2& center, const ImVec2& radius, ImU32 col, float r/;"	f	class:ImDrawList	typeref:typename:void
AddFocusEvent	imgui.cpp	/^void ImGuiIO::AddFocusEvent(bool focused)$/;"	f	class:ImGuiIO	typeref:typename:void
AddFont	imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFont(const ImFontConfig* font_cfg)$/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontDefault	imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontDefault(const ImFontConfig* font_cfg_template)$/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromFileTTF	imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontCon/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryCompressedBase85TTF	imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedBase85TTF(const char* compressed_ttf_data_base85/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryCompressedTTF	imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedTTF(const void* compressed_ttf_data, int compres/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryTTF	imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryTTF(void* font_data, int font_data_size, float size_pixels/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddGlyph	imgui_draw.cpp	/^void ImFont::AddGlyph(const ImFontConfig* cfg, ImWchar codepoint, float x0, float y0, float x1, /;"	f	class:ImFont	typeref:typename:void
AddImage	imgui_draw.cpp	/^void ImDrawList::AddImage(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max,/;"	f	class:ImDrawList	typeref:typename:void
AddImageQuad	imgui_draw.cpp	/^void ImDrawList::AddImageQuad(ImTextureID user_texture_id, const ImVec2& p1, const ImVec2& p2, c/;"	f	class:ImDrawList	typeref:typename:void
AddImageRounded	imgui_draw.cpp	/^void ImDrawList::AddImageRounded(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2&/;"	f	class:ImDrawList	typeref:typename:void
AddInputCharacter	imgui.cpp	/^void ImGuiIO::AddInputCharacter(unsigned int c)$/;"	f	class:ImGuiIO	typeref:typename:void
AddInputCharacterUTF16	imgui.cpp	/^void ImGuiIO::AddInputCharacterUTF16(ImWchar16 c)$/;"	f	class:ImGuiIO	typeref:typename:void
AddInputCharactersUTF8	imgui.cpp	/^void ImGuiIO::AddInputCharactersUTF8(const char* utf8_chars)$/;"	f	class:ImGuiIO	typeref:typename:void
AddItems	imgui_demo.cpp	/^    void AddItems(int count)$/;"	f	struct:ExampleAssetsBrowser	typeref:typename:void	file:
AddKeyAnalogEvent	imgui.cpp	/^void ImGuiIO::AddKeyAnalogEvent(ImGuiKey key, bool down, float analog_value)$/;"	f	class:ImGuiIO	typeref:typename:void
AddKeyEvent	imgui.cpp	/^void ImGuiIO::AddKeyEvent(ImGuiKey key, bool down)$/;"	f	class:ImGuiIO	typeref:typename:void
AddLine	imgui_draw.cpp	/^void ImDrawList::AddLine(const ImVec2& p1, const ImVec2& p2, ImU32 col, float thickness)$/;"	f	class:ImDrawList	typeref:typename:void
AddLog	imgui_demo.cpp	/^    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
AddLog	imgui_demo.cpp	/^    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
AddMouseButtonEvent	imgui.cpp	/^void ImGuiIO::AddMouseButtonEvent(int mouse_button, bool down)$/;"	f	class:ImGuiIO	typeref:typename:void
AddMousePosEvent	imgui.cpp	/^void ImGuiIO::AddMousePosEvent(float x, float y)$/;"	f	class:ImGuiIO	typeref:typename:void
AddMouseSourceEvent	imgui.cpp	/^void ImGuiIO::AddMouseSourceEvent(ImGuiMouseSource source)$/;"	f	class:ImGuiIO	typeref:typename:void
AddMouseWheelEvent	imgui.cpp	/^void ImGuiIO::AddMouseWheelEvent(float wheel_x, float wheel_y)$/;"	f	class:ImGuiIO	typeref:typename:void
AddNgon	imgui_draw.cpp	/^void ImDrawList::AddNgon(const ImVec2& center, float radius, ImU32 col, int num_segments, float /;"	f	class:ImDrawList	typeref:typename:void
AddNgonFilled	imgui_draw.cpp	/^void ImDrawList::AddNgonFilled(const ImVec2& center, float radius, ImU32 col, int num_segments)$/;"	f	class:ImDrawList	typeref:typename:void
AddPolyline	imgui_draw.cpp	/^void ImDrawList::AddPolyline(const ImVec2* points, const int points_count, ImU32 col, ImDrawFlag/;"	f	class:ImDrawList	typeref:typename:void
AddQuad	imgui_draw.cpp	/^void ImDrawList::AddQuad(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4,/;"	f	class:ImDrawList	typeref:typename:void
AddQuadFilled	imgui_draw.cpp	/^void ImDrawList::AddQuadFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec/;"	f	class:ImDrawList	typeref:typename:void
AddRanges	imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::AddRanges(const ImWchar* ranges)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
AddRect	imgui_draw.cpp	/^void ImDrawList::AddRect(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding, Im/;"	f	class:ImDrawList	typeref:typename:void
AddRectFilled	imgui_draw.cpp	/^void ImDrawList::AddRectFilled(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float roundi/;"	f	class:ImDrawList	typeref:typename:void
AddRectFilledMultiColor	imgui_draw.cpp	/^void ImDrawList::AddRectFilledMultiColor(const ImVec2& p_min, const ImVec2& p_max, ImU32 col_upr/;"	f	class:ImDrawList	typeref:typename:void
AddRemapChar	imgui_draw.cpp	/^void ImFont::AddRemapChar(ImWchar dst, ImWchar src, bool overwrite_dst)$/;"	f	class:ImFont	typeref:typename:void
AddRootWindowToDrawData	imgui.cpp	/^static inline void AddRootWindowToDrawData(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
AddSettingsHandler	imgui.cpp	/^void ImGui::AddSettingsHandler(const ImGuiSettingsHandler* handler)$/;"	f	class:ImGui	typeref:typename:void
AddText	imgui_draw.cpp	/^void ImDrawList::AddText(ImFont* font, float font_size, const ImVec2& pos, ImU32 col, const char/;"	f	class:ImDrawList	typeref:typename:void
AddText	imgui_draw.cpp	/^void ImDrawList::AddText(const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_/;"	f	class:ImDrawList	typeref:typename:void
AddText	imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::AddText(const char* text, const char* text_end)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
AddTriangle	imgui_draw.cpp	/^void ImDrawList::AddTriangle(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, fl/;"	f	class:ImDrawList	typeref:typename:void
AddTriangleFilled	imgui_draw.cpp	/^void ImDrawList::AddTriangleFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 c/;"	f	class:ImDrawList	typeref:typename:void
AddWindowToDrawData	imgui.cpp	/^static void AddWindowToDrawData(ImGuiWindow* window, int layer)$/;"	f	typeref:typename:void	file:
AddWindowToSortBuffer	imgui.cpp	/^static void AddWindowToSortBuffer(ImVector<ImGuiWindow*>* out_sorted_windows, ImGuiWindow* windo/;"	f	typeref:typename:void	file:
AddedByTestEngine	includes/imgui_internal.h	/^    bool                            AddedByTestEngine;$/;"	m	struct:ImGuiInputEvent	typeref:typename:bool
AdvanceX	includes/imgui.h	/^    float           AdvanceX;           \/\/ Distance to next character (= data from font + ImFo/;"	m	struct:ImFontGlyph	typeref:typename:float
AlignTextToFramePadding	imgui_widgets.cpp	/^void ImGui::AlignTextToFramePadding()$/;"	f	class:ImGui	typeref:typename:void
AliveCount	includes/imgui_internal.h	/^    ImPoolIdx       AliveCount; \/\/ Number of active\/alive items (for display purpose)$/;"	m	struct:ImPool	typeref:typename:ImPoolIdx
AllocCount	includes/imgui_internal.h	/^    ImS16       AllocCount;$/;"	m	struct:ImGuiDebugAllocEntry	typeref:typename:ImS16
AllowBoxSelect	imgui_demo.cpp	/^    bool            AllowBoxSelect = true;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:bool	file:
AllowDragUnselected	imgui_demo.cpp	/^    bool            AllowDragUnselected = false;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:bool	file:
AllowSorting	imgui_demo.cpp	/^    bool            AllowSorting = true;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:bool	file:
Alpha	includes/imgui.h	/^    float       Alpha;                      \/\/ Global alpha applies to everything in Dear ImGu/;"	m	struct:ImGuiStyle	typeref:typename:float
AnalogValue	includes/imgui.h	/^    float       AnalogValue;        \/\/ 0.0f..1.0f for gamepad values$/;"	m	struct:ImGuiKeyData	typeref:typename:float
AnalogValue	includes/imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	m	struct:ImGuiInputEventKey	typeref:typename:float
AngleMax12	imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:int	file:
AngleMin12	imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:int	file:
AngledHeadersCount	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         AngledHeadersCount;         \/\/ Count columns with angled heade/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
AngledHeadersExtraWidth	includes/imgui_internal.h	/^    float                       AngledHeadersExtraWidth;    \/\/ Used in EndTable()$/;"	m	struct:ImGuiTableTempData	typeref:typename:float
AngledHeadersHeight	includes/imgui_internal.h	/^    float                       AngledHeadersHeight;        \/\/ Set by TableAngledHeadersRow(),/;"	m	struct:ImGuiTable	typeref:typename:float
AngledHeadersRequests	includes/imgui_internal.h	/^    ImVector<ImGuiTableHeaderData> AngledHeadersRequests;   \/\/ Used in TableAngledHeadersRow()$/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVector<ImGuiTableHeaderData>
AngledHeadersSlope	includes/imgui_internal.h	/^    float                       AngledHeadersSlope;         \/\/ Set by TableAngledHeadersRow(),/;"	m	struct:ImGuiTable	typeref:typename:float
AntiAliasedFill	includes/imgui.h	/^    bool        AntiAliasedFill;            \/\/ Enable anti-aliased edges around filled shapes /;"	m	struct:ImGuiStyle	typeref:typename:bool
AntiAliasedLines	includes/imgui.h	/^    bool        AntiAliasedLines;           \/\/ Enable anti-aliased lines\/borders. Disable if /;"	m	struct:ImGuiStyle	typeref:typename:bool
AntiAliasedLinesUseTex	includes/imgui.h	/^    bool        AntiAliasedLinesUseTex;     \/\/ Enable anti-aliased lines\/borders using textur/;"	m	struct:ImGuiStyle	typeref:typename:bool
AppAcceptingEvents	includes/imgui.h	/^    bool        AppAcceptingEvents;                 \/\/ Only modify via SetAppAcceptingEvents()$/;"	m	struct:ImGuiIO	typeref:typename:bool
AppFocusLost	includes/imgui.h	/^    bool        AppFocusLost;                       \/\/ Only modify via AddFocusEvent()$/;"	m	struct:ImGuiIO	typeref:typename:bool
AppFocused	includes/imgui_internal.h	/^        ImGuiInputEventAppFocused   AppFocused;     \/\/ if Type == ImGuiInputEventType_Focus$/;"	m	union:ImGuiInputEvent::__anonf46a7b98020a	typeref:typename:ImGuiInputEventAppFocused
Appearing	includes/imgui_internal.h	/^    bool                    Appearing;                          \/\/ Set during the frame where /;"	m	struct:ImGuiWindow	typeref:typename:bool
ApplyAllFn	includes/imgui_internal.h	/^    void        (*ApplyAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);                /;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler)
ApplyDeletionPostLoop	imgui_demo.cpp	/^    void ApplyDeletionPostLoop(ImGuiMultiSelectIO* ms_io, ImVector<ITEM_TYPE>& items, int item_c/;"	f	struct:ExampleSelectionWithDeletion	typeref:typename:void	file:
ApplyDeletionPreLoop	imgui_demo.cpp	/^    int ApplyDeletionPreLoop(ImGuiMultiSelectIO* ms_io, int items_count)$/;"	f	struct:ExampleSelectionWithDeletion	typeref:typename:int	file:
ApplyHoverFlagsForTooltip	imgui.cpp	/^static ImGuiHoveredFlags ApplyHoverFlagsForTooltip(ImGuiHoveredFlags user_flags, ImGuiHoveredFla/;"	f	typeref:typename:ImGuiHoveredFlags	file:
ApplyRequests	imgui_widgets.cpp	/^void ImGuiSelectionBasicStorage::ApplyRequests(ImGuiMultiSelectIO* ms_io)$/;"	f	class:ImGuiSelectionBasicStorage	typeref:typename:void
ApplyRequests	imgui_widgets.cpp	/^void ImGuiSelectionExternalStorage::ApplyRequests(ImGuiMultiSelectIO* ms_io)$/;"	f	class:ImGuiSelectionExternalStorage	typeref:typename:void
ApplySelectionRequests	imgui_demo.cpp	/^                static void ApplySelectionRequests(ImGuiMultiSelectIO* ms_io, ExampleTreeNode* t/;"	f	struct:ShowDemoWindowMultiSelect::ExampleTreeFuncs	typeref:typename:void	file:
ApplySelectionRequests	imgui_demo.cpp	/^    void ApplySelectionRequests(ImGuiMultiSelectIO* ms_io, int side)$/;"	f	struct:ExampleDualListBox	typeref:typename:void	file:
ApplyWindowSettings	imgui.cpp	/^static void ApplyWindowSettings(ImGuiWindow* window, ImGuiWindowSettings* settings)$/;"	f	typeref:typename:void	file:
ArcFastRadiusCutoff	includes/imgui_internal.h	/^    float           ArcFastRadiusCutoff;                        \/\/ Cutoff radius after which a/;"	m	struct:ImDrawListSharedData	typeref:typename:float
ArcFastVtx	includes/imgui_internal.h	/^    ImVec2          ArcFastVtx[IM_DRAWLIST_ARCFAST_TABLE_SIZE]; \/\/ Sample points on the quarte/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec2[]
ArrowButton	imgui_widgets.cpp	/^bool ImGui::ArrowButton(const char* str_id, ImGuiDir dir)$/;"	f	class:ImGui	typeref:typename:bool
ArrowButtonEx	imgui_widgets.cpp	/^bool ImGui::ArrowButtonEx(const char* str_id, ImGuiDir dir, ImVec2 size, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Ascent	includes/imgui.h	/^    float                       Ascent, Descent;    \/\/ 4+4   \/\/ out \/\/            \/\/ Asc/;"	m	struct:ImFont	typeref:typename:float
AspectRatio	imgui_demo.cpp	/^        static void AspectRatio(ImGuiSizeCallbackData* data)$/;"	f	struct:ShowExampleAppConstrainedResize::CustomConstraints	typeref:typename:void	file:
AudioCallback	includes/raylib.h	/^typedef void (*AudioCallback)(void *bufferData, unsigned int frames);$/;"	t	typeref:typename:void (*)(void * bufferData,unsigned int frames)
AudioStream	includes/raylib.h	/^typedef struct AudioStream {$/;"	s
AudioStream	includes/raylib.h	/^} AudioStream;$/;"	t	typeref:struct:AudioStream
AutoFitFramesX	includes/imgui_internal.h	/^    ImS8                    AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
AutoFitFramesY	includes/imgui_internal.h	/^    ImS8                    AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
AutoFitOnlyGrows	includes/imgui_internal.h	/^    bool                    AutoFitOnlyGrows;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
AutoFitQueue	includes/imgui_internal.h	/^    ImU8                    AutoFitQueue;                   \/\/ Queue of 8 values for the next /;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8
AutoFitSingleColumn	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         AutoFitSingleColumn;        \/\/ Index of single column requesti/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
AutoPosLastDirection	includes/imgui_internal.h	/^    ImGuiDir                AutoPosLastDirection;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiDir
AutoScroll	imgui_demo.cpp	/^    bool                  AutoScroll;$/;"	m	struct:ExampleAppConsole	typeref:typename:bool	file:
AutoScroll	imgui_demo.cpp	/^    bool                AutoScroll;  \/\/ Keep scrolling if already at the bottom.$/;"	m	struct:ExampleAppLog	typeref:typename:bool	file:
AutomationEvent	includes/raylib.h	/^typedef struct AutomationEvent {$/;"	s
AutomationEvent	includes/raylib.h	/^} AutomationEvent;$/;"	t	typeref:struct:AutomationEvent
AutomationEventList	includes/raylib.h	/^typedef struct AutomationEventList {$/;"	s
AutomationEventList	includes/raylib.h	/^} AutomationEventList;$/;"	t	typeref:struct:AutomationEventList
BEIGE	includes/raylib.h	/^#define BEIGE /;"	d
BLACK	includes/raylib.h	/^#define BLACK /;"	d
BLANK	includes/raylib.h	/^#define BLANK /;"	d
BLEND_ADDITIVE	includes/raylib.h	/^    BLEND_ADDITIVE,                 \/\/ Blend textures adding colors$/;"	e	enum:__anonce11f6a41203
BLEND_ADD_COLORS	includes/raylib.h	/^    BLEND_ADD_COLORS,               \/\/ Blend textures adding colors (alternative)$/;"	e	enum:__anonce11f6a41203
BLEND_ALPHA	includes/raylib.h	/^    BLEND_ALPHA = 0,                \/\/ Blend textures considering alpha (default)$/;"	e	enum:__anonce11f6a41203
BLEND_ALPHA_PREMULTIPLY	includes/raylib.h	/^    BLEND_ALPHA_PREMULTIPLY,        \/\/ Blend premultiplied textures considering alpha$/;"	e	enum:__anonce11f6a41203
BLEND_CUSTOM	includes/raylib.h	/^    BLEND_CUSTOM,                   \/\/ Blend textures using custom src\/dst factors (use rlSet/;"	e	enum:__anonce11f6a41203
BLEND_CUSTOM_SEPARATE	includes/raylib.h	/^    BLEND_CUSTOM_SEPARATE           \/\/ Blend textures using custom rgb\/alpha separate src\/ds/;"	e	enum:__anonce11f6a41203
BLEND_MULTIPLIED	includes/raylib.h	/^    BLEND_MULTIPLIED,               \/\/ Blend textures multiplying colors$/;"	e	enum:__anonce11f6a41203
BLEND_SUBTRACT_COLORS	includes/raylib.h	/^    BLEND_SUBTRACT_COLORS,          \/\/ Blend textures subtracting colors (alternative)$/;"	e	enum:__anonce11f6a41203
BLUE	includes/raylib.h	/^#define BLUE /;"	d
BOID_HPP	includes/classes/Boid.hpp	/^# define BOID_HPP$/;"	d
BOID_SIZE	includes/classes/Boid.hpp	/^# define BOID_SIZE /;"	d
BROWN	includes/raylib.h	/^#define BROWN /;"	d
BackendFlags	includes/imgui.h	/^    ImGuiBackendFlags  BackendFlags;            \/\/ = 0              \/\/ See ImGuiBackendFlags/;"	m	struct:ImGuiIO	typeref:typename:ImGuiBackendFlags
BackendLanguageUserData	includes/imgui.h	/^    void*       BackendLanguageUserData;        \/\/ = NULL           \/\/ User data for non C++/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendPlatformName	includes/imgui.h	/^    const char* BackendPlatformName;            \/\/ = NULL$/;"	m	struct:ImGuiIO	typeref:typename:const char *
BackendPlatformUserData	includes/imgui.h	/^    void*       BackendPlatformUserData;        \/\/ = NULL           \/\/ User data for platfor/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendRendererName	includes/imgui.h	/^    const char* BackendRendererName;            \/\/ = NULL$/;"	m	struct:ImGuiIO	typeref:typename:const char *
BackendRendererUserData	includes/imgui.h	/^    void*       BackendRendererUserData;        \/\/ = NULL           \/\/ User data for rendere/;"	m	struct:ImGuiIO	typeref:typename:void *
BackupActiveIdIsAlive	includes/imgui_internal.h	/^    ImGuiID     BackupActiveIdIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImGuiID
BackupCurrLineSize	includes/imgui_internal.h	/^    ImVec2      BackupCurrLineSize;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCurrLineTextBaseOffset	includes/imgui_internal.h	/^    float       BackupCurrLineTextBaseOffset;$/;"	m	struct:ImGuiGroupData	typeref:typename:float
BackupCursorMaxPos	includes/imgui_internal.h	/^    ImVec2                  BackupCursorMaxPos;$/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:ImVec2
BackupCursorMaxPos	includes/imgui_internal.h	/^    ImVec2          BackupCursorMaxPos;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImVec2
BackupCursorMaxPos	includes/imgui_internal.h	/^    ImVec2      BackupCursorMaxPos;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCursorPos	includes/imgui_internal.h	/^    ImVec2              BackupCursorPos;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImVec2
BackupCursorPos	includes/imgui_internal.h	/^    ImVec2          BackupCursorPos;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImVec2
BackupCursorPos	includes/imgui_internal.h	/^    ImVec2      BackupCursorPos;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCursorPosPrevLine	includes/imgui_internal.h	/^    ImVec2          BackupCursorPosPrevLine;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImVec2
BackupCursorPosPrevLine	includes/imgui_internal.h	/^    ImVec2      BackupCursorPosPrevLine;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupDeactivatedIdIsAlive	includes/imgui_internal.h	/^    bool        BackupDeactivatedIdIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
BackupFloat	includes/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anonf46a7b98010a	typeref:typename:float[2]
BackupGroupOffset	includes/imgui_internal.h	/^    ImVec1      BackupGroupOffset;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec1
BackupHoveredIdIsAlive	includes/imgui_internal.h	/^    bool        BackupHoveredIdIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
BackupIndent	includes/imgui_internal.h	/^    ImVec1      BackupIndent;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec1
BackupInt	includes/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anonf46a7b98010a	typeref:typename:int[2]
BackupIsSameLine	includes/imgui_internal.h	/^    bool        BackupIsSameLine;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
BackupLayout	includes/imgui_internal.h	/^    ImGuiLayoutType BackupLayout;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImGuiLayoutType
BackupPrevLineTextBaseOffset	includes/imgui_internal.h	/^    float           BackupPrevLineTextBaseOffset;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:float
BackupValue	includes/imgui_internal.h	/^    ImVec4          BackupValue;$/;"	m	struct:ImGuiColorMod	typeref:typename:ImVec4
BarRect	includes/imgui_internal.h	/^    ImRect              BarRect;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImRect
BasePtr	includes/imgui_internal.h	/^    char*   BasePtr;$/;"	m	struct:ImSpanAllocator	typeref:typename:char *
Begin	imgui.cpp	/^bool ImGui::Begin(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Begin	imgui.cpp	/^void ImGuiListClipper::Begin(int items_count, float items_height)$/;"	f	class:ImGuiListClipper	typeref:typename:void
BeginBoxSelect	imgui_widgets.cpp	/^bool ImGui::BeginBoxSelect(const ImRect& scope_rect, ImGuiWindow* window, ImGuiID box_select_id,/;"	f	class:ImGui	typeref:typename:bool
BeginChild	imgui.cpp	/^bool ImGui::BeginChild(ImGuiID id, const ImVec2& size_arg, ImGuiChildFlags child_flags, ImGuiWin/;"	f	class:ImGui	typeref:typename:bool
BeginChild	imgui.cpp	/^bool ImGui::BeginChild(const char* str_id, const ImVec2& size_arg, ImGuiChildFlags child_flags, /;"	f	class:ImGui	typeref:typename:bool
BeginChildEx	imgui.cpp	/^bool ImGui::BeginChildEx(const char* name, ImGuiID id, const ImVec2& size_arg, ImGuiChildFlags c/;"	f	class:ImGui	typeref:typename:bool
BeginChildFrame	includes/imgui.h	/^    static inline bool  BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags window_/;"	f	namespace:ImGui	typeref:typename:bool
BeginColumns	imgui_tables.cpp	/^void ImGui::BeginColumns(const char* str_id, int columns_count, ImGuiOldColumnFlags flags)$/;"	f	class:ImGui	typeref:typename:void
BeginCombo	imgui_widgets.cpp	/^bool ImGui::BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginComboDepth	includes/imgui_internal.h	/^    int                     BeginComboDepth;$/;"	m	struct:ImGuiContext	typeref:typename:int
BeginComboPopup	imgui_widgets.cpp	/^bool ImGui::BeginComboPopup(ImGuiID popup_id, const ImRect& bb, ImGuiComboFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginComboPreview	imgui_widgets.cpp	/^bool ImGui::BeginComboPreview()$/;"	f	class:ImGui	typeref:typename:bool
BeginCount	includes/imgui_internal.h	/^    ImS8                BeginCount;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS8
BeginCount	includes/imgui_internal.h	/^    short                   BeginCount;                         \/\/ Number of Begin() during th/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginCountPreviousFrame	includes/imgui_internal.h	/^    short                   BeginCountPreviousFrame;            \/\/ Number of Begin() during th/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginDisabled	imgui.cpp	/^void ImGui::BeginDisabled(bool disabled)$/;"	f	class:ImGui	typeref:typename:void
BeginDisabledOverrideReenable	imgui.cpp	/^void ImGui::BeginDisabledOverrideReenable()$/;"	f	class:ImGui	typeref:typename:void
BeginDragDropSource	imgui.cpp	/^bool ImGui::BeginDragDropSource(ImGuiDragDropFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginDragDropTarget	imgui.cpp	/^bool ImGui::BeginDragDropTarget()$/;"	f	class:ImGui	typeref:typename:bool
BeginDragDropTargetCustom	imgui.cpp	/^bool ImGui::BeginDragDropTargetCustom(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
BeginErrorTooltip	imgui.cpp	/^bool ImGui::BeginErrorTooltip()$/;"	f	class:ImGui	typeref:typename:bool
BeginGroup	imgui.cpp	/^void ImGui::BeginGroup()$/;"	f	class:ImGui	typeref:typename:void
BeginItemTooltip	imgui.cpp	/^bool ImGui::BeginItemTooltip()$/;"	f	class:ImGui	typeref:typename:bool
BeginListBox	imgui_widgets.cpp	/^bool ImGui::BeginListBox(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui	typeref:typename:bool
BeginMainMenuBar	imgui_widgets.cpp	/^bool ImGui::BeginMainMenuBar()$/;"	f	class:ImGui	typeref:typename:bool
BeginMenu	imgui_widgets.cpp	/^bool ImGui::BeginMenu(const char* label, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
BeginMenuBar	imgui_widgets.cpp	/^bool ImGui::BeginMenuBar()$/;"	f	class:ImGui	typeref:typename:bool
BeginMenuDepth	includes/imgui_internal.h	/^    int                     BeginMenuDepth;$/;"	m	struct:ImGuiContext	typeref:typename:int
BeginMenuEx	imgui_widgets.cpp	/^bool ImGui::BeginMenuEx(const char* label, const char* icon, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
BeginMultiSelect	imgui_widgets.cpp	/^ImGuiMultiSelectIO* ImGui::BeginMultiSelect(ImGuiMultiSelectFlags flags, int selection_size, int/;"	f	class:ImGui	typeref:typename:ImGuiMultiSelectIO *
BeginOrder	includes/imgui_internal.h	/^    ImS16               BeginOrder;             \/\/ BeginTabItem() order, used to re-order tabs/;"	m	struct:ImGuiTabItem	typeref:typename:ImS16
BeginOrderWithinContext	includes/imgui_internal.h	/^    short                   BeginOrderWithinContext;            \/\/ Begin() order within entire/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginOrderWithinParent	includes/imgui_internal.h	/^    short                   BeginOrderWithinParent;             \/\/ Begin() order within immedi/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginPopup	imgui.cpp	/^bool ImGui::BeginPopup(const char* str_id, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextItem	imgui.cpp	/^bool ImGui::BeginPopupContextItem(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextVoid	imgui.cpp	/^bool ImGui::BeginPopupContextVoid(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextWindow	imgui.cpp	/^bool ImGui::BeginPopupContextWindow(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupEx	imgui.cpp	/^bool ImGui::BeginPopupEx(ImGuiID id, ImGuiWindowFlags extra_window_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupModal	imgui.cpp	/^bool ImGui::BeginPopupModal(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupStack	includes/imgui_internal.h	/^    ImVector<ImGuiPopupData>        BeginPopupStack;            \/\/ Which level of BeginPopup()/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPopupData>
BeginTabBar	imgui_widgets.cpp	/^bool    ImGui::BeginTabBar(const char* str_id, ImGuiTabBarFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTabBarEx	imgui_widgets.cpp	/^bool    ImGui::BeginTabBarEx(ImGuiTabBar* tab_bar, const ImRect& tab_bar_bb, ImGuiTabBarFlags fl/;"	f	class:ImGui	typeref:typename:bool
BeginTabItem	imgui_widgets.cpp	/^bool    ImGui::BeginTabItem(const char* label, bool* p_open, ImGuiTabItemFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTable	imgui_tables.cpp	/^bool    ImGui::BeginTable(const char* str_id, int columns_count, ImGuiTableFlags flags, const Im/;"	f	class:ImGui	typeref:typename:bool
BeginTableEx	imgui_tables.cpp	/^bool    ImGui::BeginTableEx(const char* name, ImGuiID id, int columns_count, ImGuiTableFlags fla/;"	f	class:ImGui	typeref:typename:bool
BeginTooltip	imgui.cpp	/^bool ImGui::BeginTooltip()$/;"	f	class:ImGui	typeref:typename:bool
BeginTooltipEx	imgui.cpp	/^bool ImGui::BeginTooltipEx(ImGuiTooltipFlags tooltip_flags, ImGuiWindowFlags extra_window_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTooltipHidden	imgui.cpp	/^bool ImGui::BeginTooltipHidden()$/;"	f	class:ImGui	typeref:typename:bool
BeginViewportSideBar	imgui_widgets.cpp	/^bool ImGui::BeginViewportSideBar(const char* name, ImGuiViewport* viewport_p, ImGuiDir dir, floa/;"	f	class:ImGui	typeref:typename:bool
Bg0ClipRectForDrawCmd	includes/imgui_internal.h	/^    ImRect                      Bg0ClipRectForDrawCmd;      \/\/ Actual ImDrawCmd clip rect for /;"	m	struct:ImGuiTable	typeref:typename:ImRect
Bg2ClipRectForDrawCmd	includes/imgui_internal.h	/^    ImRect                      Bg2ClipRectForDrawCmd;      \/\/ Actual ImDrawCmd clip rect for /;"	m	struct:ImGuiTable	typeref:typename:ImRect
Bg2DrawChannelCurrent	includes/imgui_internal.h	/^    ImGuiTableDrawChannelIdx    Bg2DrawChannelCurrent;      \/\/ For Selectable() and other widg/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableDrawChannelIdx
Bg2DrawChannelUnfrozen	includes/imgui_internal.h	/^    ImGuiTableDrawChannelIdx    Bg2DrawChannelUnfrozen;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableDrawChannelIdx
BgAlphaVal	includes/imgui_internal.h	/^    float                       BgAlphaVal;             \/\/ Override background alpha$/;"	m	struct:ImGuiNextWindowData	typeref:typename:float
BgClipRect	includes/imgui_internal.h	/^    ImRect                      BgClipRect;                 \/\/ We use this to cpu-clip cell ba/;"	m	struct:ImGuiTable	typeref:typename:ImRect
BgColor	includes/imgui_internal.h	/^    ImU32                       BgColor;    \/\/ Actual color$/;"	m	struct:ImGuiTableCellData	typeref:typename:ImU32
BgColor0	includes/imgui_internal.h	/^    ImU32                       BgColor0;$/;"	m	struct:ImGuiTableHeaderData	typeref:typename:ImU32
BgColor1	includes/imgui_internal.h	/^    ImU32                       BgColor1;$/;"	m	struct:ImGuiTableHeaderData	typeref:typename:ImU32
BgFgDrawLists	includes/imgui_internal.h	/^    ImDrawList*         BgFgDrawLists[2];       \/\/ Convenience background (0) and foreground (/;"	m	struct:ImGuiViewportP	typeref:typename:ImDrawList * [2]
BgFgDrawListsLastFrame	includes/imgui_internal.h	/^    int                 BgFgDrawListsLastFrame[2]; \/\/ Last frame number the background (0) and/;"	m	struct:ImGuiViewportP	typeref:typename:int[2]
BlendMode	includes/raylib.h	/^} BlendMode;$/;"	t	typeref:enum:__anonce11f6a41203
Boid	includes/classes/Boid.hpp	/^class Boid$/;"	c
Boid	srcs/classes/Boid.cpp	/^Boid::Boid(t_boid properties)$/;"	f	class:Boid
Boid	srcs/classes/Boid.cpp	/^Boid::Boid(void)$/;"	f	class:Boid
BoneInfo	includes/raylib.h	/^typedef struct BoneInfo {$/;"	s
BoneInfo	includes/raylib.h	/^} BoneInfo;$/;"	t	typeref:struct:BoneInfo
BorderColorLight	includes/imgui_internal.h	/^    ImU32                       BorderColorLight;$/;"	m	struct:ImGuiTable	typeref:typename:ImU32
BorderColorStrong	includes/imgui_internal.h	/^    ImU32                       BorderColorStrong;$/;"	m	struct:ImGuiTable	typeref:typename:ImU32
BorderX1	includes/imgui_internal.h	/^    float                       BorderX1;$/;"	m	struct:ImGuiTable	typeref:typename:float
BorderX2	includes/imgui_internal.h	/^    float                       BorderX2;$/;"	m	struct:ImGuiTable	typeref:typename:float
BoundingBox	includes/raylib.h	/^typedef struct BoundingBox {$/;"	s
BoundingBox	includes/raylib.h	/^} BoundingBox;$/;"	t	typeref:struct:BoundingBox
BoxSelectActivateDrag	imgui_widgets.cpp	/^static void BoxSelectActivateDrag(ImGuiBoxSelectState* bs, ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
BoxSelectDeactivateDrag	imgui_widgets.cpp	/^static void BoxSelectDeactivateDrag(ImGuiBoxSelectState* bs)$/;"	f	typeref:typename:void	file:
BoxSelectId	includes/imgui_internal.h	/^    ImGuiID                 BoxSelectId;$/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:ImGuiID
BoxSelectPreStartDrag	imgui_widgets.cpp	/^static void BoxSelectPreStartDrag(ImGuiID id, ImGuiSelectionUserData clicked_item)$/;"	f	typeref:typename:void	file:
BoxSelectRectCurr	includes/imgui_internal.h	/^    ImRect                  BoxSelectRectCurr;$/;"	m	struct:ImGuiBoxSelectState	typeref:typename:ImRect
BoxSelectRectPrev	includes/imgui_internal.h	/^    ImRect                  BoxSelectRectPrev;  \/\/ Selection rectangle in absolute coordinates/;"	m	struct:ImGuiBoxSelectState	typeref:typename:ImRect
BoxSelectScrollWithMouseDrag	imgui_widgets.cpp	/^static void BoxSelectScrollWithMouseDrag(ImGuiBoxSelectState* bs, ImGuiWindow* window, const ImR/;"	f	typeref:typename:void	file:
BoxSelectState	includes/imgui_internal.h	/^    ImGuiBoxSelectState             BoxSelectState;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiBoxSelectState
BringWindowToDisplayBack	imgui.cpp	/^void ImGui::BringWindowToDisplayBack(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToDisplayBehind	imgui.cpp	/^void ImGui::BringWindowToDisplayBehind(ImGuiWindow* window, ImGuiWindow* behind_window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToDisplayFront	imgui.cpp	/^void ImGui::BringWindowToDisplayFront(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToFocusFront	imgui.cpp	/^void ImGui::BringWindowToFocusFront(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
Buf	imgui_demo.cpp	/^    ImGuiTextBuffer     Buf;$/;"	m	struct:ExampleAppLog	typeref:typename:ImGuiTextBuffer	file:
Buf	includes/imgui.h	/^    ImVector<char>      Buf;$/;"	m	struct:ImGuiTextBuffer	typeref:typename:ImVector<char>
Buf	includes/imgui.h	/^    char*               Buf;            \/\/ Text buffer                          \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:char *
Buf	includes/imgui_internal.h	/^    ImVector<T>     Buf;        \/\/ Contiguous data$/;"	m	struct:ImPool	typeref:typename:ImVector<T>
Buf	includes/imgui_internal.h	/^    ImVector<char>  Buf;$/;"	m	struct:ImChunkStream	typeref:typename:ImVector<char>
BufCapacity	includes/imgui_internal.h	/^    int                     BufCapacity;            \/\/ end-user buffer capacity (include zero /;"	m	struct:ImGuiInputTextState	typeref:typename:int
BufDirty	includes/imgui.h	/^    bool                BufDirty;       \/\/ Set if you modify Buf\/BufTextLen!    \/\/ Write   /;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:bool
BufSize	includes/imgui.h	/^    int                 BufSize;        \/\/ Buffer size (in bytes) = capacity+1  \/\/ Read-only/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
BufTextLen	includes/imgui.h	/^    int                 BufTextLen;     \/\/ Text length (in bytes)               \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
Build	imgui.cpp	/^void ImGuiTextFilter::Build()$/;"	f	class:ImGuiTextFilter	typeref:typename:void
Build	imgui_draw.cpp	/^bool    ImFontAtlas::Build()$/;"	f	class:ImFontAtlas	typeref:typename:bool
BuildEars	imgui_draw.cpp	/^void ImTriangulator::BuildEars()$/;"	f	class:ImTriangulator	typeref:typename:void
BuildLookupTable	imgui_draw.cpp	/^void ImFont::BuildLookupTable()$/;"	f	class:ImFont	typeref:typename:void
BuildNodes	imgui_draw.cpp	/^void ImTriangulator::BuildNodes(const ImVec2* points, int points_count)$/;"	f	class:ImTriangulator	typeref:typename:void
BuildRanges	imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::BuildRanges(ImVector<ImWchar>* out_ranges)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
BuildReflexes	imgui_draw.cpp	/^void ImTriangulator::BuildReflexes()$/;"	f	class:ImTriangulator	typeref:typename:void
BuildSortByKey	imgui.cpp	/^void ImGuiStorage::BuildSortByKey()$/;"	f	class:ImGuiStorage	typeref:typename:void
BuildWorkInsetMax	includes/imgui_internal.h	/^    ImVec2              BuildWorkInsetMax;      \/\/ "$/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
BuildWorkInsetMin	includes/imgui_internal.h	/^    ImVec2              BuildWorkInsetMin;      \/\/ Work Area inset accumulator for current fra/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
Bullet	imgui_widgets.cpp	/^void ImGui::Bullet()$/;"	f	class:ImGui	typeref:typename:void
BulletText	imgui_widgets.cpp	/^void ImGui::BulletText(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
BulletTextV	imgui_widgets.cpp	/^void ImGui::BulletTextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
Button	imgui_widgets.cpp	/^bool ImGui::Button(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui	typeref:typename:bool
Button	includes/imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseButton	typeref:typename:int
ButtonBehavior	imgui_widgets.cpp	/^bool ImGui::ButtonBehavior(const ImRect& bb, ImGuiID id, bool* out_hovered, bool* out_held, ImGu/;"	f	class:ImGui	typeref:typename:bool
ButtonEx	imgui_widgets.cpp	/^bool ImGui::ButtonEx(const char* label, const ImVec2& size_arg, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ButtonTextAlign	includes/imgui.h	/^    ImVec2      ButtonTextAlign;            \/\/ Alignment of button text when button is larger /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
CAMERA_CUSTOM	includes/raylib.h	/^    CAMERA_CUSTOM = 0,              \/\/ Camera custom, controlled by user (UpdateCamera() does /;"	e	enum:__anonce11f6a41403
CAMERA_FIRST_PERSON	includes/raylib.h	/^    CAMERA_FIRST_PERSON,            \/\/ Camera first person$/;"	e	enum:__anonce11f6a41403
CAMERA_FREE	includes/raylib.h	/^    CAMERA_FREE,                    \/\/ Camera free mode$/;"	e	enum:__anonce11f6a41403
CAMERA_ORBITAL	includes/raylib.h	/^    CAMERA_ORBITAL,                 \/\/ Camera orbital, around target, zoom supported$/;"	e	enum:__anonce11f6a41403
CAMERA_ORTHOGRAPHIC	includes/raylib.h	/^    CAMERA_ORTHOGRAPHIC             \/\/ Orthographic projection$/;"	e	enum:__anonce11f6a41503
CAMERA_PERSPECTIVE	includes/raylib.h	/^    CAMERA_PERSPECTIVE = 0,         \/\/ Perspective projection$/;"	e	enum:__anonce11f6a41503
CAMERA_THIRD_PERSON	includes/raylib.h	/^    CAMERA_THIRD_PERSON             \/\/ Camera third person$/;"	e	enum:__anonce11f6a41403
CLITERAL	includes/raylib.h	/^    #define CLITERAL(/;"	d
COLUMNS_HIT_RECT_HALF_THICKNESS	imgui_tables.cpp	/^static const float COLUMNS_HIT_RECT_HALF_THICKNESS = 4.0f;$/;"	v	typeref:typename:const float	file:
CT_Button	imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Button	imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_FillButton	imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_FillButton	imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_FillButton	imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_FillButton };$/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_InputText	imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_LongText	imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Selectable	imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_SelectableSpanRow	imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_ShortText	imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_ShowWidth	imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_SmallButton	imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Text	imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Text	imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_FillButton };$/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CUBEMAP_LAYOUT_AUTO_DETECT	includes/raylib.h	/^    CUBEMAP_LAYOUT_AUTO_DETECT = 0,         \/\/ Automatically detect layout type$/;"	e	enum:__anonce11f6a41003
CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE	includes/raylib.h	/^    CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE     \/\/ Layout is defined by a 4x3 cross with cubemap fa/;"	e	enum:__anonce11f6a41003
CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR	includes/raylib.h	/^    CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR,     \/\/ Layout is defined by a 3x4 cross with cubemap f/;"	e	enum:__anonce11f6a41003
CUBEMAP_LAYOUT_LINE_HORIZONTAL	includes/raylib.h	/^    CUBEMAP_LAYOUT_LINE_HORIZONTAL,         \/\/ Layout is defined by a horizontal line with fac/;"	e	enum:__anonce11f6a41003
CUBEMAP_LAYOUT_LINE_VERTICAL	includes/raylib.h	/^    CUBEMAP_LAYOUT_LINE_VERTICAL,           \/\/ Layout is defined by a vertical line with faces$/;"	e	enum:__anonce11f6a41003
CXX	Makefile	/^CXX = c++$/;"	m
CalcCustomRectUV	imgui_draw.cpp	/^void ImFontAtlas::CalcCustomRectUV(const ImFontAtlasCustomRect* rect, ImVec2* out_uv_min, ImVec2/;"	f	class:ImFontAtlas	typeref:typename:void
CalcDelayFromHoveredFlags	imgui.cpp	/^static inline float CalcDelayFromHoveredFlags(ImGuiHoveredFlags flags)$/;"	f	typeref:typename:float	file:
CalcFontSize	includes/imgui_internal.h	/^    float       CalcFontSize() const    { ImGuiContext& g = *Ctx; return g.FontBaseSize * FontWi/;"	f	struct:ImGuiWindow	typeref:typename:float
CalcItemSize	imgui.cpp	/^ImVec2 ImGui::CalcItemSize(ImVec2 size, float default_w, float default_h)$/;"	f	class:ImGui	typeref:typename:ImVec2
CalcItemWidth	imgui.cpp	/^float ImGui::CalcItemWidth()$/;"	f	class:ImGui	typeref:typename:float
CalcMaxPopupHeightFromItemCount	imgui_widgets.cpp	/^static float CalcMaxPopupHeightFromItemCount(int items_count)$/;"	f	typeref:typename:float	file:
CalcNextScrollFromScrollTargetAndClamp	imgui.cpp	/^static ImVec2 CalcNextScrollFromScrollTargetAndClamp(ImGuiWindow* window)$/;"	f	typeref:typename:ImVec2	file:
CalcNextTotalWidth	imgui_widgets.cpp	/^void ImGuiMenuColumns::CalcNextTotalWidth(bool update_offsets)$/;"	f	class:ImGuiMenuColumns	typeref:typename:void
CalcResizePosSizeFromAnyCorner	imgui.cpp	/^static void CalcResizePosSizeFromAnyCorner(ImGuiWindow* window, const ImVec2& corner_target, con/;"	f	typeref:typename:void	file:
CalcRoutingScore	imgui.cpp	/^static int CalcRoutingScore(ImGuiID focus_scope_id, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	typeref:typename:int	file:
CalcScopeRect	imgui_widgets.cpp	/^static ImRect CalcScopeRect(ImGuiMultiSelectTempData* ms, ImGuiWindow* window)$/;"	f	typeref:typename:ImRect	file:
CalcScrollEdgeSnap	imgui.cpp	/^static float CalcScrollEdgeSnap(float target, float snap_min, float snap_max, float snap_thresho/;"	f	typeref:typename:float	file:
CalcTextSize	imgui.cpp	/^ImVec2 ImGui::CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_h/;"	f	class:ImGui	typeref:typename:ImVec2
CalcTextSizeA	imgui_draw.cpp	/^ImVec2 ImFont::CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_beg/;"	f	class:ImFont	typeref:typename:ImVec2
CalcTypematicRepeatAmount	imgui.cpp	/^int ImGui::CalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate)$/;"	f	class:ImGui	typeref:typename:int
CalcWindowAutoFitSize	imgui.cpp	/^static ImVec2 CalcWindowAutoFitSize(ImGuiWindow* window, const ImVec2& size_contents)$/;"	f	typeref:typename:ImVec2	file:
CalcWindowContentSizes	imgui.cpp	/^static void CalcWindowContentSizes(ImGuiWindow* window, ImVec2* content_size_current, ImVec2* co/;"	f	typeref:typename:void	file:
CalcWindowMinSize	imgui.cpp	/^static inline ImVec2 CalcWindowMinSize(ImGuiWindow* window)$/;"	f	typeref:typename:ImVec2	file:
CalcWindowNextAutoFitSize	imgui.cpp	/^ImVec2 ImGui::CalcWindowNextAutoFitSize(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImVec2
CalcWindowSizeAfterConstraint	imgui.cpp	/^static ImVec2 CalcWindowSizeAfterConstraint(ImGuiWindow* window, const ImVec2& size_desired)$/;"	f	typeref:typename:ImVec2	file:
CalcWordWrapNextLineStartA	imgui_draw.cpp	/^static inline const char* CalcWordWrapNextLineStartA(const char* text, const char* text_end)$/;"	f	typeref:typename:const char *	file:
CalcWordWrapPositionA	imgui_draw.cpp	/^const char* ImFont::CalcWordWrapPositionA(float scale, const char* text, const char* text_end, f/;"	f	class:ImFont	typeref:typename:const char *
CalcWorkRectPos	includes/imgui_internal.h	/^    ImVec2  CalcWorkRectPos(const ImVec2& inset_min) const                           { return Im/;"	f	struct:ImGuiViewportP	typeref:typename:ImVec2
CalcWorkRectSize	includes/imgui_internal.h	/^    ImVec2  CalcWorkRectSize(const ImVec2& inset_min, const ImVec2& inset_max) const { return Im/;"	f	struct:ImGuiViewportP	typeref:typename:ImVec2
CalcWrapWidthForPos	imgui.cpp	/^float ImGui::CalcWrapWidthForPos(const ImVec2& pos, float wrap_pos_x)$/;"	f	class:ImGui	typeref:typename:float
CallContextHooks	imgui.cpp	/^void ImGui::CallContextHooks(ImGuiContext* ctx, ImGuiContextHookType hook_type)$/;"	f	class:ImGui	typeref:typename:void
Callback	includes/imgui_internal.h	/^    ImGuiContextHookCallback    Callback;$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiContextHookCallback
CallbackTextBackup	includes/imgui_internal.h	/^    ImVector<char>          CallbackTextBackup;     \/\/ temporary storage for callback to suppo/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<char>
Camera	includes/raylib.h	/^typedef Camera3D Camera;    \/\/ Camera type fallback, defaults to Camera3D$/;"	t	typeref:typename:Camera3D
Camera2D	includes/raylib.h	/^typedef struct Camera2D {$/;"	s
Camera2D	includes/raylib.h	/^} Camera2D;$/;"	t	typeref:struct:Camera2D
Camera3D	includes/raylib.h	/^typedef struct Camera3D {$/;"	s
Camera3D	includes/raylib.h	/^} Camera3D;$/;"	t	typeref:struct:Camera3D
CameraMode	includes/raylib.h	/^} CameraMode;$/;"	t	typeref:enum:__anonce11f6a41403
CameraProjection	includes/raylib.h	/^} CameraProjection;$/;"	t	typeref:enum:__anonce11f6a41503
CannotSkipItemsQueue	includes/imgui_internal.h	/^    ImU8                    CannotSkipItemsQueue;           \/\/ Queue of 8 values for the next /;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8
Capacity	includes/imgui.h	/^    int                 Capacity;$/;"	m	struct:ImVector	typeref:typename:int
CellPadding	includes/imgui.h	/^    ImVec2      CellPadding;                \/\/ Padding within a table cell. Cellpadding.x is l/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
CellPaddingX	includes/imgui_internal.h	/^    float                       CellPaddingX;               \/\/ Padding from each borders. Lock/;"	m	struct:ImGuiTable	typeref:typename:float
CellSpacingX1	includes/imgui_internal.h	/^    float                       CellSpacingX1;              \/\/ Spacing between non-bordered ce/;"	m	struct:ImGuiTable	typeref:typename:float
CellSpacingX2	includes/imgui_internal.h	/^    float                       CellSpacingX2;$/;"	m	struct:ImGuiTable	typeref:typename:float
ChannelsCount	imgui_tables.cpp	/^        int             ChannelsCount = 0;$/;"	m	struct:ImGui::TableMergeDrawChannels::MergeGroup	typeref:typename:int	file:
ChannelsMask	imgui_tables.cpp	/^        ImBitArrayPtr   ChannelsMask = NULL;$/;"	m	struct:ImGui::TableMergeDrawChannels::MergeGroup	typeref:typename:ImBitArrayPtr	file:
ChannelsMerge	includes/imgui.h	/^    inline void     ChannelsMerge()             { _Splitter.Merge(this); }$/;"	f	struct:ImDrawList	typeref:typename:void
ChannelsSetCurrent	includes/imgui.h	/^    inline void     ChannelsSetCurrent(int n)   { _Splitter.SetCurrentChannel(this, n); }$/;"	f	struct:ImDrawList	typeref:typename:void
ChannelsSplit	includes/imgui.h	/^    inline void     ChannelsSplit(int count)    { _Splitter.Split(this, count); }$/;"	f	struct:ImDrawList	typeref:typename:void
Char	includes/imgui_internal.h	/^struct ImGuiInputEventText          { unsigned int Char; };$/;"	m	struct:ImGuiInputEventText	typeref:typename:unsigned int
Checkbox	imgui_widgets.cpp	/^bool ImGui::Checkbox(const char* label, bool* v)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, ImS64* flags, ImS64 flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, ImU64* flags, ImU64 flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, int* flags, int flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlagsT	imgui_widgets.cpp	/^bool ImGui::CheckboxFlagsT(const char* label, T* flags, T flags_value)$/;"	f	class:ImGui	typeref:typename:bool
ChildBorderSize	includes/imgui.h	/^    float       ChildBorderSize;            \/\/ Thickness of border around child windows. Gener/;"	m	struct:ImGuiStyle	typeref:typename:float
ChildCount	imgui_demo.cpp	/^                int             ChildCount;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:int	file:
ChildFlags	includes/imgui_internal.h	/^    ImGuiChildFlags             ChildFlags;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiChildFlags
ChildFlags	includes/imgui_internal.h	/^    ImGuiChildFlags         ChildFlags;                         \/\/ Set when window is a child /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiChildFlags
ChildId	includes/imgui_internal.h	/^    ImGuiID                 ChildId;                            \/\/ ID of corresponding item in/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
ChildIdx	imgui_demo.cpp	/^                int             ChildIdx;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:int	file:
ChildRounding	includes/imgui.h	/^    float       ChildRounding;              \/\/ Radius of child window corners rounding. Set to/;"	m	struct:ImGuiStyle	typeref:typename:float
ChildWindowComparer	imgui.cpp	/^static int IMGUI_CDECL ChildWindowComparer(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
ChildWindows	includes/imgui_internal.h	/^    ImVector<ImGuiWindow*>  ChildWindows;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<ImGuiWindow * >
Childs	imgui_demo.cpp	/^    ImVector<ExampleTreeNode*>  Childs;$/;"	m	struct:ExampleTreeNode	typeref:typename:ImVector<ExampleTreeNode * >	file:
Circle	includes/classes/Flock.hpp	/^typedef struct Circle$/;"	s
Circle	includes/classes/Flock.hpp	/^}				Circle;$/;"	t	typeref:struct:Circle
CircleSegmentCounts	includes/imgui_internal.h	/^    ImU8            CircleSegmentCounts[64];    \/\/ Precomputed segment count for given radius /;"	m	struct:ImDrawListSharedData	typeref:typename:ImU8[64]
CircleSegmentMaxError	includes/imgui_internal.h	/^    float           CircleSegmentMaxError;      \/\/ Number of circle segments to use per pixel /;"	m	struct:ImDrawListSharedData	typeref:typename:float
CircleTessellationMaxError	includes/imgui.h	/^    float       CircleTessellationMaxError; \/\/ Maximum error (in pixels) allowed when using Ad/;"	m	struct:ImGuiStyle	typeref:typename:float
Clamp	includes/raymath.h	/^RMAPI float Clamp(float value, float min, float max)$/;"	f	typeref:typename:RMAPI float
ClampWindowPos	imgui.cpp	/^static inline void ClampWindowPos(ImGuiWindow* window, const ImRect& visibility_rect)$/;"	f	typeref:typename:void	file:
Clear	imgui_demo.cpp	/^    void    Clear()$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
Clear	imgui_draw.cpp	/^void    ImFontAtlas::Clear()$/;"	f	class:ImFontAtlas	typeref:typename:void
Clear	imgui_draw.cpp	/^void ImDrawData::Clear()$/;"	f	class:ImDrawData	typeref:typename:void
Clear	imgui_widgets.cpp	/^void ImGuiSelectionBasicStorage::Clear()$/;"	f	class:ImGuiSelectionBasicStorage	typeref:typename:void
Clear	includes/imgui.h	/^    inline void                 Clear() { _Current = 0; _Count = 1; } \/\/ Do not clear Channels/;"	f	struct:ImDrawListSplitter	typeref:typename:void
Clear	includes/imgui.h	/^    inline void     Clear()                 { int size_in_bytes = (IM_UNICODE_CODEPOINT_MAX + 1)/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
Clear	includes/imgui.h	/^    void                Clear()          { InputBuf[0] = 0; Build(); }$/;"	f	struct:ImGuiTextFilter	typeref:typename:void
Clear	includes/imgui.h	/^    void                Clear() { Data.clear(); }$/;"	f	struct:ImGuiStorage	typeref:typename:void
Clear	includes/imgui.h	/^    void Clear()    { SourceId = SourceParentId = 0; Data = NULL; DataSize = 0; memset(DataType,/;"	f	struct:ImGuiPayload	typeref:typename:void
Clear	includes/imgui_internal.h	/^    void            Clear()                     { Storage.clear(); }$/;"	f	struct:ImBitVector	typeref:typename:void
Clear	includes/imgui_internal.h	/^    void            Clear()  { SearchBuffer[0] = 0; SingleCharModeLock = false; } \/\/ We preser/;"	f	struct:ImGuiTypingSelectState	typeref:typename:void
Clear	includes/imgui_internal.h	/^    void        Clear()                             { for (int n = 0; n < Map.Data.Size; n++) { /;"	f	struct:ImPool	typeref:typename:void
Clear	includes/imgui_internal.h	/^    void Clear()                    { for (int n = 0; n < IM_ARRAYSIZE(Index); n++) Index[n] = -/;"	f	struct:ImGuiKeyRoutingTable	typeref:typename:void
Clear	includes/imgui_internal.h	/^    void Clear()            { size_t io_sz = sizeof(IO); ClearIO(); memset((void*)(&IO + 1), 0, /;"	f	struct:ImGuiMultiSelectTempData	typeref:typename:void
Clear	includes/imgui_internal.h	/^    void Clear()        { Window = NULL; ID = FocusScopeId = 0; ItemFlags = 0; SelectionUserData/;"	f	struct:ImGuiNavItemData	typeref:typename:void
ClearActiveID	imgui.cpp	/^void ImGui::ClearActiveID()$/;"	f	class:ImGui	typeref:typename:void
ClearAllBits	includes/imgui_internal.h	/^    void            ClearAllBits()              { memset(Storage, 0, sizeof(Storage)); }$/;"	f	struct:ImBitArray	typeref:typename:void
ClearAllFn	includes/imgui_internal.h	/^    void        (*ClearAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);                /;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler)
ClearBit	includes/imgui_internal.h	/^    void            ClearBit(int n)             { IM_ASSERT(n < (Storage.Size << 5)); ImBitArray/;"	f	struct:ImBitVector	typeref:typename:void
ClearBit	includes/imgui_internal.h	/^    void            ClearBit(int n)             { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:void
ClearDragDrop	imgui.cpp	/^void ImGui::ClearDragDrop()$/;"	f	class:ImGui	typeref:typename:void
ClearEventsQueue	imgui.cpp	/^void ImGuiIO::ClearEventsQueue()$/;"	f	class:ImGuiIO	typeref:typename:void
ClearFlags	includes/imgui_internal.h	/^    inline void ClearFlags()    { Flags = ImGuiNextWindowDataFlags_None; }$/;"	f	struct:ImGuiNextWindowData	typeref:typename:void
ClearFlags	includes/imgui_internal.h	/^    inline void ClearFlags()    { HasFlags = ImGuiNextItemDataFlags_None; ItemFlags = ImGuiItemF/;"	f	struct:ImGuiNextItemData	typeref:typename:void
ClearFonts	imgui_draw.cpp	/^void    ImFontAtlas::ClearFonts()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearFreeMemory	imgui_draw.cpp	/^void ImDrawListSplitter::ClearFreeMemory()$/;"	f	class:ImDrawListSplitter	typeref:typename:void
ClearFreeMemory	includes/imgui_internal.h	/^    void        ClearFreeMemory()           { TextA.clear(); TextToRevertTo.clear(); }$/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearFreeMemory	includes/imgui_internal.h	/^    void    ClearFreeMemory()           { ID = 0; TextA.clear(); }$/;"	f	struct:ImGuiInputTextDeactivatedState	typeref:typename:void
ClearIO	includes/imgui_internal.h	/^    void ClearIO()          { IO.Requests.resize(0); IO.RangeSrcItem = IO.NavIdItem = ImGuiSelec/;"	f	struct:ImGuiMultiSelectTempData	typeref:typename:void
ClearIniSettings	imgui.cpp	/^void ImGui::ClearIniSettings()$/;"	f	class:ImGui	typeref:typename:void
ClearInputCharacters	imgui.cpp	/^void ImGuiIO::ClearInputCharacters()$/;"	f	class:ImGuiIO	typeref:typename:void
ClearInputData	imgui_draw.cpp	/^void    ImFontAtlas::ClearInputData()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearInputKeys	imgui.cpp	/^void ImGuiIO::ClearInputKeys()$/;"	f	class:ImGuiIO	typeref:typename:void
ClearInputMouse	imgui.cpp	/^void ImGuiIO::ClearInputMouse()$/;"	f	class:ImGuiIO	typeref:typename:void
ClearItems	imgui_demo.cpp	/^    void ClearItems()$/;"	f	struct:ExampleAssetsBrowser	typeref:typename:void	file:
ClearLog	imgui_demo.cpp	/^    void    ClearLog()$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
ClearOutputData	imgui_draw.cpp	/^void    ImFont::ClearOutputData()$/;"	f	class:ImFont	typeref:typename:void
ClearSelection	imgui_widgets.cpp	/^void ImGuiInputTextState::ClearSelection()                  { Stb->select_start = Stb->select_en/;"	f	class:ImGuiInputTextState	typeref:typename:void
ClearSelection	includes/imgui.h	/^    void                ClearSelection()        { SelectionStart = SelectionEnd = BufTextLen; }$/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:void
ClearTexData	imgui_draw.cpp	/^void    ImFontAtlas::ClearTexData()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearText	includes/imgui_internal.h	/^    void        ClearText()                 { TextLen = 0; TextA[0] = 0; CursorClamp(); }$/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearWindowSettings	imgui.cpp	/^void ImGui::ClearWindowSettings(const char* name)$/;"	f	class:ImGui	typeref:typename:void
ClipRect	imgui_tables.cpp	/^        ImRect          ClipRect;$/;"	m	struct:ImGui::TableMergeDrawChannels::MergeGroup	typeref:typename:ImRect	file:
ClipRect	includes/imgui.h	/^    ImVec4          ClipRect;           \/\/ 4*4  \/\/ Clipping rectangle (x1, y1, x2, y2). Subt/;"	m	struct:ImDrawCmd	typeref:typename:ImVec4
ClipRect	includes/imgui.h	/^    ImVec4          ClipRect;$/;"	m	struct:ImDrawCmdHeader	typeref:typename:ImVec4
ClipRect	includes/imgui_internal.h	/^    ImRect                  ClipRect;                           \/\/ Current clipping\/scissorin/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
ClipRect	includes/imgui_internal.h	/^    ImRect                  ClipRect;                       \/\/ Clipping rectangle for the colu/;"	m	struct:ImGuiTableColumn	typeref:typename:ImRect
ClipRect	includes/imgui_internal.h	/^    ImRect                  ClipRect;           \/\/ Clip rectangle at the time of submitting it/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
ClipRect	includes/imgui_internal.h	/^    ImRect              ClipRect;$/;"	m	struct:ImGuiOldColumnData	typeref:typename:ImRect
ClipRectFullscreen	includes/imgui_internal.h	/^    ImVec4          ClipRectFullscreen;         \/\/ Value for PushClipRectFullscreen()$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec4
ClipWith	includes/imgui_internal.h	/^    void        ClipWith(const ImRect& r)           { Min = ImMax(Min, r.Min); Max = ImMin(Max, /;"	f	struct:ImRect	typeref:typename:void
ClipWithFull	includes/imgui_internal.h	/^    void        ClipWithFull(const ImRect& r)       { Min = ImClamp(Min, r.Min, r.Max); Max = Im/;"	f	struct:ImRect	typeref:typename:void
ClipboardHandlerData	includes/imgui_internal.h	/^    ImVector<char>          ClipboardHandlerData;               \/\/ If no custom clipboard hand/;"	m	struct:ImGuiContext	typeref:typename:ImVector<char>
ClipboardUserData	includes/imgui.h	/^    void*       ClipboardUserData;$/;"	m	struct:ImGuiIO	typeref:typename:void *
ClipperTempData	includes/imgui_internal.h	/^    ImVector<ImGuiListClipperData>  ClipperTempData;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiListClipperData>
ClipperTempDataStacked	includes/imgui_internal.h	/^    int                             ClipperTempDataStacked;$/;"	m	struct:ImGuiContext	typeref:typename:int
CloneOutput	imgui_draw.cpp	/^ImDrawList* ImDrawList::CloneOutput() const$/;"	f	class:ImDrawList	typeref:typename:ImDrawList *
CloseButton	imgui_widgets.cpp	/^bool ImGui::CloseButton(ImGuiID id, const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:bool
CloseCurrentPopup	imgui.cpp	/^void ImGui::CloseCurrentPopup()$/;"	f	class:ImGui	typeref:typename:void
ClosePopupToLevel	imgui.cpp	/^void ImGui::ClosePopupToLevel(int remaining, bool restore_focus_to_window_under_popup)$/;"	f	class:ImGui	typeref:typename:void
ClosePopupsExceptModals	imgui.cpp	/^void ImGui::ClosePopupsExceptModals()$/;"	f	class:ImGui	typeref:typename:void
ClosePopupsOverWindow	imgui.cpp	/^void ImGui::ClosePopupsOverWindow(ImGuiWindow* ref_window, bool restore_focus_to_window_under_po/;"	f	class:ImGui	typeref:typename:void
CloseQueue	imgui_demo.cpp	/^    ImVector<MyDocument*>   CloseQueue;$/;"	m	struct:ExampleAppDocuments	typeref:typename:ImVector<MyDocument * >	file:
CmdBuffer	includes/imgui.h	/^    ImVector<ImDrawCmd>     CmdBuffer;          \/\/ Draw commands. Typically 1 command = 1 GPU /;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawCmd>
CmdLists	includes/imgui.h	/^    ImVector<ImDrawList*> CmdLists;         \/\/ Array of ImDrawList* to render. The ImDrawLists/;"	m	struct:ImDrawData	typeref:typename:ImVector<ImDrawList * >
CmdListsCount	includes/imgui.h	/^    int                 CmdListsCount;      \/\/ Number of ImDrawList* to render (should always /;"	m	struct:ImDrawData	typeref:typename:int
Codepoint	includes/imgui.h	/^    unsigned int    Codepoint : 30;     \/\/ 0x0000..0x10FFFF$/;"	m	struct:ImFontGlyph	typeref:typename:unsigned int:30
Col	imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ImGui::DebugRenderKeyboardPreview::KeyLayoutData	typeref:typename:int	file:
Col	includes/imgui_internal.h	/^    ImGuiCol        Col;$/;"	m	struct:ImGuiColorMod	typeref:typename:ImGuiCol
CollapseButton	imgui_widgets.cpp	/^bool ImGui::CollapseButton(ImGuiID id, const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:bool
Collapsed	includes/imgui_internal.h	/^    bool                    Collapsed;                          \/\/ Set when collapsing window /;"	m	struct:ImGuiWindow	typeref:typename:bool
Collapsed	includes/imgui_internal.h	/^    bool        Collapsed;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
CollapsedCond	includes/imgui_internal.h	/^    ImGuiCond                   CollapsedCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
CollapsedVal	includes/imgui_internal.h	/^    bool                        CollapsedVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:bool
CollapsingHeader	imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
CollapsingHeader	imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, bool* p_visible, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Color	imgui_demo.cpp	/^    ImVec4      Color;      \/\/ An arbitrary variable associated to the document$/;"	m	struct:MyDocument	typeref:typename:ImVec4	file:
Color	includes/raylib.h	/^typedef struct Color {$/;"	s
Color	includes/raylib.h	/^} Color;$/;"	t	typeref:struct:Color
ColorButton	imgui_widgets.cpp	/^bool ImGui::ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags, const/;"	f	class:ImGui	typeref:typename:bool
ColorButtonPosition	includes/imgui.h	/^    ImGuiDir    ColorButtonPosition;        \/\/ Side of the color button in the ColorEdit4 widg/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiDir
ColorConvertFloat4ToU32	imgui.cpp	/^ImU32 ImGui::ColorConvertFloat4ToU32(const ImVec4& in)$/;"	f	class:ImGui	typeref:typename:ImU32
ColorConvertHSVtoRGB	imgui.cpp	/^void ImGui::ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& o/;"	f	class:ImGui	typeref:typename:void
ColorConvertRGBtoHSV	imgui.cpp	/^void ImGui::ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& o/;"	f	class:ImGui	typeref:typename:void
ColorConvertU32ToFloat4	imgui.cpp	/^ImVec4 ImGui::ColorConvertU32ToFloat4(ImU32 in)$/;"	f	class:ImGui	typeref:typename:ImVec4
ColorEdit3	imgui_widgets.cpp	/^bool ImGui::ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorEdit4	imgui_widgets.cpp	/^bool ImGui::ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorEditCurrentID	includes/imgui_internal.h	/^    ImGuiID                 ColorEditCurrentID;                 \/\/ Set temporarily while insid/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ColorEditOptions	includes/imgui_internal.h	/^    ImGuiColorEditFlags     ColorEditOptions;                   \/\/ Store user options for colo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiColorEditFlags
ColorEditOptionsPopup	imgui_widgets.cpp	/^void ImGui::ColorEditOptionsPopup(const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ColorEditRestoreH	imgui_widgets.cpp	/^static void ColorEditRestoreH(const float* col, float* H)$/;"	f	typeref:typename:void	file:
ColorEditRestoreHS	imgui_widgets.cpp	/^static void ColorEditRestoreHS(const float* col, float* H, float* S, float* V)$/;"	f	typeref:typename:void	file:
ColorEditSavedColor	includes/imgui_internal.h	/^    ImU32                   ColorEditSavedColor;                \/\/ RGB value with alpha set to/;"	m	struct:ImGuiContext	typeref:typename:ImU32
ColorEditSavedHue	includes/imgui_internal.h	/^    float                   ColorEditSavedHue;                  \/\/ Backup of last Hue associat/;"	m	struct:ImGuiContext	typeref:typename:float
ColorEditSavedID	includes/imgui_internal.h	/^    ImGuiID                 ColorEditSavedID;                   \/\/ ID we are saving\/restoring/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ColorEditSavedSat	includes/imgui_internal.h	/^    float                   ColorEditSavedSat;                  \/\/ Backup of last Saturation a/;"	m	struct:ImGuiContext	typeref:typename:float
ColorPicker3	imgui_widgets.cpp	/^bool ImGui::ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorPicker4	imgui_widgets.cpp	/^bool ImGui::ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags, const float/;"	f	class:ImGui	typeref:typename:bool
ColorPickerOptionsPopup	imgui_widgets.cpp	/^void ImGui::ColorPickerOptionsPopup(const float* ref_col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ColorPickerRef	includes/imgui_internal.h	/^    ImVec4                  ColorPickerRef;                     \/\/ Initial\/reference color at/;"	m	struct:ImGuiContext	typeref:typename:ImVec4
ColorStack	includes/imgui_internal.h	/^    ImVector<ImGuiColorMod>         ColorStack;                 \/\/ Stack for PushStyleColor()\//;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiColorMod>
ColorTooltip	imgui_widgets.cpp	/^void ImGui::ColorTooltip(const char* text, const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
Colored	includes/imgui.h	/^    unsigned int    Colored : 1;        \/\/ Flag to indicate glyph is colored and should genera/;"	m	struct:ImFontGlyph	typeref:typename:unsigned int:1
Colors	includes/imgui.h	/^    ImVec4      Colors[ImGuiCol_COUNT];$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec4[]
Column	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         Column;     \/\/ Column number$/;"	m	struct:ImGuiTableCellData	typeref:typename:ImGuiTableColumnIdx
Column 0  Sort	imgui.ini	/^Column 0  Sort=0^$/;"	k	section:Table
ColumnIndex	includes/imgui.h	/^    ImS16                       ColumnIndex;        \/\/ Index of the column$/;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImS16
ColumnUserID	includes/imgui.h	/^    ImGuiID                     ColumnUserID;       \/\/ User id of the column (if specified by /;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImGuiID
Columns	imgui_tables.cpp	/^void ImGui::Columns(int columns_count, const char* id, bool borders)$/;"	f	class:ImGui	typeref:typename:void
Columns	includes/imgui_internal.h	/^    ImSpan<ImGuiTableColumn>    Columns;                    \/\/ Point within RawData[]$/;"	m	struct:ImGuiTable	typeref:typename:ImSpan<ImGuiTableColumn>
Columns	includes/imgui_internal.h	/^    ImVector<ImGuiOldColumnData> Columns;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImVector<ImGuiOldColumnData>
ColumnsAutoFitWidth	includes/imgui_internal.h	/^    float                       ColumnsAutoFitWidth;        \/\/ Sum of ideal column width in or/;"	m	struct:ImGuiTable	typeref:typename:float
ColumnsCount	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsCount;$/;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiTableColumnIdx
ColumnsCount	includes/imgui_internal.h	/^    int                         ColumnsCount;               \/\/ Number of columns declared in B/;"	m	struct:ImGuiTable	typeref:typename:int
ColumnsCountMax	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsCountMax;        \/\/ Maximum number of columns this sett/;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiTableColumnIdx
ColumnsEnabledCount	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsEnabledCount;        \/\/ Number of enabled columns (<= C/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ColumnsEnabledFixedCount	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsEnabledFixedCount;   \/\/ Number of enabled columns using/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ColumnsGivenWidth	includes/imgui_internal.h	/^    float                       ColumnsGivenWidth;          \/\/ Sum of current column width$/;"	m	struct:ImGuiTable	typeref:typename:float
ColumnsMinSpacing	includes/imgui.h	/^    float       ColumnsMinSpacing;          \/\/ Minimum horizontal spacing between two columns./;"	m	struct:ImGuiStyle	typeref:typename:float
ColumnsNames	includes/imgui_internal.h	/^    ImGuiTextBuffer             ColumnsNames;               \/\/ Contiguous buffer holding colum/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTextBuffer
ColumnsOffset	includes/imgui_internal.h	/^    ImVec1                  ColumnsOffset;          \/\/ Offset to the current column (if Column/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
ColumnsStorage	includes/imgui_internal.h	/^    ImVector<ImGuiOldColumns> ColumnsStorage;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVector<ImGuiOldColumns>
ColumnsStretchSumWeights	includes/imgui_internal.h	/^    float                       ColumnsStretchSumWeights;   \/\/ Sum of weight of all enabled st/;"	m	struct:ImGuiTable	typeref:typename:float
Combo	imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, bool (*old_getter)(void*, int, const cha/;"	f	class:ImGui	typeref:typename:bool
Combo	imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* (*getter)(void* user_data, i/;"	f	class:ImGui	typeref:typename:bool
Combo	imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* const items[], int items_cou/;"	f	class:ImGui	typeref:typename:bool
Combo	imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* items_separated_by_zeros, in/;"	f	class:ImGui	typeref:typename:bool
ComboPreviewData	includes/imgui_internal.h	/^    ImGuiComboPreviewData   ComboPreviewData;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiComboPreviewData
Commands	imgui_demo.cpp	/^    ImVector<const char*> Commands;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<const char * >	file:
CompareItemsByValue	imgui_demo.cpp	/^    static int IMGUI_CDECL CompareItemsByValue(const void* lhs, const void* rhs)$/;"	f	struct:ExampleDualListBox	typeref:typename:int IMGUI_CDECL	file:
CompareWithSortSpecs	imgui_demo.cpp	/^    static int IMGUI_CDECL CompareWithSortSpecs(const void* lhs, const void* rhs)$/;"	f	struct:ExampleAsset	typeref:typename:int IMGUI_CDECL	file:
CompareWithSortSpecs	imgui_demo.cpp	/^    static int IMGUI_CDECL CompareWithSortSpecs(const void* lhs, const void* rhs)$/;"	f	struct:__anon5ba881550511::MyItem	typeref:typename:int IMGUI_CDECL	file:
ConfigData	includes/imgui.h	/^    ImVector<ImFontConfig>      ConfigData;         \/\/ Configuration data$/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFontConfig>
ConfigData	includes/imgui.h	/^    const ImFontConfig*         ConfigData;         \/\/ 4-8   \/\/ in  \/\/            \/\/ Poi/;"	m	struct:ImFont	typeref:typename:const ImFontConfig *
ConfigDataCount	includes/imgui.h	/^    short                       ConfigDataCount;    \/\/ 2     \/\/ in  \/\/ ~ 1        \/\/ Num/;"	m	struct:ImFont	typeref:typename:short
ConfigDebugBeginReturnValueLoop	includes/imgui.h	/^    bool        ConfigDebugBeginReturnValueLoop;\/\/ = false          \/\/ Some calls to Begin()/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDebugBeginReturnValueOnce	includes/imgui.h	/^    bool        ConfigDebugBeginReturnValueOnce;\/\/ = false          \/\/ First-time calls to B/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDebugHighlightIdConflicts	includes/imgui.h	/^    bool        ConfigDebugHighlightIdConflicts;\/\/ = true           \/\/ Highlight and show an/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDebugIgnoreFocusLoss	includes/imgui.h	/^    bool        ConfigDebugIgnoreFocusLoss;     \/\/ = false          \/\/ Ignore io.AddFocusEve/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDebugIniSettings	includes/imgui.h	/^    bool        ConfigDebugIniSettings;         \/\/ = false          \/\/ Save .ini data with e/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDebugIsDebuggerPresent	includes/imgui.h	/^    bool        ConfigDebugIsDebuggerPresent;   \/\/ = false          \/\/ Enable various tools /;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDragClickToInputText	includes/imgui.h	/^    bool        ConfigDragClickToInputText;     \/\/ = false          \/\/ [BETA] Enable turning/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigErrorRecovery	includes/imgui.h	/^    bool        ConfigErrorRecovery;                \/\/ = true       \/\/ Enable error recovery/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigErrorRecoveryEnableAssert	includes/imgui.h	/^    bool        ConfigErrorRecoveryEnableAssert;    \/\/ = true       \/\/ Enable asserts on rec/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigErrorRecoveryEnableDebugLog	includes/imgui.h	/^    bool        ConfigErrorRecoveryEnableDebugLog;  \/\/ = true       \/\/ Enable debug log outp/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigErrorRecoveryEnableTooltip	includes/imgui.h	/^    bool        ConfigErrorRecoveryEnableTooltip;   \/\/ = true       \/\/ Enable tooltip on rec/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigFlags	includes/imgui.h	/^    ImGuiConfigFlags   ConfigFlags;             \/\/ = 0              \/\/ See ImGuiConfigFlags_/;"	m	struct:ImGuiIO	typeref:typename:ImGuiConfigFlags
ConfigFlags	includes/raylib.h	/^} ConfigFlags;$/;"	t	typeref:enum:__anonce11f6a40203
ConfigInputTextCursorBlink	includes/imgui.h	/^    bool        ConfigInputTextCursorBlink;     \/\/ = true           \/\/ Enable blinking curso/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigInputTextEnterKeepActive	includes/imgui.h	/^    bool        ConfigInputTextEnterKeepActive; \/\/ = false          \/\/ [BETA] Pressing Enter/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigInputTrickleEventQueue	includes/imgui.h	/^    bool        ConfigInputTrickleEventQueue;   \/\/ = true           \/\/ Enable input queue tr/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigMacOSXBehaviors	includes/imgui.h	/^    bool        ConfigMacOSXBehaviors;          \/\/ = defined(__APPLE__) \/\/ Swap Cmd<>Ctrl ke/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigMemoryCompactTimer	includes/imgui.h	/^    float       ConfigMemoryCompactTimer;       \/\/ = 60.0f          \/\/ Timer (in seconds) to/;"	m	struct:ImGuiIO	typeref:typename:float
ConfigNavCaptureKeyboard	includes/imgui.h	/^    bool        ConfigNavCaptureKeyboard;       \/\/ = true           \/\/ Sets io.WantCaptureKe/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigNavCursorVisibleAlways	includes/imgui.h	/^    bool        ConfigNavCursorVisibleAlways;   \/\/ = false          \/\/ Navigation cursor is /;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigNavCursorVisibleAuto	includes/imgui.h	/^    bool        ConfigNavCursorVisibleAuto;     \/\/ = true           \/\/ Using directional nav/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigNavEscapeClearFocusItem	includes/imgui.h	/^    bool        ConfigNavEscapeClearFocusItem;  \/\/ = true           \/\/ Pressing Escape can c/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigNavEscapeClearFocusWindow	includes/imgui.h	/^    bool        ConfigNavEscapeClearFocusWindow;\/\/ = false          \/\/ Pressing Escape can c/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigNavMoveSetMousePos	includes/imgui.h	/^    bool        ConfigNavMoveSetMousePos;       \/\/ = false          \/\/ Directional\/tabbing /;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigNavSwapGamepadButtons	includes/imgui.h	/^    bool        ConfigNavSwapGamepadButtons;    \/\/ = false          \/\/ Swap Activate<>Cancel/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigNavWindowingKeyNext	includes/imgui_internal.h	/^    ImGuiKeyChord           ConfigNavWindowingKeyNext;          \/\/ = ImGuiMod_Ctrl | ImGuiKey_/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
ConfigNavWindowingKeyPrev	includes/imgui_internal.h	/^    ImGuiKeyChord           ConfigNavWindowingKeyPrev;          \/\/ = ImGuiMod_Ctrl | ImGuiMod_/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
ConfigScrollbarScrollByPage	includes/imgui.h	/^    bool        ConfigScrollbarScrollByPage;    \/\/ = true           \/\/ Enable scrolling page/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigWindowsCopyContentsWithCtrlC	includes/imgui.h	/^    bool        ConfigWindowsCopyContentsWithCtrlC; \/\/ = false      \/\/ [EXPERIMENTAL] CTRL+C/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigWindowsMoveFromTitleBarOnly	includes/imgui.h	/^    bool        ConfigWindowsMoveFromTitleBarOnly;  \/\/ = false      \/\/ Enable allowing to mo/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigWindowsResizeFromEdges	includes/imgui.h	/^    bool        ConfigWindowsResizeFromEdges;   \/\/ = true           \/\/ Enable resizing of wi/;"	m	struct:ImGuiIO	typeref:typename:bool
ContainerAtlas	includes/imgui.h	/^    ImFontAtlas*                ContainerAtlas;     \/\/ 4-8   \/\/ out \/\/            \/\/ Wha/;"	m	struct:ImFont	typeref:typename:ImFontAtlas *
Contains	imgui_widgets.cpp	/^bool ImGuiSelectionBasicStorage::Contains(ImGuiID id) const$/;"	f	class:ImGuiSelectionBasicStorage	typeref:typename:bool
Contains	includes/imgui_internal.h	/^    bool        Contains(const ImRect& r) const     { return r.Min.x >= Min.x && r.Min.y >= Min./;"	f	struct:ImRect	typeref:typename:bool
Contains	includes/imgui_internal.h	/^    bool        Contains(const ImVec2& p) const     { return p.x     >= Min.x && p.y     >= Min./;"	f	struct:ImRect	typeref:typename:bool
Contains	includes/imgui_internal.h	/^    bool        Contains(const T* p) const          { return (p >= Buf.Data && p < Buf.Data + Bu/;"	f	struct:ImPool	typeref:typename:bool
ContainsWithPad	includes/imgui_internal.h	/^    bool        ContainsWithPad(const ImVec2& p, const ImVec2& pad) const { return p.x >= Min.x /;"	f	struct:ImRect	typeref:typename:bool
ContentMaxXFrozen	includes/imgui_internal.h	/^    float                   ContentMaxXFrozen;              \/\/ Contents maximum position for f/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentMaxXHeadersIdeal	includes/imgui_internal.h	/^    float                   ContentMaxXHeadersIdeal;$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentMaxXHeadersUsed	includes/imgui_internal.h	/^    float                   ContentMaxXHeadersUsed;         \/\/ Contents maximum position for h/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentMaxXUnfrozen	includes/imgui_internal.h	/^    float                   ContentMaxXUnfrozen;$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentRegionRect	includes/imgui_internal.h	/^    ImRect                  ContentRegionRect;                  \/\/ FIXME: This is currently co/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
ContentSize	includes/imgui_internal.h	/^    ImVec2                  ContentSize;                        \/\/ Size of contents\/scrollabl/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeExplicit	includes/imgui_internal.h	/^    ImVec2                  ContentSizeExplicit;                \/\/ Size of contents\/scrollabl/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeIdeal	includes/imgui_internal.h	/^    ImVec2                  ContentSizeIdeal;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeVal	includes/imgui_internal.h	/^    ImVec2                      ContentSizeVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
ContentWidth	includes/imgui_internal.h	/^    float               ContentWidth;           \/\/ Width of label, stored during BeginTabItem(/;"	m	struct:ImGuiTabItem	typeref:typename:float
ContentsType	imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	g	function:ShowDemoWindowTables	file:
ContentsType	imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	g	function:ShowDemoWindowTables	file:
ContentsType	imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_FillButton };$/;"	g	function:ShowDemoWindowTables	file:
ContextName	includes/imgui_internal.h	/^    char                    ContextName[16];                    \/\/ Storage for a context name /;"	m	struct:ImGuiContext	typeref:typename:char[16]
ContextPopupColumn	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         ContextPopupColumn;         \/\/ Column right-clicked on, of -1 /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
Convert	includes/rlImGuiColors.h	/^    inline ::Color Convert(ImVec4 color)$/;"	f	namespace:rlImGuiColors	typeref:typename:::Color
Convert	includes/rlImGuiColors.h	/^    inline ImVec4 Convert(::Color color)$/;"	f	namespace:rlImGuiColors	typeref:typename:ImVec4
ConvertSingleModFlagToKey	includes/imgui_internal.h	/^    inline ImGuiKey         ConvertSingleModFlagToKey(ImGuiKey key)$/;"	f	namespace:ImGui	typeref:typename:ImGuiKey
CopyToClipboardLastTime	includes/imgui_internal.h	/^    float                   CopyToClipboardLastTime;$/;"	m	struct:ImGuiIDStackTool	typeref:typename:float
CopyToClipboardOnCtrlC	includes/imgui_internal.h	/^    bool                    CopyToClipboardOnCtrlC;$/;"	m	struct:ImGuiIDStackTool	typeref:typename:bool
CornerPosN	imgui.cpp	/^    ImVec2  CornerPosN;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:ImVec2	file:
Count	includes/imgui_internal.h	/^    ImU32           Count;      \/\/ 1+$/;"	m	struct:ImGuiDataVarInfo	typeref:typename:ImU32
Count	includes/imgui_internal.h	/^    int                 Count;$/;"	m	struct:ImGuiOldColumns	typeref:typename:int
CountGrep	includes/imgui.h	/^    int                     CountGrep;$/;"	m	struct:ImGuiTextFilter	typeref:typename:int
Create	includes/imgui_internal.h	/^    void            Create(int sz)              { Storage.resize((sz + 31) >> 5); memset(Storage/;"	f	struct:ImBitVector	typeref:typename:void
CreateContext	imgui.cpp	/^ImGuiContext* ImGui::CreateContext(ImFontAtlas* shared_font_atlas)$/;"	f	class:ImGui	typeref:typename:ImGuiContext *
CreateNewWindow	imgui.cpp	/^static ImGuiWindow* CreateNewWindow(const char* name, ImGuiWindowFlags flags)$/;"	f	typeref:typename:ImGuiWindow *	file:
CreateNewWindowSettings	imgui.cpp	/^ImGuiWindowSettings* ImGui::CreateNewWindowSettings(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
Ctx	includes/imgui.h	/^    ImGuiContext*       Ctx;            \/\/ Parent UI context$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiContext *
Ctx	includes/imgui.h	/^    ImGuiContext*   Ctx;                \/\/ Parent UI context$/;"	m	struct:ImGuiListClipper	typeref:typename:ImGuiContext *
Ctx	includes/imgui.h	/^    ImGuiContext* Ctx;                              \/\/ Parent UI context (needs to be set expl/;"	m	struct:ImGuiIO	typeref:typename:ImGuiContext *
Ctx	includes/imgui_internal.h	/^    ImGuiContext*           Ctx;                                \/\/ Parent UI context (needs to/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiContext *
Ctx	includes/imgui_internal.h	/^    ImGuiContext*           Ctx;                    \/\/ parent UI context (needs to be set expl/;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiContext *
CubemapLayout	includes/raylib.h	/^} CubemapLayout;$/;"	t	typeref:enum:__anonce11f6a41003
CurrFrameVisible	includes/imgui_internal.h	/^    int                 CurrFrameVisible;$/;"	m	struct:ImGuiTabBar	typeref:typename:int
CurrIdx	includes/imgui_internal.h	/^    int     CurrIdx;$/;"	m	struct:ImSpanAllocator	typeref:typename:int
CurrLineSize	includes/imgui_internal.h	/^    ImVec2                  CurrLineSize;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CurrLineTextBaseOffset	includes/imgui_internal.h	/^    float                   CurrLineTextBaseOffset; \/\/ Baseline offset (0.0f by default on a n/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
CurrOff	includes/imgui_internal.h	/^    int     CurrOff;$/;"	m	struct:ImSpanAllocator	typeref:typename:int
CurrTabsContentsHeight	includes/imgui_internal.h	/^    float               CurrTabsContentsHeight;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
Current	includes/imgui_internal.h	/^    int                 Current;$/;"	m	struct:ImGuiOldColumns	typeref:typename:int
CurrentColumn	includes/imgui_internal.h	/^    int                         CurrentColumn;$/;"	m	struct:ImGuiTable	typeref:typename:int
CurrentColumns	includes/imgui_internal.h	/^    ImGuiOldColumns*        CurrentColumns;         \/\/ Current columns set$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiOldColumns *
CurrentDpiScale	includes/imgui_internal.h	/^    float                   CurrentDpiScale;                    \/\/ Current window\/viewport Dp/;"	m	struct:ImGuiContext	typeref:typename:float
CurrentFocusScopeId	includes/imgui_internal.h	/^    ImGuiID                 CurrentFocusScopeId;                \/\/ Value for currently appendi/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
CurrentItemFlags	includes/imgui_internal.h	/^    ImGuiItemFlags          CurrentItemFlags;                   \/\/ Value for currently appendi/;"	m	struct:ImGuiContext	typeref:typename:ImGuiItemFlags
CurrentMouseCursor	rlImGui.cpp	/^static ImGuiMouseCursor CurrentMouseCursor = ImGuiMouseCursor_COUNT;$/;"	v	typeref:typename:ImGuiMouseCursor	file:
CurrentMultiSelect	includes/imgui_internal.h	/^    ImGuiMultiSelectTempData*       CurrentMultiSelect;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMultiSelectTempData *
CurrentRow	includes/imgui_internal.h	/^    int                         CurrentRow;$/;"	m	struct:ImGuiTable	typeref:typename:int
CurrentSize	includes/imgui.h	/^    ImVec2  CurrentSize;    \/\/ Read-only.   Current window size.$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
CurrentTabBar	includes/imgui_internal.h	/^    ImGuiTabBar*                    CurrentTabBar;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTabBar *
CurrentTabBarStack	includes/imgui_internal.h	/^    ImVector<ImGuiPtrOrIndex>       CurrentTabBarStack;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPtrOrIndex>
CurrentTable	includes/imgui_internal.h	/^    ImGuiTable*                     CurrentTable;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTable *
CurrentTableIdx	includes/imgui_internal.h	/^    int                     CurrentTableIdx;        \/\/ Current table index (into g.Tables)$/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
CurrentWindow	includes/imgui_internal.h	/^    ImGuiWindow*            CurrentWindow;                      \/\/ Window being drawn into$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
CurrentWindowStack	includes/imgui_internal.h	/^    ImVector<ImGuiWindowStackData> CurrentWindowStack;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindowStackData>
CursorAnim	includes/imgui_internal.h	/^    float                   CursorAnim;             \/\/ timer for cursor blink, reset on every /;"	m	struct:ImGuiInputTextState	typeref:typename:float
CursorAnimReset	imgui_widgets.cpp	/^void ImGuiInputTextState::CursorAnimReset()                 { CursorAnim = -0.30f; } \/\/ After /;"	f	class:ImGuiInputTextState	typeref:typename:void
CursorClamp	imgui_widgets.cpp	/^void ImGuiInputTextState::CursorClamp()                     { Stb->cursor = ImMin(Stb->cursor, T/;"	f	class:ImGuiInputTextState	typeref:typename:void
CursorFollow	includes/imgui_internal.h	/^    bool                    CursorFollow;           \/\/ set when we want scrolling to follow th/;"	m	struct:ImGuiInputTextState	typeref:typename:bool
CursorMaxPos	includes/imgui_internal.h	/^    ImVec2                  CursorMaxPos;           \/\/ Used to implicitly calculate ContentSiz/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorPos	includes/imgui.h	/^    int                 CursorPos;      \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
CursorPos	includes/imgui_internal.h	/^    ImVec2                  CursorPos;              \/\/ Current emitting position, in absolute /;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorPosPrevLine	includes/imgui_internal.h	/^    ImVec2                  CursorPosPrevLine;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorStartPos	includes/imgui_internal.h	/^    ImVec2                  CursorStartPos;         \/\/ Initial position after Begin(), general/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorStartPosLossyness	includes/imgui_internal.h	/^    ImVec2                  CursorStartPosLossyness;\/\/ Record the loss of precision of CursorS/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CurveTessellationTol	includes/imgui.h	/^    float       CurveTessellationTol;       \/\/ Tessellation tolerance when using PathBezierCur/;"	m	struct:ImGuiStyle	typeref:typename:float
CurveTessellationTol	includes/imgui_internal.h	/^    float           CurveTessellationTol;       \/\/ Tessellation tolerance when using PathBezie/;"	m	struct:ImDrawListSharedData	typeref:typename:float
CustomConstraints	imgui_demo.cpp	/^    struct CustomConstraints$/;"	s	function:ShowExampleAppConstrainedResize	file:
CustomRects	includes/imgui.h	/^    ImVector<ImFontAtlasCustomRect> CustomRects;    \/\/ Rectangles for packing custom texture d/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFontAtlasCustomRect>
DARKBLUE	includes/raylib.h	/^#define DARKBLUE /;"	d
DARKBROWN	includes/raylib.h	/^#define DARKBROWN /;"	d
DARKGRAY	includes/raylib.h	/^#define DARKGRAY /;"	d
DARKGREEN	includes/raylib.h	/^#define DARKGREEN /;"	d
DARKPURPLE	includes/raylib.h	/^#define DARKPURPLE /;"	d
DC	includes/imgui_internal.h	/^    ImGuiWindowTempData     DC;                                 \/\/ Temporary per-window data, /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindowTempData
DEBUG	Makefile	/^DEBUG = valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --suppressions=.\/v/;"	m
DEBUG_LOCATE_ITEM_COLOR	imgui.cpp	/^static const ImU32 DEBUG_LOCATE_ITEM_COLOR = IM_COL32(0, 255, 0, 255);  \/\/ Green$/;"	v	typeref:typename:const ImU32	file:
DEG2RAD	includes/raylib.h	/^    #define DEG2RAD /;"	d
DEG2RAD	includes/raymath.h	/^    #define DEG2RAD /;"	d
DEG2RAD	includes/rlgl.h	/^    #define DEG2RAD /;"	d
DRAGDROP_HOLD_TO_OPEN_TIMER	imgui_widgets.cpp	/^static const float          DRAGDROP_HOLD_TO_OPEN_TIMER = 0.70f;    \/\/ Time for drag-hold to a/;"	v	typeref:typename:const float	file:
DRAG_MOUSE_THRESHOLD_FACTOR	imgui_widgets.cpp	/^static const float          DRAG_MOUSE_THRESHOLD_FACTOR = 0.50f;    \/\/ Multiplier for the defa/;"	v	typeref:typename:const float	file:
Data	imgui_draw.cpp	/^    ImTriangulatorNode**    Data = NULL;$/;"	m	struct:ImTriangulatorNodeSpan	typeref:typename:ImTriangulatorNode **	file:
Data	includes/imgui.h	/^    ImVector<ImGuiStoragePair>      Data;$/;"	m	struct:ImGuiStorage	typeref:typename:ImVector<ImGuiStoragePair>
Data	includes/imgui.h	/^    T*                  Data;$/;"	m	struct:ImVector	typeref:typename:T *
Data	includes/imgui.h	/^    void*           Data;               \/\/ Data (copied and owned by dear imgui)$/;"	m	struct:ImGuiPayload	typeref:typename:void *
Data	includes/imgui_internal.h	/^    ImU8        Data[8];        \/\/ Opaque storage to fit any data up to ImGuiDataType_COUNT$/;"	m	struct:ImGuiDataTypeStorage	typeref:typename:ImU8[8]
Data	includes/imgui_internal.h	/^    T*                  Data;$/;"	m	struct:ImSpan	typeref:typename:T *
DataCount	imgui_demo.cpp	/^    int             DataCount;  \/\/ Member count (1 when scalar)$/;"	m	struct:ExampleMemberInfo	typeref:typename:int	file:
DataEnd	includes/imgui_internal.h	/^    T*                  DataEnd;$/;"	m	struct:ImSpan	typeref:typename:T *
DataFrameCount	includes/imgui.h	/^    int             DataFrameCount;     \/\/ Data timestamp$/;"	m	struct:ImGuiPayload	typeref:typename:int
DataMyBool	imgui_demo.cpp	/^    bool                        DataMyBool = true;$/;"	m	struct:ExampleTreeNode	typeref:typename:bool	file:
DataMyInt	imgui_demo.cpp	/^    int                         DataMyInt = 128;$/;"	m	struct:ExampleTreeNode	typeref:typename:int	file:
DataMyVec2	imgui_demo.cpp	/^    ImVec2                      DataMyVec2 = ImVec2(0.0f, 3.141592f);$/;"	m	struct:ExampleTreeNode	typeref:typename:ImVec2	file:
DataSize	includes/imgui.h	/^    int             DataSize;           \/\/ Data size$/;"	m	struct:ImGuiPayload	typeref:typename:int
DataType	imgui_demo.cpp	/^    ImGuiDataType   DataType;   \/\/ Member type$/;"	m	struct:ExampleMemberInfo	typeref:typename:ImGuiDataType	file:
DataType	includes/imgui.h	/^    char            DataType[32 + 1];   \/\/ Data type tag (short user-supplied string, 32 chara/;"	m	struct:ImGuiPayload	typeref:typename:char[]
DataType	includes/imgui_internal.h	/^    ImGuiDataType           DataType : 8;$/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:ImGuiDataType:8
DataTypeApplyFromText	imgui_widgets.cpp	/^bool ImGui::DataTypeApplyFromText(const char* buf, ImGuiDataType data_type, void* p_data, const /;"	f	class:ImGui	typeref:typename:bool
DataTypeApplyOp	imgui_widgets.cpp	/^void ImGui::DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, const void* arg1, con/;"	f	class:ImGui	typeref:typename:void
DataTypeClamp	imgui_widgets.cpp	/^bool ImGui::DataTypeClamp(ImGuiDataType data_type, void* p_data, const void* p_min, const void* /;"	f	class:ImGui	typeref:typename:bool
DataTypeClampT	imgui_widgets.cpp	/^static bool DataTypeClampT(T* v, const T* v_min, const T* v_max)$/;"	f	typeref:typename:bool	file:
DataTypeCompare	imgui_widgets.cpp	/^int ImGui::DataTypeCompare(ImGuiDataType data_type, const void* arg_1, const void* arg_2)$/;"	f	class:ImGui	typeref:typename:int
DataTypeCompareT	imgui_widgets.cpp	/^static int DataTypeCompareT(const T* lhs, const T* rhs)$/;"	f	typeref:typename:int	file:
DataTypeFormatString	imgui_widgets.cpp	/^int ImGui::DataTypeFormatString(char* buf, int buf_size, ImGuiDataType data_type, const void* p_/;"	f	class:ImGui	typeref:typename:int
DataTypeGetInfo	imgui_widgets.cpp	/^const ImGuiDataTypeInfo* ImGui::DataTypeGetInfo(ImGuiDataType data_type)$/;"	f	class:ImGui	typeref:typename:const ImGuiDataTypeInfo *
DataTypeIsZero	imgui_widgets.cpp	/^bool ImGui::DataTypeIsZero(ImGuiDataType data_type, const void* p_data)$/;"	f	class:ImGui	typeref:typename:bool
DataTypeZeroValue	includes/imgui_internal.h	/^    ImGuiDataTypeStorage    DataTypeZeroValue;                  \/\/ 0 for all data types$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDataTypeStorage
DeIndexAllBuffers	imgui_draw.cpp	/^void ImDrawData::DeIndexAllBuffers()$/;"	f	class:ImDrawData	typeref:typename:void
DeactivatedItemData	includes/imgui_internal.h	/^    ImGuiDeactivatedItemData DeactivatedItemData;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDeactivatedItemData
DebugAllocHook	imgui.cpp	/^void ImGui::DebugAllocHook(ImGuiDebugAllocInfo* info, int frame_count, void* ptr, size_t size)$/;"	f	class:ImGui	typeref:typename:void
DebugAllocInfo	includes/imgui_internal.h	/^    ImGuiDebugAllocInfo     DebugAllocInfo;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDebugAllocInfo
DebugBeginReturnValueCullDepth	includes/imgui_internal.h	/^    ImS8                    DebugBeginReturnValueCullDepth;     \/\/ Cycle between 0..9 then wra/;"	m	struct:ImGuiContext	typeref:typename:ImS8
DebugBreakButton	imgui.cpp	/^bool ImGui::DebugBreakButton(const char* label, const char* description_of_location)$/;"	f	class:ImGui	typeref:typename:bool
DebugBreakButtonTooltip	imgui.cpp	/^void ImGui::DebugBreakButtonTooltip(bool keyboard_only, const char* description_of_location)$/;"	f	class:ImGui	typeref:typename:void
DebugBreakClearData	imgui.cpp	/^void ImGui::DebugBreakClearData()$/;"	f	class:ImGui	typeref:typename:void
DebugBreakInLocateId	includes/imgui_internal.h	/^    bool                    DebugBreakInLocateId;               \/\/ Debug break in ItemAdd() ca/;"	m	struct:ImGuiContext	typeref:typename:bool
DebugBreakInShortcutRouting	includes/imgui_internal.h	/^    ImGuiKeyChord           DebugBreakInShortcutRouting;        \/\/ Set to break in SetShortcut/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
DebugBreakInTable	includes/imgui_internal.h	/^    ImGuiID                         DebugBreakInTable;          \/\/ Set to break in BeginTable(/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugBreakInWindow	includes/imgui_internal.h	/^    ImGuiID                 DebugBreakInWindow;                 \/\/ Set to break in Begin() cal/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugBreakKeyChord	includes/imgui_internal.h	/^    ImGuiKeyChord           DebugBreakKeyChord;                 \/\/ = ImGuiKey_Pause$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
DebugCheckVersionAndDataLayout	imgui.cpp	/^bool ImGui::DebugCheckVersionAndDataLayout(const char* version, size_t sz_io, size_t sz_style, s/;"	f	class:ImGui	typeref:typename:bool
DebugDrawCursorPos	imgui.cpp	/^void ImGui::DebugDrawCursorPos(ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
DebugDrawIdConflicts	includes/imgui_internal.h	/^    ImGuiID                 DebugDrawIdConflicts;               \/\/ Set when we detect multiple/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugDrawIdConflictsCount	includes/imgui_internal.h	/^    int                     DebugDrawIdConflictsCount;          \/\/ Locked count (preserved whe/;"	m	struct:ImGuiContext	typeref:typename:int
DebugDrawItemRect	imgui.cpp	/^void ImGui::DebugDrawItemRect(ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
DebugDrawLineExtents	imgui.cpp	/^void ImGui::DebugDrawLineExtents(ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
DebugFlashStyleColor	imgui.cpp	/^void ImGui::DebugFlashStyleColor(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:void
DebugFlashStyleColorBackup	includes/imgui_internal.h	/^    ImVec4                  DebugFlashStyleColorBackup;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec4
DebugFlashStyleColorIdx	includes/imgui_internal.h	/^    ImGuiCol                        DebugFlashStyleColorIdx;    \/\/ (Keep close to ColorStack t/;"	m	struct:ImGuiContext	typeref:typename:ImGuiCol
DebugFlashStyleColorStop	imgui.cpp	/^static void DebugFlashStyleColorStop()$/;"	f	typeref:typename:void	file:
DebugFlashStyleColorTime	includes/imgui_internal.h	/^    float                   DebugFlashStyleColorTime;$/;"	m	struct:ImGuiContext	typeref:typename:float
DebugHookIdInfo	imgui.cpp	/^void ImGui::DebugHookIdInfo(ImGuiID id, ImGuiDataType data_type, const void* data_id, const void/;"	f	class:ImGui	typeref:typename:void
DebugHookIdInfo	imgui.cpp	/^void ImGui::DebugHookIdInfo(ImGuiID, ImGuiDataType, const void*, const void*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugHookIdInfo	includes/imgui_internal.h	/^    ImGuiID                 DebugHookIdInfo;                    \/\/ Will call core hooks: Debug/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugIDStackTool	includes/imgui_internal.h	/^    ImGuiIDStackTool        DebugIDStackTool;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiIDStackTool
DebugItemPickerActive	includes/imgui_internal.h	/^    bool                    DebugItemPickerActive;              \/\/ Item picker is active (star/;"	m	struct:ImGuiContext	typeref:typename:bool
DebugItemPickerBreakId	includes/imgui_internal.h	/^    ImGuiID                 DebugItemPickerBreakId;             \/\/ Will call IM_DEBUG_BREAK() /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugItemPickerMouseButton	includes/imgui_internal.h	/^    ImU8                    DebugItemPickerMouseButton;$/;"	m	struct:ImGuiContext	typeref:typename:ImU8
DebugLocateFrames	includes/imgui_internal.h	/^    ImU8                    DebugLocateFrames;                  \/\/ For DebugLocateItemOnHover(/;"	m	struct:ImGuiContext	typeref:typename:ImU8
DebugLocateId	includes/imgui_internal.h	/^    ImGuiID                 DebugLocateId;                      \/\/ Storage for DebugLocateItem/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugLocateItem	imgui.cpp	/^void ImGui::DebugLocateItem(ImGuiID target_id)$/;"	f	class:ImGui	typeref:typename:void
DebugLocateItemOnHover	imgui.cpp	/^void ImGui::DebugLocateItemOnHover(ImGuiID target_id)$/;"	f	class:ImGui	typeref:typename:void
DebugLocateItemResolveWithLastItem	imgui.cpp	/^void ImGui::DebugLocateItemResolveWithLastItem()$/;"	f	class:ImGui	typeref:typename:void
DebugLog	imgui.cpp	/^void ImGui::DebugLog(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
DebugLogAutoDisableFlags	includes/imgui_internal.h	/^    ImGuiDebugLogFlags      DebugLogAutoDisableFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDebugLogFlags
DebugLogAutoDisableFrames	includes/imgui_internal.h	/^    ImU8                    DebugLogAutoDisableFrames;$/;"	m	struct:ImGuiContext	typeref:typename:ImU8
DebugLogBuf	includes/imgui_internal.h	/^    ImGuiTextBuffer         DebugLogBuf;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
DebugLogFlags	includes/imgui_internal.h	/^    ImGuiDebugLogFlags      DebugLogFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDebugLogFlags
DebugLogIndex	includes/imgui_internal.h	/^    ImGuiTextIndex          DebugLogIndex;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextIndex
DebugLogMultiSelectRequests	imgui_widgets.cpp	/^static void DebugLogMultiSelectRequests(const char* function, const ImGuiMultiSelectIO* io)$/;"	f	typeref:typename:void	file:
DebugLogSkippedErrors	includes/imgui_internal.h	/^    int                     DebugLogSkippedErrors;$/;"	m	struct:ImGuiContext	typeref:typename:int
DebugLogV	imgui.cpp	/^void ImGui::DebugLogV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
DebugMetricsConfig	includes/imgui_internal.h	/^    ImGuiMetricsConfig      DebugMetricsConfig;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMetricsConfig
DebugNodeColumns	imgui.cpp	/^void ImGui::DebugNodeColumns(ImGuiOldColumns* columns)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeColumns	imgui.cpp	/^void ImGui::DebugNodeColumns(ImGuiOldColumns*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawCmdShowMeshAndBoundingBox	imgui.cpp	/^void ImGui::DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawList* out_draw_list, const ImDrawList* /;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawCmdShowMeshAndBoundingBox	imgui.cpp	/^void ImGui::DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawList*, const ImDrawList*, const ImDrawC/;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawList	imgui.cpp	/^void ImGui::DebugNodeDrawList(ImGuiWindow* window, ImGuiViewportP* viewport, const ImDrawList* d/;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawList	imgui.cpp	/^void ImGui::DebugNodeDrawList(ImGuiWindow*, ImGuiViewportP*, const ImDrawList*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeFont	imgui.cpp	/^void ImGui::DebugNodeFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeFont	imgui.cpp	/^void ImGui::DebugNodeFont(ImFont*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeFontGlyph	imgui.cpp	/^void ImGui::DebugNodeFontGlyph(ImFont*, const ImFontGlyph* glyph)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeInputTextState	imgui_widgets.cpp	/^void ImGui::DebugNodeInputTextState(ImGuiInputTextState* state)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeMultiSelectState	imgui_widgets.cpp	/^void ImGui::DebugNodeMultiSelectState(ImGuiMultiSelectState* storage)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeStorage	imgui.cpp	/^void ImGui::DebugNodeStorage(ImGuiStorage* storage, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeStorage	imgui.cpp	/^void ImGui::DebugNodeStorage(ImGuiStorage*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTabBar	imgui.cpp	/^void ImGui::DebugNodeTabBar(ImGuiTabBar* tab_bar, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTabBar	imgui.cpp	/^void ImGui::DebugNodeTabBar(ImGuiTabBar*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTable	imgui_tables.cpp	/^void ImGui::DebugNodeTable(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTable	imgui_tables.cpp	/^void ImGui::DebugNodeTable(ImGuiTable*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTableGetSizingPolicyDesc	imgui_tables.cpp	/^static const char* DebugNodeTableGetSizingPolicyDesc(ImGuiTableFlags sizing_policy)$/;"	f	typeref:typename:const char *	file:
DebugNodeTableSettings	imgui_tables.cpp	/^void ImGui::DebugNodeTableSettings(ImGuiTableSettings* settings)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTableSettings	imgui_tables.cpp	/^void ImGui::DebugNodeTableSettings(ImGuiTableSettings*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTypingSelectState	imgui_widgets.cpp	/^void ImGui::DebugNodeTypingSelectState(ImGuiTypingSelectState* data)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeViewport	imgui.cpp	/^void ImGui::DebugNodeViewport(ImGuiViewportP* viewport)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeViewport	imgui.cpp	/^void ImGui::DebugNodeViewport(ImGuiViewportP*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindow	imgui.cpp	/^void ImGui::DebugNodeWindow(ImGuiWindow* window, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindow	imgui.cpp	/^void ImGui::DebugNodeWindow(ImGuiWindow*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowSettings	imgui.cpp	/^void ImGui::DebugNodeWindowSettings(ImGuiWindowSettings* settings)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowSettings	imgui.cpp	/^void ImGui::DebugNodeWindowSettings(ImGuiWindowSettings*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowsList	imgui.cpp	/^void ImGui::DebugNodeWindowsList(ImVector<ImGuiWindow*>* windows, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowsList	imgui.cpp	/^void ImGui::DebugNodeWindowsList(ImVector<ImGuiWindow*>*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowsListByBeginStackParent	imgui.cpp	/^void ImGui::DebugNodeWindowsListByBeginStackParent(ImGuiWindow** windows, int windows_size, ImGu/;"	f	class:ImGui	typeref:typename:void
DebugPrintInputEvent	imgui.cpp	/^static void DebugPrintInputEvent(const char* prefix, const ImGuiInputEvent* e)$/;"	f	typeref:typename:void	file:
DebugRenderKeyboardPreview	imgui.cpp	/^void ImGui::DebugRenderKeyboardPreview(ImDrawList* draw_list)$/;"	f	class:ImGui	typeref:typename:void
DebugRenderViewportThumbnail	imgui.cpp	/^void ImGui::DebugRenderViewportThumbnail(ImDrawList* draw_list, ImGuiViewportP* viewport, const /;"	f	class:ImGui	typeref:typename:void
DebugShowGroupRects	includes/imgui_internal.h	/^    bool                    DebugShowGroupRects;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DebugStartItemPicker	imgui.cpp	/^void ImGui::DebugStartItemPicker() {}$/;"	f	class:ImGui	typeref:typename:void
DebugStartItemPicker	imgui.cpp	/^void ImGui::DebugStartItemPicker()$/;"	f	class:ImGui	typeref:typename:void
DebugTextEncoding	imgui.cpp	/^void ImGui::DebugTextEncoding(const char* str)$/;"	f	class:ImGui	typeref:typename:void
DebugTextUnformattedWithLocateItem	imgui.cpp	/^void ImGui::DebugTextUnformattedWithLocateItem(const char* line_begin, const char* line_end)$/;"	f	class:ImGui	typeref:typename:void
DeclColumns	imgui_widgets.cpp	/^float ImGuiMenuColumns::DeclColumns(float w_icon, float w_label, float w_shortcut, float w_mark)$/;"	f	class:ImGuiMenuColumns	typeref:typename:float
DeclColumnsCount	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         DeclColumnsCount;           \/\/ Count calls to TableSetupColumn/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
DecoInnerSizeX1	includes/imgui_internal.h	/^    float                   DecoInnerSizeX1, DecoInnerSizeY1;   \/\/ Applied AFTER\/OVER InnerRe/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoInnerSizeY1	includes/imgui_internal.h	/^    float                   DecoInnerSizeX1, DecoInnerSizeY1;   \/\/ Applied AFTER\/OVER InnerRe/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoOuterSizeX1	includes/imgui_internal.h	/^    float                   DecoOuterSizeX1, DecoOuterSizeY1;   \/\/ Left\/Up offsets. Sum of no/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoOuterSizeX2	includes/imgui_internal.h	/^    float                   DecoOuterSizeX2, DecoOuterSizeY2;   \/\/ Right\/Down offsets (X2 gen/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoOuterSizeY1	includes/imgui_internal.h	/^    float                   DecoOuterSizeX1, DecoOuterSizeY1;   \/\/ Left\/Up offsets. Sum of no/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoOuterSizeY2	includes/imgui_internal.h	/^    float                   DecoOuterSizeX2, DecoOuterSizeY2;   \/\/ Right\/Down offsets (X2 gen/;"	m	struct:ImGuiWindow	typeref:typename:float
Decode85	imgui_draw.cpp	/^static void         Decode85(const unsigned char* src, unsigned char* dst)$/;"	f	typeref:typename:void	file:
Decode85Byte	imgui_draw.cpp	/^static unsigned int Decode85Byte(char c)                                    { return c >= '\\\\'/;"	f	typeref:typename:unsigned int	file:
DeleteChars	imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::DeleteChars(int pos, int bytes_count)$/;"	f	class:ImGuiInputTextCallbackData	typeref:typename:void
Delivery	includes/imgui.h	/^    bool            Delivery;           \/\/ Set when AcceptDragDropPayload() was called and mou/;"	m	struct:ImGuiPayload	typeref:typename:bool
DeltaTime	includes/imgui.h	/^    float       DeltaTime;                      \/\/ = 1.0f\/60.0f     \/\/ Time elapsed since l/;"	m	struct:ImGuiIO	typeref:typename:float
DemoTree	imgui_demo.cpp	/^    ExampleTreeNode* DemoTree = NULL;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:ExampleTreeNode *	file:
Desc	includes/imgui_internal.h	/^    char                    Desc[57];                   \/\/ Arbitrarily sized buffer to hold a /;"	m	struct:ImGuiStackLevelInfo	typeref:typename:char[57]
Descent	includes/imgui.h	/^    float                       Ascent, Descent;    \/\/ 4+4   \/\/ out \/\/            \/\/ Asc/;"	m	struct:ImFont	typeref:typename:float
DesiredSize	includes/imgui.h	/^    ImVec2  DesiredSize;    \/\/ Read-write.  Desired size, based on user's mouse position. Writ/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
DestroyContext	imgui.cpp	/^void ImGui::DestroyContext(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
DimBgRatio	includes/imgui_internal.h	/^    float                   DimBgRatio;                         \/\/ 0.0..1.0 animation when fad/;"	m	struct:ImGuiContext	typeref:typename:float
Dirty	imgui_demo.cpp	/^    bool        Dirty;      \/\/ Set when the document has been modified$/;"	m	struct:MyDocument	typeref:typename:bool	file:
DirtyLookupTables	includes/imgui.h	/^    bool                        DirtyLookupTables;  \/\/ 1     \/\/ out \/\/$/;"	m	struct:ImFont	typeref:typename:bool
DisableDefaultContextMenu	includes/imgui_internal.h	/^    bool                        DisableDefaultContextMenu;  \/\/ Disable default context menu co/;"	m	struct:ImGuiTable	typeref:typename:bool
DisableInputsFrames	includes/imgui_internal.h	/^    ImS8                    DisableInputsFrames;                \/\/ Disable window interactions/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
DisabledAlpha	includes/imgui.h	/^    float       DisabledAlpha;              \/\/ Additional alpha multiplier applied by BeginDis/;"	m	struct:ImGuiStyle	typeref:typename:float
DisabledAlphaBackup	includes/imgui_internal.h	/^    float                   DisabledAlphaBackup;                \/\/ Backup for style.Alpha for /;"	m	struct:ImGuiContext	typeref:typename:float
DisabledOverrideReenable	includes/imgui_internal.h	/^    bool                    DisabledOverrideReenable;   \/\/ Non-child window override disabled /;"	m	struct:ImGuiWindowStackData	typeref:typename:bool
DisabledStackSize	includes/imgui_internal.h	/^    short                   DisabledStackSize;$/;"	m	struct:ImGuiContext	typeref:typename:short
DisplayDocContents	imgui_demo.cpp	/^    void DisplayDocContents(MyDocument* doc)$/;"	f	struct:ExampleAppDocuments	typeref:typename:void	file:
DisplayDocContextMenu	imgui_demo.cpp	/^    void DisplayDocContextMenu(MyDocument* doc)$/;"	f	struct:ExampleAppDocuments	typeref:typename:void	file:
DisplayEnd	includes/imgui.h	/^    int             DisplayEnd;         \/\/ End of items to display (exclusive)$/;"	m	struct:ImGuiListClipper	typeref:typename:int
DisplayFramebufferScale	includes/imgui.h	/^    ImVec2      DisplayFramebufferScale;        \/\/ = (1, 1)         \/\/ For retina display or/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
DisplayNode	imgui_demo.cpp	/^                static void DisplayNode(const MyTreeNode* node, const MyTreeNode* all_nodes)$/;"	f	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:void	file:
DisplayOrder	includes/imgui_internal.h	/^    ImGuiTableColumnIdx     DisplayOrder;                   \/\/ Index within Table's IndexToDis/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
DisplayOrder	includes/imgui_internal.h	/^    ImGuiTableColumnIdx     DisplayOrder;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiTableColumnIdx
DisplayOrderToIndex	includes/imgui_internal.h	/^    ImSpan<ImGuiTableColumnIdx> DisplayOrderToIndex;        \/\/ Point within RawData[]. Store d/;"	m	struct:ImGuiTable	typeref:typename:ImSpan<ImGuiTableColumnIdx>
DisplayPos	includes/imgui.h	/^    ImVec2              DisplayPos;         \/\/ Top-left position of the viewport to render (==/;"	m	struct:ImDrawData	typeref:typename:ImVec2
DisplayRect	includes/imgui_internal.h	/^    ImRect                  DisplayRect;        \/\/ Display rectangle. ONLY VALID IF (StatusFla/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
DisplaySafeAreaPadding	includes/imgui.h	/^    ImVec2      DisplaySafeAreaPadding;     \/\/ Apply to every windows, menus, popups, tooltips/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
DisplaySize	includes/imgui.h	/^    ImVec2              DisplaySize;        \/\/ Size of the viewport to render (== GetMainViewp/;"	m	struct:ImDrawData	typeref:typename:ImVec2
DisplaySize	includes/imgui.h	/^    ImVec2      DisplaySize;                    \/\/ <unset>          \/\/ Main display size, in/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
DisplayStart	includes/imgui.h	/^    int             DisplayStart;       \/\/ First item to display, updated by each call to Step/;"	m	struct:ImGuiListClipper	typeref:typename:int
DisplayWindowPadding	includes/imgui.h	/^    ImVec2      DisplayWindowPadding;       \/\/ Apply to regular windows: amount which we enfor/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
DistAxial	includes/imgui_internal.h	/^    float               DistAxial;      \/\/      Move    \/\/ Best candidate axial distance to /;"	m	struct:ImGuiNavItemData	typeref:typename:float
DistBox	includes/imgui_internal.h	/^    float               DistBox;        \/\/      Move    \/\/ Best candidate box distance to cu/;"	m	struct:ImGuiNavItemData	typeref:typename:float
DistCenter	includes/imgui_internal.h	/^    float               DistCenter;     \/\/      Move    \/\/ Best candidate center distance to/;"	m	struct:ImGuiNavItemData	typeref:typename:float
DoForceClose	imgui_demo.cpp	/^    void DoForceClose() { Open = false; Dirty = false; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoOpen	imgui_demo.cpp	/^    void DoOpen()       { Open = true; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoSave	imgui_demo.cpp	/^    void DoSave()       { Dirty = false; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
Documents	imgui_demo.cpp	/^    ImVector<MyDocument>    Documents;$/;"	m	struct:ExampleAppDocuments	typeref:typename:ImVector<MyDocument>	file:
Down	includes/imgui.h	/^    bool        Down;               \/\/ True for if key is down$/;"	m	struct:ImGuiKeyData	typeref:typename:bool
Down	includes/imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	m	struct:ImGuiInputEventKey	typeref:typename:bool
Down	includes/imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseButton	typeref:typename:bool
DownDuration	includes/imgui.h	/^    float       DownDuration;       \/\/ Duration the key has been down (<0.0f: not pressed, 0.0/;"	m	struct:ImGuiKeyData	typeref:typename:float
DownDurationPrev	includes/imgui.h	/^    float       DownDurationPrev;   \/\/ Last frame duration the key has been down$/;"	m	struct:ImGuiKeyData	typeref:typename:float
DragBehavior	imgui_widgets.cpp	/^bool ImGui::DragBehavior(ImGuiID id, ImGuiDataType data_type, void* p_v, float v_speed, const vo/;"	f	class:ImGui	typeref:typename:bool
DragBehaviorT	imgui_widgets.cpp	/^bool ImGui::DragBehaviorT(ImGuiDataType data_type, TYPE* v, float v_speed, const TYPE v_min, con/;"	f	class:ImGui	typeref:typename:bool
DragCurrentAccum	includes/imgui_internal.h	/^    float                   DragCurrentAccum;                   \/\/ Accumulator for dragging mo/;"	m	struct:ImGuiContext	typeref:typename:float
DragCurrentAccumDirty	includes/imgui_internal.h	/^    bool                    DragCurrentAccumDirty;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropAcceptFlags	includes/imgui_internal.h	/^    ImGuiDragDropFlags      DragDropAcceptFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDragDropFlags
DragDropAcceptFrameCount	includes/imgui_internal.h	/^    int                     DragDropAcceptFrameCount;           \/\/ Last time a target expresse/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropAcceptIdCurr	includes/imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdCurr;               \/\/ Target item id (set at the /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropAcceptIdCurrRectSurface	includes/imgui_internal.h	/^    float                   DragDropAcceptIdCurrRectSurface;    \/\/ Target item surface (we res/;"	m	struct:ImGuiContext	typeref:typename:float
DragDropAcceptIdPrev	includes/imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdPrev;               \/\/ Target item id from previou/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropActive	includes/imgui_internal.h	/^    bool                    DragDropActive;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropHoldJustPressedId	includes/imgui_internal.h	/^    ImGuiID                 DragDropHoldJustPressedId;          \/\/ Set when holding a payload /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropMouseButton	includes/imgui_internal.h	/^    int                     DragDropMouseButton;$/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropPayload	includes/imgui_internal.h	/^    ImGuiPayload            DragDropPayload;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPayload
DragDropPayloadBufHeap	includes/imgui_internal.h	/^    ImVector<unsigned char> DragDropPayloadBufHeap;             \/\/ We don't expose the ImVecto/;"	m	struct:ImGuiContext	typeref:typename:ImVector<unsigned char>
DragDropPayloadBufLocal	includes/imgui_internal.h	/^    unsigned char           DragDropPayloadBufLocal[16];        \/\/ Local buffer for small payl/;"	m	struct:ImGuiContext	typeref:typename:unsigned char[16]
DragDropSourceFlags	includes/imgui_internal.h	/^    ImGuiDragDropFlags      DragDropSourceFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDragDropFlags
DragDropSourceFrameCount	includes/imgui_internal.h	/^    int                     DragDropSourceFrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropTargetClipRect	includes/imgui_internal.h	/^    ImRect                  DragDropTargetClipRect;             \/\/ Store ClipRect at the time /;"	m	struct:ImGuiContext	typeref:typename:ImRect
DragDropTargetId	includes/imgui_internal.h	/^    ImGuiID                 DragDropTargetId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropTargetRect	includes/imgui_internal.h	/^    ImRect                  DragDropTargetRect;                 \/\/ Store rectangle of current /;"	m	struct:ImGuiContext	typeref:typename:ImRect
DragDropWithinSource	includes/imgui_internal.h	/^    bool                    DragDropWithinSource;               \/\/ Set when within a BeginDrag/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropWithinTarget	includes/imgui_internal.h	/^    bool                    DragDropWithinTarget;               \/\/ Set when within a BeginDrag/;"	m	struct:ImGuiContext	typeref:typename:bool
DragFloat	imgui_widgets.cpp	/^bool ImGui::DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, cons/;"	f	class:ImGui	typeref:typename:bool
DragFloat2	imgui_widgets.cpp	/^bool ImGui::DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloat3	imgui_widgets.cpp	/^bool ImGui::DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloat4	imgui_widgets.cpp	/^bool ImGui::DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloatRange2	imgui_widgets.cpp	/^bool ImGui::DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float/;"	f	class:ImGui	typeref:typename:bool
DragInt	imgui_widgets.cpp	/^bool ImGui::DragInt(const char* label, int* v, float v_speed, int v_min, int v_max, const char* /;"	f	class:ImGui	typeref:typename:bool
DragInt2	imgui_widgets.cpp	/^bool ImGui::DragInt2(const char* label, int v[2], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragInt3	imgui_widgets.cpp	/^bool ImGui::DragInt3(const char* label, int v[3], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragInt4	imgui_widgets.cpp	/^bool ImGui::DragInt4(const char* label, int v[4], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragIntRange2	imgui_widgets.cpp	/^bool ImGui::DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_spe/;"	f	class:ImGui	typeref:typename:bool
DragScalar	imgui_widgets.cpp	/^bool ImGui::DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, /;"	f	class:ImGui	typeref:typename:bool
DragScalarN	imgui_widgets.cpp	/^bool ImGui::DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components/;"	f	class:ImGui	typeref:typename:bool
DragSpeedDefaultRatio	includes/imgui_internal.h	/^    float                   DragSpeedDefaultRatio;              \/\/ If speed == 0.0f, uses (max/;"	m	struct:ImGuiContext	typeref:typename:float
Draw	imgui.cpp	/^bool ImGuiTextFilter::Draw(const char* label, float width)$/;"	f	class:ImGuiTextFilter	typeref:typename:bool
Draw	imgui_demo.cpp	/^    void    Draw(const char* title, bool* p_open = NULL)$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
Draw	imgui_demo.cpp	/^    void    Draw(const char* title, bool* p_open)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
Draw	imgui_demo.cpp	/^    void Draw(ExampleTreeNode* root_node)$/;"	f	struct:ExampleAppPropertyEditor	typeref:typename:void	file:
Draw	imgui_demo.cpp	/^    void Draw(const char* title, bool* p_open)$/;"	f	struct:ExampleAssetsBrowser	typeref:typename:void	file:
DrawChannelCurrent	includes/imgui_internal.h	/^    ImGuiTableDrawChannelIdx DrawChannelCurrent;            \/\/ Index within DrawSplitter.Chann/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableDrawChannelIdx
DrawChannelFrozen	includes/imgui_internal.h	/^    ImGuiTableDrawChannelIdx DrawChannelFrozen;             \/\/ Draw channels for frozen rows (/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableDrawChannelIdx
DrawChannelUnfrozen	includes/imgui_internal.h	/^    ImGuiTableDrawChannelIdx DrawChannelUnfrozen;           \/\/ Draw channels for unfrozen rows$/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableDrawChannelIdx
DrawChannelsTempMergeBuffer	includes/imgui_internal.h	/^    ImVector<ImDrawChannel>         DrawChannelsTempMergeBuffer;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImDrawChannel>
DrawDataBuilder	includes/imgui_internal.h	/^    ImDrawDataBuilder   DrawDataBuilder;        \/\/ Temporary data while building final ImDrawD/;"	m	struct:ImGuiViewportP	typeref:typename:ImDrawDataBuilder
DrawDataP	includes/imgui_internal.h	/^    ImDrawData          DrawDataP;$/;"	m	struct:ImGuiViewportP	typeref:typename:ImDrawData
DrawList	includes/imgui_internal.h	/^    ImDrawList*             DrawList;                           \/\/ == &DrawListInst (for backw/;"	m	struct:ImGuiWindow	typeref:typename:ImDrawList *
DrawListInst	includes/imgui_internal.h	/^    ImDrawList              DrawListInst;$/;"	m	struct:ImGuiWindow	typeref:typename:ImDrawList
DrawListSharedData	includes/imgui_internal.h	/^    ImDrawListSharedData    DrawListSharedData;$/;"	m	struct:ImGuiContext	typeref:typename:ImDrawListSharedData
DrawNode	imgui_demo.cpp	/^                static void DrawNode(ExampleTreeNode* node, ImGuiSelectionBasicStorage* selectio/;"	f	struct:ShowDemoWindowMultiSelect::ExampleTreeFuncs	typeref:typename:void	file:
DrawSplitter	includes/imgui_internal.h	/^    ImDrawListSplitter          DrawSplitter;$/;"	m	struct:ImGuiTableTempData	typeref:typename:ImDrawListSplitter
DrawSplitter	includes/imgui_internal.h	/^    ImDrawListSplitter*         DrawSplitter;               \/\/ Shortcut to TempData->DrawSplit/;"	m	struct:ImGuiTable	typeref:typename:ImDrawListSplitter *
DrawTreeNode	imgui_demo.cpp	/^    void DrawTreeNode(ExampleTreeNode* node)$/;"	f	struct:ExampleAppPropertyEditor	typeref:typename:void	file:
DstFont	includes/imgui.h	/^    ImFont*         DstFont;$/;"	m	struct:ImFontConfig	typeref:typename:ImFont *
DstIndex	imgui_draw.cpp	/^    int                 DstIndex;           \/\/ Index into atlas->Fonts[] and dst_tmp_array[]$/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
Dummy	imgui_widgets.cpp	/^void ImGui::Dummy(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
DummyDrawChannel	includes/imgui_internal.h	/^    ImGuiTableDrawChannelIdx    DummyDrawChannel;           \/\/ Redirect non-visible columns he/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableDrawChannelIdx
EPSILON	includes/raymath.h	/^    #define EPSILON /;"	d
EditTableColumnsFlags	imgui_demo.cpp	/^static void EditTableColumnsFlags(ImGuiTableColumnFlags* p_flags)$/;"	f	typeref:typename:void	file:
EditTableSizingFlags	imgui_demo.cpp	/^static void EditTableSizingFlags(ImGuiTableFlags* p_flags)$/;"	f	typeref:typename:void	file:
Edited	includes/imgui_internal.h	/^    bool                    Edited;                 \/\/ edited this frame$/;"	m	struct:ImGuiInputTextState	typeref:typename:bool
ElapseFrame	includes/imgui_internal.h	/^    int         ElapseFrame;$/;"	m	struct:ImGuiDeactivatedItemData	typeref:typename:int
ElemCount	includes/imgui.h	/^    unsigned int    ElemCount;          \/\/ 4    \/\/ Number of indices (multiple of 3) to be r/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
Element	imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	g	function:ShowDemoWindowWidgets	file:
Element_Air	imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_COUNT	imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Earth	imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Fire	imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Water	imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
EllipsisChar	includes/imgui.h	/^    ImWchar                     EllipsisChar;       \/\/ 2-4   \/\/ out \/\/ = '...'\/'.'\/\/ Ch/;"	m	struct:ImFont	typeref:typename:ImWchar
EllipsisChar	includes/imgui.h	/^    ImWchar         EllipsisChar;           \/\/ 0        \/\/ Explicitly specify Unicode codepo/;"	m	struct:ImFontConfig	typeref:typename:ImWchar
EllipsisCharCount	includes/imgui.h	/^    short                       EllipsisCharCount;  \/\/ 1     \/\/ out \/\/ 1 or 3$/;"	m	struct:ImFont	typeref:typename:short
EllipsisCharStep	includes/imgui.h	/^    float                       EllipsisCharStep;   \/\/ 4     \/\/ out               \/\/ Step /;"	m	struct:ImFont	typeref:typename:float
EllipsisWidth	includes/imgui.h	/^    float                       EllipsisWidth;      \/\/ 4     \/\/ out               \/\/ Width$/;"	m	struct:ImFont	typeref:typename:float
EmitItem	includes/imgui_internal.h	/^    bool        EmitItem;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
EmptyString	imgui.cpp	/^char ImGuiTextBuffer::EmptyString[1] = { 0 };$/;"	m	class:ImGuiTextBuffer	typeref:typename:char[1]
EmptyString	includes/imgui.h	/^    IMGUI_API static char EmptyString[1];$/;"	m	struct:ImGuiTextBuffer	typeref:typename:IMGUI_API char[1]
EnableScissor	rlImGui.cpp	/^static void EnableScissor(float x, float y, float width, float height)$/;"	f	typeref:typename:void	file:
EnabledMaskByDisplayOrder	includes/imgui_internal.h	/^    ImBitArrayPtr               EnabledMaskByDisplayOrder;  \/\/ Column DisplayOrder -> IsEnable/;"	m	struct:ImGuiTable	typeref:typename:ImBitArrayPtr
EnabledMaskByIndex	includes/imgui_internal.h	/^    ImBitArrayPtr               EnabledMaskByIndex;         \/\/ Column Index -> IsEnabled map (/;"	m	struct:ImGuiTable	typeref:typename:ImBitArrayPtr
End	imgui.cpp	/^void ImGui::End()$/;"	f	class:ImGui	typeref:typename:void
End	imgui.cpp	/^void ImGuiListClipper::End()$/;"	f	class:ImGuiListClipper	typeref:typename:void
EndBoxSelect	imgui_widgets.cpp	/^void ImGui::EndBoxSelect(const ImRect& scope_rect, ImGuiMultiSelectFlags ms_flags)$/;"	f	class:ImGui	typeref:typename:void
EndChild	imgui.cpp	/^void ImGui::EndChild()$/;"	f	class:ImGui	typeref:typename:void
EndChildFrame	includes/imgui.h	/^    static inline void  EndChildFrame()                                                         /;"	f	namespace:ImGui	typeref:typename:void
EndColumns	imgui_tables.cpp	/^void ImGui::EndColumns()$/;"	f	class:ImGui	typeref:typename:void
EndCombo	imgui_widgets.cpp	/^void ImGui::EndCombo()$/;"	f	class:ImGui	typeref:typename:void
EndComboPreview	imgui_widgets.cpp	/^void ImGui::EndComboPreview()$/;"	f	class:ImGui	typeref:typename:void
EndDisabled	imgui.cpp	/^void ImGui::EndDisabled()$/;"	f	class:ImGui	typeref:typename:void
EndDisabledOverrideReenable	imgui.cpp	/^void ImGui::EndDisabledOverrideReenable()$/;"	f	class:ImGui	typeref:typename:void
EndDragDropSource	imgui.cpp	/^void ImGui::EndDragDropSource()$/;"	f	class:ImGui	typeref:typename:void
EndDragDropTarget	imgui.cpp	/^void ImGui::EndDragDropTarget()$/;"	f	class:ImGui	typeref:typename:void
EndErrorTooltip	imgui.cpp	/^void ImGui::EndErrorTooltip()$/;"	f	class:ImGui	typeref:typename:void
EndFrame	imgui.cpp	/^void ImGui::EndFrame()$/;"	f	class:ImGui	typeref:typename:void
EndGroup	imgui.cpp	/^void ImGui::EndGroup()$/;"	f	class:ImGui	typeref:typename:void
EndListBox	imgui_widgets.cpp	/^void ImGui::EndListBox()$/;"	f	class:ImGui	typeref:typename:void
EndMainMenuBar	imgui_widgets.cpp	/^void ImGui::EndMainMenuBar()$/;"	f	class:ImGui	typeref:typename:void
EndMenu	imgui_widgets.cpp	/^void ImGui::EndMenu()$/;"	f	class:ImGui	typeref:typename:void
EndMenuBar	imgui_widgets.cpp	/^void ImGui::EndMenuBar()$/;"	f	class:ImGui	typeref:typename:void
EndMultiSelect	imgui_widgets.cpp	/^ImGuiMultiSelectIO* ImGui::EndMultiSelect()$/;"	f	class:ImGui	typeref:typename:ImGuiMultiSelectIO *
EndOffset	includes/imgui_internal.h	/^    int             EndOffset = 0;                          \/\/ Because we don't own text buffe/;"	m	struct:ImGuiTextIndex	typeref:typename:int
EndPopup	imgui.cpp	/^void ImGui::EndPopup()$/;"	f	class:ImGui	typeref:typename:void
EndPosRel	includes/imgui_internal.h	/^    ImVec2                  EndPosRel;          \/\/ End position in window-contents relative sp/;"	m	struct:ImGuiBoxSelectState	typeref:typename:ImVec2
EndTabBar	imgui_widgets.cpp	/^void    ImGui::EndTabBar()$/;"	f	class:ImGui	typeref:typename:void
EndTabItem	imgui_widgets.cpp	/^void    ImGui::EndTabItem()$/;"	f	class:ImGui	typeref:typename:void
EndTable	imgui_tables.cpp	/^void    ImGui::EndTable()$/;"	f	class:ImGui	typeref:typename:void
EndTooltip	imgui.cpp	/^void ImGui::EndTooltip()$/;"	f	class:ImGui	typeref:typename:void
Entries	includes/imgui_internal.h	/^    ImVector<ImGuiKeyRoutingData>   Entries;$/;"	m	struct:ImGuiKeyRoutingTable	typeref:typename:ImVector<ImGuiKeyRoutingData>
EntriesNext	includes/imgui_internal.h	/^    ImVector<ImGuiKeyRoutingData>   EntriesNext;                    \/\/ Double-buffer to avoid /;"	m	struct:ImGuiKeyRoutingTable	typeref:typename:ImVector<ImGuiKeyRoutingData>
EnumDesc	imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	s	function:EditTableSizingFlags	file:
ErrorCallback	includes/imgui_internal.h	/^    ImGuiErrorCallback      ErrorCallback;                      \/\/ = NULL. May be exposed in p/;"	m	struct:ImGuiContext	typeref:typename:ImGuiErrorCallback
ErrorCallbackUserData	includes/imgui_internal.h	/^    void*                   ErrorCallbackUserData;              \/\/ = NULL$/;"	m	struct:ImGuiContext	typeref:typename:void *
ErrorCheckEndFrameFinalizeErrorTooltip	imgui.cpp	/^void ImGui::ErrorCheckEndFrameFinalizeErrorTooltip()$/;"	f	class:ImGui	typeref:typename:void
ErrorCheckEndFrameSanityChecks	imgui.cpp	/^static void ImGui::ErrorCheckEndFrameSanityChecks()$/;"	f	class:ImGui	typeref:typename:void	file:
ErrorCheckNewFrameSanityChecks	imgui.cpp	/^static void ImGui::ErrorCheckNewFrameSanityChecks()$/;"	f	class:ImGui	typeref:typename:void	file:
ErrorCheckUsingSetCursorPosToExtendParentBoundaries	imgui.cpp	/^void ImGui::ErrorCheckUsingSetCursorPosToExtendParentBoundaries()$/;"	f	class:ImGui	typeref:typename:void
ErrorCountCurrentFrame	includes/imgui_internal.h	/^    int                     ErrorCountCurrentFrame;             \/\/ [Internal] Number of errors/;"	m	struct:ImGuiContext	typeref:typename:int
ErrorFirst	includes/imgui_internal.h	/^    bool                    ErrorFirst;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ErrorLog	imgui.cpp	/^bool    ImGui::ErrorLog(const char* msg)$/;"	f	class:ImGui	typeref:typename:bool
ErrorRecoveryStoreState	imgui.cpp	/^void ImGui::ErrorRecoveryStoreState(ImGuiErrorRecoveryState* state_out)$/;"	f	class:ImGui	typeref:typename:void
ErrorRecoveryTryToRecoverState	imgui.cpp	/^void ImGui::ErrorRecoveryTryToRecoverState(const ImGuiErrorRecoveryState* state_in)$/;"	f	class:ImGui	typeref:typename:void
ErrorRecoveryTryToRecoverWindowState	imgui.cpp	/^void    ImGui::ErrorRecoveryTryToRecoverWindowState(const ImGuiErrorRecoveryState* state_in)$/;"	f	class:ImGui	typeref:typename:void
ErrorTooltipLockedPos	includes/imgui_internal.h	/^    ImVec2                  ErrorTooltipLockedPos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
EstimateScratchBufferSize	imgui_draw.cpp	/^    static int EstimateScratchBufferSize(int points_count)  { return sizeof(ImTriangulatorNode) /;"	f	struct:ImTriangulator	typeref:typename:int	file:
EstimateTriangleCount	imgui_draw.cpp	/^    static int EstimateTriangleCount(int points_count)      { return (points_count < 3) ? 0 : po/;"	f	struct:ImTriangulator	typeref:typename:int	file:
EventChar	includes/imgui.h	/^    ImWchar             EventChar;      \/\/ Character input                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImWchar
EventFlag	includes/imgui.h	/^    ImGuiInputTextFlags EventFlag;      \/\/ One ImGuiInputTextFlags_Callback*    \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiInputTextFlags
EventId	includes/imgui_internal.h	/^    ImU32                           EventId;        \/\/ Unique, sequential increasing integer t/;"	m	struct:ImGuiInputEvent	typeref:typename:ImU32
EventKey	includes/imgui.h	/^    ImGuiKey            EventKey;       \/\/ Key pressed (Up\/Down\/TAB)            \/\/ Read-on/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiKey
ExampleAppConsole	imgui_demo.cpp	/^    ExampleAppConsole()$/;"	f	struct:ExampleAppConsole	file:
ExampleAppConsole	imgui_demo.cpp	/^struct ExampleAppConsole$/;"	s	file:
ExampleAppDocuments	imgui_demo.cpp	/^    ExampleAppDocuments()$/;"	f	struct:ExampleAppDocuments	file:
ExampleAppDocuments	imgui_demo.cpp	/^struct ExampleAppDocuments$/;"	s	file:
ExampleAppLog	imgui_demo.cpp	/^    ExampleAppLog()$/;"	f	struct:ExampleAppLog	file:
ExampleAppLog	imgui_demo.cpp	/^struct ExampleAppLog$/;"	s	file:
ExampleAppPropertyEditor	imgui_demo.cpp	/^struct ExampleAppPropertyEditor$/;"	s	file:
ExampleAsset	imgui_demo.cpp	/^    ExampleAsset(ImGuiID id, int type) { ID = id; Type = type; }$/;"	f	struct:ExampleAsset	file:
ExampleAsset	imgui_demo.cpp	/^struct ExampleAsset$/;"	s	file:
ExampleAssetsBrowser	imgui_demo.cpp	/^    ExampleAssetsBrowser()$/;"	f	struct:ExampleAssetsBrowser	file:
ExampleAssetsBrowser	imgui_demo.cpp	/^struct ExampleAssetsBrowser$/;"	s	file:
ExampleDualListBox	imgui_demo.cpp	/^struct ExampleDualListBox$/;"	s	file:
ExampleMemberInfo	imgui_demo.cpp	/^struct ExampleMemberInfo$/;"	s	file:
ExampleNames	imgui_demo.cpp	/^static const char* ExampleNames[] =$/;"	v	typeref:typename:const char * []	file:
ExampleSelectionWithDeletion	imgui_demo.cpp	/^struct ExampleSelectionWithDeletion : ImGuiSelectionBasicStorage$/;"	s	file:
ExampleTreeFuncs	imgui_demo.cpp	/^            struct ExampleTreeFuncs$/;"	s	function:ShowDemoWindowMultiSelect	file:
ExampleTreeNode	imgui_demo.cpp	/^struct ExampleTreeNode$/;"	s	file:
ExampleTreeNodeMemberInfos	imgui_demo.cpp	/^static const ExampleMemberInfo ExampleTreeNodeMemberInfos[]$/;"	v	typeref:typename:const ExampleMemberInfo[]	file:
ExampleTree_CreateDemoTree	imgui_demo.cpp	/^static ExampleTreeNode* ExampleTree_CreateDemoTree()$/;"	f	typeref:typename:ExampleTreeNode *	file:
ExampleTree_CreateNode	imgui_demo.cpp	/^static ExampleTreeNode* ExampleTree_CreateNode(const char* name, int uid, ExampleTreeNode* paren/;"	f	typeref:typename:ExampleTreeNode *	file:
ExampleTree_DestroyNode	imgui_demo.cpp	/^static void ExampleTree_DestroyNode(ExampleTreeNode* node)$/;"	f	typeref:typename:void	file:
ExecCommand	imgui_demo.cpp	/^    void    ExecCommand(const char* command_line)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
Expand	includes/imgui_internal.h	/^    void        Expand(const ImVec2& amount)        { Min.x -= amount.x; Min.y -= amount.y; Max./;"	f	struct:ImRect	typeref:typename:void
Expand	includes/imgui_internal.h	/^    void        Expand(const float amount)          { Min.x -= amount;   Min.y -= amount;   Max./;"	f	struct:ImRect	typeref:typename:void
ExtSupported	includes/rlgl.h	/^    } ExtSupported;     \/\/ Extensions supported flags$/;"	m	struct:rlglData	typeref:struct:rlglData::__anon315aabf20e08
FLAG_BORDERLESS_WINDOWED_MODE	includes/raylib.h	/^    FLAG_BORDERLESS_WINDOWED_MODE = 0x00008000, \/\/ Set to run program in borderless windowed m/;"	e	enum:__anonce11f6a40203
FLAG_FULLSCREEN_MODE	includes/raylib.h	/^    FLAG_FULLSCREEN_MODE    = 0x00000002,   \/\/ Set to run program in fullscreen$/;"	e	enum:__anonce11f6a40203
FLAG_INTERLACED_HINT	includes/raylib.h	/^    FLAG_INTERLACED_HINT    = 0x00010000    \/\/ Set to try enabling interlaced video format (fo/;"	e	enum:__anonce11f6a40203
FLAG_MSAA_4X_HINT	includes/raylib.h	/^    FLAG_MSAA_4X_HINT       = 0x00000020,   \/\/ Set to try enabling MSAA 4X$/;"	e	enum:__anonce11f6a40203
FLAG_VSYNC_HINT	includes/raylib.h	/^    FLAG_VSYNC_HINT         = 0x00000040,   \/\/ Set to try enabling V-Sync on GPU$/;"	e	enum:__anonce11f6a40203
FLAG_WINDOW_ALWAYS_RUN	includes/raylib.h	/^    FLAG_WINDOW_ALWAYS_RUN  = 0x00000100,   \/\/ Set to allow windows running while minimized$/;"	e	enum:__anonce11f6a40203
FLAG_WINDOW_HIDDEN	includes/raylib.h	/^    FLAG_WINDOW_HIDDEN      = 0x00000080,   \/\/ Set to hide window$/;"	e	enum:__anonce11f6a40203
FLAG_WINDOW_HIGHDPI	includes/raylib.h	/^    FLAG_WINDOW_HIGHDPI     = 0x00002000,   \/\/ Set to support HighDPI$/;"	e	enum:__anonce11f6a40203
FLAG_WINDOW_MAXIMIZED	includes/raylib.h	/^    FLAG_WINDOW_MAXIMIZED   = 0x00000400,   \/\/ Set to maximize window (expanded to monitor)$/;"	e	enum:__anonce11f6a40203
FLAG_WINDOW_MINIMIZED	includes/raylib.h	/^    FLAG_WINDOW_MINIMIZED   = 0x00000200,   \/\/ Set to minimize window (iconify)$/;"	e	enum:__anonce11f6a40203
FLAG_WINDOW_MOUSE_PASSTHROUGH	includes/raylib.h	/^    FLAG_WINDOW_MOUSE_PASSTHROUGH = 0x00004000, \/\/ Set to support mouse passthrough, only supp/;"	e	enum:__anonce11f6a40203
FLAG_WINDOW_RESIZABLE	includes/raylib.h	/^    FLAG_WINDOW_RESIZABLE   = 0x00000004,   \/\/ Set to allow resizable window$/;"	e	enum:__anonce11f6a40203
FLAG_WINDOW_TOPMOST	includes/raylib.h	/^    FLAG_WINDOW_TOPMOST     = 0x00001000,   \/\/ Set to window always on top$/;"	e	enum:__anonce11f6a40203
FLAG_WINDOW_TRANSPARENT	includes/raylib.h	/^    FLAG_WINDOW_TRANSPARENT = 0x00000010,   \/\/ Set to allow transparent framebuffer$/;"	e	enum:__anonce11f6a40203
FLAG_WINDOW_UNDECORATED	includes/raylib.h	/^    FLAG_WINDOW_UNDECORATED = 0x00000008,   \/\/ Set to disable window decoration (frame and but/;"	e	enum:__anonce11f6a40203
FLAG_WINDOW_UNFOCUSED	includes/raylib.h	/^    FLAG_WINDOW_UNFOCUSED   = 0x00000800,   \/\/ Set to window non focused$/;"	e	enum:__anonce11f6a40203
FLOCK_HPP	includes/classes/Flock.hpp	/^# define FLOCK_HPP$/;"	d
FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA	imgui_draw.cpp	/^static const ImVec2 FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA[ImGuiMouseCursor_COUNT][3] =$/;"	v	typeref:typename:const ImVec2[][3]	file:
FONT_ATLAS_DEFAULT_TEX_DATA_H	imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_H = 27;$/;"	v	typeref:typename:const int
FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS	imgui_draw.cpp	/^static const char FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS[FONT_ATLAS_DEFAULT_TEX_DATA_W * FONT_ATLAS_/;"	v	typeref:typename:const char[]	file:
FONT_ATLAS_DEFAULT_TEX_DATA_W	imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_W = 122; \/\/ Actual texture will be 2 times that + 1 spac/;"	v	typeref:typename:const int
FONT_AWESOME_ICON_SIZE	includes/rlImGui.h	/^#define FONT_AWESOME_ICON_SIZE /;"	d
FONT_BITMAP	includes/raylib.h	/^    FONT_BITMAP,                    \/\/ Bitmap font generation, no anti-aliasing$/;"	e	enum:__anonce11f6a41103
FONT_DEFAULT	includes/raylib.h	/^    FONT_DEFAULT = 0,               \/\/ Default font generation, anti-aliased$/;"	e	enum:__anonce11f6a41103
FONT_ICON_FILE_NAME_FAR	includes/extras/IconsFontAwesome6.h	/^#define FONT_ICON_FILE_NAME_FAR /;"	d
FONT_ICON_FILE_NAME_FAS	includes/extras/IconsFontAwesome6.h	/^#define FONT_ICON_FILE_NAME_FAS /;"	d
FONT_SDF	includes/raylib.h	/^    FONT_SDF                        \/\/ SDF font generation, requires external shader$/;"	e	enum:__anonce11f6a41103
FallbackAdvanceX	includes/imgui.h	/^    float                       FallbackAdvanceX;   \/\/ 4     \/\/ out \/\/ = FallbackGlyph->Ad/;"	m	struct:ImFont	typeref:typename:float
FallbackChar	includes/imgui.h	/^    ImWchar                     FallbackChar;       \/\/ 2-4   \/\/ out \/\/ = FFFD\/'?' \/\/ Ch/;"	m	struct:ImFont	typeref:typename:ImWchar
FallbackGlyph	includes/imgui.h	/^    const ImFontGlyph*          FallbackGlyph;      \/\/ 4-8   \/\/ out \/\/ = FindGlyph(FontFal/;"	m	struct:ImFont	typeref:typename:const ImFontGlyph *
FilePathList	includes/raylib.h	/^typedef struct FilePathList {$/;"	s
FilePathList	includes/raylib.h	/^} FilePathList;$/;"	t	typeref:struct:FilePathList
Filter	imgui_demo.cpp	/^    ImGuiTextFilter       Filter;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImGuiTextFilter	file:
Filter	imgui_demo.cpp	/^    ImGuiTextFilter     Filter;$/;"	m	struct:ExampleAppLog	typeref:typename:ImGuiTextFilter	file:
Filter	imgui_demo.cpp	/^    ImGuiTextFilter     Filter;$/;"	m	struct:ExampleAppPropertyEditor	typeref:typename:ImGuiTextFilter	file:
FilterCasingSwap	imgui_demo.cpp	/^                static int FilterCasingSwap(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::TextFilters	typeref:typename:int	file:
FilterImGuiLetters	imgui_demo.cpp	/^                static int FilterImGuiLetters(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::TextFilters	typeref:typename:int	file:
Filters	includes/imgui.h	/^    ImVector<ImGuiTextRange>Filters;$/;"	m	struct:ImGuiTextFilter	typeref:typename:ImVector<ImGuiTextRange>
FindBestWheelingWindow	imgui.cpp	/^static ImGuiWindow* FindBestWheelingWindow(const ImVec2& wheel)$/;"	f	typeref:typename:ImGuiWindow *	file:
FindBestWindowPosForPopup	imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopup(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImVec2
FindBestWindowPosForPopupEx	imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopupEx(const ImVec2& ref_pos, const ImVec2& size, ImGuiDir* l/;"	f	class:ImGui	typeref:typename:ImVec2
FindBlockingModal	imgui.cpp	/^ImGuiWindow* ImGui::FindBlockingModal(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindBottomMostVisibleWindowWithinBeginStack	imgui.cpp	/^ImGuiWindow* ImGui::FindBottomMostVisibleWindowWithinBeginStack(ImGuiWindow* parent_window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindFirstExistingGlyph	imgui_draw.cpp	/^static ImWchar FindFirstExistingGlyph(ImFont* font, const ImWchar* candidate_chars, int candidat/;"	f	typeref:typename:ImWchar	file:
FindGlyph	imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyph(ImWchar c)$/;"	f	class:ImFont	typeref:typename:const ImFontGlyph *
FindGlyphNoFallback	imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyphNoFallback(ImWchar c)$/;"	f	class:ImFont	typeref:typename:const ImFontGlyph *
FindHoveredWindowEx	imgui.cpp	/^void ImGui::FindHoveredWindowEx(const ImVec2& pos, bool find_first_and_in_any_viewport, ImGuiWin/;"	f	class:ImGui	typeref:typename:void
FindLatestInputEvent	imgui.cpp	/^static ImGuiInputEvent* FindLatestInputEvent(ImGuiContext* ctx, ImGuiInputEventType type, int ar/;"	f	typeref:typename:ImGuiInputEvent *	file:
FindOrCreateColumns	imgui_tables.cpp	/^ImGuiOldColumns* ImGui::FindOrCreateColumns(ImGuiWindow* window, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiOldColumns *
FindRenderedTextEnd	imgui.cpp	/^const char* ImGui::FindRenderedTextEnd(const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:const char *
FindSettingsHandler	imgui.cpp	/^ImGuiSettingsHandler* ImGui::FindSettingsHandler(const char* type_name)$/;"	f	class:ImGui	typeref:typename:ImGuiSettingsHandler *
FindWindowByID	imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindWindowByName	imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByName(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindWindowDisplayIndex	imgui.cpp	/^int ImGui::FindWindowDisplayIndex(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:int
FindWindowFocusIndex	imgui.cpp	/^static int ImGui::FindWindowFocusIndex(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:int	file:
FindWindowNavFocusable	imgui.cpp	/^static ImGuiWindow* FindWindowNavFocusable(int i_start, int i_stop, int dir) \/\/ FIXME-OPT O(N)$/;"	f	typeref:typename:ImGuiWindow *	file:
FindWindowSettingsByID	imgui.cpp	/^ImGuiWindowSettings* ImGui::FindWindowSettingsByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
FindWindowSettingsByWindow	imgui.cpp	/^ImGuiWindowSettings* ImGui::FindWindowSettingsByWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
FixRectCornerFlags	imgui_draw.cpp	/^static inline ImDrawFlags FixRectCornerFlags(ImDrawFlags flags)$/;"	f	typeref:typename:ImDrawFlags	file:
FixupKeyChord	imgui.cpp	/^ImGuiKeyChord ImGui::FixupKeyChord(ImGuiKeyChord key_chord)$/;"	f	class:ImGui	typeref:typename:ImGuiKeyChord
Flags	includes/imgui.h	/^    ImDrawListFlags         Flags;              \/\/ Flags, you may poke into these to adjust an/;"	m	struct:ImDrawList	typeref:typename:ImDrawListFlags
Flags	includes/imgui.h	/^    ImFontAtlasFlags            Flags;              \/\/ Build flags (see ImFontAtlasFlags_)$/;"	m	struct:ImFontAtlas	typeref:typename:ImFontAtlasFlags
Flags	includes/imgui.h	/^    ImGuiInputTextFlags Flags;          \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiInputTextFlags
Flags	includes/imgui.h	/^    ImGuiViewportFlags  Flags;                  \/\/ See ImGuiViewportFlags_$/;"	m	struct:ImGuiViewport	typeref:typename:ImGuiViewportFlags
Flags	includes/imgui_internal.h	/^    ImGuiInputTextFlags     Flags;                  \/\/ copy of InputText() flags. may be used /;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiInputTextFlags
Flags	includes/imgui_internal.h	/^    ImGuiMultiSelectFlags   Flags;$/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:ImGuiMultiSelectFlags
Flags	includes/imgui_internal.h	/^    ImGuiNextWindowDataFlags    Flags;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiNextWindowDataFlags
Flags	includes/imgui_internal.h	/^    ImGuiOldColumnFlags Flags;                  \/\/ Not exposed$/;"	m	struct:ImGuiOldColumnData	typeref:typename:ImGuiOldColumnFlags
Flags	includes/imgui_internal.h	/^    ImGuiOldColumnFlags Flags;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImGuiOldColumnFlags
Flags	includes/imgui_internal.h	/^    ImGuiTabBarFlags    Flags;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiTabBarFlags
Flags	includes/imgui_internal.h	/^    ImGuiTabItemFlags   Flags;$/;"	m	struct:ImGuiTabItem	typeref:typename:ImGuiTabItemFlags
Flags	includes/imgui_internal.h	/^    ImGuiTableColumnFlags   Flags;                          \/\/ Flags after some patching (not /;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnFlags
Flags	includes/imgui_internal.h	/^    ImGuiTableFlags             Flags;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableFlags
Flags	includes/imgui_internal.h	/^    ImGuiTypingSelectFlags  Flags;              \/\/ Flags passed to GetTypingSelectRequest()$/;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:ImGuiTypingSelectFlags
Flags	includes/imgui_internal.h	/^    ImGuiWindowFlags        Flags;                              \/\/ See enum ImGuiWindowFlags_$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindowFlags
FlattenDrawDataIntoSingleLayer	imgui.cpp	/^static void FlattenDrawDataIntoSingleLayer(ImDrawDataBuilder* builder)$/;"	f	typeref:typename:void	file:
FlipNodeList	imgui_draw.cpp	/^void ImTriangulator::FlipNodeList()$/;"	f	class:ImTriangulator	typeref:typename:void
FloatEquals	includes/raymath.h	/^RMAPI int FloatEquals(float x, float y)$/;"	f	typeref:typename:RMAPI int
Flock	includes/classes/Flock.hpp	/^class Flock$/;"	c
Flock	srcs/classes/Flock.cpp	/^Flock::Flock()$/;"	f	class:Flock
Floor	includes/imgui_internal.h	/^    void        Floor()                             { Min.x = IM_TRUNC(Min.x); Min.y = IM_TRUNC(/;"	f	struct:ImRect	typeref:typename:void
FocusItem	imgui.cpp	/^void ImGui::FocusItem()$/;"	f	class:ImGui	typeref:typename:void
FocusOrder	includes/imgui_internal.h	/^    short                   FocusOrder;                         \/\/ Order within WindowsFocusOr/;"	m	struct:ImGuiWindow	typeref:typename:short
FocusScope	includes/imgui_internal.h	/^    ImGuiID         FocusScope;$/;"	m	struct:ImGuiTypingSelectState	typeref:typename:ImGuiID
FocusScopeId	includes/imgui_internal.h	/^    ImGuiID                     FocusScopeId;       \/\/ Set by SetNextItemSelectionUserData()$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiID
FocusScopeId	includes/imgui_internal.h	/^    ImGuiID                 FocusScopeId;       \/\/ Copied from g.CurrentFocusScopeId (unless a/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:ImGuiID
FocusScopeId	includes/imgui_internal.h	/^    ImGuiID             FocusScopeId;   \/\/ Init,Move    \/\/ Best candidate focus scope ID$/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiID
FocusScopeStack	includes/imgui_internal.h	/^    ImVector<ImGuiFocusScopeData>   FocusScopeStack;            \/\/ Stack for PushFocusScope()\//;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiFocusScopeData>
FocusTopMostWindowUnderOne	imgui.cpp	/^void ImGui::FocusTopMostWindowUnderOne(ImGuiWindow* under_this_window, ImGuiWindow* ignore_windo/;"	f	class:ImGui	typeref:typename:void
FocusWindow	imgui.cpp	/^void ImGui::FocusWindow(ImGuiWindow* window, ImGuiFocusRequestFlags flags)$/;"	f	class:ImGui	typeref:typename:void
Focused	includes/imgui_internal.h	/^struct ImGuiInputEventAppFocused    { bool Focused; };$/;"	m	struct:ImGuiInputEventAppFocused	typeref:typename:bool
Font	includes/imgui.h	/^    ImFont*         Font;           \/\/ Input    \/\/ For custom font glyphs only: target font$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:ImFont *
Font	includes/imgui_internal.h	/^    ImFont*                 Font;                               \/\/ (Shortcut) == FontStack.emp/;"	m	struct:ImGuiContext	typeref:typename:ImFont *
Font	includes/imgui_internal.h	/^    ImFont*         Font;                       \/\/ Current\/default font (optional, for simpli/;"	m	struct:ImDrawListSharedData	typeref:typename:ImFont *
Font	includes/raylib.h	/^typedef struct Font {$/;"	s
Font	includes/raylib.h	/^} Font;$/;"	t	typeref:struct:Font
FontAllowUserScaling	includes/imgui.h	/^    bool        FontAllowUserScaling;           \/\/ = false          \/\/ [OBSOLETE] Allow user/;"	m	struct:ImGuiIO	typeref:typename:bool
FontAtlasOwnedByContext	includes/imgui_internal.h	/^    bool                    FontAtlasOwnedByContext;            \/\/ IO.Fonts-> is owned by the /;"	m	struct:ImGuiContext	typeref:typename:bool
FontBaseSize	includes/imgui_internal.h	/^    float                   FontBaseSize;                       \/\/ (Shortcut) == IO.FontGlobal/;"	m	struct:ImGuiContext	typeref:typename:float
FontBuilderFlags	includes/imgui.h	/^    unsigned int                FontBuilderFlags;   \/\/ Shared flags (for all fonts) for custom/;"	m	struct:ImFontAtlas	typeref:typename:unsigned int
FontBuilderFlags	includes/imgui.h	/^    unsigned int    FontBuilderFlags;       \/\/ 0        \/\/ Settings for custom font builder./;"	m	struct:ImFontConfig	typeref:typename:unsigned int
FontBuilderIO	includes/imgui.h	/^    const ImFontBuilderIO*      FontBuilderIO;      \/\/ Opaque interface to a font builder (def/;"	m	struct:ImFontAtlas	typeref:typename:const ImFontBuilderIO *
FontBuilder_Build	includes/imgui_internal.h	/^    bool    (*FontBuilder_Build)(ImFontAtlas* atlas);$/;"	m	struct:ImFontBuilderIO	typeref:typename:bool (*)(ImFontAtlas * atlas)
FontData	includes/imgui.h	/^    void*           FontData;               \/\/          \/\/ TTF\/OTF data$/;"	m	struct:ImFontConfig	typeref:typename:void *
FontDataOwnedByAtlas	includes/imgui.h	/^    bool            FontDataOwnedByAtlas;   \/\/ true     \/\/ TTF\/OTF data ownership taken by /;"	m	struct:ImFontConfig	typeref:typename:bool
FontDataSize	includes/imgui.h	/^    int             FontDataSize;           \/\/          \/\/ TTF\/OTF data size$/;"	m	struct:ImFontConfig	typeref:typename:int
FontDefault	includes/imgui.h	/^    ImFont*     FontDefault;                    \/\/ = NULL           \/\/ Font to use on NewFra/;"	m	struct:ImGuiIO	typeref:typename:ImFont *
FontGlobalScale	includes/imgui.h	/^    float       FontGlobalScale;                \/\/ = 1.0f           \/\/ Global scale all font/;"	m	struct:ImGuiIO	typeref:typename:float
FontInfo	imgui_draw.cpp	/^    stbtt_fontinfo      FontInfo;$/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_fontinfo	file:
FontNo	includes/imgui.h	/^    int             FontNo;                 \/\/ 0        \/\/ Index of font within TTF\/OTF fil/;"	m	struct:ImFontConfig	typeref:typename:int
FontRefSize	includes/imgui_internal.h	/^    float                   FontRefSize;                        \/\/ This is a copy of window->C/;"	m	struct:ImGuiWindow	typeref:typename:float
FontScale	includes/imgui_internal.h	/^    float                   FontScale;                          \/\/ == FontSize \/ Font->FontSi/;"	m	struct:ImGuiContext	typeref:typename:float
FontScale	includes/imgui_internal.h	/^    float           FontScale;                  \/\/ Current\/default font scale (== FontSize \//;"	m	struct:ImDrawListSharedData	typeref:typename:float
FontSize	includes/imgui.h	/^    float                       FontSize;           \/\/ 4     \/\/ in  \/\/            \/\/ Hei/;"	m	struct:ImFont	typeref:typename:float
FontSize	includes/imgui_internal.h	/^    float                   FontSize;                           \/\/ (Shortcut) == FontBaseSize /;"	m	struct:ImGuiContext	typeref:typename:float
FontSize	includes/imgui_internal.h	/^    float           FontSize;                   \/\/ Current\/default font size (optional, for s/;"	m	struct:ImDrawListSharedData	typeref:typename:float
FontStack	includes/imgui_internal.h	/^    ImVector<ImFont*>               FontStack;                  \/\/ Stack for PushFont()\/PopFo/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImFont * >
FontType	includes/raylib.h	/^} FontType;$/;"	t	typeref:enum:__anonce11f6a41103
FontWindowScale	includes/imgui_internal.h	/^    float                   FontWindowScale;                    \/\/ User scale multiplier per-w/;"	m	struct:ImGuiWindow	typeref:typename:float
FontWindowScaleParents	includes/imgui_internal.h	/^    float                   FontWindowScaleParents;$/;"	m	struct:ImGuiWindow	typeref:typename:float
Fonts	includes/imgui.h	/^    ImFontAtlas*Fonts;                          \/\/ <auto>           \/\/ Font atlas: load, ras/;"	m	struct:ImGuiIO	typeref:typename:ImFontAtlas *
Fonts	includes/imgui.h	/^    ImVector<ImFont*>           Fonts;              \/\/ Hold all the fonts returned by AddFont*/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFont * >
ForceDisplayRangeByIndices	includes/imgui.h	/^    inline void ForceDisplayRangeByIndices(int item_begin, int item_end) { IncludeItemsByIndex(i/;"	f	struct:ImGuiListClipper	typeref:typename:void
FormatTextureIDForDebugDisplay	imgui.cpp	/^static const char* FormatTextureIDForDebugDisplay(char* buf, int buf_size, ImTextureID tex_id)$/;"	f	typeref:typename:const char *	file:
FrameBorderSize	includes/imgui.h	/^    float       FrameBorderSize;            \/\/ Thickness of border around frames. Generally se/;"	m	struct:ImGuiStyle	typeref:typename:float
FrameCount	includes/imgui_internal.h	/^    int                     FrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameCount	includes/imgui_internal.h	/^    int         FrameCount;$/;"	m	struct:ImGuiDebugAllocEntry	typeref:typename:int
FrameCountEnded	includes/imgui_internal.h	/^    int                     FrameCountEnded;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameCountRendered	includes/imgui_internal.h	/^    int                     FrameCountRendered;$/;"	m	struct:ImGuiContext	typeref:typename:int
FramePadding	includes/imgui.h	/^    ImVec2      FramePadding;               \/\/ Padding within a framed rectangle (used by most/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
FramePadding	includes/imgui_internal.h	/^    ImVec2              FramePadding;           \/\/ style.FramePadding locked at the time of Be/;"	m	struct:ImGuiTabBar	typeref:typename:ImVec2
FrameRounding	includes/imgui.h	/^    float       FrameRounding;              \/\/ Radius of frame corners rounding. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
FramebufferScale	includes/imgui.h	/^    ImVec2              FramebufferScale;   \/\/ Amount of pixels for each unit of DisplaySize. /;"	m	struct:ImDrawData	typeref:typename:ImVec2
Framerate	includes/imgui.h	/^    float       Framerate;                          \/\/ Estimate of application framerate (roll/;"	m	struct:ImGuiIO	typeref:typename:float
FramerateSecPerFrame	includes/imgui_internal.h	/^    float                   FramerateSecPerFrame[60];           \/\/ Calculate estimate of frame/;"	m	struct:ImGuiContext	typeref:typename:float[60]
FramerateSecPerFrameAccum	includes/imgui_internal.h	/^    float                   FramerateSecPerFrameAccum;$/;"	m	struct:ImGuiContext	typeref:typename:float
FramerateSecPerFrameCount	includes/imgui_internal.h	/^    int                     FramerateSecPerFrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
FramerateSecPerFrameIdx	includes/imgui_internal.h	/^    int                     FramerateSecPerFrameIdx;$/;"	m	struct:ImGuiContext	typeref:typename:int
FreeCount	includes/imgui_internal.h	/^    ImS16       FreeCount;$/;"	m	struct:ImGuiDebugAllocEntry	typeref:typename:ImS16
FreeIdx	includes/imgui_internal.h	/^    ImPoolIdx       FreeIdx;    \/\/ Next free idx to use$/;"	m	struct:ImPool	typeref:typename:ImPoolIdx
FreeWrapper	imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); IM_UNUSED(/;"	f	typeref:typename:void	file:
FreeWrapper	imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); free(ptr);/;"	f	typeref:typename:void	file:
FreezeColumnsCount	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeColumnsCount;         \/\/ Actual frozen columns count (==/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FreezeColumnsRequest	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeColumnsRequest;       \/\/ Requested frozen columns count$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FreezeRowsCount	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeRowsCount;            \/\/ Actual frozen row count (== Fre/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FreezeRowsRequest	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeRowsRequest;          \/\/ Requested frozen rows count$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FromIndices	includes/imgui_internal.h	/^    static ImGuiListClipperRange    FromIndices(int min, int max)                               /;"	f	struct:ImGuiListClipperRange	typeref:typename:ImGuiListClipperRange
FromPositions	includes/imgui_internal.h	/^    static ImGuiListClipperRange    FromPositions(float y1, float y2, int off_min, int off_max) /;"	f	struct:ImGuiListClipperRange	typeref:typename:ImGuiListClipperRange
Func	imgui.cpp	/^            struct Func { static int IMGUI_CDECL WindowComparerByBeginOrder(const void* lhs, con/;"	s	function:ImGui::ShowMetricsWindow	file:
Funcs	imgui.cpp	/^    struct Funcs$/;"	s	function:ImGui::ShowMetricsWindow	file:
Funcs	imgui_demo.cpp	/^            struct Funcs$/;"	s	function:ShowDemoWindowWidgets	file:
Funcs	imgui_demo.cpp	/^        struct Funcs$/;"	s	function:ShowDemoWindowWidgets	file:
GAMEPAD_AXIS_LEFT_TRIGGER	includes/raylib.h	/^    GAMEPAD_AXIS_LEFT_TRIGGER  = 4,     \/\/ Gamepad back trigger left, pressure level: [1..-1]$/;"	e	enum:__anonce11f6a40803
GAMEPAD_AXIS_LEFT_X	includes/raylib.h	/^    GAMEPAD_AXIS_LEFT_X        = 0,     \/\/ Gamepad left stick X axis$/;"	e	enum:__anonce11f6a40803
GAMEPAD_AXIS_LEFT_Y	includes/raylib.h	/^    GAMEPAD_AXIS_LEFT_Y        = 1,     \/\/ Gamepad left stick Y axis$/;"	e	enum:__anonce11f6a40803
GAMEPAD_AXIS_RIGHT_TRIGGER	includes/raylib.h	/^    GAMEPAD_AXIS_RIGHT_TRIGGER = 5      \/\/ Gamepad back trigger right, pressure level: [1..-1]$/;"	e	enum:__anonce11f6a40803
GAMEPAD_AXIS_RIGHT_X	includes/raylib.h	/^    GAMEPAD_AXIS_RIGHT_X       = 2,     \/\/ Gamepad right stick X axis$/;"	e	enum:__anonce11f6a40803
GAMEPAD_AXIS_RIGHT_Y	includes/raylib.h	/^    GAMEPAD_AXIS_RIGHT_Y       = 3,     \/\/ Gamepad right stick Y axis$/;"	e	enum:__anonce11f6a40803
GAMEPAD_BUTTON_LEFT_FACE_DOWN	includes/raylib.h	/^    GAMEPAD_BUTTON_LEFT_FACE_DOWN,      \/\/ Gamepad left DPAD down button$/;"	e	enum:__anonce11f6a40703
GAMEPAD_BUTTON_LEFT_FACE_LEFT	includes/raylib.h	/^    GAMEPAD_BUTTON_LEFT_FACE_LEFT,      \/\/ Gamepad left DPAD left button$/;"	e	enum:__anonce11f6a40703
GAMEPAD_BUTTON_LEFT_FACE_RIGHT	includes/raylib.h	/^    GAMEPAD_BUTTON_LEFT_FACE_RIGHT,     \/\/ Gamepad left DPAD right button$/;"	e	enum:__anonce11f6a40703
GAMEPAD_BUTTON_LEFT_FACE_UP	includes/raylib.h	/^    GAMEPAD_BUTTON_LEFT_FACE_UP,        \/\/ Gamepad left DPAD up button$/;"	e	enum:__anonce11f6a40703
GAMEPAD_BUTTON_LEFT_THUMB	includes/raylib.h	/^    GAMEPAD_BUTTON_LEFT_THUMB,          \/\/ Gamepad joystick pressed button left$/;"	e	enum:__anonce11f6a40703
GAMEPAD_BUTTON_LEFT_TRIGGER_1	includes/raylib.h	/^    GAMEPAD_BUTTON_LEFT_TRIGGER_1,      \/\/ Gamepad top\/back trigger left (first), it could be/;"	e	enum:__anonce11f6a40703
GAMEPAD_BUTTON_LEFT_TRIGGER_2	includes/raylib.h	/^    GAMEPAD_BUTTON_LEFT_TRIGGER_2,      \/\/ Gamepad top\/back trigger left (second), it could b/;"	e	enum:__anonce11f6a40703
GAMEPAD_BUTTON_MIDDLE	includes/raylib.h	/^    GAMEPAD_BUTTON_MIDDLE,              \/\/ Gamepad center buttons, middle one (i.e. PS3: PS, X/;"	e	enum:__anonce11f6a40703
GAMEPAD_BUTTON_MIDDLE_LEFT	includes/raylib.h	/^    GAMEPAD_BUTTON_MIDDLE_LEFT,         \/\/ Gamepad center buttons, left one (i.e. PS3: Select)$/;"	e	enum:__anonce11f6a40703
GAMEPAD_BUTTON_MIDDLE_RIGHT	includes/raylib.h	/^    GAMEPAD_BUTTON_MIDDLE_RIGHT,        \/\/ Gamepad center buttons, right one (i.e. PS3: Start)$/;"	e	enum:__anonce11f6a40703
GAMEPAD_BUTTON_RIGHT_FACE_DOWN	includes/raylib.h	/^    GAMEPAD_BUTTON_RIGHT_FACE_DOWN,     \/\/ Gamepad right button down (i.e. PS3: Cross, Xbox: A/;"	e	enum:__anonce11f6a40703
GAMEPAD_BUTTON_RIGHT_FACE_LEFT	includes/raylib.h	/^    GAMEPAD_BUTTON_RIGHT_FACE_LEFT,     \/\/ Gamepad right button left (i.e. PS3: Square, Xbox: /;"	e	enum:__anonce11f6a40703
GAMEPAD_BUTTON_RIGHT_FACE_RIGHT	includes/raylib.h	/^    GAMEPAD_BUTTON_RIGHT_FACE_RIGHT,    \/\/ Gamepad right button right (i.e. PS3: Circle, Xbox:/;"	e	enum:__anonce11f6a40703
GAMEPAD_BUTTON_RIGHT_FACE_UP	includes/raylib.h	/^    GAMEPAD_BUTTON_RIGHT_FACE_UP,       \/\/ Gamepad right button up (i.e. PS3: Triangle, Xbox: /;"	e	enum:__anonce11f6a40703
GAMEPAD_BUTTON_RIGHT_THUMB	includes/raylib.h	/^    GAMEPAD_BUTTON_RIGHT_THUMB          \/\/ Gamepad joystick pressed button right$/;"	e	enum:__anonce11f6a40703
GAMEPAD_BUTTON_RIGHT_TRIGGER_1	includes/raylib.h	/^    GAMEPAD_BUTTON_RIGHT_TRIGGER_1,     \/\/ Gamepad top\/back trigger right (first), it could b/;"	e	enum:__anonce11f6a40703
GAMEPAD_BUTTON_RIGHT_TRIGGER_2	includes/raylib.h	/^    GAMEPAD_BUTTON_RIGHT_TRIGGER_2,     \/\/ Gamepad top\/back trigger right (second), it could /;"	e	enum:__anonce11f6a40703
GAMEPAD_BUTTON_UNKNOWN	includes/raylib.h	/^    GAMEPAD_BUTTON_UNKNOWN = 0,         \/\/ Unknown button, just for error checking$/;"	e	enum:__anonce11f6a40703
GAME_HPP	includes/game.hpp	/^# define GAME_HPP$/;"	d
GCrc32LookupTable	imgui.cpp	/^static const ImU32 GCrc32LookupTable[256] =$/;"	v	typeref:typename:const ImU32[256]	file:
GDataTypeInfo	imgui_widgets.cpp	/^static const ImGuiDataTypeInfo GDataTypeInfo[] =$/;"	v	typeref:typename:const ImGuiDataTypeInfo[]	file:
GESTURE_DOUBLETAP	includes/raylib.h	/^    GESTURE_DOUBLETAP   = 2,        \/\/ Double tap gesture$/;"	e	enum:__anonce11f6a41303
GESTURE_DRAG	includes/raylib.h	/^    GESTURE_DRAG        = 8,        \/\/ Drag gesture$/;"	e	enum:__anonce11f6a41303
GESTURE_HOLD	includes/raylib.h	/^    GESTURE_HOLD        = 4,        \/\/ Hold gesture$/;"	e	enum:__anonce11f6a41303
GESTURE_NONE	includes/raylib.h	/^    GESTURE_NONE        = 0,        \/\/ No gesture$/;"	e	enum:__anonce11f6a41303
GESTURE_PINCH_IN	includes/raylib.h	/^    GESTURE_PINCH_IN    = 256,      \/\/ Pinch in gesture$/;"	e	enum:__anonce11f6a41303
GESTURE_PINCH_OUT	includes/raylib.h	/^    GESTURE_PINCH_OUT   = 512       \/\/ Pinch out gesture$/;"	e	enum:__anonce11f6a41303
GESTURE_SWIPE_DOWN	includes/raylib.h	/^    GESTURE_SWIPE_DOWN  = 128,      \/\/ Swipe down gesture$/;"	e	enum:__anonce11f6a41303
GESTURE_SWIPE_LEFT	includes/raylib.h	/^    GESTURE_SWIPE_LEFT  = 32,       \/\/ Swipe left gesture$/;"	e	enum:__anonce11f6a41303
GESTURE_SWIPE_RIGHT	includes/raylib.h	/^    GESTURE_SWIPE_RIGHT = 16,       \/\/ Swipe right gesture$/;"	e	enum:__anonce11f6a41303
GESTURE_SWIPE_UP	includes/raylib.h	/^    GESTURE_SWIPE_UP    = 64,       \/\/ Swipe up gesture$/;"	e	enum:__anonce11f6a41303
GESTURE_TAP	includes/raylib.h	/^    GESTURE_TAP         = 1,        \/\/ Tap gesture$/;"	e	enum:__anonce11f6a41303
GImAllocatorAllocFunc	imgui.cpp	/^static ImGuiMemAllocFunc    GImAllocatorAllocFunc = MallocWrapper;$/;"	v	typeref:typename:ImGuiMemAllocFunc	file:
GImAllocatorFreeFunc	imgui.cpp	/^static ImGuiMemFreeFunc     GImAllocatorFreeFunc = FreeWrapper;$/;"	v	typeref:typename:ImGuiMemFreeFunc	file:
GImAllocatorUserData	imgui.cpp	/^static void*                GImAllocatorUserData = NULL;$/;"	v	typeref:typename:void *	file:
GImGui	imgui.cpp	/^ImGuiContext*   GImGui = NULL;$/;"	v	typeref:typename:ImGuiContext *
GImGuiDemoMarkerCallback	imgui_demo.cpp	/^ImGuiDemoMarkerCallback             GImGuiDemoMarkerCallback = NULL;$/;"	v	typeref:typename:ImGuiDemoMarkerCallback
GImGuiDemoMarkerCallbackUserData	imgui_demo.cpp	/^void*                               GImGuiDemoMarkerCallbackUserData = NULL;$/;"	v	typeref:typename:void *
GKeyNames	imgui.cpp	/^static const char* const GKeyNames[] =$/;"	v	typeref:typename:const char * const[]	file:
GLAD_API_CALL_EXPORT	includes/rlgl.h	/^    #define GLAD_API_CALL_EXPORT$/;"	d
GLAD_API_CALL_EXPORT_BUILD	includes/rlgl.h	/^    #define GLAD_API_CALL_EXPORT_BUILD$/;"	d
GLAD_FREE	includes/rlgl.h	/^    #define GLAD_FREE /;"	d
GLAD_GLES2_IMPLEMENTATION	includes/rlgl.h	/^        #define GLAD_GLES2_IMPLEMENTATION$/;"	d
GLAD_GL_IMPLEMENTATION	includes/rlgl.h	/^    #define GLAD_GL_IMPLEMENTATION$/;"	d
GLAD_MALLOC	includes/rlgl.h	/^    #define GLAD_MALLOC /;"	d
GL_COMPRESSED_RGB8_ETC2	includes/rlgl.h	/^    #define GL_COMPRESSED_RGB8_ETC2 /;"	d
GL_COMPRESSED_RGBA8_ETC2_EAC	includes/rlgl.h	/^    #define GL_COMPRESSED_RGBA8_ETC2_EAC /;"	d
GL_COMPRESSED_RGBA_ASTC_4x4_KHR	includes/rlgl.h	/^    #define GL_COMPRESSED_RGBA_ASTC_4x4_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_8x8_KHR	includes/rlgl.h	/^    #define GL_COMPRESSED_RGBA_ASTC_8x8_KHR /;"	d
GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG	includes/rlgl.h	/^    #define GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG /;"	d
GL_COMPRESSED_RGBA_S3TC_DXT1_EXT	includes/rlgl.h	/^    #define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT /;"	d
GL_COMPRESSED_RGBA_S3TC_DXT3_EXT	includes/rlgl.h	/^    #define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT /;"	d
GL_COMPRESSED_RGBA_S3TC_DXT5_EXT	includes/rlgl.h	/^    #define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT /;"	d
GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG	includes/rlgl.h	/^    #define GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG /;"	d
GL_COMPRESSED_RGB_S3TC_DXT1_EXT	includes/rlgl.h	/^    #define GL_COMPRESSED_RGB_S3TC_DXT1_EXT /;"	d
GL_DRAW_FRAMEBUFFER	includes/rlgl.h	/^        #define GL_DRAW_FRAMEBUFFER /;"	d
GL_ETC1_RGB8_OES	includes/rlgl.h	/^    #define GL_ETC1_RGB8_OES /;"	d
GL_GLEXT_PROTOTYPES	includes/rlgl.h	/^        #define GL_GLEXT_PROTOTYPES$/;"	d
GL_GLEXT_PROTOTYPES	includes/rlgl.h	/^    #define GL_GLEXT_PROTOTYPES$/;"	d
GL_LINE_WIDTH	includes/rlgl.h	/^    #define GL_LINE_WIDTH /;"	d
GL_LUMINANCE	includes/rlgl.h	/^    #define GL_LUMINANCE /;"	d
GL_LUMINANCE_ALPHA	includes/rlgl.h	/^    #define GL_LUMINANCE_ALPHA /;"	d
GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT	includes/rlgl.h	/^        #define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT /;"	d
GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT	includes/rlgl.h	/^    #define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT /;"	d
GL_PROGRAM_POINT_SIZE	includes/rlgl.h	/^    #define GL_PROGRAM_POINT_SIZE /;"	d
GL_READ_FRAMEBUFFER	includes/rlgl.h	/^        #define GL_READ_FRAMEBUFFER /;"	d
GL_SHADING_LANGUAGE_VERSION	includes/rlgl.h	/^    #define GL_SHADING_LANGUAGE_VERSION /;"	d
GL_TEXTURE_MAX_ANISOTROPY_EXT	includes/rlgl.h	/^    #define GL_TEXTURE_MAX_ANISOTROPY_EXT /;"	d
GL_UNSIGNED_SHORT_4_4_4_4	includes/rlgl.h	/^    #define GL_UNSIGNED_SHORT_4_4_4_4 /;"	d
GL_UNSIGNED_SHORT_5_5_5_1	includes/rlgl.h	/^    #define GL_UNSIGNED_SHORT_5_5_5_1 /;"	d
GL_UNSIGNED_SHORT_5_6_5	includes/rlgl.h	/^    #define GL_UNSIGNED_SHORT_5_6_5 /;"	d
GLocalizationEntriesEnUS	imgui.cpp	/^static const ImGuiLocEntry GLocalizationEntriesEnUS[] =$/;"	v	typeref:typename:const ImGuiLocEntry[]	file:
GOLD	includes/raylib.h	/^#define GOLD /;"	d
GRAPHICS_API_OPENGL_33	includes/rlgl.h	/^        #define GRAPHICS_API_OPENGL_33$/;"	d
GRAPHICS_API_OPENGL_33	includes/rlgl.h	/^    #define GRAPHICS_API_OPENGL_33$/;"	d
GRAPHICS_API_OPENGL_ES2	includes/rlgl.h	/^    #define GRAPHICS_API_OPENGL_ES2$/;"	d
GRAY	includes/raylib.h	/^#define GRAY /;"	d
GREEN	includes/raylib.h	/^#define GREEN /;"	d
GStyleVarInfo	imgui.cpp	/^static const ImGuiDataVarInfo GStyleVarInfo[] =$/;"	v	typeref:typename:const ImGuiDataVarInfo[]	file:
GamepadAxis	includes/raylib.h	/^} GamepadAxis;$/;"	t	typeref:enum:__anonce11f6a40803
GamepadButton	includes/raylib.h	/^} GamepadButton;$/;"	t	typeref:enum:__anonce11f6a40703
GcAwakeTransientWindowBuffers	imgui.cpp	/^void ImGui::GcAwakeTransientWindowBuffers(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
GcCompactAll	includes/imgui_internal.h	/^    bool                    GcCompactAll;                       \/\/ Request full GC$/;"	m	struct:ImGuiContext	typeref:typename:bool
GcCompactTransientMiscBuffers	imgui.cpp	/^void ImGui::GcCompactTransientMiscBuffers()$/;"	f	class:ImGui	typeref:typename:void
GcCompactTransientWindowBuffers	imgui.cpp	/^void ImGui::GcCompactTransientWindowBuffers(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
Gesture	includes/raylib.h	/^} Gesture;$/;"	t	typeref:enum:__anonce11f6a41303
GetActiveID	includes/imgui_internal.h	/^    inline ImGuiID          GetActiveID()   { ImGuiContext& g = *GImGui; return g.ActiveId; }$/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetAliveCount	includes/imgui_internal.h	/^    int         GetAliveCount() const               { return AliveCount; }      \/\/ Number of a/;"	f	struct:ImPool	typeref:typename:int
GetAllocatorFunctions	imgui.cpp	/^void ImGui::GetAllocatorFunctions(ImGuiMemAllocFunc* p_alloc_func, ImGuiMemFreeFunc* p_free_func/;"	f	class:ImGui	typeref:typename:void
GetArea	includes/imgui_internal.h	/^    float       GetArea() const                     { return (Max.x - Min.x) * (Max.y - Min.y); /;"	f	struct:ImRect	typeref:typename:float
GetArenaSizeInBytes	includes/imgui_internal.h	/^    inline int   GetArenaSizeInBytes()              { return CurrOff; }$/;"	f	struct:ImSpanAllocator	typeref:typename:int
GetBL	includes/imgui_internal.h	/^    ImVec2      GetBL() const                       { return ImVec2(Min.x, Max.y); }  \/\/ Botto/;"	f	struct:ImRect	typeref:typename:ImVec2
GetBR	includes/imgui_internal.h	/^    ImVec2      GetBR() const                       { return Max; }                   \/\/ Botto/;"	f	struct:ImRect	typeref:typename:ImVec2
GetBackgroundDrawList	imgui.cpp	/^ImDrawList* ImGui::GetBackgroundDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetBackgroundDrawList	imgui.cpp	/^ImDrawList* ImGui::GetBackgroundDrawList(ImGuiViewport* viewport)$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetBit	includes/imgui.h	/^    inline bool     GetBit(size_t n) const  { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 3/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:bool
GetBool	imgui.cpp	/^bool ImGuiStorage::GetBool(ImGuiID key, bool default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:bool
GetBoolRef	imgui.cpp	/^bool* ImGuiStorage::GetBoolRef(ImGuiID key, bool default_val)$/;"	f	class:ImGuiStorage	typeref:typename:bool *
GetBoxSelectState	includes/imgui_internal.h	/^    inline ImGuiBoxSelectState*     GetBoxSelectState(ImGuiID id)   { ImGuiContext& g = *GImGui;/;"	f	namespace:ImGui	typeref:typename:ImGuiBoxSelectState *
GetBufSize	includes/imgui_internal.h	/^    int         GetBufSize() const                  { return Buf.Size; }$/;"	f	struct:ImPool	typeref:typename:int
GetBuildWorkRect	includes/imgui_internal.h	/^    ImRect  GetBuildWorkRect() const    { ImVec2 pos = CalcWorkRectPos(BuildWorkInsetMin); ImVec/;"	f	struct:ImGuiViewportP	typeref:typename:ImRect
GetByIndex	includes/imgui_internal.h	/^    T*          GetByIndex(ImPoolIdx n)             { return &Buf[n]; }$/;"	f	struct:ImPool	typeref:typename:T *
GetByKey	includes/imgui_internal.h	/^    T*          GetByKey(ImGuiID key)               { int idx = Map.GetInt(key, -1); return (idx/;"	f	struct:ImPool	typeref:typename:T *
GetCenter	includes/imgui.h	/^    ImVec2              GetCenter() const       { return ImVec2(Pos.x + Size.x * 0.5f, Pos.y + S/;"	f	struct:ImGuiViewport	typeref:typename:ImVec2
GetCenter	includes/imgui_internal.h	/^    ImVec2      GetCenter() const                   { return ImVec2((Min.x + Max.x) * 0.5f, (Min/;"	f	struct:ImRect	typeref:typename:ImVec2
GetCharAdvance	includes/imgui.h	/^    float                       GetCharAdvance(ImWchar c)           { return ((int)c < IndexAdva/;"	f	struct:ImFont	typeref:typename:float
GetClipRectMax	includes/imgui.h	/^    inline ImVec2   GetClipRectMax() const { const ImVec4& cr = _ClipRectStack.back(); return Im/;"	f	struct:ImDrawList	typeref:typename:ImVec2
GetClipRectMin	includes/imgui.h	/^    inline ImVec2   GetClipRectMin() const { const ImVec4& cr = _ClipRectStack.back(); return Im/;"	f	struct:ImDrawList	typeref:typename:ImVec2
GetClipTextCallback	rlImGui.cpp	/^static const char* GetClipTextCallback(ImGuiContext*)$/;"	f	typeref:typename:const char *	file:
GetClipboardText	imgui.cpp	/^const char* ImGui::GetClipboardText()$/;"	f	class:ImGui	typeref:typename:const char *
GetClipboardTextFn	includes/imgui.h	/^    const char* (*GetClipboardTextFn)(void* user_data);$/;"	m	struct:ImGuiIO	typeref:typename:const char * (*)(void * user_data)
GetColorU32	imgui.cpp	/^ImU32 ImGui::GetColorU32(ImGuiCol idx, float alpha_mul)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColorU32	imgui.cpp	/^ImU32 ImGui::GetColorU32(ImU32 col, float alpha_mul)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColorU32	imgui.cpp	/^ImU32 ImGui::GetColorU32(const ImVec4& col)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColumnIndex	imgui_tables.cpp	/^int ImGui::GetColumnIndex()$/;"	f	class:ImGui	typeref:typename:int
GetColumnNormFromOffset	imgui_tables.cpp	/^float ImGui::GetColumnNormFromOffset(const ImGuiOldColumns* columns, float offset)$/;"	f	class:ImGui	typeref:typename:float
GetColumnOffset	imgui_tables.cpp	/^float ImGui::GetColumnOffset(int column_index)$/;"	f	class:ImGui	typeref:typename:float
GetColumnOffsetFromNorm	imgui_tables.cpp	/^float ImGui::GetColumnOffsetFromNorm(const ImGuiOldColumns* columns, float offset_norm)$/;"	f	class:ImGui	typeref:typename:float
GetColumnSettings	includes/imgui_internal.h	/^    ImGuiTableColumnSettings*   GetColumnSettings()     { return (ImGuiTableColumnSettings*)(thi/;"	f	struct:ImGuiTableSettings	typeref:typename:ImGuiTableColumnSettings *
GetColumnWidth	imgui_tables.cpp	/^float ImGui::GetColumnWidth(int column_index)$/;"	f	class:ImGui	typeref:typename:float
GetColumnWidthEx	imgui_tables.cpp	/^static float GetColumnWidthEx(ImGuiOldColumns* columns, int column_index, bool before_resize = f/;"	f	typeref:typename:float	file:
GetColumnsCount	imgui_tables.cpp	/^int ImGui::GetColumnsCount()$/;"	f	class:ImGui	typeref:typename:int
GetColumnsID	imgui_tables.cpp	/^ImGuiID ImGui::GetColumnsID(const char* str_id, int columns_count)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetCombinedRootWindow	imgui.cpp	/^static ImGuiWindow* GetCombinedRootWindow(ImGuiWindow* window, bool popup_hierarchy)$/;"	f	typeref:typename:ImGuiWindow *	file:
GetContentRegionAvail	imgui.cpp	/^ImVec2 ImGui::GetContentRegionAvail()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetContentRegionMax	imgui.cpp	/^ImVec2 ImGui::GetContentRegionMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCurrentContext	imgui.cpp	/^ImGuiContext* ImGui::GetCurrentContext()$/;"	f	class:ImGui	typeref:typename:ImGuiContext *
GetCurrentFocusScope	includes/imgui_internal.h	/^    inline ImGuiID          GetCurrentFocusScope() { ImGuiContext& g = *GImGui; return g.Current/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetCurrentTabBar	includes/imgui_internal.h	/^    inline    ImGuiTabBar*  GetCurrentTabBar() { ImGuiContext& g = *GImGui; return g.CurrentTabB/;"	f	namespace:ImGui	typeref:typename:ImGuiTabBar *
GetCurrentTable	includes/imgui_internal.h	/^    inline    ImGuiTable*   GetCurrentTable() { ImGuiContext& g = *GImGui; return g.CurrentTable/;"	f	namespace:ImGui	typeref:typename:ImGuiTable *
GetCurrentWindow	includes/imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindow()          { ImGuiContext& g = *GImGui; g.CurrentWi/;"	f	namespace:ImGui	typeref:typename:ImGuiWindow *
GetCurrentWindowRead	includes/imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindowRead()      { ImGuiContext& g = *GImGui; return g.Cu/;"	f	namespace:ImGui	typeref:typename:ImGuiWindow *
GetCursorPos	imgui.cpp	/^ImVec2 ImGui::GetCursorPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCursorPos	imgui_widgets.cpp	/^int  ImGuiInputTextState::GetCursorPos() const              { return Stb->cursor; }$/;"	f	class:ImGuiInputTextState	typeref:typename:int
GetCursorPosX	imgui.cpp	/^float ImGui::GetCursorPosX()$/;"	f	class:ImGui	typeref:typename:float
GetCursorPosY	imgui.cpp	/^float ImGui::GetCursorPosY()$/;"	f	class:ImGui	typeref:typename:float
GetCursorScreenPos	imgui.cpp	/^ImVec2 ImGui::GetCursorScreenPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCursorStartPos	imgui.cpp	/^ImVec2 ImGui::GetCursorStartPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCustomRectByIndex	includes/imgui.h	/^    ImFontAtlasCustomRect*      GetCustomRectByIndex(int index) { IM_ASSERT(index >= 0); return /;"	f	struct:ImFontAtlas	typeref:typename:ImFontAtlasCustomRect *
GetDebugName	includes/imgui.h	/^    const char*                 GetDebugName() const                { return ConfigData ? Config/;"	f	struct:ImFont	typeref:typename:const char *
GetDefaultCompressedFontDataTTF	imgui_draw.cpp	/^static const char* GetDefaultCompressedFontDataTTF(int* out_size)$/;"	f	typeref:typename:const char *	file:
GetDefaultFont	includes/imgui_internal.h	/^    inline ImFont*          GetDefaultFont() { ImGuiContext& g = *GImGui; return g.IO.FontDefaul/;"	f	namespace:ImGui	typeref:typename:ImFont *
GetDragDropPayload	imgui.cpp	/^const ImGuiPayload* ImGui::GetDragDropPayload()$/;"	f	class:ImGui	typeref:typename:const ImGuiPayload *
GetDraggedColumnOffset	imgui_tables.cpp	/^static float GetDraggedColumnOffset(ImGuiOldColumns* columns, int column_index)$/;"	f	typeref:typename:float	file:
GetDrawData	imgui.cpp	/^ImDrawData* ImGui::GetDrawData()$/;"	f	class:ImGui	typeref:typename:ImDrawData *
GetDrawListSharedData	imgui.cpp	/^ImDrawListSharedData* ImGui::GetDrawListSharedData()$/;"	f	class:ImGui	typeref:typename:ImDrawListSharedData *
GetFallbackWindowNameForWindowingList	imgui.cpp	/^static const char* GetFallbackWindowNameForWindowingList(ImGuiWindow* window)$/;"	f	typeref:typename:const char *	file:
GetFloat	imgui.cpp	/^float ImGuiStorage::GetFloat(ImGuiID key, float default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:float
GetFloatRef	imgui.cpp	/^float* ImGuiStorage::GetFloatRef(ImGuiID key, float default_val)$/;"	f	class:ImGuiStorage	typeref:typename:float *
GetFocusID	includes/imgui_internal.h	/^    inline ImGuiID          GetFocusID()    { ImGuiContext& g = *GImGui; return g.NavId; }$/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetFont	imgui.cpp	/^ImFont* ImGui::GetFont()$/;"	f	class:ImGui	typeref:typename:ImFont *
GetFontSize	imgui.cpp	/^float ImGui::GetFontSize()$/;"	f	class:ImGui	typeref:typename:float
GetFontTexUvWhitePixel	imgui.cpp	/^ImVec2 ImGui::GetFontTexUvWhitePixel()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetForegroundDrawList	imgui.cpp	/^ImDrawList* ImGui::GetForegroundDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetForegroundDrawList	imgui.cpp	/^ImDrawList* ImGui::GetForegroundDrawList(ImGuiViewport* viewport)$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetForegroundDrawList	includes/imgui_internal.h	/^    inline ImDrawList*      GetForegroundDrawList(ImGuiWindow* window) { IM_UNUSED(window); retu/;"	f	namespace:ImGui	typeref:typename:ImDrawList *
GetFrameCount	imgui.cpp	/^int ImGui::GetFrameCount()$/;"	f	class:ImGui	typeref:typename:int
GetFrameHeight	imgui.cpp	/^float ImGui::GetFrameHeight()$/;"	f	class:ImGui	typeref:typename:float
GetFrameHeightWithSpacing	imgui.cpp	/^float ImGui::GetFrameHeightWithSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetGlyphRangesChineseFull	imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseFull()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesChineseSimplifiedCommon	imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesCyrillic	imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesCyrillic()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesDefault	imgui_draw.cpp	/^const ImWchar*   ImFontAtlas::GetGlyphRangesDefault()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesGreek	imgui_draw.cpp	/^const ImWchar*   ImFontAtlas::GetGlyphRangesGreek()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesJapanese	imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesJapanese()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesKorean	imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesKorean()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesThai	imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesThai()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesVietnamese	imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesVietnamese()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetHeight	includes/imgui_internal.h	/^    float       GetHeight() const                   { return Max.y - Min.y; }$/;"	f	struct:ImRect	typeref:typename:float
GetHoveredID	imgui.cpp	/^ImGuiID ImGui::GetHoveredID()$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	imgui.cpp	/^ImGuiID ImGui::GetID(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	imgui.cpp	/^ImGuiID ImGui::GetID(int int_id)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const char* str, const char* str_end)$/;"	f	class:ImGuiWindow	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF ImGuiID
GetID	imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const void* ptr)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetID	imgui.cpp	/^ImGuiID ImGuiWindow::GetID(int n)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDFromPos	imgui.cpp	/^ImGuiID ImGuiWindow::GetIDFromPos(const ImVec2& p_abs)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDFromRectangle	imgui.cpp	/^ImGuiID ImGuiWindow::GetIDFromRectangle(const ImRect& r_abs)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDWithSeed	imgui.cpp	/^ImGuiID ImGui::GetIDWithSeed(const char* str, const char* str_end, ImGuiID seed)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetIDWithSeed	imgui.cpp	/^ImGuiID ImGui::GetIDWithSeed(int n, ImGuiID seed)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetIO	imgui.cpp	/^ImGuiIO& ImGui::GetIO()$/;"	f	class:ImGui	typeref:typename:ImGuiIO &
GetIOEx	imgui.cpp	/^ImGuiIO& ImGui::GetIOEx(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:ImGuiIO &
GetIndex	includes/imgui_internal.h	/^    ImPoolIdx   GetIndex(const T* p) const          { IM_ASSERT(p >= Buf.Data && p < Buf.Data + /;"	f	struct:ImPool	typeref:typename:ImPoolIdx
GetInputSourceName	imgui.cpp	/^static const char* GetInputSourceName(ImGuiInputSource source)$/;"	f	typeref:typename:const char *	file:
GetInputTextState	includes/imgui_internal.h	/^    inline ImGuiInputTextState* GetInputTextState(ImGuiID id)   { ImGuiContext& g = *GImGui; ret/;"	f	namespace:ImGui	typeref:typename:ImGuiInputTextState *
GetInt	imgui.cpp	/^int ImGuiStorage::GetInt(ImGuiID key, int default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:int
GetIntRef	imgui.cpp	/^int* ImGuiStorage::GetIntRef(ImGuiID key, int default_val)$/;"	f	class:ImGuiStorage	typeref:typename:int *
GetItemFlags	includes/imgui_internal.h	/^    inline ImGuiItemFlags   GetItemFlags()  { ImGuiContext& g = *GImGui; return g.LastItemData.I/;"	f	namespace:ImGui	typeref:typename:ImGuiItemFlags
GetItemID	imgui.cpp	/^ImGuiID ImGui::GetItemID()$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetItemRectMax	imgui.cpp	/^ImVec2 ImGui::GetItemRectMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemRectMin	imgui.cpp	/^ImVec2 ImGui::GetItemRectMin()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemRectSize	imgui.cpp	/^ImVec2 ImGui::GetItemRectSize()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemStatusFlags	includes/imgui_internal.h	/^    inline ImGuiItemStatusFlags GetItemStatusFlags() { ImGuiContext& g = *GImGui; return g.LastI/;"	f	namespace:ImGui	typeref:typename:ImGuiItemStatusFlags
GetKeyChordName	imgui.cpp	/^const char* ImGui::GetKeyChordName(ImGuiKeyChord key_chord)$/;"	f	class:ImGui	typeref:typename:const char *
GetKeyData	imgui.cpp	/^ImGuiKeyData* ImGui::GetKeyData(ImGuiContext* ctx, ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:ImGuiKeyData *
GetKeyData	includes/imgui_internal.h	/^    inline ImGuiKeyData*    GetKeyData(ImGuiKey key)                                    { ImGuiC/;"	f	namespace:ImGui	typeref:typename:ImGuiKeyData *
GetKeyMagnitude2d	imgui.cpp	/^ImVec2 ImGui::GetKeyMagnitude2d(ImGuiKey key_left, ImGuiKey key_right, ImGuiKey key_up, ImGuiKey/;"	f	class:ImGui	typeref:typename:ImVec2
GetKeyName	imgui.cpp	/^const char* ImGui::GetKeyName(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:const char *
GetKeyOwner	imgui.cpp	/^ImGuiID ImGui::GetKeyOwner(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetKeyOwnerData	includes/imgui_internal.h	/^    inline ImGuiKeyOwnerData* GetKeyOwnerData(ImGuiContext* ctx, ImGuiKey key)          { if (ke/;"	f	namespace:ImGui	typeref:typename:ImGuiKeyOwnerData *
GetKeyPressedAmount	imgui.cpp	/^int ImGui::GetKeyPressedAmount(ImGuiKey key, float repeat_delay, float repeat_rate)$/;"	f	class:ImGui	typeref:typename:int
GetMainRect	includes/imgui_internal.h	/^    ImRect  GetMainRect() const         { return ImRect(Pos.x, Pos.y, Pos.x + Size.x, Pos.y + Si/;"	f	struct:ImGuiViewportP	typeref:typename:ImRect
GetMainViewport	imgui.cpp	/^ImGuiViewport* ImGui::GetMainViewport()$/;"	f	class:ImGui	typeref:typename:ImGuiViewport *
GetMapSize	includes/imgui_internal.h	/^    int         GetMapSize() const                  { return Map.Data.Size; }   \/\/ It is the m/;"	f	struct:ImPool	typeref:typename:int
GetMergedModsFromKeys	imgui.cpp	/^static ImGuiKeyChord GetMergedModsFromKeys()$/;"	f	typeref:typename:ImGuiKeyChord	file:
GetMinimumStepAtDecimalPrecision	imgui_widgets.cpp	/^static float GetMinimumStepAtDecimalPrecision(int decimal_precision)$/;"	f	typeref:typename:float	file:
GetModForLRModKey	imgui.cpp	/^static ImGuiKeyChord GetModForLRModKey(ImGuiKey key)$/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_RESTORE ImGuiKeyChord	file:
GetMouseClickedCount	imgui.cpp	/^int ImGui::GetMouseClickedCount(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:int
GetMouseCursor	imgui.cpp	/^ImGuiMouseCursor ImGui::GetMouseCursor()$/;"	f	class:ImGui	typeref:typename:ImGuiMouseCursor
GetMouseCursorTexData	imgui_draw.cpp	/^bool ImFontAtlas::GetMouseCursorTexData(ImGuiMouseCursor cursor_type, ImVec2* out_offset, ImVec2/;"	f	class:ImFontAtlas	typeref:typename:bool
GetMouseDragDelta	imgui.cpp	/^ImVec2 ImGui::GetMouseDragDelta(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMousePos	imgui.cpp	/^ImVec2 ImGui::GetMousePos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMousePosOnOpeningCurrentPopup	imgui.cpp	/^ImVec2 ImGui::GetMousePosOnOpeningCurrentPopup()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMouseRay	includes/raylib.h	/^#define GetMouseRay /;"	d
GetMouseSourceName	imgui.cpp	/^static const char* GetMouseSourceName(ImGuiMouseSource source)$/;"	f	typeref:typename:const char *	file:
GetMultiSelectState	includes/imgui_internal.h	/^    inline ImGuiMultiSelectState*   GetMultiSelectState(ImGuiID id) { ImGuiContext& g = *GImGui;/;"	f	namespace:ImGui	typeref:typename:ImGuiMultiSelectState *
GetName	includes/imgui_internal.h	/^    char* GetName()             { return (char*)(this + 1); }$/;"	f	struct:ImGuiWindowSettings	typeref:typename:char *
GetNavTweakPressedAmount	imgui.cpp	/^float ImGui::GetNavTweakPressedAmount(ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:float
GetNextSelectedItem	imgui_widgets.cpp	/^bool ImGuiSelectionBasicStorage::GetNextSelectedItem(void** opaque_it, ImGuiID* out_id)$/;"	f	class:ImGuiSelectionBasicStorage	typeref:typename:bool
GetNextTriangle	imgui_draw.cpp	/^void ImTriangulator::GetNextTriangle(unsigned int out_triangle[3])$/;"	f	class:ImTriangulator	typeref:typename:void
GetOrAddByKey	includes/imgui_internal.h	/^    T*          GetOrAddByKey(ImGuiID key)          { int* p_idx = Map.GetIntRef(key, -1); if (*/;"	f	struct:ImPool	typeref:typename:T *
GetPlatformIO	imgui.cpp	/^ImGuiPlatformIO& ImGui::GetPlatformIO()$/;"	f	class:ImGui	typeref:typename:ImGuiPlatformIO &
GetPopupAllowedExtentRect	imgui.cpp	/^ImRect ImGui::GetPopupAllowedExtentRect(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImRect
GetResizeBorderRect	imgui.cpp	/^static ImRect GetResizeBorderRect(ImGuiWindow* window, int border_n, float perp_padding, float t/;"	f	typeref:typename:ImRect	file:
GetRoutingIdFromOwnerId	imgui.cpp	/^static inline ImGuiID GetRoutingIdFromOwnerId(ImGuiID owner_id)$/;"	f	typeref:typename:ImGuiID	file:
GetScrollMaxX	imgui.cpp	/^float ImGui::GetScrollMaxX()$/;"	f	class:ImGui	typeref:typename:float
GetScrollMaxY	imgui.cpp	/^float ImGui::GetScrollMaxY()$/;"	f	class:ImGui	typeref:typename:float
GetScrollX	imgui.cpp	/^float ImGui::GetScrollX()$/;"	f	class:ImGui	typeref:typename:float
GetScrollY	imgui.cpp	/^float ImGui::GetScrollY()$/;"	f	class:ImGui	typeref:typename:float
GetSelectionEnd	imgui_widgets.cpp	/^int  ImGuiInputTextState::GetSelectionEnd() const           { return Stb->select_end; }$/;"	f	class:ImGuiInputTextState	typeref:typename:int
GetSelectionStart	imgui_widgets.cpp	/^int  ImGuiInputTextState::GetSelectionStart() const         { return Stb->select_start; }$/;"	f	class:ImGuiInputTextState	typeref:typename:int
GetShortcutRoutingData	imgui.cpp	/^ImGuiKeyRoutingData* ImGui::GetShortcutRoutingData(ImGuiKeyChord key_chord)$/;"	f	class:ImGui	typeref:typename:ImGuiKeyRoutingData *
GetSize	includes/imgui_internal.h	/^    ImVec2      GetSize() const                     { return ImVec2(Max.x - Min.x, Max.y - Min.y/;"	f	struct:ImRect	typeref:typename:ImVec2
GetSkipItemForListClipping	imgui.cpp	/^static bool GetSkipItemForListClipping()$/;"	f	typeref:typename:bool	file:
GetSpan	includes/imgui_internal.h	/^    inline void  GetSpan(int n, ImSpan<T>* span)    { span->set((T*)GetSpanPtrBegin(n), (T*)GetS/;"	f	struct:ImSpanAllocator	typeref:typename:void
GetSpanPtrBegin	includes/imgui_internal.h	/^    inline void* GetSpanPtrBegin(int n)             { IM_ASSERT(n >= 0 && n < CHUNKS && CurrIdx /;"	f	struct:ImSpanAllocator	typeref:typename:void *
GetSpanPtrEnd	includes/imgui_internal.h	/^    inline void* GetSpanPtrEnd(int n)               { IM_ASSERT(n >= 0 && n < CHUNKS && CurrIdx /;"	f	struct:ImSpanAllocator	typeref:typename:void *
GetStateStorage	imgui.cpp	/^ImGuiStorage* ImGui::GetStateStorage()$/;"	f	class:ImGui	typeref:typename:ImGuiStorage *
GetStorageIdFromIndex	includes/imgui.h	/^    inline ImGuiID  GetStorageIdFromIndex(int idx)              { return AdapterIndexToStorageId/;"	f	struct:ImGuiSelectionBasicStorage	typeref:typename:ImGuiID
GetStyle	imgui.cpp	/^ImGuiStyle& ImGui::GetStyle()$/;"	f	class:ImGui	typeref:typename:ImGuiStyle &
GetStyleColorName	imgui.cpp	/^const char* ImGui::GetStyleColorName(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:const char *
GetStyleColorVec4	imgui.cpp	/^const ImVec4& ImGui::GetStyleColorVec4(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:const ImVec4 &
GetStyleVarInfo	imgui.cpp	/^const ImGuiDataVarInfo* ImGui::GetStyleVarInfo(ImGuiStyleVar idx)$/;"	f	class:ImGui	typeref:typename:const ImGuiDataVarInfo *
GetTL	includes/imgui_internal.h	/^    ImVec2      GetTL() const                       { return Min; }                   \/\/ Top-l/;"	f	struct:ImRect	typeref:typename:ImVec2
GetTR	includes/imgui_internal.h	/^    ImVec2      GetTR() const                       { return ImVec2(Max.x, Min.y); }  \/\/ Top-r/;"	f	struct:ImRect	typeref:typename:ImVec2
GetTabBarFromTabBarRef	imgui_widgets.cpp	/^static ImGuiTabBar* GetTabBarFromTabBarRef(const ImGuiPtrOrIndex& ref)$/;"	f	typeref:typename:ImGuiTabBar *	file:
GetTabBarRefFromTabBar	imgui_widgets.cpp	/^static ImGuiPtrOrIndex GetTabBarRefFromTabBar(ImGuiTabBar* tab_bar)$/;"	f	typeref:typename:ImGuiPtrOrIndex	file:
GetTabName	imgui_demo.cpp	/^    void GetTabName(MyDocument* doc, char* out_buf, size_t out_buf_size)$/;"	f	struct:ExampleAppDocuments	typeref:typename:void	file:
GetTableRect	imgui.cpp	/^        static ImRect GetTableRect(ImGuiTable* table, int rect_type, int n)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:ImRect	file:
GetTexDataAsAlpha8	imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_hei/;"	f	class:ImFontAtlas	typeref:typename:void
GetTexDataAsRGBA32	imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_hei/;"	f	class:ImFontAtlas	typeref:typename:void
GetTexID	includes/imgui.h	/^    inline ImTextureID GetTexID() const { return TextureId; }$/;"	f	struct:ImDrawCmd	typeref:typename:ImTextureID
GetTextLineHeight	imgui.cpp	/^float ImGui::GetTextLineHeight()$/;"	f	class:ImGui	typeref:typename:float
GetTextLineHeightWithSpacing	imgui.cpp	/^float ImGui::GetTextLineHeightWithSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetTime	imgui.cpp	/^double ImGui::GetTime()$/;"	f	class:ImGui	typeref:typename:double
GetTopMostAndVisiblePopupModal	imgui.cpp	/^ImGuiWindow* ImGui::GetTopMostAndVisiblePopupModal()$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
GetTopMostPopupModal	imgui.cpp	/^ImGuiWindow* ImGui::GetTopMostPopupModal()$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
GetTreeNodeToLabelSpacing	imgui_widgets.cpp	/^float ImGui::GetTreeNodeToLabelSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetTypematicRepeatRate	imgui.cpp	/^void ImGui::GetTypematicRepeatRate(ImGuiInputFlags flags, float* repeat_delay, float* repeat_rat/;"	f	class:ImGui	typeref:typename:void
GetTypingSelectRequest	imgui_widgets.cpp	/^ImGuiTypingSelectRequest* ImGui::GetTypingSelectRequest(ImGuiTypingSelectFlags flags)$/;"	f	class:ImGui	typeref:typename:ImGuiTypingSelectRequest *
GetVarPtr	includes/imgui_internal.h	/^    void* GetVarPtr(void* parent) const { return (void*)((unsigned char*)parent + Offset); }$/;"	f	struct:ImGuiDataVarInfo	typeref:typename:void *
GetVersion	imgui.cpp	/^const char* ImGui::GetVersion()$/;"	f	class:ImGui	typeref:typename:const char *
GetViewportBgFgDrawList	imgui.cpp	/^static ImDrawList* GetViewportBgFgDrawList(ImGuiViewportP* viewport, size_t drawlist_no, const c/;"	f	typeref:typename:ImDrawList *	file:
GetVoidPtr	imgui.cpp	/^void* ImGuiStorage::GetVoidPtr(ImGuiID key) const$/;"	f	class:ImGuiStorage	typeref:typename:void *
GetVoidPtrRef	imgui.cpp	/^void** ImGuiStorage::GetVoidPtrRef(ImGuiID key, void* default_val)$/;"	f	class:ImGuiStorage	typeref:typename:void **
GetWidth	includes/imgui_internal.h	/^    float       GetWidth() const                    { return Max.x - Min.x; }$/;"	f	struct:ImRect	typeref:typename:float
GetWindowBgColorIdx	imgui.cpp	/^static ImGuiCol GetWindowBgColorIdx(ImGuiWindow* window)$/;"	f	typeref:typename:ImGuiCol	file:
GetWindowContentRegionMax	imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowContentRegionMin	imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMin()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowDisplayLayer	imgui.cpp	/^static inline int GetWindowDisplayLayer(ImGuiWindow* window)$/;"	f	typeref:typename:int	file:
GetWindowDrawList	imgui.cpp	/^ImDrawList* ImGui::GetWindowDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetWindowHeight	imgui.cpp	/^float ImGui::GetWindowHeight()$/;"	f	class:ImGui	typeref:typename:float
GetWindowPos	imgui.cpp	/^ImVec2 ImGui::GetWindowPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowRect	imgui.cpp	/^        static ImRect GetWindowRect(ImGuiWindow* window, int rect_type)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:ImRect	file:
GetWindowResizeBorderID	imgui.cpp	/^ImGuiID ImGui::GetWindowResizeBorderID(ImGuiWindow* window, ImGuiDir dir)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowResizeCornerID	imgui.cpp	/^ImGuiID ImGui::GetWindowResizeCornerID(ImGuiWindow* window, int n)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowScrollbarID	imgui_widgets.cpp	/^ImGuiID ImGui::GetWindowScrollbarID(ImGuiWindow* window, ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowScrollbarRect	imgui_widgets.cpp	/^ImRect ImGui::GetWindowScrollbarRect(ImGuiWindow* window, ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:ImRect
GetWindowSize	imgui.cpp	/^ImVec2 ImGui::GetWindowSize()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowWidth	imgui.cpp	/^float ImGui::GetWindowWidth()$/;"	f	class:ImGui	typeref:typename:float
GetWorkCenter	includes/imgui.h	/^    ImVec2              GetWorkCenter() const   { return ImVec2(WorkPos.x + WorkSize.x * 0.5f, W/;"	f	struct:ImGuiViewport	typeref:typename:ImVec2
GetWorkRect	includes/imgui_internal.h	/^    ImRect  GetWorkRect() const         { return ImRect(WorkPos.x, WorkPos.y, WorkPos.x + WorkSi/;"	f	struct:ImGuiViewportP	typeref:typename:ImRect
GlobalContext	rlImGui.cpp	/^ImGuiContext* GlobalContext = nullptr;$/;"	v	typeref:typename:ImGuiContext *
GlyphAdvanceX	includes/imgui.h	/^    float           GlyphAdvanceX;  \/\/ Input    \/\/ For custom font glyphs only: glyph xadvan/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:float
GlyphColored	includes/imgui.h	/^    unsigned int    GlyphColored : 1; \/\/ Input  \/\/ For custom font glyphs only: glyph is col/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned int:1
GlyphExtraSpacing	includes/imgui.h	/^    ImVec2          GlyphExtraSpacing;      \/\/ 0, 0     \/\/ Extra spacing (in pixels) between/;"	m	struct:ImFontConfig	typeref:typename:ImVec2
GlyphID	includes/imgui.h	/^    unsigned int    GlyphID : 31;   \/\/ Input    \/\/ For custom font glyphs only (ID < 0x11000/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned int:31
GlyphInfo	includes/raylib.h	/^typedef struct GlyphInfo {$/;"	s
GlyphInfo	includes/raylib.h	/^} GlyphInfo;$/;"	t	typeref:struct:GlyphInfo
GlyphMaxAdvanceX	includes/imgui.h	/^    float           GlyphMaxAdvanceX;       \/\/ FLT_MAX  \/\/ Maximum AdvanceX for glyphs$/;"	m	struct:ImFontConfig	typeref:typename:float
GlyphMinAdvanceX	includes/imgui.h	/^    float           GlyphMinAdvanceX;       \/\/ 0        \/\/ Minimum AdvanceX for glyphs, set /;"	m	struct:ImFontConfig	typeref:typename:float
GlyphOffset	includes/imgui.h	/^    ImVec2          GlyphOffset;            \/\/ 0, 0     \/\/ Offset all glyphs from this font /;"	m	struct:ImFontConfig	typeref:typename:ImVec2
GlyphOffset	includes/imgui.h	/^    ImVec2          GlyphOffset;    \/\/ Input    \/\/ For custom font glyphs only: glyph displa/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:ImVec2
GlyphRanges	includes/imgui.h	/^    const ImWchar*  GlyphRanges;            \/\/ NULL     \/\/ THE ARRAY DATA NEEDS TO PERSIST A/;"	m	struct:ImFontConfig	typeref:typename:const ImWchar *
Glyphs	includes/imgui.h	/^    ImVector<ImFontGlyph>       Glyphs;             \/\/ 12-16 \/\/ out \/\/            \/\/ All/;"	m	struct:ImFont	typeref:typename:ImVector<ImFontGlyph>
GlyphsCount	imgui_draw.cpp	/^    int                 GlyphsCount;        \/\/ Glyph count (excluding missing glyphs and glyph/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
GlyphsCount	imgui_draw.cpp	/^    int                 GlyphsCount;$/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
GlyphsHighest	imgui_draw.cpp	/^    int                 GlyphsHighest;      \/\/ Highest requested codepoint$/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
GlyphsHighest	imgui_draw.cpp	/^    int                 GlyphsHighest;$/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
GlyphsList	imgui_draw.cpp	/^    ImVector<int>       GlyphsList;         \/\/ Glyph codepoints list (flattened version of Gly/;"	m	struct:ImFontBuildSrcData	typeref:typename:ImVector<int>	file:
GlyphsSet	imgui_draw.cpp	/^    ImBitVector         GlyphsSet;          \/\/ Glyph bit map (random access, 1-bit per codepoi/;"	m	struct:ImFontBuildSrcData	typeref:typename:ImBitVector	file:
GlyphsSet	imgui_draw.cpp	/^    ImBitVector         GlyphsSet;          \/\/ This is used to resolve collision when multiple/;"	m	struct:ImFontBuildDstData	typeref:typename:ImBitVector	file:
GrabMinSize	includes/imgui.h	/^    float       GrabMinSize;                \/\/ Minimum width\/height of a grab box for slider\//;"	m	struct:ImGuiStyle	typeref:typename:float
GrabRounding	includes/imgui.h	/^    float       GrabRounding;               \/\/ Radius of grabs corners rounding. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
GroupOffset	includes/imgui_internal.h	/^    ImVec1                  GroupOffset;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
GroupStack	includes/imgui_internal.h	/^    ImVector<ImGuiGroupData>        GroupStack;                 \/\/ Stack for BeginGroup()\/End/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiGroupData>
GrowIndex	imgui_draw.cpp	/^void ImFont::GrowIndex(int new_size)$/;"	f	class:ImFont	typeref:typename:void
HASH_CALC	includes/classes/SpatialHashing.hpp	/^# define HASH_CALC /;"	d
HASH_LEN	includes/classes/SpatialHashing.hpp	/^# define HASH_LEN /;"	d
HASH_QUAD_SIZE	includes/classes/SpatialHashing.hpp	/^# define HASH_QUAD_SIZE /;"	d
HEIGHT	includes/classes/Boid.hpp	/^# define HEIGHT /;"	d
HSV	includes/imgui.h	/^    static ImColor HSV(float h, float s, float v, float a = 1.0f)   { float r, g, b; ImGui::Colo/;"	f	struct:ImColor	typeref:typename:ImColor
HandleGamepadButtonEvent	rlImGui.cpp	/^void HandleGamepadButtonEvent(ImGuiIO& io, GamepadButton button, ImGuiKey key)$/;"	f	typeref:typename:void
HandleGamepadStickEvent	rlImGui.cpp	/^void HandleGamepadStickEvent(ImGuiIO& io, GamepadAxis axis, ImGuiKey negKey, ImGuiKey posKey)$/;"	f	typeref:typename:void
HasBeenEditedBefore	includes/imgui_internal.h	/^    bool        HasBeenEditedBefore;$/;"	m	struct:ImGuiDeactivatedItemData	typeref:typename:bool
HasCloseButton	includes/imgui_internal.h	/^    bool                    HasCloseButton;                     \/\/ Set when the window has a c/;"	m	struct:ImGuiWindow	typeref:typename:bool
HasData	imgui_demo.cpp	/^    bool                        HasData = false;    \/\/ All leaves have data$/;"	m	struct:ExampleTreeNode	typeref:typename:bool	file:
HasFlags	includes/imgui_internal.h	/^    ImGuiNextItemDataFlags      HasFlags;           \/\/ Called HasFlags instead of Flags to avo/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiNextItemDataFlags
HasScrollbarYCurr	includes/imgui_internal.h	/^    bool                        HasScrollbarYCurr;          \/\/ Whether ANY instance of this ta/;"	m	struct:ImGuiTable	typeref:typename:bool
HasScrollbarYPrev	includes/imgui_internal.h	/^    bool                        HasScrollbarYPrev;          \/\/ Whether ANY instance of this ta/;"	m	struct:ImGuiTable	typeref:typename:bool
HasSelection	imgui_widgets.cpp	/^bool ImGuiInputTextState::HasSelection() const              { return Stb->select_start != Stb->s/;"	f	class:ImGuiInputTextState	typeref:typename:bool
HasSelection	includes/imgui.h	/^    bool                HasSelection() const    { return SelectionStart != SelectionEnd; }$/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:bool
Height	includes/imgui.h	/^    unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
HeldHeaderColumn	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         HeldHeaderColumn;           \/\/ Index of column header being he/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HelpMarker	imgui_demo.cpp	/^static void HelpMarker(const char* desc)$/;"	f	typeref:typename:void	file:
Hidden	includes/imgui_internal.h	/^    bool                    Hidden;                             \/\/ Do not display (== HiddenFr/;"	m	struct:ImGuiWindow	typeref:typename:bool
HiddenFramesCanSkipItems	includes/imgui_internal.h	/^    ImS8                    HiddenFramesCanSkipItems;           \/\/ Hide the window for N frame/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
HiddenFramesCannotSkipItems	includes/imgui_internal.h	/^    ImS8                    HiddenFramesCannotSkipItems;        \/\/ Hide the window for N frame/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
HiddenFramesForRenderOnly	includes/imgui_internal.h	/^    ImS8                    HiddenFramesForRenderOnly;          \/\/ Hide the window until frame/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
HighlightColumnHeader	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         HighlightColumnHeader;      \/\/ Index of column which should be/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HighlightMonitorIdx	includes/imgui_internal.h	/^    int         HighlightMonitorIdx = -1;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:int
HighlightViewportID	includes/imgui_internal.h	/^    ImGuiID     HighlightViewportID = 0;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:ImGuiID
History	imgui_demo.cpp	/^    ImVector<char*>       History;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<char * >	file:
HistoryPos	imgui_demo.cpp	/^    int                   HistoryPos;    \/\/ -1: new line, 0..History.Size-1 browsing history.$/;"	m	struct:ExampleAppConsole	typeref:typename:int	file:
HitTestHoleOffset	includes/imgui_internal.h	/^    ImVec2ih                HitTestHoleOffset;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2ih
HitTestHoleSize	includes/imgui_internal.h	/^    ImVec2ih                HitTestHoleSize;                    \/\/ Define an optional rectangu/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2ih
HookId	includes/imgui_internal.h	/^    ImGuiID                     HookId;     \/\/ A unique ID assigned by AddContextHook()$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiID
HookIdNext	includes/imgui_internal.h	/^    ImGuiID                             HookIdNext;             \/\/ Next available HookId$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
Hooks	includes/imgui_internal.h	/^    ImVector<ImGuiContextHook>          Hooks;                  \/\/ Hooks for extensions (e.g. /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiContextHook>
HostBackupClipRect	includes/imgui_internal.h	/^    ImRect              HostBackupClipRect;     \/\/ Backup of ClipRect during PushColumnsBackgr/;"	m	struct:ImGuiOldColumns	typeref:typename:ImRect
HostBackupColumnsOffset	includes/imgui_internal.h	/^    ImVec1                      HostBackupColumnsOffset;    \/\/ Backup of OuterWindow->DC.Colum/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec1
HostBackupCurrLineSize	includes/imgui_internal.h	/^    ImVec2                      HostBackupCurrLineSize;     \/\/ Backup of InnerWindow->DC.CurrL/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
HostBackupCursorMaxPos	includes/imgui_internal.h	/^    ImVec2                      HostBackupCursorMaxPos;     \/\/ Backup of InnerWindow->DC.Curso/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
HostBackupInnerClipRect	includes/imgui_internal.h	/^    ImRect                      HostBackupInnerClipRect;    \/\/ Backup of InnerWindow->ClipRect/;"	m	struct:ImGuiTable	typeref:typename:ImRect
HostBackupItemWidth	includes/imgui_internal.h	/^    float                       HostBackupItemWidth;        \/\/ Backup of OuterWindow->DC.ItemW/;"	m	struct:ImGuiTableTempData	typeref:typename:float
HostBackupItemWidthStackSize	includes/imgui_internal.h	/^    int                         HostBackupItemWidthStackSize;\/\/Backup of OuterWindow->DC.ItemW/;"	m	struct:ImGuiTableTempData	typeref:typename:int
HostBackupParentWorkRect	includes/imgui_internal.h	/^    ImRect                      HostBackupParentWorkRect;   \/\/ Backup of InnerWindow->ParentWo/;"	m	struct:ImGuiTableTempData	typeref:typename:ImRect
HostBackupParentWorkRect	includes/imgui_internal.h	/^    ImRect              HostBackupParentWorkRect;\/\/Backup of WorkRect at the time of BeginColu/;"	m	struct:ImGuiOldColumns	typeref:typename:ImRect
HostBackupPrevLineSize	includes/imgui_internal.h	/^    ImVec2                      HostBackupPrevLineSize;     \/\/ Backup of InnerWindow->DC.PrevL/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
HostBackupWorkRect	includes/imgui_internal.h	/^    ImRect                      HostBackupWorkRect;         \/\/ Backup of InnerWindow->WorkRect/;"	m	struct:ImGuiTableTempData	typeref:typename:ImRect
HostClipRect	includes/imgui_internal.h	/^    ImRect                      HostClipRect;               \/\/ This is used to check if we can/;"	m	struct:ImGuiTable	typeref:typename:ImRect
HostCursorMaxPosX	includes/imgui_internal.h	/^    float               HostCursorMaxPosX;      \/\/ Backup of CursorMaxPos at the time of Begin/;"	m	struct:ImGuiOldColumns	typeref:typename:float
HostCursorPosY	includes/imgui_internal.h	/^    float               HostCursorPosY;         \/\/ Backup of CursorPos at the time of BeginCol/;"	m	struct:ImGuiOldColumns	typeref:typename:float
HostIndentX	includes/imgui_internal.h	/^    float                       HostIndentX;$/;"	m	struct:ImGuiTable	typeref:typename:float
HostInitialClipRect	includes/imgui_internal.h	/^    ImRect              HostInitialClipRect;    \/\/ Backup of ClipRect at the time of BeginColu/;"	m	struct:ImGuiOldColumns	typeref:typename:ImRect
HostSkipItems	includes/imgui_internal.h	/^    bool                        HostSkipItems;              \/\/ Backup of InnerWindow->SkipItem/;"	m	struct:ImGuiTable	typeref:typename:bool
HoverDelayNormal	includes/imgui.h	/^    float             HoverDelayNormal;         \/\/ Delay for IsItemHovered(ImGuiHoveredFlags_D/;"	m	struct:ImGuiStyle	typeref:typename:float
HoverDelayShort	includes/imgui.h	/^    float             HoverDelayShort;          \/\/ Delay for IsItemHovered(ImGuiHoveredFlags_D/;"	m	struct:ImGuiStyle	typeref:typename:float
HoverFlagsForTooltipMouse	includes/imgui.h	/^    ImGuiHoveredFlags HoverFlagsForTooltipMouse;\/\/ Default flags when using IsItemHovered(ImGu/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiHoveredFlags
HoverFlagsForTooltipNav	includes/imgui.h	/^    ImGuiHoveredFlags HoverFlagsForTooltipNav;  \/\/ Default flags when using IsItemHovered(ImGu/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiHoveredFlags
HoverItemDelayClearTimer	includes/imgui_internal.h	/^    float                   HoverItemDelayClearTimer;           \/\/ Currently used by IsItemHov/;"	m	struct:ImGuiContext	typeref:typename:float
HoverItemDelayId	includes/imgui_internal.h	/^    ImGuiID                 HoverItemDelayId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoverItemDelayIdPreviousFrame	includes/imgui_internal.h	/^    ImGuiID                 HoverItemDelayIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoverItemDelayTimer	includes/imgui_internal.h	/^    float                   HoverItemDelayTimer;                \/\/ Currently used by IsItemHov/;"	m	struct:ImGuiContext	typeref:typename:float
HoverItemUnlockedStationaryId	includes/imgui_internal.h	/^    ImGuiID                 HoverItemUnlockedStationaryId;      \/\/ Mouse has once been station/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoverStationaryDelay	includes/imgui.h	/^    float             HoverStationaryDelay;     \/\/ Delay for IsItemHovered(ImGuiHoveredFlags_S/;"	m	struct:ImGuiStyle	typeref:typename:float
HoverWindowUnlockedStationaryId	includes/imgui_internal.h	/^    ImGuiID                 HoverWindowUnlockedStationaryId;    \/\/ Mouse has once been station/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredColumnBody	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         HoveredColumnBody;          \/\/ Index of column whose visible r/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HoveredColumnBorder	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         HoveredColumnBorder;        \/\/ Index of column whose right-bor/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HoveredId	includes/imgui_internal.h	/^    ImGuiID                 HoveredId;                          \/\/ Hovered widget, filled duri/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredIdAllowOverlap	includes/imgui_internal.h	/^    bool                    HoveredIdAllowOverlap;$/;"	m	struct:ImGuiContext	typeref:typename:bool
HoveredIdIsDisabled	includes/imgui_internal.h	/^    bool                    HoveredIdIsDisabled;                \/\/ At least one widget passed /;"	m	struct:ImGuiContext	typeref:typename:bool
HoveredIdNotActiveTimer	includes/imgui_internal.h	/^    float                   HoveredIdNotActiveTimer;            \/\/ Measure contiguous hovering/;"	m	struct:ImGuiContext	typeref:typename:float
HoveredIdPreviousFrame	includes/imgui_internal.h	/^    ImGuiID                 HoveredIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredIdPreviousFrameItemCount	includes/imgui_internal.h	/^    int                     HoveredIdPreviousFrameItemCount;    \/\/ Count numbers of items usin/;"	m	struct:ImGuiContext	typeref:typename:int
HoveredIdTimer	includes/imgui_internal.h	/^    float                   HoveredIdTimer;                     \/\/ Measure contiguous hovering/;"	m	struct:ImGuiContext	typeref:typename:float
HoveredRowLast	includes/imgui_internal.h	/^    int                         HoveredRowLast;             \/\/ Index of row which was hovered /;"	m	struct:ImGuiTableInstanceData	typeref:typename:int
HoveredRowNext	includes/imgui_internal.h	/^    int                         HoveredRowNext;             \/\/ Index of row hovered this frame/;"	m	struct:ImGuiTableInstanceData	typeref:typename:int
HoveredWindow	includes/imgui_internal.h	/^    ImGuiWindow*            HoveredWindow;                      \/\/ Window the mouse is hoverin/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
HoveredWindowBeforeClear	includes/imgui_internal.h	/^    ImGuiWindow*            HoveredWindowBeforeClear;           \/\/ Window the mouse is hoverin/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
HoveredWindowUnderMovingWindow	includes/imgui_internal.h	/^    ImGuiWindow*            HoveredWindowUnderMovingWindow;     \/\/ Hovered window ignoring Mov/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
ICON_FA_0	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_0 /;"	d
ICON_FA_1	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_1 /;"	d
ICON_FA_2	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_2 /;"	d
ICON_FA_3	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_3 /;"	d
ICON_FA_4	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_4 /;"	d
ICON_FA_5	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_5 /;"	d
ICON_FA_6	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_6 /;"	d
ICON_FA_7	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_7 /;"	d
ICON_FA_8	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_8 /;"	d
ICON_FA_9	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_9 /;"	d
ICON_FA_A	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_A /;"	d
ICON_FA_ADDRESS_BOOK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ADDRESS_BOOK /;"	d
ICON_FA_ADDRESS_CARD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ADDRESS_CARD /;"	d
ICON_FA_ALIGN_CENTER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ALIGN_CENTER /;"	d
ICON_FA_ALIGN_JUSTIFY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ALIGN_JUSTIFY /;"	d
ICON_FA_ALIGN_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ALIGN_LEFT /;"	d
ICON_FA_ALIGN_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ALIGN_RIGHT /;"	d
ICON_FA_ANCHOR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ANCHOR /;"	d
ICON_FA_ANCHOR_CIRCLE_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ANCHOR_CIRCLE_CHECK /;"	d
ICON_FA_ANCHOR_CIRCLE_EXCLAMATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ANCHOR_CIRCLE_EXCLAMATION /;"	d
ICON_FA_ANCHOR_CIRCLE_XMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ANCHOR_CIRCLE_XMARK /;"	d
ICON_FA_ANCHOR_LOCK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ANCHOR_LOCK /;"	d
ICON_FA_ANGLES_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ANGLES_DOWN /;"	d
ICON_FA_ANGLES_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ANGLES_LEFT /;"	d
ICON_FA_ANGLES_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ANGLES_RIGHT /;"	d
ICON_FA_ANGLES_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ANGLES_UP /;"	d
ICON_FA_ANGLE_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ANGLE_DOWN /;"	d
ICON_FA_ANGLE_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ANGLE_LEFT /;"	d
ICON_FA_ANGLE_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ANGLE_RIGHT /;"	d
ICON_FA_ANGLE_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ANGLE_UP /;"	d
ICON_FA_ANKH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ANKH /;"	d
ICON_FA_APPLE_WHOLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_APPLE_WHOLE /;"	d
ICON_FA_ARCHWAY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARCHWAY /;"	d
ICON_FA_ARROWS_DOWN_TO_LINE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROWS_DOWN_TO_LINE /;"	d
ICON_FA_ARROWS_DOWN_TO_PEOPLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROWS_DOWN_TO_PEOPLE /;"	d
ICON_FA_ARROWS_LEFT_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROWS_LEFT_RIGHT /;"	d
ICON_FA_ARROWS_LEFT_RIGHT_TO_LINE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROWS_LEFT_RIGHT_TO_LINE /;"	d
ICON_FA_ARROWS_ROTATE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROWS_ROTATE /;"	d
ICON_FA_ARROWS_SPIN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROWS_SPIN /;"	d
ICON_FA_ARROWS_SPLIT_UP_AND_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROWS_SPLIT_UP_AND_LEFT /;"	d
ICON_FA_ARROWS_TO_CIRCLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROWS_TO_CIRCLE /;"	d
ICON_FA_ARROWS_TO_DOT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROWS_TO_DOT /;"	d
ICON_FA_ARROWS_TO_EYE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROWS_TO_EYE /;"	d
ICON_FA_ARROWS_TURN_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROWS_TURN_RIGHT /;"	d
ICON_FA_ARROWS_TURN_TO_DOTS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROWS_TURN_TO_DOTS /;"	d
ICON_FA_ARROWS_UP_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROWS_UP_DOWN /;"	d
ICON_FA_ARROWS_UP_DOWN_LEFT_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROWS_UP_DOWN_LEFT_RIGHT /;"	d
ICON_FA_ARROWS_UP_TO_LINE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROWS_UP_TO_LINE /;"	d
ICON_FA_ARROW_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_DOWN /;"	d
ICON_FA_ARROW_DOWN_1_9	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_DOWN_1_9 /;"	d
ICON_FA_ARROW_DOWN_9_1	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_DOWN_9_1 /;"	d
ICON_FA_ARROW_DOWN_A_Z	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_DOWN_A_Z /;"	d
ICON_FA_ARROW_DOWN_LONG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_DOWN_LONG /;"	d
ICON_FA_ARROW_DOWN_SHORT_WIDE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_DOWN_SHORT_WIDE /;"	d
ICON_FA_ARROW_DOWN_UP_ACROSS_LINE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_DOWN_UP_ACROSS_LINE /;"	d
ICON_FA_ARROW_DOWN_UP_LOCK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_DOWN_UP_LOCK /;"	d
ICON_FA_ARROW_DOWN_WIDE_SHORT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_DOWN_WIDE_SHORT /;"	d
ICON_FA_ARROW_DOWN_Z_A	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_DOWN_Z_A /;"	d
ICON_FA_ARROW_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_LEFT /;"	d
ICON_FA_ARROW_LEFT_LONG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_LEFT_LONG /;"	d
ICON_FA_ARROW_POINTER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_POINTER /;"	d
ICON_FA_ARROW_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_RIGHT /;"	d
ICON_FA_ARROW_RIGHT_ARROW_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_RIGHT_ARROW_LEFT /;"	d
ICON_FA_ARROW_RIGHT_FROM_BRACKET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_RIGHT_FROM_BRACKET /;"	d
ICON_FA_ARROW_RIGHT_LONG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_RIGHT_LONG /;"	d
ICON_FA_ARROW_RIGHT_TO_BRACKET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_RIGHT_TO_BRACKET /;"	d
ICON_FA_ARROW_RIGHT_TO_CITY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_RIGHT_TO_CITY /;"	d
ICON_FA_ARROW_ROTATE_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_ROTATE_LEFT /;"	d
ICON_FA_ARROW_ROTATE_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_ROTATE_RIGHT /;"	d
ICON_FA_ARROW_TREND_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_TREND_DOWN /;"	d
ICON_FA_ARROW_TREND_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_TREND_UP /;"	d
ICON_FA_ARROW_TURN_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_TURN_DOWN /;"	d
ICON_FA_ARROW_TURN_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_TURN_UP /;"	d
ICON_FA_ARROW_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_UP /;"	d
ICON_FA_ARROW_UP_1_9	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_UP_1_9 /;"	d
ICON_FA_ARROW_UP_9_1	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_UP_9_1 /;"	d
ICON_FA_ARROW_UP_A_Z	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_UP_A_Z /;"	d
ICON_FA_ARROW_UP_FROM_BRACKET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_UP_FROM_BRACKET /;"	d
ICON_FA_ARROW_UP_FROM_GROUND_WATER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_UP_FROM_GROUND_WATER /;"	d
ICON_FA_ARROW_UP_FROM_WATER_PUMP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_UP_FROM_WATER_PUMP /;"	d
ICON_FA_ARROW_UP_LONG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_UP_LONG /;"	d
ICON_FA_ARROW_UP_RIGHT_DOTS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_UP_RIGHT_DOTS /;"	d
ICON_FA_ARROW_UP_RIGHT_FROM_SQUARE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_UP_RIGHT_FROM_SQUARE /;"	d
ICON_FA_ARROW_UP_SHORT_WIDE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_UP_SHORT_WIDE /;"	d
ICON_FA_ARROW_UP_WIDE_SHORT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_UP_WIDE_SHORT /;"	d
ICON_FA_ARROW_UP_Z_A	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ARROW_UP_Z_A /;"	d
ICON_FA_ASTERISK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ASTERISK /;"	d
ICON_FA_AT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_AT /;"	d
ICON_FA_ATOM	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ATOM /;"	d
ICON_FA_AUDIO_DESCRIPTION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_AUDIO_DESCRIPTION /;"	d
ICON_FA_AUSTRAL_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_AUSTRAL_SIGN /;"	d
ICON_FA_AWARD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_AWARD /;"	d
ICON_FA_B	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_B /;"	d
ICON_FA_BABY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BABY /;"	d
ICON_FA_BABY_CARRIAGE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BABY_CARRIAGE /;"	d
ICON_FA_BACKWARD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BACKWARD /;"	d
ICON_FA_BACKWARD_FAST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BACKWARD_FAST /;"	d
ICON_FA_BACKWARD_STEP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BACKWARD_STEP /;"	d
ICON_FA_BACON	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BACON /;"	d
ICON_FA_BACTERIA	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BACTERIA /;"	d
ICON_FA_BACTERIUM	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BACTERIUM /;"	d
ICON_FA_BAG_SHOPPING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BAG_SHOPPING /;"	d
ICON_FA_BAHAI	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BAHAI /;"	d
ICON_FA_BAHT_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BAHT_SIGN /;"	d
ICON_FA_BAN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BAN /;"	d
ICON_FA_BANDAGE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BANDAGE /;"	d
ICON_FA_BAN_SMOKING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BAN_SMOKING /;"	d
ICON_FA_BARCODE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BARCODE /;"	d
ICON_FA_BARS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BARS /;"	d
ICON_FA_BARS_PROGRESS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BARS_PROGRESS /;"	d
ICON_FA_BARS_STAGGERED	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BARS_STAGGERED /;"	d
ICON_FA_BASEBALL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BASEBALL /;"	d
ICON_FA_BASEBALL_BAT_BALL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BASEBALL_BAT_BALL /;"	d
ICON_FA_BASKETBALL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BASKETBALL /;"	d
ICON_FA_BASKET_SHOPPING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BASKET_SHOPPING /;"	d
ICON_FA_BATH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BATH /;"	d
ICON_FA_BATTERY_EMPTY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BATTERY_EMPTY /;"	d
ICON_FA_BATTERY_FULL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BATTERY_FULL /;"	d
ICON_FA_BATTERY_HALF	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BATTERY_HALF /;"	d
ICON_FA_BATTERY_QUARTER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BATTERY_QUARTER /;"	d
ICON_FA_BATTERY_THREE_QUARTERS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BATTERY_THREE_QUARTERS /;"	d
ICON_FA_BED	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BED /;"	d
ICON_FA_BED_PULSE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BED_PULSE /;"	d
ICON_FA_BEER_MUG_EMPTY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BEER_MUG_EMPTY /;"	d
ICON_FA_BELL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BELL /;"	d
ICON_FA_BELL_CONCIERGE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BELL_CONCIERGE /;"	d
ICON_FA_BELL_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BELL_SLASH /;"	d
ICON_FA_BEZIER_CURVE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BEZIER_CURVE /;"	d
ICON_FA_BICYCLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BICYCLE /;"	d
ICON_FA_BINOCULARS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BINOCULARS /;"	d
ICON_FA_BIOHAZARD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BIOHAZARD /;"	d
ICON_FA_BITCOIN_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BITCOIN_SIGN /;"	d
ICON_FA_BLENDER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BLENDER /;"	d
ICON_FA_BLENDER_PHONE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BLENDER_PHONE /;"	d
ICON_FA_BLOG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BLOG /;"	d
ICON_FA_BOLD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOLD /;"	d
ICON_FA_BOLT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOLT /;"	d
ICON_FA_BOLT_LIGHTNING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOLT_LIGHTNING /;"	d
ICON_FA_BOMB	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOMB /;"	d
ICON_FA_BONE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BONE /;"	d
ICON_FA_BONG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BONG /;"	d
ICON_FA_BOOK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOOK /;"	d
ICON_FA_BOOKMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOOKMARK /;"	d
ICON_FA_BOOK_ATLAS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOOK_ATLAS /;"	d
ICON_FA_BOOK_BIBLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOOK_BIBLE /;"	d
ICON_FA_BOOK_BOOKMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOOK_BOOKMARK /;"	d
ICON_FA_BOOK_JOURNAL_WHILLS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOOK_JOURNAL_WHILLS /;"	d
ICON_FA_BOOK_MEDICAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOOK_MEDICAL /;"	d
ICON_FA_BOOK_OPEN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOOK_OPEN /;"	d
ICON_FA_BOOK_OPEN_READER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOOK_OPEN_READER /;"	d
ICON_FA_BOOK_QURAN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOOK_QURAN /;"	d
ICON_FA_BOOK_SKULL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOOK_SKULL /;"	d
ICON_FA_BORDER_ALL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BORDER_ALL /;"	d
ICON_FA_BORDER_NONE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BORDER_NONE /;"	d
ICON_FA_BORDER_TOP_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BORDER_TOP_LEFT /;"	d
ICON_FA_BORE_HOLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BORE_HOLE /;"	d
ICON_FA_BOTTLE_DROPLET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOTTLE_DROPLET /;"	d
ICON_FA_BOTTLE_WATER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOTTLE_WATER /;"	d
ICON_FA_BOWLING_BALL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOWLING_BALL /;"	d
ICON_FA_BOWL_FOOD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOWL_FOOD /;"	d
ICON_FA_BOWL_RICE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOWL_RICE /;"	d
ICON_FA_BOX	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOX /;"	d
ICON_FA_BOXES_PACKING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOXES_PACKING /;"	d
ICON_FA_BOXES_STACKED	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOXES_STACKED /;"	d
ICON_FA_BOX_ARCHIVE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOX_ARCHIVE /;"	d
ICON_FA_BOX_OPEN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOX_OPEN /;"	d
ICON_FA_BOX_TISSUE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BOX_TISSUE /;"	d
ICON_FA_BRAILLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BRAILLE /;"	d
ICON_FA_BRAIN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BRAIN /;"	d
ICON_FA_BRAZILIAN_REAL_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BRAZILIAN_REAL_SIGN /;"	d
ICON_FA_BREAD_SLICE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BREAD_SLICE /;"	d
ICON_FA_BRIDGE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BRIDGE /;"	d
ICON_FA_BRIDGE_CIRCLE_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BRIDGE_CIRCLE_CHECK /;"	d
ICON_FA_BRIDGE_CIRCLE_EXCLAMATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BRIDGE_CIRCLE_EXCLAMATION /;"	d
ICON_FA_BRIDGE_CIRCLE_XMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BRIDGE_CIRCLE_XMARK /;"	d
ICON_FA_BRIDGE_LOCK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BRIDGE_LOCK /;"	d
ICON_FA_BRIDGE_WATER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BRIDGE_WATER /;"	d
ICON_FA_BRIEFCASE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BRIEFCASE /;"	d
ICON_FA_BRIEFCASE_MEDICAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BRIEFCASE_MEDICAL /;"	d
ICON_FA_BROOM	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BROOM /;"	d
ICON_FA_BROOM_BALL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BROOM_BALL /;"	d
ICON_FA_BRUSH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BRUSH /;"	d
ICON_FA_BUCKET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BUCKET /;"	d
ICON_FA_BUG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BUG /;"	d
ICON_FA_BUGS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BUGS /;"	d
ICON_FA_BUG_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BUG_SLASH /;"	d
ICON_FA_BUILDING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BUILDING /;"	d
ICON_FA_BUILDING_CIRCLE_ARROW_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BUILDING_CIRCLE_ARROW_RIGHT /;"	d
ICON_FA_BUILDING_CIRCLE_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BUILDING_CIRCLE_CHECK /;"	d
ICON_FA_BUILDING_CIRCLE_EXCLAMATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BUILDING_CIRCLE_EXCLAMATION /;"	d
ICON_FA_BUILDING_CIRCLE_XMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BUILDING_CIRCLE_XMARK /;"	d
ICON_FA_BUILDING_COLUMNS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BUILDING_COLUMNS /;"	d
ICON_FA_BUILDING_FLAG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BUILDING_FLAG /;"	d
ICON_FA_BUILDING_LOCK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BUILDING_LOCK /;"	d
ICON_FA_BUILDING_NGO	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BUILDING_NGO /;"	d
ICON_FA_BUILDING_SHIELD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BUILDING_SHIELD /;"	d
ICON_FA_BUILDING_UN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BUILDING_UN /;"	d
ICON_FA_BUILDING_USER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BUILDING_USER /;"	d
ICON_FA_BUILDING_WHEAT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BUILDING_WHEAT /;"	d
ICON_FA_BULLHORN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BULLHORN /;"	d
ICON_FA_BULLSEYE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BULLSEYE /;"	d
ICON_FA_BURGER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BURGER /;"	d
ICON_FA_BURST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BURST /;"	d
ICON_FA_BUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BUS /;"	d
ICON_FA_BUSINESS_TIME	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BUSINESS_TIME /;"	d
ICON_FA_BUS_SIMPLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_BUS_SIMPLE /;"	d
ICON_FA_C	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_C /;"	d
ICON_FA_CAKE_CANDLES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CAKE_CANDLES /;"	d
ICON_FA_CALCULATOR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CALCULATOR /;"	d
ICON_FA_CALENDAR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CALENDAR /;"	d
ICON_FA_CALENDAR_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CALENDAR_CHECK /;"	d
ICON_FA_CALENDAR_DAY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CALENDAR_DAY /;"	d
ICON_FA_CALENDAR_DAYS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CALENDAR_DAYS /;"	d
ICON_FA_CALENDAR_MINUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CALENDAR_MINUS /;"	d
ICON_FA_CALENDAR_PLUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CALENDAR_PLUS /;"	d
ICON_FA_CALENDAR_WEEK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CALENDAR_WEEK /;"	d
ICON_FA_CALENDAR_XMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CALENDAR_XMARK /;"	d
ICON_FA_CAMERA	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CAMERA /;"	d
ICON_FA_CAMERA_RETRO	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CAMERA_RETRO /;"	d
ICON_FA_CAMERA_ROTATE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CAMERA_ROTATE /;"	d
ICON_FA_CAMPGROUND	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CAMPGROUND /;"	d
ICON_FA_CANDY_CANE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CANDY_CANE /;"	d
ICON_FA_CANNABIS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CANNABIS /;"	d
ICON_FA_CAPSULES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CAPSULES /;"	d
ICON_FA_CAR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CAR /;"	d
ICON_FA_CARAVAN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CARAVAN /;"	d
ICON_FA_CARET_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CARET_DOWN /;"	d
ICON_FA_CARET_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CARET_LEFT /;"	d
ICON_FA_CARET_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CARET_RIGHT /;"	d
ICON_FA_CARET_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CARET_UP /;"	d
ICON_FA_CARROT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CARROT /;"	d
ICON_FA_CART_ARROW_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CART_ARROW_DOWN /;"	d
ICON_FA_CART_FLATBED	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CART_FLATBED /;"	d
ICON_FA_CART_FLATBED_SUITCASE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CART_FLATBED_SUITCASE /;"	d
ICON_FA_CART_PLUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CART_PLUS /;"	d
ICON_FA_CART_SHOPPING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CART_SHOPPING /;"	d
ICON_FA_CAR_BATTERY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CAR_BATTERY /;"	d
ICON_FA_CAR_BURST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CAR_BURST /;"	d
ICON_FA_CAR_ON	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CAR_ON /;"	d
ICON_FA_CAR_REAR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CAR_REAR /;"	d
ICON_FA_CAR_SIDE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CAR_SIDE /;"	d
ICON_FA_CAR_TUNNEL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CAR_TUNNEL /;"	d
ICON_FA_CASH_REGISTER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CASH_REGISTER /;"	d
ICON_FA_CAT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CAT /;"	d
ICON_FA_CEDI_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CEDI_SIGN /;"	d
ICON_FA_CENT_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CENT_SIGN /;"	d
ICON_FA_CERTIFICATE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CERTIFICATE /;"	d
ICON_FA_CHAIR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHAIR /;"	d
ICON_FA_CHALKBOARD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHALKBOARD /;"	d
ICON_FA_CHALKBOARD_USER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHALKBOARD_USER /;"	d
ICON_FA_CHAMPAGNE_GLASSES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHAMPAGNE_GLASSES /;"	d
ICON_FA_CHARGING_STATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHARGING_STATION /;"	d
ICON_FA_CHART_AREA	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHART_AREA /;"	d
ICON_FA_CHART_BAR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHART_BAR /;"	d
ICON_FA_CHART_COLUMN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHART_COLUMN /;"	d
ICON_FA_CHART_GANTT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHART_GANTT /;"	d
ICON_FA_CHART_LINE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHART_LINE /;"	d
ICON_FA_CHART_PIE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHART_PIE /;"	d
ICON_FA_CHART_SIMPLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHART_SIMPLE /;"	d
ICON_FA_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHECK /;"	d
ICON_FA_CHECK_DOUBLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHECK_DOUBLE /;"	d
ICON_FA_CHECK_TO_SLOT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHECK_TO_SLOT /;"	d
ICON_FA_CHEESE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHEESE /;"	d
ICON_FA_CHESS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHESS /;"	d
ICON_FA_CHESS_BISHOP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHESS_BISHOP /;"	d
ICON_FA_CHESS_BOARD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHESS_BOARD /;"	d
ICON_FA_CHESS_KING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHESS_KING /;"	d
ICON_FA_CHESS_KNIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHESS_KNIGHT /;"	d
ICON_FA_CHESS_PAWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHESS_PAWN /;"	d
ICON_FA_CHESS_QUEEN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHESS_QUEEN /;"	d
ICON_FA_CHESS_ROOK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHESS_ROOK /;"	d
ICON_FA_CHEVRON_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHEVRON_DOWN /;"	d
ICON_FA_CHEVRON_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHEVRON_LEFT /;"	d
ICON_FA_CHEVRON_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHEVRON_RIGHT /;"	d
ICON_FA_CHEVRON_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHEVRON_UP /;"	d
ICON_FA_CHILD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHILD /;"	d
ICON_FA_CHILDREN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHILDREN /;"	d
ICON_FA_CHILD_DRESS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHILD_DRESS /;"	d
ICON_FA_CHILD_REACHING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHILD_REACHING /;"	d
ICON_FA_CHILD_RIFLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHILD_RIFLE /;"	d
ICON_FA_CHURCH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CHURCH /;"	d
ICON_FA_CIRCLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE /;"	d
ICON_FA_CIRCLE_ARROW_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_ARROW_DOWN /;"	d
ICON_FA_CIRCLE_ARROW_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_ARROW_LEFT /;"	d
ICON_FA_CIRCLE_ARROW_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_ARROW_RIGHT /;"	d
ICON_FA_CIRCLE_ARROW_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_ARROW_UP /;"	d
ICON_FA_CIRCLE_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_CHECK /;"	d
ICON_FA_CIRCLE_CHEVRON_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_CHEVRON_DOWN /;"	d
ICON_FA_CIRCLE_CHEVRON_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_CHEVRON_LEFT /;"	d
ICON_FA_CIRCLE_CHEVRON_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_CHEVRON_RIGHT /;"	d
ICON_FA_CIRCLE_CHEVRON_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_CHEVRON_UP /;"	d
ICON_FA_CIRCLE_DOLLAR_TO_SLOT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_DOLLAR_TO_SLOT /;"	d
ICON_FA_CIRCLE_DOT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_DOT /;"	d
ICON_FA_CIRCLE_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_DOWN /;"	d
ICON_FA_CIRCLE_EXCLAMATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_EXCLAMATION /;"	d
ICON_FA_CIRCLE_H	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_H /;"	d
ICON_FA_CIRCLE_HALF_STROKE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_HALF_STROKE /;"	d
ICON_FA_CIRCLE_INFO	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_INFO /;"	d
ICON_FA_CIRCLE_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_LEFT /;"	d
ICON_FA_CIRCLE_MINUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_MINUS /;"	d
ICON_FA_CIRCLE_NODES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_NODES /;"	d
ICON_FA_CIRCLE_NOTCH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_NOTCH /;"	d
ICON_FA_CIRCLE_PAUSE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_PAUSE /;"	d
ICON_FA_CIRCLE_PLAY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_PLAY /;"	d
ICON_FA_CIRCLE_PLUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_PLUS /;"	d
ICON_FA_CIRCLE_QUESTION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_QUESTION /;"	d
ICON_FA_CIRCLE_RADIATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_RADIATION /;"	d
ICON_FA_CIRCLE_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_RIGHT /;"	d
ICON_FA_CIRCLE_STOP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_STOP /;"	d
ICON_FA_CIRCLE_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_UP /;"	d
ICON_FA_CIRCLE_USER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_USER /;"	d
ICON_FA_CIRCLE_XMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CIRCLE_XMARK /;"	d
ICON_FA_CITY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CITY /;"	d
ICON_FA_CLAPPERBOARD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLAPPERBOARD /;"	d
ICON_FA_CLIPBOARD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLIPBOARD /;"	d
ICON_FA_CLIPBOARD_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLIPBOARD_CHECK /;"	d
ICON_FA_CLIPBOARD_LIST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLIPBOARD_LIST /;"	d
ICON_FA_CLIPBOARD_QUESTION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLIPBOARD_QUESTION /;"	d
ICON_FA_CLIPBOARD_USER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLIPBOARD_USER /;"	d
ICON_FA_CLOCK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLOCK /;"	d
ICON_FA_CLOCK_ROTATE_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLOCK_ROTATE_LEFT /;"	d
ICON_FA_CLONE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLONE /;"	d
ICON_FA_CLOSED_CAPTIONING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLOSED_CAPTIONING /;"	d
ICON_FA_CLOUD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLOUD /;"	d
ICON_FA_CLOUD_ARROW_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLOUD_ARROW_DOWN /;"	d
ICON_FA_CLOUD_ARROW_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLOUD_ARROW_UP /;"	d
ICON_FA_CLOUD_BOLT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLOUD_BOLT /;"	d
ICON_FA_CLOUD_MEATBALL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLOUD_MEATBALL /;"	d
ICON_FA_CLOUD_MOON	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLOUD_MOON /;"	d
ICON_FA_CLOUD_MOON_RAIN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLOUD_MOON_RAIN /;"	d
ICON_FA_CLOUD_RAIN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLOUD_RAIN /;"	d
ICON_FA_CLOUD_SHOWERS_HEAVY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLOUD_SHOWERS_HEAVY /;"	d
ICON_FA_CLOUD_SHOWERS_WATER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLOUD_SHOWERS_WATER /;"	d
ICON_FA_CLOUD_SUN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLOUD_SUN /;"	d
ICON_FA_CLOUD_SUN_RAIN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLOUD_SUN_RAIN /;"	d
ICON_FA_CLOVER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CLOVER /;"	d
ICON_FA_CODE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CODE /;"	d
ICON_FA_CODE_BRANCH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CODE_BRANCH /;"	d
ICON_FA_CODE_COMMIT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CODE_COMMIT /;"	d
ICON_FA_CODE_COMPARE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CODE_COMPARE /;"	d
ICON_FA_CODE_FORK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CODE_FORK /;"	d
ICON_FA_CODE_MERGE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CODE_MERGE /;"	d
ICON_FA_CODE_PULL_REQUEST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CODE_PULL_REQUEST /;"	d
ICON_FA_COINS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COINS /;"	d
ICON_FA_COLON_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COLON_SIGN /;"	d
ICON_FA_COMMENT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COMMENT /;"	d
ICON_FA_COMMENTS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COMMENTS /;"	d
ICON_FA_COMMENTS_DOLLAR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COMMENTS_DOLLAR /;"	d
ICON_FA_COMMENT_DOLLAR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COMMENT_DOLLAR /;"	d
ICON_FA_COMMENT_DOTS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COMMENT_DOTS /;"	d
ICON_FA_COMMENT_MEDICAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COMMENT_MEDICAL /;"	d
ICON_FA_COMMENT_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COMMENT_SLASH /;"	d
ICON_FA_COMMENT_SMS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COMMENT_SMS /;"	d
ICON_FA_COMPACT_DISC	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COMPACT_DISC /;"	d
ICON_FA_COMPASS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COMPASS /;"	d
ICON_FA_COMPASS_DRAFTING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COMPASS_DRAFTING /;"	d
ICON_FA_COMPRESS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COMPRESS /;"	d
ICON_FA_COMPUTER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COMPUTER /;"	d
ICON_FA_COMPUTER_MOUSE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COMPUTER_MOUSE /;"	d
ICON_FA_COOKIE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COOKIE /;"	d
ICON_FA_COOKIE_BITE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COOKIE_BITE /;"	d
ICON_FA_COPY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COPY /;"	d
ICON_FA_COPYRIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COPYRIGHT /;"	d
ICON_FA_COUCH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COUCH /;"	d
ICON_FA_COW	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_COW /;"	d
ICON_FA_CREDIT_CARD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CREDIT_CARD /;"	d
ICON_FA_CROP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CROP /;"	d
ICON_FA_CROP_SIMPLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CROP_SIMPLE /;"	d
ICON_FA_CROSS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CROSS /;"	d
ICON_FA_CROSSHAIRS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CROSSHAIRS /;"	d
ICON_FA_CROW	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CROW /;"	d
ICON_FA_CROWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CROWN /;"	d
ICON_FA_CRUTCH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CRUTCH /;"	d
ICON_FA_CRUZEIRO_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CRUZEIRO_SIGN /;"	d
ICON_FA_CUBE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CUBE /;"	d
ICON_FA_CUBES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CUBES /;"	d
ICON_FA_CUBES_STACKED	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_CUBES_STACKED /;"	d
ICON_FA_D	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_D /;"	d
ICON_FA_DATABASE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DATABASE /;"	d
ICON_FA_DELETE_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DELETE_LEFT /;"	d
ICON_FA_DEMOCRAT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DEMOCRAT /;"	d
ICON_FA_DESKTOP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DESKTOP /;"	d
ICON_FA_DHARMACHAKRA	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DHARMACHAKRA /;"	d
ICON_FA_DIAGRAM_NEXT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DIAGRAM_NEXT /;"	d
ICON_FA_DIAGRAM_PREDECESSOR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DIAGRAM_PREDECESSOR /;"	d
ICON_FA_DIAGRAM_PROJECT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DIAGRAM_PROJECT /;"	d
ICON_FA_DIAGRAM_SUCCESSOR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DIAGRAM_SUCCESSOR /;"	d
ICON_FA_DIAMOND	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DIAMOND /;"	d
ICON_FA_DIAMOND_TURN_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DIAMOND_TURN_RIGHT /;"	d
ICON_FA_DICE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DICE /;"	d
ICON_FA_DICE_D20	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DICE_D20 /;"	d
ICON_FA_DICE_D6	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DICE_D6 /;"	d
ICON_FA_DICE_FIVE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DICE_FIVE /;"	d
ICON_FA_DICE_FOUR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DICE_FOUR /;"	d
ICON_FA_DICE_ONE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DICE_ONE /;"	d
ICON_FA_DICE_SIX	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DICE_SIX /;"	d
ICON_FA_DICE_THREE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DICE_THREE /;"	d
ICON_FA_DICE_TWO	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DICE_TWO /;"	d
ICON_FA_DISEASE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DISEASE /;"	d
ICON_FA_DISPLAY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DISPLAY /;"	d
ICON_FA_DIVIDE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DIVIDE /;"	d
ICON_FA_DNA	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DNA /;"	d
ICON_FA_DOG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DOG /;"	d
ICON_FA_DOLLAR_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DOLLAR_SIGN /;"	d
ICON_FA_DOLLY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DOLLY /;"	d
ICON_FA_DONG_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DONG_SIGN /;"	d
ICON_FA_DOOR_CLOSED	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DOOR_CLOSED /;"	d
ICON_FA_DOOR_OPEN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DOOR_OPEN /;"	d
ICON_FA_DOVE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DOVE /;"	d
ICON_FA_DOWNLOAD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DOWNLOAD /;"	d
ICON_FA_DOWN_LEFT_AND_UP_RIGHT_TO_CENTER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DOWN_LEFT_AND_UP_RIGHT_TO_CENTER /;"	d
ICON_FA_DOWN_LONG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DOWN_LONG /;"	d
ICON_FA_DRAGON	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DRAGON /;"	d
ICON_FA_DRAW_POLYGON	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DRAW_POLYGON /;"	d
ICON_FA_DROPLET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DROPLET /;"	d
ICON_FA_DROPLET_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DROPLET_SLASH /;"	d
ICON_FA_DRUM	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DRUM /;"	d
ICON_FA_DRUMSTICK_BITE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DRUMSTICK_BITE /;"	d
ICON_FA_DRUM_STEELPAN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DRUM_STEELPAN /;"	d
ICON_FA_DUMBBELL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DUMBBELL /;"	d
ICON_FA_DUMPSTER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DUMPSTER /;"	d
ICON_FA_DUMPSTER_FIRE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DUMPSTER_FIRE /;"	d
ICON_FA_DUNGEON	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_DUNGEON /;"	d
ICON_FA_E	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_E /;"	d
ICON_FA_EARTH_AFRICA	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_EARTH_AFRICA /;"	d
ICON_FA_EARTH_AMERICAS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_EARTH_AMERICAS /;"	d
ICON_FA_EARTH_ASIA	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_EARTH_ASIA /;"	d
ICON_FA_EARTH_EUROPE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_EARTH_EUROPE /;"	d
ICON_FA_EARTH_OCEANIA	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_EARTH_OCEANIA /;"	d
ICON_FA_EAR_DEAF	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_EAR_DEAF /;"	d
ICON_FA_EAR_LISTEN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_EAR_LISTEN /;"	d
ICON_FA_EGG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_EGG /;"	d
ICON_FA_EJECT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_EJECT /;"	d
ICON_FA_ELEVATOR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ELEVATOR /;"	d
ICON_FA_ELLIPSIS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ELLIPSIS /;"	d
ICON_FA_ELLIPSIS_VERTICAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ELLIPSIS_VERTICAL /;"	d
ICON_FA_ENVELOPE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ENVELOPE /;"	d
ICON_FA_ENVELOPES_BULK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ENVELOPES_BULK /;"	d
ICON_FA_ENVELOPE_CIRCLE_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ENVELOPE_CIRCLE_CHECK /;"	d
ICON_FA_ENVELOPE_OPEN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ENVELOPE_OPEN /;"	d
ICON_FA_ENVELOPE_OPEN_TEXT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ENVELOPE_OPEN_TEXT /;"	d
ICON_FA_EQUALS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_EQUALS /;"	d
ICON_FA_ERASER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ERASER /;"	d
ICON_FA_ETHERNET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ETHERNET /;"	d
ICON_FA_EURO_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_EURO_SIGN /;"	d
ICON_FA_EXCLAMATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_EXCLAMATION /;"	d
ICON_FA_EXPAND	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_EXPAND /;"	d
ICON_FA_EXPLOSION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_EXPLOSION /;"	d
ICON_FA_EYE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_EYE /;"	d
ICON_FA_EYE_DROPPER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_EYE_DROPPER /;"	d
ICON_FA_EYE_LOW_VISION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_EYE_LOW_VISION /;"	d
ICON_FA_EYE_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_EYE_SLASH /;"	d
ICON_FA_F	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_F /;"	d
ICON_FA_FACE_ANGRY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_ANGRY /;"	d
ICON_FA_FACE_DIZZY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_DIZZY /;"	d
ICON_FA_FACE_FLUSHED	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_FLUSHED /;"	d
ICON_FA_FACE_FROWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_FROWN /;"	d
ICON_FA_FACE_FROWN_OPEN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_FROWN_OPEN /;"	d
ICON_FA_FACE_GRIMACE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_GRIMACE /;"	d
ICON_FA_FACE_GRIN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_GRIN /;"	d
ICON_FA_FACE_GRIN_BEAM	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_GRIN_BEAM /;"	d
ICON_FA_FACE_GRIN_BEAM_SWEAT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_GRIN_BEAM_SWEAT /;"	d
ICON_FA_FACE_GRIN_HEARTS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_GRIN_HEARTS /;"	d
ICON_FA_FACE_GRIN_SQUINT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_GRIN_SQUINT /;"	d
ICON_FA_FACE_GRIN_SQUINT_TEARS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_GRIN_SQUINT_TEARS /;"	d
ICON_FA_FACE_GRIN_STARS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_GRIN_STARS /;"	d
ICON_FA_FACE_GRIN_TEARS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_GRIN_TEARS /;"	d
ICON_FA_FACE_GRIN_TONGUE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_GRIN_TONGUE /;"	d
ICON_FA_FACE_GRIN_TONGUE_SQUINT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_GRIN_TONGUE_SQUINT /;"	d
ICON_FA_FACE_GRIN_TONGUE_WINK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_GRIN_TONGUE_WINK /;"	d
ICON_FA_FACE_GRIN_WIDE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_GRIN_WIDE /;"	d
ICON_FA_FACE_GRIN_WINK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_GRIN_WINK /;"	d
ICON_FA_FACE_KISS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_KISS /;"	d
ICON_FA_FACE_KISS_BEAM	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_KISS_BEAM /;"	d
ICON_FA_FACE_KISS_WINK_HEART	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_KISS_WINK_HEART /;"	d
ICON_FA_FACE_LAUGH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_LAUGH /;"	d
ICON_FA_FACE_LAUGH_BEAM	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_LAUGH_BEAM /;"	d
ICON_FA_FACE_LAUGH_SQUINT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_LAUGH_SQUINT /;"	d
ICON_FA_FACE_LAUGH_WINK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_LAUGH_WINK /;"	d
ICON_FA_FACE_MEH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_MEH /;"	d
ICON_FA_FACE_MEH_BLANK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_MEH_BLANK /;"	d
ICON_FA_FACE_ROLLING_EYES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_ROLLING_EYES /;"	d
ICON_FA_FACE_SAD_CRY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_SAD_CRY /;"	d
ICON_FA_FACE_SAD_TEAR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_SAD_TEAR /;"	d
ICON_FA_FACE_SMILE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_SMILE /;"	d
ICON_FA_FACE_SMILE_BEAM	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_SMILE_BEAM /;"	d
ICON_FA_FACE_SMILE_WINK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_SMILE_WINK /;"	d
ICON_FA_FACE_SURPRISE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_SURPRISE /;"	d
ICON_FA_FACE_TIRED	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FACE_TIRED /;"	d
ICON_FA_FAN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FAN /;"	d
ICON_FA_FAUCET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FAUCET /;"	d
ICON_FA_FAUCET_DRIP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FAUCET_DRIP /;"	d
ICON_FA_FAX	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FAX /;"	d
ICON_FA_FEATHER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FEATHER /;"	d
ICON_FA_FEATHER_POINTED	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FEATHER_POINTED /;"	d
ICON_FA_FERRY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FERRY /;"	d
ICON_FA_FILE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE /;"	d
ICON_FA_FILE_ARROW_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_ARROW_DOWN /;"	d
ICON_FA_FILE_ARROW_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_ARROW_UP /;"	d
ICON_FA_FILE_AUDIO	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_AUDIO /;"	d
ICON_FA_FILE_CIRCLE_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_CIRCLE_CHECK /;"	d
ICON_FA_FILE_CIRCLE_EXCLAMATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_CIRCLE_EXCLAMATION /;"	d
ICON_FA_FILE_CIRCLE_MINUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_CIRCLE_MINUS /;"	d
ICON_FA_FILE_CIRCLE_PLUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_CIRCLE_PLUS /;"	d
ICON_FA_FILE_CIRCLE_QUESTION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_CIRCLE_QUESTION /;"	d
ICON_FA_FILE_CIRCLE_XMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_CIRCLE_XMARK /;"	d
ICON_FA_FILE_CODE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_CODE /;"	d
ICON_FA_FILE_CONTRACT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_CONTRACT /;"	d
ICON_FA_FILE_CSV	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_CSV /;"	d
ICON_FA_FILE_EXCEL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_EXCEL /;"	d
ICON_FA_FILE_EXPORT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_EXPORT /;"	d
ICON_FA_FILE_IMAGE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_IMAGE /;"	d
ICON_FA_FILE_IMPORT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_IMPORT /;"	d
ICON_FA_FILE_INVOICE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_INVOICE /;"	d
ICON_FA_FILE_INVOICE_DOLLAR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_INVOICE_DOLLAR /;"	d
ICON_FA_FILE_LINES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_LINES /;"	d
ICON_FA_FILE_MEDICAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_MEDICAL /;"	d
ICON_FA_FILE_PDF	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_PDF /;"	d
ICON_FA_FILE_PEN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_PEN /;"	d
ICON_FA_FILE_POWERPOINT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_POWERPOINT /;"	d
ICON_FA_FILE_PRESCRIPTION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_PRESCRIPTION /;"	d
ICON_FA_FILE_SHIELD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_SHIELD /;"	d
ICON_FA_FILE_SIGNATURE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_SIGNATURE /;"	d
ICON_FA_FILE_VIDEO	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_VIDEO /;"	d
ICON_FA_FILE_WAVEFORM	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_WAVEFORM /;"	d
ICON_FA_FILE_WORD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_WORD /;"	d
ICON_FA_FILE_ZIPPER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILE_ZIPPER /;"	d
ICON_FA_FILL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILL /;"	d
ICON_FA_FILL_DRIP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILL_DRIP /;"	d
ICON_FA_FILM	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILM /;"	d
ICON_FA_FILTER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILTER /;"	d
ICON_FA_FILTER_CIRCLE_DOLLAR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILTER_CIRCLE_DOLLAR /;"	d
ICON_FA_FILTER_CIRCLE_XMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FILTER_CIRCLE_XMARK /;"	d
ICON_FA_FINGERPRINT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FINGERPRINT /;"	d
ICON_FA_FIRE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FIRE /;"	d
ICON_FA_FIRE_BURNER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FIRE_BURNER /;"	d
ICON_FA_FIRE_EXTINGUISHER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FIRE_EXTINGUISHER /;"	d
ICON_FA_FIRE_FLAME_CURVED	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FIRE_FLAME_CURVED /;"	d
ICON_FA_FIRE_FLAME_SIMPLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FIRE_FLAME_SIMPLE /;"	d
ICON_FA_FISH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FISH /;"	d
ICON_FA_FISH_FINS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FISH_FINS /;"	d
ICON_FA_FLAG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FLAG /;"	d
ICON_FA_FLAG_CHECKERED	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FLAG_CHECKERED /;"	d
ICON_FA_FLAG_USA	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FLAG_USA /;"	d
ICON_FA_FLASK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FLASK /;"	d
ICON_FA_FLASK_VIAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FLASK_VIAL /;"	d
ICON_FA_FLOPPY_DISK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FLOPPY_DISK /;"	d
ICON_FA_FLORIN_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FLORIN_SIGN /;"	d
ICON_FA_FOLDER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FOLDER /;"	d
ICON_FA_FOLDER_CLOSED	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FOLDER_CLOSED /;"	d
ICON_FA_FOLDER_MINUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FOLDER_MINUS /;"	d
ICON_FA_FOLDER_OPEN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FOLDER_OPEN /;"	d
ICON_FA_FOLDER_PLUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FOLDER_PLUS /;"	d
ICON_FA_FOLDER_TREE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FOLDER_TREE /;"	d
ICON_FA_FONT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FONT /;"	d
ICON_FA_FONT_AWESOME	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FONT_AWESOME /;"	d
ICON_FA_FOOTBALL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FOOTBALL /;"	d
ICON_FA_FORWARD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FORWARD /;"	d
ICON_FA_FORWARD_FAST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FORWARD_FAST /;"	d
ICON_FA_FORWARD_STEP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FORWARD_STEP /;"	d
ICON_FA_FRANC_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FRANC_SIGN /;"	d
ICON_FA_FROG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FROG /;"	d
ICON_FA_FUTBOL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_FUTBOL /;"	d
ICON_FA_G	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_G /;"	d
ICON_FA_GAMEPAD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GAMEPAD /;"	d
ICON_FA_GAS_PUMP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GAS_PUMP /;"	d
ICON_FA_GAUGE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GAUGE /;"	d
ICON_FA_GAUGE_HIGH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GAUGE_HIGH /;"	d
ICON_FA_GAUGE_SIMPLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GAUGE_SIMPLE /;"	d
ICON_FA_GAUGE_SIMPLE_HIGH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GAUGE_SIMPLE_HIGH /;"	d
ICON_FA_GAVEL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GAVEL /;"	d
ICON_FA_GEAR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GEAR /;"	d
ICON_FA_GEARS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GEARS /;"	d
ICON_FA_GEM	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GEM /;"	d
ICON_FA_GENDERLESS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GENDERLESS /;"	d
ICON_FA_GHOST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GHOST /;"	d
ICON_FA_GIFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GIFT /;"	d
ICON_FA_GIFTS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GIFTS /;"	d
ICON_FA_GLASSES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GLASSES /;"	d
ICON_FA_GLASS_WATER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GLASS_WATER /;"	d
ICON_FA_GLASS_WATER_DROPLET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GLASS_WATER_DROPLET /;"	d
ICON_FA_GLOBE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GLOBE /;"	d
ICON_FA_GOLF_BALL_TEE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GOLF_BALL_TEE /;"	d
ICON_FA_GOPURAM	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GOPURAM /;"	d
ICON_FA_GRADUATION_CAP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GRADUATION_CAP /;"	d
ICON_FA_GREATER_THAN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GREATER_THAN /;"	d
ICON_FA_GREATER_THAN_EQUAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GREATER_THAN_EQUAL /;"	d
ICON_FA_GRIP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GRIP /;"	d
ICON_FA_GRIP_LINES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GRIP_LINES /;"	d
ICON_FA_GRIP_LINES_VERTICAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GRIP_LINES_VERTICAL /;"	d
ICON_FA_GRIP_VERTICAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GRIP_VERTICAL /;"	d
ICON_FA_GROUP_ARROWS_ROTATE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GROUP_ARROWS_ROTATE /;"	d
ICON_FA_GUARANI_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GUARANI_SIGN /;"	d
ICON_FA_GUITAR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GUITAR /;"	d
ICON_FA_GUN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_GUN /;"	d
ICON_FA_H	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_H /;"	d
ICON_FA_HAMMER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAMMER /;"	d
ICON_FA_HAMSA	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAMSA /;"	d
ICON_FA_HAND	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAND /;"	d
ICON_FA_HANDCUFFS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HANDCUFFS /;"	d
ICON_FA_HANDS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HANDS /;"	d
ICON_FA_HANDSHAKE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HANDSHAKE /;"	d
ICON_FA_HANDSHAKE_ANGLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HANDSHAKE_ANGLE /;"	d
ICON_FA_HANDSHAKE_SIMPLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HANDSHAKE_SIMPLE /;"	d
ICON_FA_HANDSHAKE_SIMPLE_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HANDSHAKE_SIMPLE_SLASH /;"	d
ICON_FA_HANDSHAKE_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HANDSHAKE_SLASH /;"	d
ICON_FA_HANDS_ASL_INTERPRETING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HANDS_ASL_INTERPRETING /;"	d
ICON_FA_HANDS_BOUND	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HANDS_BOUND /;"	d
ICON_FA_HANDS_BUBBLES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HANDS_BUBBLES /;"	d
ICON_FA_HANDS_CLAPPING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HANDS_CLAPPING /;"	d
ICON_FA_HANDS_HOLDING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HANDS_HOLDING /;"	d
ICON_FA_HANDS_HOLDING_CHILD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HANDS_HOLDING_CHILD /;"	d
ICON_FA_HANDS_HOLDING_CIRCLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HANDS_HOLDING_CIRCLE /;"	d
ICON_FA_HANDS_PRAYING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HANDS_PRAYING /;"	d
ICON_FA_HAND_BACK_FIST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAND_BACK_FIST /;"	d
ICON_FA_HAND_DOTS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAND_DOTS /;"	d
ICON_FA_HAND_FIST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAND_FIST /;"	d
ICON_FA_HAND_HOLDING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAND_HOLDING /;"	d
ICON_FA_HAND_HOLDING_DOLLAR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAND_HOLDING_DOLLAR /;"	d
ICON_FA_HAND_HOLDING_DROPLET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAND_HOLDING_DROPLET /;"	d
ICON_FA_HAND_HOLDING_HAND	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAND_HOLDING_HAND /;"	d
ICON_FA_HAND_HOLDING_HEART	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAND_HOLDING_HEART /;"	d
ICON_FA_HAND_HOLDING_MEDICAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAND_HOLDING_MEDICAL /;"	d
ICON_FA_HAND_LIZARD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAND_LIZARD /;"	d
ICON_FA_HAND_MIDDLE_FINGER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAND_MIDDLE_FINGER /;"	d
ICON_FA_HAND_PEACE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAND_PEACE /;"	d
ICON_FA_HAND_POINTER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAND_POINTER /;"	d
ICON_FA_HAND_POINT_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAND_POINT_DOWN /;"	d
ICON_FA_HAND_POINT_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAND_POINT_LEFT /;"	d
ICON_FA_HAND_POINT_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAND_POINT_RIGHT /;"	d
ICON_FA_HAND_POINT_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAND_POINT_UP /;"	d
ICON_FA_HAND_SCISSORS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAND_SCISSORS /;"	d
ICON_FA_HAND_SPARKLES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAND_SPARKLES /;"	d
ICON_FA_HAND_SPOCK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAND_SPOCK /;"	d
ICON_FA_HANUKIAH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HANUKIAH /;"	d
ICON_FA_HARD_DRIVE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HARD_DRIVE /;"	d
ICON_FA_HASHTAG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HASHTAG /;"	d
ICON_FA_HAT_COWBOY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAT_COWBOY /;"	d
ICON_FA_HAT_COWBOY_SIDE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAT_COWBOY_SIDE /;"	d
ICON_FA_HAT_WIZARD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HAT_WIZARD /;"	d
ICON_FA_HEADING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HEADING /;"	d
ICON_FA_HEADPHONES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HEADPHONES /;"	d
ICON_FA_HEADPHONES_SIMPLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HEADPHONES_SIMPLE /;"	d
ICON_FA_HEADSET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HEADSET /;"	d
ICON_FA_HEAD_SIDE_COUGH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HEAD_SIDE_COUGH /;"	d
ICON_FA_HEAD_SIDE_COUGH_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HEAD_SIDE_COUGH_SLASH /;"	d
ICON_FA_HEAD_SIDE_MASK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HEAD_SIDE_MASK /;"	d
ICON_FA_HEAD_SIDE_VIRUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HEAD_SIDE_VIRUS /;"	d
ICON_FA_HEART	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HEART /;"	d
ICON_FA_HEART_CIRCLE_BOLT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HEART_CIRCLE_BOLT /;"	d
ICON_FA_HEART_CIRCLE_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HEART_CIRCLE_CHECK /;"	d
ICON_FA_HEART_CIRCLE_EXCLAMATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HEART_CIRCLE_EXCLAMATION /;"	d
ICON_FA_HEART_CIRCLE_MINUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HEART_CIRCLE_MINUS /;"	d
ICON_FA_HEART_CIRCLE_PLUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HEART_CIRCLE_PLUS /;"	d
ICON_FA_HEART_CIRCLE_XMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HEART_CIRCLE_XMARK /;"	d
ICON_FA_HEART_CRACK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HEART_CRACK /;"	d
ICON_FA_HEART_PULSE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HEART_PULSE /;"	d
ICON_FA_HELICOPTER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HELICOPTER /;"	d
ICON_FA_HELICOPTER_SYMBOL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HELICOPTER_SYMBOL /;"	d
ICON_FA_HELMET_SAFETY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HELMET_SAFETY /;"	d
ICON_FA_HELMET_UN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HELMET_UN /;"	d
ICON_FA_HIGHLIGHTER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HIGHLIGHTER /;"	d
ICON_FA_HILL_AVALANCHE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HILL_AVALANCHE /;"	d
ICON_FA_HILL_ROCKSLIDE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HILL_ROCKSLIDE /;"	d
ICON_FA_HIPPO	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HIPPO /;"	d
ICON_FA_HOCKEY_PUCK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOCKEY_PUCK /;"	d
ICON_FA_HOLLY_BERRY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOLLY_BERRY /;"	d
ICON_FA_HORSE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HORSE /;"	d
ICON_FA_HORSE_HEAD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HORSE_HEAD /;"	d
ICON_FA_HOSPITAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOSPITAL /;"	d
ICON_FA_HOSPITAL_USER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOSPITAL_USER /;"	d
ICON_FA_HOTDOG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOTDOG /;"	d
ICON_FA_HOTEL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOTEL /;"	d
ICON_FA_HOT_TUB_PERSON	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOT_TUB_PERSON /;"	d
ICON_FA_HOURGLASS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOURGLASS /;"	d
ICON_FA_HOURGLASS_EMPTY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOURGLASS_EMPTY /;"	d
ICON_FA_HOURGLASS_END	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOURGLASS_END /;"	d
ICON_FA_HOURGLASS_START	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOURGLASS_START /;"	d
ICON_FA_HOUSE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE /;"	d
ICON_FA_HOUSE_CHIMNEY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_CHIMNEY /;"	d
ICON_FA_HOUSE_CHIMNEY_CRACK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_CHIMNEY_CRACK /;"	d
ICON_FA_HOUSE_CHIMNEY_MEDICAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_CHIMNEY_MEDICAL /;"	d
ICON_FA_HOUSE_CHIMNEY_USER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_CHIMNEY_USER /;"	d
ICON_FA_HOUSE_CHIMNEY_WINDOW	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_CHIMNEY_WINDOW /;"	d
ICON_FA_HOUSE_CIRCLE_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_CIRCLE_CHECK /;"	d
ICON_FA_HOUSE_CIRCLE_EXCLAMATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_CIRCLE_EXCLAMATION /;"	d
ICON_FA_HOUSE_CIRCLE_XMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_CIRCLE_XMARK /;"	d
ICON_FA_HOUSE_CRACK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_CRACK /;"	d
ICON_FA_HOUSE_FIRE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_FIRE /;"	d
ICON_FA_HOUSE_FLAG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_FLAG /;"	d
ICON_FA_HOUSE_FLOOD_WATER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_FLOOD_WATER /;"	d
ICON_FA_HOUSE_FLOOD_WATER_CIRCLE_ARROW_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_FLOOD_WATER_CIRCLE_ARROW_RIGHT /;"	d
ICON_FA_HOUSE_LAPTOP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_LAPTOP /;"	d
ICON_FA_HOUSE_LOCK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_LOCK /;"	d
ICON_FA_HOUSE_MEDICAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_MEDICAL /;"	d
ICON_FA_HOUSE_MEDICAL_CIRCLE_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_MEDICAL_CIRCLE_CHECK /;"	d
ICON_FA_HOUSE_MEDICAL_CIRCLE_EXCLAMATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_MEDICAL_CIRCLE_EXCLAMATION /;"	d
ICON_FA_HOUSE_MEDICAL_CIRCLE_XMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_MEDICAL_CIRCLE_XMARK /;"	d
ICON_FA_HOUSE_MEDICAL_FLAG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_MEDICAL_FLAG /;"	d
ICON_FA_HOUSE_SIGNAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_SIGNAL /;"	d
ICON_FA_HOUSE_TSUNAMI	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_TSUNAMI /;"	d
ICON_FA_HOUSE_USER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HOUSE_USER /;"	d
ICON_FA_HRYVNIA_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HRYVNIA_SIGN /;"	d
ICON_FA_HURRICANE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_HURRICANE /;"	d
ICON_FA_I	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_I /;"	d
ICON_FA_ICE_CREAM	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ICE_CREAM /;"	d
ICON_FA_ICICLES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ICICLES /;"	d
ICON_FA_ICONS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ICONS /;"	d
ICON_FA_ID_BADGE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ID_BADGE /;"	d
ICON_FA_ID_CARD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ID_CARD /;"	d
ICON_FA_ID_CARD_CLIP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ID_CARD_CLIP /;"	d
ICON_FA_IGLOO	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_IGLOO /;"	d
ICON_FA_IMAGE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_IMAGE /;"	d
ICON_FA_IMAGES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_IMAGES /;"	d
ICON_FA_IMAGE_PORTRAIT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_IMAGE_PORTRAIT /;"	d
ICON_FA_INBOX	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_INBOX /;"	d
ICON_FA_INDENT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_INDENT /;"	d
ICON_FA_INDIAN_RUPEE_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_INDIAN_RUPEE_SIGN /;"	d
ICON_FA_INDUSTRY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_INDUSTRY /;"	d
ICON_FA_INFINITY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_INFINITY /;"	d
ICON_FA_INFO	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_INFO /;"	d
ICON_FA_ITALIC	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ITALIC /;"	d
ICON_FA_I_CURSOR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_I_CURSOR /;"	d
ICON_FA_J	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_J /;"	d
ICON_FA_JAR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_JAR /;"	d
ICON_FA_JAR_WHEAT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_JAR_WHEAT /;"	d
ICON_FA_JEDI	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_JEDI /;"	d
ICON_FA_JET_FIGHTER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_JET_FIGHTER /;"	d
ICON_FA_JET_FIGHTER_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_JET_FIGHTER_UP /;"	d
ICON_FA_JOINT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_JOINT /;"	d
ICON_FA_JUG_DETERGENT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_JUG_DETERGENT /;"	d
ICON_FA_K	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_K /;"	d
ICON_FA_KAABA	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_KAABA /;"	d
ICON_FA_KEY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_KEY /;"	d
ICON_FA_KEYBOARD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_KEYBOARD /;"	d
ICON_FA_KHANDA	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_KHANDA /;"	d
ICON_FA_KIP_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_KIP_SIGN /;"	d
ICON_FA_KITCHEN_SET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_KITCHEN_SET /;"	d
ICON_FA_KIT_MEDICAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_KIT_MEDICAL /;"	d
ICON_FA_KIWI_BIRD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_KIWI_BIRD /;"	d
ICON_FA_L	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_L /;"	d
ICON_FA_LANDMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LANDMARK /;"	d
ICON_FA_LANDMARK_DOME	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LANDMARK_DOME /;"	d
ICON_FA_LANDMARK_FLAG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LANDMARK_FLAG /;"	d
ICON_FA_LAND_MINE_ON	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LAND_MINE_ON /;"	d
ICON_FA_LANGUAGE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LANGUAGE /;"	d
ICON_FA_LAPTOP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LAPTOP /;"	d
ICON_FA_LAPTOP_CODE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LAPTOP_CODE /;"	d
ICON_FA_LAPTOP_FILE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LAPTOP_FILE /;"	d
ICON_FA_LAPTOP_MEDICAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LAPTOP_MEDICAL /;"	d
ICON_FA_LARI_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LARI_SIGN /;"	d
ICON_FA_LAYER_GROUP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LAYER_GROUP /;"	d
ICON_FA_LEAF	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LEAF /;"	d
ICON_FA_LEFT_LONG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LEFT_LONG /;"	d
ICON_FA_LEFT_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LEFT_RIGHT /;"	d
ICON_FA_LEMON	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LEMON /;"	d
ICON_FA_LESS_THAN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LESS_THAN /;"	d
ICON_FA_LESS_THAN_EQUAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LESS_THAN_EQUAL /;"	d
ICON_FA_LIFE_RING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LIFE_RING /;"	d
ICON_FA_LIGHTBULB	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LIGHTBULB /;"	d
ICON_FA_LINES_LEANING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LINES_LEANING /;"	d
ICON_FA_LINK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LINK /;"	d
ICON_FA_LINK_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LINK_SLASH /;"	d
ICON_FA_LIRA_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LIRA_SIGN /;"	d
ICON_FA_LIST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LIST /;"	d
ICON_FA_LIST_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LIST_CHECK /;"	d
ICON_FA_LIST_OL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LIST_OL /;"	d
ICON_FA_LIST_UL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LIST_UL /;"	d
ICON_FA_LITECOIN_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LITECOIN_SIGN /;"	d
ICON_FA_LOCATION_ARROW	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LOCATION_ARROW /;"	d
ICON_FA_LOCATION_CROSSHAIRS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LOCATION_CROSSHAIRS /;"	d
ICON_FA_LOCATION_DOT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LOCATION_DOT /;"	d
ICON_FA_LOCATION_PIN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LOCATION_PIN /;"	d
ICON_FA_LOCATION_PIN_LOCK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LOCATION_PIN_LOCK /;"	d
ICON_FA_LOCK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LOCK /;"	d
ICON_FA_LOCK_OPEN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LOCK_OPEN /;"	d
ICON_FA_LOCUST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LOCUST /;"	d
ICON_FA_LUNGS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LUNGS /;"	d
ICON_FA_LUNGS_VIRUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_LUNGS_VIRUS /;"	d
ICON_FA_M	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_M /;"	d
ICON_FA_MAGNET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MAGNET /;"	d
ICON_FA_MAGNIFYING_GLASS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MAGNIFYING_GLASS /;"	d
ICON_FA_MAGNIFYING_GLASS_ARROW_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MAGNIFYING_GLASS_ARROW_RIGHT /;"	d
ICON_FA_MAGNIFYING_GLASS_CHART	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MAGNIFYING_GLASS_CHART /;"	d
ICON_FA_MAGNIFYING_GLASS_DOLLAR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MAGNIFYING_GLASS_DOLLAR /;"	d
ICON_FA_MAGNIFYING_GLASS_LOCATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MAGNIFYING_GLASS_LOCATION /;"	d
ICON_FA_MAGNIFYING_GLASS_MINUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MAGNIFYING_GLASS_MINUS /;"	d
ICON_FA_MAGNIFYING_GLASS_PLUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MAGNIFYING_GLASS_PLUS /;"	d
ICON_FA_MANAT_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MANAT_SIGN /;"	d
ICON_FA_MAP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MAP /;"	d
ICON_FA_MAP_LOCATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MAP_LOCATION /;"	d
ICON_FA_MAP_LOCATION_DOT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MAP_LOCATION_DOT /;"	d
ICON_FA_MAP_PIN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MAP_PIN /;"	d
ICON_FA_MARKER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MARKER /;"	d
ICON_FA_MARS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MARS /;"	d
ICON_FA_MARS_AND_VENUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MARS_AND_VENUS /;"	d
ICON_FA_MARS_AND_VENUS_BURST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MARS_AND_VENUS_BURST /;"	d
ICON_FA_MARS_DOUBLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MARS_DOUBLE /;"	d
ICON_FA_MARS_STROKE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MARS_STROKE /;"	d
ICON_FA_MARS_STROKE_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MARS_STROKE_RIGHT /;"	d
ICON_FA_MARS_STROKE_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MARS_STROKE_UP /;"	d
ICON_FA_MARTINI_GLASS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MARTINI_GLASS /;"	d
ICON_FA_MARTINI_GLASS_CITRUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MARTINI_GLASS_CITRUS /;"	d
ICON_FA_MARTINI_GLASS_EMPTY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MARTINI_GLASS_EMPTY /;"	d
ICON_FA_MASK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MASK /;"	d
ICON_FA_MASKS_THEATER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MASKS_THEATER /;"	d
ICON_FA_MASK_FACE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MASK_FACE /;"	d
ICON_FA_MASK_VENTILATOR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MASK_VENTILATOR /;"	d
ICON_FA_MATTRESS_PILLOW	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MATTRESS_PILLOW /;"	d
ICON_FA_MAXIMIZE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MAXIMIZE /;"	d
ICON_FA_MEDAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MEDAL /;"	d
ICON_FA_MEMORY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MEMORY /;"	d
ICON_FA_MENORAH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MENORAH /;"	d
ICON_FA_MERCURY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MERCURY /;"	d
ICON_FA_MESSAGE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MESSAGE /;"	d
ICON_FA_METEOR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_METEOR /;"	d
ICON_FA_MICROCHIP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MICROCHIP /;"	d
ICON_FA_MICROPHONE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MICROPHONE /;"	d
ICON_FA_MICROPHONE_LINES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MICROPHONE_LINES /;"	d
ICON_FA_MICROPHONE_LINES_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MICROPHONE_LINES_SLASH /;"	d
ICON_FA_MICROPHONE_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MICROPHONE_SLASH /;"	d
ICON_FA_MICROSCOPE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MICROSCOPE /;"	d
ICON_FA_MILL_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MILL_SIGN /;"	d
ICON_FA_MINIMIZE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MINIMIZE /;"	d
ICON_FA_MINUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MINUS /;"	d
ICON_FA_MITTEN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MITTEN /;"	d
ICON_FA_MOBILE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MOBILE /;"	d
ICON_FA_MOBILE_BUTTON	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MOBILE_BUTTON /;"	d
ICON_FA_MOBILE_RETRO	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MOBILE_RETRO /;"	d
ICON_FA_MOBILE_SCREEN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MOBILE_SCREEN /;"	d
ICON_FA_MOBILE_SCREEN_BUTTON	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MOBILE_SCREEN_BUTTON /;"	d
ICON_FA_MONEY_BILL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MONEY_BILL /;"	d
ICON_FA_MONEY_BILLS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MONEY_BILLS /;"	d
ICON_FA_MONEY_BILL_1	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MONEY_BILL_1 /;"	d
ICON_FA_MONEY_BILL_1_WAVE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MONEY_BILL_1_WAVE /;"	d
ICON_FA_MONEY_BILL_TRANSFER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MONEY_BILL_TRANSFER /;"	d
ICON_FA_MONEY_BILL_TREND_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MONEY_BILL_TREND_UP /;"	d
ICON_FA_MONEY_BILL_WAVE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MONEY_BILL_WAVE /;"	d
ICON_FA_MONEY_BILL_WHEAT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MONEY_BILL_WHEAT /;"	d
ICON_FA_MONEY_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MONEY_CHECK /;"	d
ICON_FA_MONEY_CHECK_DOLLAR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MONEY_CHECK_DOLLAR /;"	d
ICON_FA_MONUMENT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MONUMENT /;"	d
ICON_FA_MOON	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MOON /;"	d
ICON_FA_MORTAR_PESTLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MORTAR_PESTLE /;"	d
ICON_FA_MOSQUE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MOSQUE /;"	d
ICON_FA_MOSQUITO	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MOSQUITO /;"	d
ICON_FA_MOSQUITO_NET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MOSQUITO_NET /;"	d
ICON_FA_MOTORCYCLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MOTORCYCLE /;"	d
ICON_FA_MOUND	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MOUND /;"	d
ICON_FA_MOUNTAIN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MOUNTAIN /;"	d
ICON_FA_MOUNTAIN_CITY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MOUNTAIN_CITY /;"	d
ICON_FA_MOUNTAIN_SUN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MOUNTAIN_SUN /;"	d
ICON_FA_MUG_HOT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MUG_HOT /;"	d
ICON_FA_MUG_SAUCER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MUG_SAUCER /;"	d
ICON_FA_MUSIC	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_MUSIC /;"	d
ICON_FA_N	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_N /;"	d
ICON_FA_NAIRA_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_NAIRA_SIGN /;"	d
ICON_FA_NETWORK_WIRED	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_NETWORK_WIRED /;"	d
ICON_FA_NEUTER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_NEUTER /;"	d
ICON_FA_NEWSPAPER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_NEWSPAPER /;"	d
ICON_FA_NOTES_MEDICAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_NOTES_MEDICAL /;"	d
ICON_FA_NOTE_STICKY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_NOTE_STICKY /;"	d
ICON_FA_NOT_EQUAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_NOT_EQUAL /;"	d
ICON_FA_O	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_O /;"	d
ICON_FA_OBJECT_GROUP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_OBJECT_GROUP /;"	d
ICON_FA_OBJECT_UNGROUP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_OBJECT_UNGROUP /;"	d
ICON_FA_OIL_CAN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_OIL_CAN /;"	d
ICON_FA_OIL_WELL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_OIL_WELL /;"	d
ICON_FA_OM	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_OM /;"	d
ICON_FA_OTTER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_OTTER /;"	d
ICON_FA_OUTDENT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_OUTDENT /;"	d
ICON_FA_P	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_P /;"	d
ICON_FA_PAGER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PAGER /;"	d
ICON_FA_PAINTBRUSH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PAINTBRUSH /;"	d
ICON_FA_PAINT_ROLLER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PAINT_ROLLER /;"	d
ICON_FA_PALETTE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PALETTE /;"	d
ICON_FA_PALLET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PALLET /;"	d
ICON_FA_PANORAMA	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PANORAMA /;"	d
ICON_FA_PAPERCLIP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PAPERCLIP /;"	d
ICON_FA_PAPER_PLANE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PAPER_PLANE /;"	d
ICON_FA_PARACHUTE_BOX	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PARACHUTE_BOX /;"	d
ICON_FA_PARAGRAPH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PARAGRAPH /;"	d
ICON_FA_PASSPORT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PASSPORT /;"	d
ICON_FA_PASTE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PASTE /;"	d
ICON_FA_PAUSE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PAUSE /;"	d
ICON_FA_PAW	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PAW /;"	d
ICON_FA_PEACE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PEACE /;"	d
ICON_FA_PEN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PEN /;"	d
ICON_FA_PENCIL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PENCIL /;"	d
ICON_FA_PEN_CLIP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PEN_CLIP /;"	d
ICON_FA_PEN_FANCY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PEN_FANCY /;"	d
ICON_FA_PEN_NIB	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PEN_NIB /;"	d
ICON_FA_PEN_RULER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PEN_RULER /;"	d
ICON_FA_PEN_TO_SQUARE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PEN_TO_SQUARE /;"	d
ICON_FA_PEOPLE_ARROWS_LEFT_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PEOPLE_ARROWS_LEFT_RIGHT /;"	d
ICON_FA_PEOPLE_CARRY_BOX	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PEOPLE_CARRY_BOX /;"	d
ICON_FA_PEOPLE_GROUP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PEOPLE_GROUP /;"	d
ICON_FA_PEOPLE_LINE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PEOPLE_LINE /;"	d
ICON_FA_PEOPLE_PULLING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PEOPLE_PULLING /;"	d
ICON_FA_PEOPLE_ROBBERY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PEOPLE_ROBBERY /;"	d
ICON_FA_PEOPLE_ROOF	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PEOPLE_ROOF /;"	d
ICON_FA_PEPPER_HOT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PEPPER_HOT /;"	d
ICON_FA_PERCENT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERCENT /;"	d
ICON_FA_PERSON	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON /;"	d
ICON_FA_PERSON_ARROW_DOWN_TO_LINE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_ARROW_DOWN_TO_LINE /;"	d
ICON_FA_PERSON_ARROW_UP_FROM_LINE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_ARROW_UP_FROM_LINE /;"	d
ICON_FA_PERSON_BIKING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_BIKING /;"	d
ICON_FA_PERSON_BOOTH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_BOOTH /;"	d
ICON_FA_PERSON_BREASTFEEDING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_BREASTFEEDING /;"	d
ICON_FA_PERSON_BURST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_BURST /;"	d
ICON_FA_PERSON_CANE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_CANE /;"	d
ICON_FA_PERSON_CHALKBOARD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_CHALKBOARD /;"	d
ICON_FA_PERSON_CIRCLE_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_CIRCLE_CHECK /;"	d
ICON_FA_PERSON_CIRCLE_EXCLAMATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_CIRCLE_EXCLAMATION /;"	d
ICON_FA_PERSON_CIRCLE_MINUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_CIRCLE_MINUS /;"	d
ICON_FA_PERSON_CIRCLE_PLUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_CIRCLE_PLUS /;"	d
ICON_FA_PERSON_CIRCLE_QUESTION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_CIRCLE_QUESTION /;"	d
ICON_FA_PERSON_CIRCLE_XMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_CIRCLE_XMARK /;"	d
ICON_FA_PERSON_DIGGING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_DIGGING /;"	d
ICON_FA_PERSON_DOTS_FROM_LINE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_DOTS_FROM_LINE /;"	d
ICON_FA_PERSON_DRESS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_DRESS /;"	d
ICON_FA_PERSON_DRESS_BURST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_DRESS_BURST /;"	d
ICON_FA_PERSON_DROWNING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_DROWNING /;"	d
ICON_FA_PERSON_FALLING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_FALLING /;"	d
ICON_FA_PERSON_FALLING_BURST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_FALLING_BURST /;"	d
ICON_FA_PERSON_HALF_DRESS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_HALF_DRESS /;"	d
ICON_FA_PERSON_HARASSING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_HARASSING /;"	d
ICON_FA_PERSON_HIKING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_HIKING /;"	d
ICON_FA_PERSON_MILITARY_POINTING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_MILITARY_POINTING /;"	d
ICON_FA_PERSON_MILITARY_RIFLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_MILITARY_RIFLE /;"	d
ICON_FA_PERSON_MILITARY_TO_PERSON	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_MILITARY_TO_PERSON /;"	d
ICON_FA_PERSON_PRAYING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_PRAYING /;"	d
ICON_FA_PERSON_PREGNANT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_PREGNANT /;"	d
ICON_FA_PERSON_RAYS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_RAYS /;"	d
ICON_FA_PERSON_RIFLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_RIFLE /;"	d
ICON_FA_PERSON_RUNNING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_RUNNING /;"	d
ICON_FA_PERSON_SHELTER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_SHELTER /;"	d
ICON_FA_PERSON_SKATING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_SKATING /;"	d
ICON_FA_PERSON_SKIING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_SKIING /;"	d
ICON_FA_PERSON_SKIING_NORDIC	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_SKIING_NORDIC /;"	d
ICON_FA_PERSON_SNOWBOARDING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_SNOWBOARDING /;"	d
ICON_FA_PERSON_SWIMMING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_SWIMMING /;"	d
ICON_FA_PERSON_THROUGH_WINDOW	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_THROUGH_WINDOW /;"	d
ICON_FA_PERSON_WALKING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_WALKING /;"	d
ICON_FA_PERSON_WALKING_ARROW_LOOP_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_WALKING_ARROW_LOOP_LEFT /;"	d
ICON_FA_PERSON_WALKING_ARROW_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_WALKING_ARROW_RIGHT /;"	d
ICON_FA_PERSON_WALKING_DASHED_LINE_ARROW_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_WALKING_DASHED_LINE_ARROW_RIGHT /;"	d
ICON_FA_PERSON_WALKING_LUGGAGE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_WALKING_LUGGAGE /;"	d
ICON_FA_PERSON_WALKING_WITH_CANE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PERSON_WALKING_WITH_CANE /;"	d
ICON_FA_PESETA_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PESETA_SIGN /;"	d
ICON_FA_PESO_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PESO_SIGN /;"	d
ICON_FA_PHONE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PHONE /;"	d
ICON_FA_PHONE_FLIP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PHONE_FLIP /;"	d
ICON_FA_PHONE_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PHONE_SLASH /;"	d
ICON_FA_PHONE_VOLUME	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PHONE_VOLUME /;"	d
ICON_FA_PHOTO_FILM	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PHOTO_FILM /;"	d
ICON_FA_PIGGY_BANK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PIGGY_BANK /;"	d
ICON_FA_PILLS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PILLS /;"	d
ICON_FA_PIZZA_SLICE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PIZZA_SLICE /;"	d
ICON_FA_PLACE_OF_WORSHIP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLACE_OF_WORSHIP /;"	d
ICON_FA_PLANE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLANE /;"	d
ICON_FA_PLANE_ARRIVAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLANE_ARRIVAL /;"	d
ICON_FA_PLANE_CIRCLE_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLANE_CIRCLE_CHECK /;"	d
ICON_FA_PLANE_CIRCLE_EXCLAMATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLANE_CIRCLE_EXCLAMATION /;"	d
ICON_FA_PLANE_CIRCLE_XMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLANE_CIRCLE_XMARK /;"	d
ICON_FA_PLANE_DEPARTURE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLANE_DEPARTURE /;"	d
ICON_FA_PLANE_LOCK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLANE_LOCK /;"	d
ICON_FA_PLANE_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLANE_SLASH /;"	d
ICON_FA_PLANE_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLANE_UP /;"	d
ICON_FA_PLANT_WILT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLANT_WILT /;"	d
ICON_FA_PLATE_WHEAT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLATE_WHEAT /;"	d
ICON_FA_PLAY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLAY /;"	d
ICON_FA_PLUG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLUG /;"	d
ICON_FA_PLUG_CIRCLE_BOLT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLUG_CIRCLE_BOLT /;"	d
ICON_FA_PLUG_CIRCLE_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLUG_CIRCLE_CHECK /;"	d
ICON_FA_PLUG_CIRCLE_EXCLAMATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLUG_CIRCLE_EXCLAMATION /;"	d
ICON_FA_PLUG_CIRCLE_MINUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLUG_CIRCLE_MINUS /;"	d
ICON_FA_PLUG_CIRCLE_PLUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLUG_CIRCLE_PLUS /;"	d
ICON_FA_PLUG_CIRCLE_XMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLUG_CIRCLE_XMARK /;"	d
ICON_FA_PLUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLUS /;"	d
ICON_FA_PLUS_MINUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PLUS_MINUS /;"	d
ICON_FA_PODCAST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PODCAST /;"	d
ICON_FA_POO	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_POO /;"	d
ICON_FA_POOP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_POOP /;"	d
ICON_FA_POO_STORM	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_POO_STORM /;"	d
ICON_FA_POWER_OFF	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_POWER_OFF /;"	d
ICON_FA_PRESCRIPTION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PRESCRIPTION /;"	d
ICON_FA_PRESCRIPTION_BOTTLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PRESCRIPTION_BOTTLE /;"	d
ICON_FA_PRESCRIPTION_BOTTLE_MEDICAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PRESCRIPTION_BOTTLE_MEDICAL /;"	d
ICON_FA_PRINT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PRINT /;"	d
ICON_FA_PUMP_MEDICAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PUMP_MEDICAL /;"	d
ICON_FA_PUMP_SOAP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PUMP_SOAP /;"	d
ICON_FA_PUZZLE_PIECE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_PUZZLE_PIECE /;"	d
ICON_FA_Q	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_Q /;"	d
ICON_FA_QRCODE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_QRCODE /;"	d
ICON_FA_QUESTION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_QUESTION /;"	d
ICON_FA_QUOTE_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_QUOTE_LEFT /;"	d
ICON_FA_QUOTE_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_QUOTE_RIGHT /;"	d
ICON_FA_R	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_R /;"	d
ICON_FA_RADIATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RADIATION /;"	d
ICON_FA_RADIO	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RADIO /;"	d
ICON_FA_RAINBOW	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RAINBOW /;"	d
ICON_FA_RANKING_STAR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RANKING_STAR /;"	d
ICON_FA_RECEIPT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RECEIPT /;"	d
ICON_FA_RECORD_VINYL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RECORD_VINYL /;"	d
ICON_FA_RECTANGLE_AD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RECTANGLE_AD /;"	d
ICON_FA_RECTANGLE_LIST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RECTANGLE_LIST /;"	d
ICON_FA_RECTANGLE_XMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RECTANGLE_XMARK /;"	d
ICON_FA_RECYCLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RECYCLE /;"	d
ICON_FA_REGISTERED	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_REGISTERED /;"	d
ICON_FA_REPEAT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_REPEAT /;"	d
ICON_FA_REPLY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_REPLY /;"	d
ICON_FA_REPLY_ALL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_REPLY_ALL /;"	d
ICON_FA_REPUBLICAN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_REPUBLICAN /;"	d
ICON_FA_RESTROOM	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RESTROOM /;"	d
ICON_FA_RETWEET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RETWEET /;"	d
ICON_FA_RIBBON	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RIBBON /;"	d
ICON_FA_RIGHT_FROM_BRACKET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RIGHT_FROM_BRACKET /;"	d
ICON_FA_RIGHT_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RIGHT_LEFT /;"	d
ICON_FA_RIGHT_LONG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RIGHT_LONG /;"	d
ICON_FA_RIGHT_TO_BRACKET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RIGHT_TO_BRACKET /;"	d
ICON_FA_RING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RING /;"	d
ICON_FA_ROAD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ROAD /;"	d
ICON_FA_ROAD_BARRIER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ROAD_BARRIER /;"	d
ICON_FA_ROAD_BRIDGE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ROAD_BRIDGE /;"	d
ICON_FA_ROAD_CIRCLE_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ROAD_CIRCLE_CHECK /;"	d
ICON_FA_ROAD_CIRCLE_EXCLAMATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ROAD_CIRCLE_EXCLAMATION /;"	d
ICON_FA_ROAD_CIRCLE_XMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ROAD_CIRCLE_XMARK /;"	d
ICON_FA_ROAD_LOCK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ROAD_LOCK /;"	d
ICON_FA_ROAD_SPIKES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ROAD_SPIKES /;"	d
ICON_FA_ROBOT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ROBOT /;"	d
ICON_FA_ROCKET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ROCKET /;"	d
ICON_FA_ROTATE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ROTATE /;"	d
ICON_FA_ROTATE_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ROTATE_LEFT /;"	d
ICON_FA_ROTATE_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ROTATE_RIGHT /;"	d
ICON_FA_ROUTE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_ROUTE /;"	d
ICON_FA_RSS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RSS /;"	d
ICON_FA_RUBLE_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RUBLE_SIGN /;"	d
ICON_FA_RUG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RUG /;"	d
ICON_FA_RULER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RULER /;"	d
ICON_FA_RULER_COMBINED	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RULER_COMBINED /;"	d
ICON_FA_RULER_HORIZONTAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RULER_HORIZONTAL /;"	d
ICON_FA_RULER_VERTICAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RULER_VERTICAL /;"	d
ICON_FA_RUPEE_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RUPEE_SIGN /;"	d
ICON_FA_RUPIAH_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_RUPIAH_SIGN /;"	d
ICON_FA_S	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_S /;"	d
ICON_FA_SACK_DOLLAR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SACK_DOLLAR /;"	d
ICON_FA_SACK_XMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SACK_XMARK /;"	d
ICON_FA_SAILBOAT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SAILBOAT /;"	d
ICON_FA_SATELLITE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SATELLITE /;"	d
ICON_FA_SATELLITE_DISH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SATELLITE_DISH /;"	d
ICON_FA_SCALE_BALANCED	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SCALE_BALANCED /;"	d
ICON_FA_SCALE_UNBALANCED	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SCALE_UNBALANCED /;"	d
ICON_FA_SCALE_UNBALANCED_FLIP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SCALE_UNBALANCED_FLIP /;"	d
ICON_FA_SCHOOL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SCHOOL /;"	d
ICON_FA_SCHOOL_CIRCLE_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SCHOOL_CIRCLE_CHECK /;"	d
ICON_FA_SCHOOL_CIRCLE_EXCLAMATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SCHOOL_CIRCLE_EXCLAMATION /;"	d
ICON_FA_SCHOOL_CIRCLE_XMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SCHOOL_CIRCLE_XMARK /;"	d
ICON_FA_SCHOOL_FLAG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SCHOOL_FLAG /;"	d
ICON_FA_SCHOOL_LOCK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SCHOOL_LOCK /;"	d
ICON_FA_SCISSORS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SCISSORS /;"	d
ICON_FA_SCREWDRIVER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SCREWDRIVER /;"	d
ICON_FA_SCREWDRIVER_WRENCH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SCREWDRIVER_WRENCH /;"	d
ICON_FA_SCROLL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SCROLL /;"	d
ICON_FA_SCROLL_TORAH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SCROLL_TORAH /;"	d
ICON_FA_SD_CARD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SD_CARD /;"	d
ICON_FA_SECTION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SECTION /;"	d
ICON_FA_SEEDLING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SEEDLING /;"	d
ICON_FA_SERVER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SERVER /;"	d
ICON_FA_SHAPES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHAPES /;"	d
ICON_FA_SHARE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHARE /;"	d
ICON_FA_SHARE_FROM_SQUARE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHARE_FROM_SQUARE /;"	d
ICON_FA_SHARE_NODES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHARE_NODES /;"	d
ICON_FA_SHEET_PLASTIC	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHEET_PLASTIC /;"	d
ICON_FA_SHEKEL_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHEKEL_SIGN /;"	d
ICON_FA_SHIELD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHIELD /;"	d
ICON_FA_SHIELD_CAT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHIELD_CAT /;"	d
ICON_FA_SHIELD_DOG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHIELD_DOG /;"	d
ICON_FA_SHIELD_HALVED	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHIELD_HALVED /;"	d
ICON_FA_SHIELD_HEART	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHIELD_HEART /;"	d
ICON_FA_SHIELD_VIRUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHIELD_VIRUS /;"	d
ICON_FA_SHIP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHIP /;"	d
ICON_FA_SHIRT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHIRT /;"	d
ICON_FA_SHOE_PRINTS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHOE_PRINTS /;"	d
ICON_FA_SHOP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHOP /;"	d
ICON_FA_SHOP_LOCK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHOP_LOCK /;"	d
ICON_FA_SHOP_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHOP_SLASH /;"	d
ICON_FA_SHOWER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHOWER /;"	d
ICON_FA_SHRIMP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHRIMP /;"	d
ICON_FA_SHUFFLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHUFFLE /;"	d
ICON_FA_SHUTTLE_SPACE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SHUTTLE_SPACE /;"	d
ICON_FA_SIGNAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SIGNAL /;"	d
ICON_FA_SIGNATURE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SIGNATURE /;"	d
ICON_FA_SIGNS_POST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SIGNS_POST /;"	d
ICON_FA_SIGN_HANGING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SIGN_HANGING /;"	d
ICON_FA_SIM_CARD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SIM_CARD /;"	d
ICON_FA_SINK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SINK /;"	d
ICON_FA_SITEMAP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SITEMAP /;"	d
ICON_FA_SKULL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SKULL /;"	d
ICON_FA_SKULL_CROSSBONES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SKULL_CROSSBONES /;"	d
ICON_FA_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SLASH /;"	d
ICON_FA_SLEIGH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SLEIGH /;"	d
ICON_FA_SLIDERS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SLIDERS /;"	d
ICON_FA_SMOG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SMOG /;"	d
ICON_FA_SMOKING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SMOKING /;"	d
ICON_FA_SNOWFLAKE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SNOWFLAKE /;"	d
ICON_FA_SNOWMAN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SNOWMAN /;"	d
ICON_FA_SNOWPLOW	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SNOWPLOW /;"	d
ICON_FA_SOAP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SOAP /;"	d
ICON_FA_SOCKS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SOCKS /;"	d
ICON_FA_SOLAR_PANEL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SOLAR_PANEL /;"	d
ICON_FA_SORT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SORT /;"	d
ICON_FA_SORT_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SORT_DOWN /;"	d
ICON_FA_SORT_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SORT_UP /;"	d
ICON_FA_SPA	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SPA /;"	d
ICON_FA_SPAGHETTI_MONSTER_FLYING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SPAGHETTI_MONSTER_FLYING /;"	d
ICON_FA_SPELL_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SPELL_CHECK /;"	d
ICON_FA_SPIDER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SPIDER /;"	d
ICON_FA_SPINNER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SPINNER /;"	d
ICON_FA_SPLOTCH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SPLOTCH /;"	d
ICON_FA_SPOON	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SPOON /;"	d
ICON_FA_SPRAY_CAN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SPRAY_CAN /;"	d
ICON_FA_SPRAY_CAN_SPARKLES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SPRAY_CAN_SPARKLES /;"	d
ICON_FA_SQUARE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE /;"	d
ICON_FA_SQUARE_ARROW_UP_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_ARROW_UP_RIGHT /;"	d
ICON_FA_SQUARE_CARET_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_CARET_DOWN /;"	d
ICON_FA_SQUARE_CARET_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_CARET_LEFT /;"	d
ICON_FA_SQUARE_CARET_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_CARET_RIGHT /;"	d
ICON_FA_SQUARE_CARET_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_CARET_UP /;"	d
ICON_FA_SQUARE_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_CHECK /;"	d
ICON_FA_SQUARE_ENVELOPE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_ENVELOPE /;"	d
ICON_FA_SQUARE_FULL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_FULL /;"	d
ICON_FA_SQUARE_H	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_H /;"	d
ICON_FA_SQUARE_MINUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_MINUS /;"	d
ICON_FA_SQUARE_NFI	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_NFI /;"	d
ICON_FA_SQUARE_PARKING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_PARKING /;"	d
ICON_FA_SQUARE_PEN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_PEN /;"	d
ICON_FA_SQUARE_PERSON_CONFINED	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_PERSON_CONFINED /;"	d
ICON_FA_SQUARE_PHONE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_PHONE /;"	d
ICON_FA_SQUARE_PHONE_FLIP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_PHONE_FLIP /;"	d
ICON_FA_SQUARE_PLUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_PLUS /;"	d
ICON_FA_SQUARE_POLL_HORIZONTAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_POLL_HORIZONTAL /;"	d
ICON_FA_SQUARE_POLL_VERTICAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_POLL_VERTICAL /;"	d
ICON_FA_SQUARE_ROOT_VARIABLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_ROOT_VARIABLE /;"	d
ICON_FA_SQUARE_RSS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_RSS /;"	d
ICON_FA_SQUARE_SHARE_NODES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_SHARE_NODES /;"	d
ICON_FA_SQUARE_UP_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_UP_RIGHT /;"	d
ICON_FA_SQUARE_VIRUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_VIRUS /;"	d
ICON_FA_SQUARE_XMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SQUARE_XMARK /;"	d
ICON_FA_STAFF_AESCULAPIUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_STAFF_AESCULAPIUS /;"	d
ICON_FA_STAIRS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_STAIRS /;"	d
ICON_FA_STAMP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_STAMP /;"	d
ICON_FA_STAR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_STAR /;"	d
ICON_FA_STAR_AND_CRESCENT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_STAR_AND_CRESCENT /;"	d
ICON_FA_STAR_HALF	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_STAR_HALF /;"	d
ICON_FA_STAR_HALF_STROKE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_STAR_HALF_STROKE /;"	d
ICON_FA_STAR_OF_DAVID	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_STAR_OF_DAVID /;"	d
ICON_FA_STAR_OF_LIFE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_STAR_OF_LIFE /;"	d
ICON_FA_STERLING_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_STERLING_SIGN /;"	d
ICON_FA_STETHOSCOPE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_STETHOSCOPE /;"	d
ICON_FA_STOP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_STOP /;"	d
ICON_FA_STOPWATCH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_STOPWATCH /;"	d
ICON_FA_STOPWATCH_20	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_STOPWATCH_20 /;"	d
ICON_FA_STORE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_STORE /;"	d
ICON_FA_STORE_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_STORE_SLASH /;"	d
ICON_FA_STREET_VIEW	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_STREET_VIEW /;"	d
ICON_FA_STRIKETHROUGH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_STRIKETHROUGH /;"	d
ICON_FA_STROOPWAFEL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_STROOPWAFEL /;"	d
ICON_FA_SUBSCRIPT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SUBSCRIPT /;"	d
ICON_FA_SUITCASE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SUITCASE /;"	d
ICON_FA_SUITCASE_MEDICAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SUITCASE_MEDICAL /;"	d
ICON_FA_SUITCASE_ROLLING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SUITCASE_ROLLING /;"	d
ICON_FA_SUN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SUN /;"	d
ICON_FA_SUN_PLANT_WILT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SUN_PLANT_WILT /;"	d
ICON_FA_SUPERSCRIPT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SUPERSCRIPT /;"	d
ICON_FA_SWATCHBOOK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SWATCHBOOK /;"	d
ICON_FA_SYNAGOGUE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SYNAGOGUE /;"	d
ICON_FA_SYRINGE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_SYRINGE /;"	d
ICON_FA_T	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_T /;"	d
ICON_FA_TABLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TABLE /;"	d
ICON_FA_TABLET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TABLET /;"	d
ICON_FA_TABLETS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TABLETS /;"	d
ICON_FA_TABLET_BUTTON	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TABLET_BUTTON /;"	d
ICON_FA_TABLET_SCREEN_BUTTON	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TABLET_SCREEN_BUTTON /;"	d
ICON_FA_TABLE_CELLS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TABLE_CELLS /;"	d
ICON_FA_TABLE_CELLS_LARGE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TABLE_CELLS_LARGE /;"	d
ICON_FA_TABLE_COLUMNS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TABLE_COLUMNS /;"	d
ICON_FA_TABLE_LIST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TABLE_LIST /;"	d
ICON_FA_TABLE_TENNIS_PADDLE_BALL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TABLE_TENNIS_PADDLE_BALL /;"	d
ICON_FA_TACHOGRAPH_DIGITAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TACHOGRAPH_DIGITAL /;"	d
ICON_FA_TAG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TAG /;"	d
ICON_FA_TAGS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TAGS /;"	d
ICON_FA_TAPE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TAPE /;"	d
ICON_FA_TARP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TARP /;"	d
ICON_FA_TARP_DROPLET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TARP_DROPLET /;"	d
ICON_FA_TAXI	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TAXI /;"	d
ICON_FA_TEETH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TEETH /;"	d
ICON_FA_TEETH_OPEN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TEETH_OPEN /;"	d
ICON_FA_TEMPERATURE_ARROW_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TEMPERATURE_ARROW_DOWN /;"	d
ICON_FA_TEMPERATURE_ARROW_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TEMPERATURE_ARROW_UP /;"	d
ICON_FA_TEMPERATURE_EMPTY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TEMPERATURE_EMPTY /;"	d
ICON_FA_TEMPERATURE_FULL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TEMPERATURE_FULL /;"	d
ICON_FA_TEMPERATURE_HALF	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TEMPERATURE_HALF /;"	d
ICON_FA_TEMPERATURE_HIGH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TEMPERATURE_HIGH /;"	d
ICON_FA_TEMPERATURE_LOW	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TEMPERATURE_LOW /;"	d
ICON_FA_TEMPERATURE_QUARTER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TEMPERATURE_QUARTER /;"	d
ICON_FA_TEMPERATURE_THREE_QUARTERS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TEMPERATURE_THREE_QUARTERS /;"	d
ICON_FA_TENGE_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TENGE_SIGN /;"	d
ICON_FA_TENT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TENT /;"	d
ICON_FA_TENTS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TENTS /;"	d
ICON_FA_TENT_ARROWS_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TENT_ARROWS_DOWN /;"	d
ICON_FA_TENT_ARROW_DOWN_TO_LINE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TENT_ARROW_DOWN_TO_LINE /;"	d
ICON_FA_TENT_ARROW_LEFT_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TENT_ARROW_LEFT_RIGHT /;"	d
ICON_FA_TENT_ARROW_TURN_LEFT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TENT_ARROW_TURN_LEFT /;"	d
ICON_FA_TERMINAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TERMINAL /;"	d
ICON_FA_TEXT_HEIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TEXT_HEIGHT /;"	d
ICON_FA_TEXT_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TEXT_SLASH /;"	d
ICON_FA_TEXT_WIDTH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TEXT_WIDTH /;"	d
ICON_FA_THERMOMETER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_THERMOMETER /;"	d
ICON_FA_THUMBS_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_THUMBS_DOWN /;"	d
ICON_FA_THUMBS_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_THUMBS_UP /;"	d
ICON_FA_THUMBTACK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_THUMBTACK /;"	d
ICON_FA_TICKET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TICKET /;"	d
ICON_FA_TICKET_SIMPLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TICKET_SIMPLE /;"	d
ICON_FA_TIMELINE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TIMELINE /;"	d
ICON_FA_TOGGLE_OFF	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TOGGLE_OFF /;"	d
ICON_FA_TOGGLE_ON	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TOGGLE_ON /;"	d
ICON_FA_TOILET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TOILET /;"	d
ICON_FA_TOILETS_PORTABLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TOILETS_PORTABLE /;"	d
ICON_FA_TOILET_PAPER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TOILET_PAPER /;"	d
ICON_FA_TOILET_PAPER_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TOILET_PAPER_SLASH /;"	d
ICON_FA_TOILET_PORTABLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TOILET_PORTABLE /;"	d
ICON_FA_TOOLBOX	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TOOLBOX /;"	d
ICON_FA_TOOTH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TOOTH /;"	d
ICON_FA_TORII_GATE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TORII_GATE /;"	d
ICON_FA_TORNADO	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TORNADO /;"	d
ICON_FA_TOWER_BROADCAST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TOWER_BROADCAST /;"	d
ICON_FA_TOWER_CELL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TOWER_CELL /;"	d
ICON_FA_TOWER_OBSERVATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TOWER_OBSERVATION /;"	d
ICON_FA_TRACTOR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRACTOR /;"	d
ICON_FA_TRADEMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRADEMARK /;"	d
ICON_FA_TRAFFIC_LIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRAFFIC_LIGHT /;"	d
ICON_FA_TRAILER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRAILER /;"	d
ICON_FA_TRAIN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRAIN /;"	d
ICON_FA_TRAIN_SUBWAY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRAIN_SUBWAY /;"	d
ICON_FA_TRAIN_TRAM	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRAIN_TRAM /;"	d
ICON_FA_TRANSGENDER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRANSGENDER /;"	d
ICON_FA_TRASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRASH /;"	d
ICON_FA_TRASH_ARROW_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRASH_ARROW_UP /;"	d
ICON_FA_TRASH_CAN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRASH_CAN /;"	d
ICON_FA_TRASH_CAN_ARROW_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRASH_CAN_ARROW_UP /;"	d
ICON_FA_TREE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TREE /;"	d
ICON_FA_TREE_CITY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TREE_CITY /;"	d
ICON_FA_TRIANGLE_EXCLAMATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRIANGLE_EXCLAMATION /;"	d
ICON_FA_TROPHY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TROPHY /;"	d
ICON_FA_TROWEL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TROWEL /;"	d
ICON_FA_TROWEL_BRICKS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TROWEL_BRICKS /;"	d
ICON_FA_TRUCK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRUCK /;"	d
ICON_FA_TRUCK_ARROW_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRUCK_ARROW_RIGHT /;"	d
ICON_FA_TRUCK_DROPLET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRUCK_DROPLET /;"	d
ICON_FA_TRUCK_FAST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRUCK_FAST /;"	d
ICON_FA_TRUCK_FIELD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRUCK_FIELD /;"	d
ICON_FA_TRUCK_FIELD_UN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRUCK_FIELD_UN /;"	d
ICON_FA_TRUCK_FRONT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRUCK_FRONT /;"	d
ICON_FA_TRUCK_MEDICAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRUCK_MEDICAL /;"	d
ICON_FA_TRUCK_MONSTER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRUCK_MONSTER /;"	d
ICON_FA_TRUCK_MOVING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRUCK_MOVING /;"	d
ICON_FA_TRUCK_PICKUP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRUCK_PICKUP /;"	d
ICON_FA_TRUCK_PLANE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRUCK_PLANE /;"	d
ICON_FA_TRUCK_RAMP_BOX	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TRUCK_RAMP_BOX /;"	d
ICON_FA_TTY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TTY /;"	d
ICON_FA_TURKISH_LIRA_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TURKISH_LIRA_SIGN /;"	d
ICON_FA_TURN_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TURN_DOWN /;"	d
ICON_FA_TURN_UP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TURN_UP /;"	d
ICON_FA_TV	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_TV /;"	d
ICON_FA_U	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_U /;"	d
ICON_FA_UMBRELLA	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_UMBRELLA /;"	d
ICON_FA_UMBRELLA_BEACH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_UMBRELLA_BEACH /;"	d
ICON_FA_UNDERLINE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_UNDERLINE /;"	d
ICON_FA_UNIVERSAL_ACCESS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_UNIVERSAL_ACCESS /;"	d
ICON_FA_UNLOCK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_UNLOCK /;"	d
ICON_FA_UNLOCK_KEYHOLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_UNLOCK_KEYHOLE /;"	d
ICON_FA_UPLOAD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_UPLOAD /;"	d
ICON_FA_UP_DOWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_UP_DOWN /;"	d
ICON_FA_UP_DOWN_LEFT_RIGHT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_UP_DOWN_LEFT_RIGHT /;"	d
ICON_FA_UP_LONG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_UP_LONG /;"	d
ICON_FA_UP_RIGHT_AND_DOWN_LEFT_FROM_CENTER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_UP_RIGHT_AND_DOWN_LEFT_FROM_CENTER /;"	d
ICON_FA_UP_RIGHT_FROM_SQUARE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_UP_RIGHT_FROM_SQUARE /;"	d
ICON_FA_USER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER /;"	d
ICON_FA_USERS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USERS /;"	d
ICON_FA_USERS_BETWEEN_LINES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USERS_BETWEEN_LINES /;"	d
ICON_FA_USERS_GEAR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USERS_GEAR /;"	d
ICON_FA_USERS_LINE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USERS_LINE /;"	d
ICON_FA_USERS_RAYS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USERS_RAYS /;"	d
ICON_FA_USERS_RECTANGLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USERS_RECTANGLE /;"	d
ICON_FA_USERS_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USERS_SLASH /;"	d
ICON_FA_USERS_VIEWFINDER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USERS_VIEWFINDER /;"	d
ICON_FA_USER_ASTRONAUT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_ASTRONAUT /;"	d
ICON_FA_USER_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_CHECK /;"	d
ICON_FA_USER_CLOCK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_CLOCK /;"	d
ICON_FA_USER_DOCTOR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_DOCTOR /;"	d
ICON_FA_USER_GEAR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_GEAR /;"	d
ICON_FA_USER_GRADUATE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_GRADUATE /;"	d
ICON_FA_USER_GROUP	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_GROUP /;"	d
ICON_FA_USER_INJURED	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_INJURED /;"	d
ICON_FA_USER_LARGE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_LARGE /;"	d
ICON_FA_USER_LARGE_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_LARGE_SLASH /;"	d
ICON_FA_USER_LOCK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_LOCK /;"	d
ICON_FA_USER_MINUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_MINUS /;"	d
ICON_FA_USER_NINJA	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_NINJA /;"	d
ICON_FA_USER_NURSE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_NURSE /;"	d
ICON_FA_USER_PEN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_PEN /;"	d
ICON_FA_USER_PLUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_PLUS /;"	d
ICON_FA_USER_SECRET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_SECRET /;"	d
ICON_FA_USER_SHIELD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_SHIELD /;"	d
ICON_FA_USER_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_SLASH /;"	d
ICON_FA_USER_TAG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_TAG /;"	d
ICON_FA_USER_TIE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_TIE /;"	d
ICON_FA_USER_XMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_USER_XMARK /;"	d
ICON_FA_UTENSILS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_UTENSILS /;"	d
ICON_FA_V	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_V /;"	d
ICON_FA_VAN_SHUTTLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VAN_SHUTTLE /;"	d
ICON_FA_VAULT	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VAULT /;"	d
ICON_FA_VECTOR_SQUARE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VECTOR_SQUARE /;"	d
ICON_FA_VENUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VENUS /;"	d
ICON_FA_VENUS_DOUBLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VENUS_DOUBLE /;"	d
ICON_FA_VENUS_MARS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VENUS_MARS /;"	d
ICON_FA_VEST	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VEST /;"	d
ICON_FA_VEST_PATCHES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VEST_PATCHES /;"	d
ICON_FA_VIAL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VIAL /;"	d
ICON_FA_VIALS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VIALS /;"	d
ICON_FA_VIAL_CIRCLE_CHECK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VIAL_CIRCLE_CHECK /;"	d
ICON_FA_VIAL_VIRUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VIAL_VIRUS /;"	d
ICON_FA_VIDEO	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VIDEO /;"	d
ICON_FA_VIDEO_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VIDEO_SLASH /;"	d
ICON_FA_VIHARA	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VIHARA /;"	d
ICON_FA_VIRUS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VIRUS /;"	d
ICON_FA_VIRUSES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VIRUSES /;"	d
ICON_FA_VIRUS_COVID	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VIRUS_COVID /;"	d
ICON_FA_VIRUS_COVID_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VIRUS_COVID_SLASH /;"	d
ICON_FA_VIRUS_SLASH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VIRUS_SLASH /;"	d
ICON_FA_VOICEMAIL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VOICEMAIL /;"	d
ICON_FA_VOLCANO	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VOLCANO /;"	d
ICON_FA_VOLLEYBALL	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VOLLEYBALL /;"	d
ICON_FA_VOLUME_HIGH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VOLUME_HIGH /;"	d
ICON_FA_VOLUME_LOW	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VOLUME_LOW /;"	d
ICON_FA_VOLUME_OFF	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VOLUME_OFF /;"	d
ICON_FA_VOLUME_XMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VOLUME_XMARK /;"	d
ICON_FA_VR_CARDBOARD	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_VR_CARDBOARD /;"	d
ICON_FA_W	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_W /;"	d
ICON_FA_WALKIE_TALKIE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WALKIE_TALKIE /;"	d
ICON_FA_WALLET	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WALLET /;"	d
ICON_FA_WAND_MAGIC	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WAND_MAGIC /;"	d
ICON_FA_WAND_MAGIC_SPARKLES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WAND_MAGIC_SPARKLES /;"	d
ICON_FA_WAND_SPARKLES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WAND_SPARKLES /;"	d
ICON_FA_WAREHOUSE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WAREHOUSE /;"	d
ICON_FA_WATER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WATER /;"	d
ICON_FA_WATER_LADDER	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WATER_LADDER /;"	d
ICON_FA_WAVE_SQUARE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WAVE_SQUARE /;"	d
ICON_FA_WEIGHT_HANGING	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WEIGHT_HANGING /;"	d
ICON_FA_WEIGHT_SCALE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WEIGHT_SCALE /;"	d
ICON_FA_WHEAT_AWN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WHEAT_AWN /;"	d
ICON_FA_WHEAT_AWN_CIRCLE_EXCLAMATION	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WHEAT_AWN_CIRCLE_EXCLAMATION /;"	d
ICON_FA_WHEELCHAIR	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WHEELCHAIR /;"	d
ICON_FA_WHEELCHAIR_MOVE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WHEELCHAIR_MOVE /;"	d
ICON_FA_WHISKEY_GLASS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WHISKEY_GLASS /;"	d
ICON_FA_WIFI	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WIFI /;"	d
ICON_FA_WIND	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WIND /;"	d
ICON_FA_WINDOW_MAXIMIZE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WINDOW_MAXIMIZE /;"	d
ICON_FA_WINDOW_MINIMIZE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WINDOW_MINIMIZE /;"	d
ICON_FA_WINDOW_RESTORE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WINDOW_RESTORE /;"	d
ICON_FA_WINE_BOTTLE	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WINE_BOTTLE /;"	d
ICON_FA_WINE_GLASS	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WINE_GLASS /;"	d
ICON_FA_WINE_GLASS_EMPTY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WINE_GLASS_EMPTY /;"	d
ICON_FA_WON_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WON_SIGN /;"	d
ICON_FA_WORM	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WORM /;"	d
ICON_FA_WRENCH	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_WRENCH /;"	d
ICON_FA_X	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_X /;"	d
ICON_FA_XMARK	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_XMARK /;"	d
ICON_FA_XMARKS_LINES	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_XMARKS_LINES /;"	d
ICON_FA_X_RAY	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_X_RAY /;"	d
ICON_FA_Y	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_Y /;"	d
ICON_FA_YEN_SIGN	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_YEN_SIGN /;"	d
ICON_FA_YIN_YANG	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_YIN_YANG /;"	d
ICON_FA_Z	includes/extras/IconsFontAwesome6.h	/^#define ICON_FA_Z /;"	d
ICON_MAX_16_FA	includes/extras/IconsFontAwesome6.h	/^#define ICON_MAX_16_FA /;"	d
ICON_MAX_FA	includes/extras/IconsFontAwesome6.h	/^#define ICON_MAX_FA /;"	d
ICON_MIN_FA	includes/extras/IconsFontAwesome6.h	/^#define ICON_MIN_FA /;"	d
ID	imgui_demo.cpp	/^    ImGuiID ID;$/;"	m	struct:ExampleAsset	typeref:typename:ImGuiID	file:
ID	imgui_demo.cpp	/^    int         ID;$/;"	m	struct:__anon5ba881550511::MyItem	typeref:typename:int	file:
ID	includes/imgui.h	/^    ImGuiID             ID;                     \/\/ Unique identifier for the viewport$/;"	m	struct:ImGuiViewport	typeref:typename:ImGuiID
ID	includes/imgui_internal.h	/^    ImGuiID                     ID;                     \/\/ Set to 0 to invalidate\/delete the /;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiID
ID	includes/imgui_internal.h	/^    ImGuiID                     ID;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiID
ID	includes/imgui_internal.h	/^    ImGuiID                 ID;                                 \/\/ == ImHashStr(Name)$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
ID	includes/imgui_internal.h	/^    ImGuiID                 ID;                     \/\/ widget id owning the text state$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiID
ID	includes/imgui_internal.h	/^    ImGuiID                 ID;$/;"	m	struct:ImGuiBoxSelectState	typeref:typename:ImGuiID
ID	includes/imgui_internal.h	/^    ImGuiID                 ID;$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImGuiID
ID	includes/imgui_internal.h	/^    ImGuiID                 ID;$/;"	m	struct:ImGuiMultiSelectState	typeref:typename:ImGuiID
ID	includes/imgui_internal.h	/^    ImGuiID                 ID;$/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:ImGuiID
ID	includes/imgui_internal.h	/^    ImGuiID                 ID;$/;"	m	struct:ImGuiTreeNodeStackData	typeref:typename:ImGuiID
ID	includes/imgui_internal.h	/^    ImGuiID             ID;                     \/\/ Zero for tab-bars used by docking$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
ID	includes/imgui_internal.h	/^    ImGuiID             ID;             \/\/ Init,Move    \/\/ Best candidate item ID$/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiID
ID	includes/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiFocusScopeData	typeref:typename:ImGuiID
ID	includes/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImGuiID
ID	includes/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiTabItem	typeref:typename:ImGuiID
ID	includes/imgui_internal.h	/^    ImGuiID            ID;              \/\/ widget id owning the text state (which just got dea/;"	m	struct:ImGuiInputTextDeactivatedState	typeref:typename:ImGuiID
ID	includes/imgui_internal.h	/^    ImGuiID     ID;$/;"	m	struct:ImGuiDeactivatedItemData	typeref:typename:ImGuiID
ID	includes/imgui_internal.h	/^    ImGuiID     ID;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImGuiID
IDStack	includes/imgui_internal.h	/^    ImVector<ImGuiID>       IDStack;                            \/\/ ID stack. ID are hashes see/;"	m	struct:ImGuiWindow	typeref:typename:ImVector<ImGuiID>
IMGUI_API	includes/imgui.h	/^#define IMGUI_API$/;"	d
IMGUI_CDECL	imgui_demo.cpp	/^#define IMGUI_CDECL /;"	d	file:
IMGUI_CDECL	imgui_demo.cpp	/^#define IMGUI_CDECL$/;"	d	file:
IMGUI_CDECL	includes/imgui_internal.h	/^#define IMGUI_CDECL /;"	d
IMGUI_CDECL	includes/imgui_internal.h	/^#define IMGUI_CDECL$/;"	d
IMGUI_CHECKVERSION	includes/imgui.h	/^#define IMGUI_CHECKVERSION(/;"	d
IMGUI_DEBUG_LOG	includes/imgui.h	/^#define IMGUI_DEBUG_LOG(/;"	d
IMGUI_DEBUG_LOG_ACTIVEID	includes/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_ACTIVEID(/;"	d
IMGUI_DEBUG_LOG_CLIPPER	includes/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_CLIPPER(/;"	d
IMGUI_DEBUG_LOG_ERROR	includes/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_ERROR(/;"	d
IMGUI_DEBUG_LOG_FOCUS	includes/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_FOCUS(/;"	d
IMGUI_DEBUG_LOG_FONT	includes/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_FONT(/;"	d
IMGUI_DEBUG_LOG_INPUTROUTING	includes/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_INPUTROUTING(/;"	d
IMGUI_DEBUG_LOG_IO	includes/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_IO(/;"	d
IMGUI_DEBUG_LOG_NAV	includes/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_NAV(/;"	d
IMGUI_DEBUG_LOG_POPUP	includes/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_POPUP(/;"	d
IMGUI_DEBUG_LOG_SELECTION	includes/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_SELECTION(/;"	d
IMGUI_DEBUG_NAV_RECTS	imgui.cpp	/^#define IMGUI_DEBUG_NAV_RECTS /;"	d	file:
IMGUI_DEBUG_NAV_SCORING	imgui.cpp	/^#define IMGUI_DEBUG_NAV_SCORING /;"	d	file:
IMGUI_DEBUG_PRINTF	includes/imgui_internal.h	/^#define IMGUI_DEBUG_PRINTF(/;"	d
IMGUI_DEFINE_MATH_OPERATORS	imgui.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	imgui_draw.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	imgui_tables.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	imgui_widgets.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS_IMPLEMENTED	includes/imgui.h	/^#define IMGUI_DEFINE_MATH_OPERATORS_IMPLEMENTED$/;"	d
IMGUI_DEMO_MARKER	imgui_demo.cpp	/^#define IMGUI_DEMO_MARKER(/;"	d	file:
IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS	includes/imgui_internal.h	/^#define IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS$/;"	d
IMGUI_DISABLE_DEFAULT_SHELL_FUNCTIONS	imgui.cpp	/^#define IMGUI_DISABLE_DEFAULT_SHELL_FUNCTIONS$/;"	d	file:
IMGUI_DISABLE_TTY_FUNCTIONS	includes/imgui_internal.h	/^#define IMGUI_DISABLE_TTY_FUNCTIONS /;"	d
IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS	imgui.cpp	/^#define IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS$/;"	d	file:
IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS	imgui.cpp	/^#define IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS$/;"	d	file:
IMGUI_DISABLE_WIN32_FUNCTIONS	imgui.cpp	/^#define IMGUI_DISABLE_WIN32_FUNCTIONS$/;"	d	file:
IMGUI_ENABLE_SSE	includes/imgui_internal.h	/^#define IMGUI_ENABLE_SSE$/;"	d
IMGUI_ENABLE_SSE4_2	includes/imgui_internal.h	/^#define IMGUI_ENABLE_SSE4_2$/;"	d
IMGUI_ENABLE_SSE4_2_CRC	includes/imgui_internal.h	/^#define IMGUI_ENABLE_SSE4_2_CRC$/;"	d
IMGUI_ENABLE_STB_TRUETYPE	includes/imgui_internal.h	/^#define IMGUI_ENABLE_STB_TRUETYPE$/;"	d
IMGUI_HAS_TABLE	includes/imgui.h	/^#define IMGUI_HAS_TABLE$/;"	d
IMGUI_IMPL_API	includes/imgui.h	/^#define IMGUI_IMPL_API /;"	d
IMGUI_PAYLOAD_TYPE_COLOR_3F	includes/imgui.h	/^#define IMGUI_PAYLOAD_TYPE_COLOR_3F /;"	d
IMGUI_PAYLOAD_TYPE_COLOR_4F	includes/imgui.h	/^#define IMGUI_PAYLOAD_TYPE_COLOR_4F /;"	d
IMGUI_STB_NAMESPACE	imgui_draw.cpp	/^namespace IMGUI_STB_NAMESPACE$/;"	n	file:
IMGUI_TABLE_MAX_COLUMNS	includes/imgui_internal.h	/^#define IMGUI_TABLE_MAX_COLUMNS /;"	d
IMGUI_TEST_ENGINE_ITEM_ADD	includes/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_ITEM_ADD(/;"	d
IMGUI_TEST_ENGINE_ITEM_INFO	includes/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_ITEM_INFO(/;"	d
IMGUI_TEST_ENGINE_LOG	includes/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_LOG(/;"	d
IMGUI_VERSION	includes/imgui.h	/^#define IMGUI_VERSION /;"	d
IMGUI_VERSION_NUM	includes/imgui.h	/^#define IMGUI_VERSION_NUM /;"	d
IMGUI_VIEWPORT_DEFAULT_ID	imgui.cpp	/^const ImGuiID           IMGUI_VIEWPORT_DEFAULT_ID = 0x11111111; \/\/ Using an arbitrary constant/;"	v	namespace:ImGui	typeref:typename:const ImGuiID
IMSTB_TEXTEDIT_CHARTYPE	includes/imgui_internal.h	/^#define IMSTB_TEXTEDIT_CHARTYPE /;"	d
IMSTB_TEXTEDIT_CHARTYPE	includes/imstb_textedit.h	/^#define IMSTB_TEXTEDIT_CHARTYPE /;"	d
IMSTB_TEXTEDIT_GETNEXTCHARINDEX	imgui_widgets.cpp	/^#define IMSTB_TEXTEDIT_GETNEXTCHARINDEX /;"	d	file:
IMSTB_TEXTEDIT_GETNEXTCHARINDEX	includes/imstb_textedit.h	/^#define IMSTB_TEXTEDIT_GETNEXTCHARINDEX(/;"	d
IMSTB_TEXTEDIT_GETNEXTCHARINDEX_IMPL	imgui_widgets.cpp	/^static int IMSTB_TEXTEDIT_GETNEXTCHARINDEX_IMPL(ImGuiInputTextState* obj, int idx)$/;"	f	namespace:ImStb	typeref:typename:int	file:
IMSTB_TEXTEDIT_GETPREVCHARINDEX	imgui_widgets.cpp	/^#define IMSTB_TEXTEDIT_GETPREVCHARINDEX /;"	d	file:
IMSTB_TEXTEDIT_GETPREVCHARINDEX	includes/imstb_textedit.h	/^#define IMSTB_TEXTEDIT_GETPREVCHARINDEX(/;"	d
IMSTB_TEXTEDIT_GETPREVCHARINDEX_IMPL	imgui_widgets.cpp	/^static int IMSTB_TEXTEDIT_GETPREVCHARINDEX_IMPL(ImGuiInputTextState* obj, int idx)$/;"	f	namespace:ImStb	typeref:typename:int	file:
IMSTB_TEXTEDIT_GETWIDTH_NEWLINE	includes/imgui_internal.h	/^#define IMSTB_TEXTEDIT_GETWIDTH_NEWLINE /;"	d
IMSTB_TEXTEDIT_IMPLEMENTATION	imgui_widgets.cpp	/^#define IMSTB_TEXTEDIT_IMPLEMENTATION$/;"	d	file:
IMSTB_TEXTEDIT_POSITIONTYPE	includes/imstb_textedit.h	/^#define IMSTB_TEXTEDIT_POSITIONTYPE /;"	d
IMSTB_TEXTEDIT_STRING	includes/imgui_internal.h	/^#define IMSTB_TEXTEDIT_STRING /;"	d
IMSTB_TEXTEDIT_UNDOCHARCOUNT	includes/imgui_internal.h	/^#define IMSTB_TEXTEDIT_UNDOCHARCOUNT /;"	d
IMSTB_TEXTEDIT_UNDOCHARCOUNT	includes/imstb_textedit.h	/^#define IMSTB_TEXTEDIT_UNDOCHARCOUNT /;"	d
IMSTB_TEXTEDIT_UNDOSTATECOUNT	includes/imgui_internal.h	/^#define IMSTB_TEXTEDIT_UNDOSTATECOUNT /;"	d
IMSTB_TEXTEDIT_UNDOSTATECOUNT	includes/imstb_textedit.h	/^#define IMSTB_TEXTEDIT_UNDOSTATECOUNT /;"	d
IMSTB_TEXTEDIT_memmove	imgui_widgets.cpp	/^#define IMSTB_TEXTEDIT_memmove /;"	d	file:
IMSTB_TEXTEDIT_memmove	includes/imstb_textedit.h	/^#define IMSTB_TEXTEDIT_memmove /;"	d
IM_ALLOC	includes/imgui.h	/^#define IM_ALLOC(/;"	d
IM_ARRAYSIZE	includes/imgui.h	/^#define IM_ARRAYSIZE(/;"	d
IM_ASSERT	includes/imgui.h	/^#define IM_ASSERT(/;"	d
IM_ASSERT_PARANOID	includes/imgui_internal.h	/^#define IM_ASSERT_PARANOID(/;"	d
IM_ASSERT_USER_ERROR	includes/imgui_internal.h	/^#define IM_ASSERT_USER_ERROR(/;"	d
IM_BITARRAY_CLEARBIT	includes/imgui_internal.h	/^#define         IM_BITARRAY_CLEARBIT(/;"	d
IM_BITARRAY_TESTBIT	includes/imgui_internal.h	/^#define         IM_BITARRAY_TESTBIT(/;"	d
IM_CLAMP	imgui_demo.cpp	/^#define IM_CLAMP(/;"	d	file:
IM_COL32	includes/imgui.h	/^#define IM_COL32(/;"	d
IM_COL32_A_MASK	includes/imgui.h	/^#define IM_COL32_A_MASK /;"	d
IM_COL32_A_SHIFT	includes/imgui.h	/^#define IM_COL32_A_SHIFT /;"	d
IM_COL32_BLACK	includes/imgui.h	/^#define IM_COL32_BLACK /;"	d
IM_COL32_BLACK_TRANS	includes/imgui.h	/^#define IM_COL32_BLACK_TRANS /;"	d
IM_COL32_B_SHIFT	includes/imgui.h	/^#define IM_COL32_B_SHIFT /;"	d
IM_COL32_DISABLE	includes/imgui_internal.h	/^#define IM_COL32_DISABLE /;"	d
IM_COL32_G_SHIFT	includes/imgui.h	/^#define IM_COL32_G_SHIFT /;"	d
IM_COL32_R_SHIFT	includes/imgui.h	/^#define IM_COL32_R_SHIFT /;"	d
IM_COL32_WHITE	includes/imgui.h	/^#define IM_COL32_WHITE /;"	d
IM_DEBUG_BREAK	includes/imgui_internal.h	/^#define IM_DEBUG_BREAK(/;"	d
IM_DELETE	includes/imgui.h	/^template<typename T> void IM_DELETE(T* p)   { if (p) { p->~T(); ImGui::MemFree(p); } }$/;"	f	typeref:typename:void
IM_DRAWLIST_ARCFAST_SAMPLE_MAX	includes/imgui_internal.h	/^#define IM_DRAWLIST_ARCFAST_SAMPLE_MAX /;"	d
IM_DRAWLIST_ARCFAST_TABLE_SIZE	includes/imgui_internal.h	/^#define IM_DRAWLIST_ARCFAST_TABLE_SIZE /;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC	includes/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC(/;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_ERROR	includes/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_ERROR(/;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_R	includes/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_R(/;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX	includes/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX /;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN	includes/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN /;"	d
IM_DRAWLIST_TEX_LINES_WIDTH_MAX	includes/imgui.h	/^#define IM_DRAWLIST_TEX_LINES_WIDTH_MAX /;"	d
IM_F32_TO_INT8_SAT	includes/imgui_internal.h	/^#define IM_F32_TO_INT8_SAT(/;"	d
IM_F32_TO_INT8_UNBOUND	includes/imgui_internal.h	/^#define IM_F32_TO_INT8_UNBOUND(/;"	d
IM_FIXNORMAL2F	imgui_draw.cpp	/^#define IM_FIXNORMAL2F(/;"	d	file:
IM_FIXNORMAL2F_MAX_INVLEN2	imgui_draw.cpp	/^#define IM_FIXNORMAL2F_MAX_INVLEN2 /;"	d	file:
IM_FLOOR	includes/imgui_internal.h	/^#define IM_FLOOR /;"	d
IM_FMTARGS	includes/imgui.h	/^#define IM_FMTARGS(/;"	d
IM_FMTLIST	includes/imgui.h	/^#define IM_FMTLIST(/;"	d
IM_FREE	includes/imgui.h	/^#define IM_FREE(/;"	d
IM_LIKELY	includes/imgui_internal.h	/^#define IM_LIKELY /;"	d
IM_LIKELY	includes/imgui_internal.h	/^#define IM_LIKELY$/;"	d
IM_MAX	imgui_demo.cpp	/^#define IM_MAX(/;"	d	file:
IM_MEMALIGN	includes/imgui_internal.h	/^#define IM_MEMALIGN(/;"	d
IM_MIN	imgui_demo.cpp	/^#define IM_MIN(/;"	d	file:
IM_MSVC_RUNTIME_CHECKS_OFF	includes/imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_OFF /;"	d
IM_MSVC_RUNTIME_CHECKS_OFF	includes/imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_OFF$/;"	d
IM_MSVC_RUNTIME_CHECKS_RESTORE	includes/imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_RESTORE /;"	d
IM_MSVC_RUNTIME_CHECKS_RESTORE	includes/imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_RESTORE$/;"	d
IM_MSVC_WARNING_SUPPRESS	includes/imgui_internal.h	/^#define IM_MSVC_WARNING_SUPPRESS(/;"	d
IM_NEW	includes/imgui.h	/^#define IM_NEW(/;"	d
IM_NEWLINE	imgui_demo.cpp	/^#define IM_NEWLINE /;"	d	file:
IM_NEWLINE	includes/imgui_internal.h	/^#define IM_NEWLINE /;"	d
IM_NORMALIZE2F_OVER_ZERO	imgui_draw.cpp	/^#define IM_NORMALIZE2F_OVER_ZERO(/;"	d	file:
IM_OFFSETOF	includes/imgui.h	/^#define IM_OFFSETOF(/;"	d
IM_PI	includes/imgui_internal.h	/^#define IM_PI /;"	d
IM_PLACEMENT_NEW	includes/imgui.h	/^#define IM_PLACEMENT_NEW(/;"	d
IM_PRIX64	includes/imgui_internal.h	/^#define IM_PRIX64 /;"	d
IM_PRId64	includes/imgui_internal.h	/^#define IM_PRId64 /;"	d
IM_PRIu64	includes/imgui_internal.h	/^#define IM_PRIu64 /;"	d
IM_ROUND	includes/imgui_internal.h	/^#define IM_ROUND(/;"	d
IM_ROUNDUP_TO_EVEN	includes/imgui_internal.h	/^#define IM_ROUNDUP_TO_EVEN(/;"	d
IM_S16_MAX	imgui_widgets.cpp	/^static const signed short   IM_S16_MAX = 32767;$/;"	v	typeref:typename:const signed short	file:
IM_S16_MIN	imgui_widgets.cpp	/^static const signed short   IM_S16_MIN = -32768;$/;"	v	typeref:typename:const signed short	file:
IM_S32_MAX	imgui_widgets.cpp	/^static const ImS32          IM_S32_MAX = INT_MAX;    \/\/ (2147483647), (0x7FFFFFFF)$/;"	v	typeref:typename:const ImS32	file:
IM_S32_MIN	imgui_widgets.cpp	/^static const ImS32          IM_S32_MIN = INT_MIN;    \/\/ (-2147483647 - 1), (0x80000000);$/;"	v	typeref:typename:const ImS32	file:
IM_S64_MAX	imgui_widgets.cpp	/^static const ImS64          IM_S64_MAX = 9223372036854775807LL;$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MAX	imgui_widgets.cpp	/^static const ImS64          IM_S64_MAX = LLONG_MAX;  \/\/ (9223372036854775807ll);$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MIN	imgui_widgets.cpp	/^static const ImS64          IM_S64_MIN = -9223372036854775807LL - 1;$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MIN	imgui_widgets.cpp	/^static const ImS64          IM_S64_MIN = LLONG_MIN;  \/\/ (-9223372036854775807ll - 1ll);$/;"	v	typeref:typename:const ImS64	file:
IM_S8_MAX	imgui_widgets.cpp	/^static const signed char    IM_S8_MAX  = 127;$/;"	v	typeref:typename:const signed char	file:
IM_S8_MIN	imgui_widgets.cpp	/^static const signed char    IM_S8_MIN  = -128;$/;"	v	typeref:typename:const signed char	file:
IM_STATIC_ASSERT	includes/imgui_internal.h	/^#define IM_STATIC_ASSERT(/;"	d
IM_STRINGIFY	includes/imgui_internal.h	/^#define IM_STRINGIFY(/;"	d
IM_STRINGIFY_HELPER	includes/imgui_internal.h	/^#define IM_STRINGIFY_HELPER(/;"	d
IM_TABSIZE	includes/imgui_internal.h	/^#define IM_TABSIZE /;"	d
IM_TRUNC	includes/imgui_internal.h	/^#define IM_TRUNC(/;"	d
IM_U16_MAX	imgui_widgets.cpp	/^static const unsigned short IM_U16_MAX = 0xFFFF;$/;"	v	typeref:typename:const unsigned short	file:
IM_U16_MIN	imgui_widgets.cpp	/^static const unsigned short IM_U16_MIN = 0;$/;"	v	typeref:typename:const unsigned short	file:
IM_U32_MAX	imgui_widgets.cpp	/^static const ImU32          IM_U32_MAX = UINT_MAX;   \/\/ (0xFFFFFFFF)$/;"	v	typeref:typename:const ImU32	file:
IM_U32_MIN	imgui_widgets.cpp	/^static const ImU32          IM_U32_MIN = 0;$/;"	v	typeref:typename:const ImU32	file:
IM_U64_MAX	imgui_widgets.cpp	/^static const ImU64          IM_U64_MAX = (2ULL * 9223372036854775807LL + 1);$/;"	v	typeref:typename:const ImU64	file:
IM_U64_MAX	imgui_widgets.cpp	/^static const ImU64          IM_U64_MAX = ULLONG_MAX; \/\/ (0xFFFFFFFFFFFFFFFFull);$/;"	v	typeref:typename:const ImU64	file:
IM_U64_MIN	imgui_widgets.cpp	/^static const ImU64          IM_U64_MIN = 0;$/;"	v	typeref:typename:const ImU64	file:
IM_U8_MAX	imgui_widgets.cpp	/^static const unsigned char  IM_U8_MAX  = 0xFF;$/;"	v	typeref:typename:const unsigned char	file:
IM_U8_MIN	imgui_widgets.cpp	/^static const unsigned char  IM_U8_MIN  = 0;$/;"	v	typeref:typename:const unsigned char	file:
IM_UNICODE_CODEPOINT_INVALID	includes/imgui.h	/^#define IM_UNICODE_CODEPOINT_INVALID /;"	d
IM_UNICODE_CODEPOINT_MAX	includes/imgui.h	/^#define IM_UNICODE_CODEPOINT_MAX /;"	d
IM_UNLIKELY	includes/imgui_internal.h	/^#define IM_UNLIKELY /;"	d
IM_UNLIKELY	includes/imgui_internal.h	/^#define IM_UNLIKELY$/;"	d
IM_UNUSED	includes/imgui.h	/^#define IM_UNUSED(/;"	d
INCLUDE_IMSTB_TEXTEDIT_H	includes/imstb_textedit.h	/^#define INCLUDE_IMSTB_TEXTEDIT_H$/;"	d
INCS	Makefile	/^INCS = -I.\/includes\/classes\/ -L.\/includes\/classes\/ -I.\/includes -L.\/includes\/ -lraylib /;"	m
IO	includes/imgui_internal.h	/^    ImGuiIO                 IO;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiIO
IO	includes/imgui_internal.h	/^    ImGuiMultiSelectIO      IO;                 \/\/ MUST BE FIRST FIELD. Requests are set and r/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:ImGuiMultiSelectIO
IconHitSpacing	imgui_demo.cpp	/^    int             IconHitSpacing = 4;         \/\/ Increase hit-spacing if you want to make it/;"	m	struct:ExampleAssetsBrowser	typeref:typename:int	file:
IconSize	imgui_demo.cpp	/^    float           IconSize = 32.0f;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:float	file:
IconSpacing	imgui_demo.cpp	/^    int             IconSpacing = 10;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:int	file:
IdealMaxPos	includes/imgui_internal.h	/^    ImVec2                  IdealMaxPos;            \/\/ Used to implicitly calculate ContentSiz/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
IdxBuffer	includes/imgui.h	/^    ImVector<ImDrawIdx>     IdxBuffer;          \/\/ Index buffer. Each command consume ImDrawCm/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawIdx>
IdxOffset	includes/imgui.h	/^    unsigned int    IdxOffset;          \/\/ 4    \/\/ Start offset in index buffer.$/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
ImAbs	includes/imgui_internal.h	/^static inline double ImAbs(double x)            { return fabs(x); }$/;"	f	typeref:typename:double
ImAbs	includes/imgui_internal.h	/^static inline float  ImAbs(float x)             { return fabsf(x); }$/;"	f	typeref:typename:float
ImAbs	includes/imgui_internal.h	/^static inline int    ImAbs(int x)               { return x < 0 ? -x : x; }$/;"	f	typeref:typename:int
ImAcos	includes/imgui_internal.h	/^#define ImAcos(/;"	d
ImAcos01	imgui_draw.cpp	/^static inline float ImAcos01(float x)$/;"	f	typeref:typename:float	file:
ImAddClampOverflow	includes/imgui_internal.h	/^template<typename T> static inline T ImAddClampOverflow(T a, T b, T mn, T mx)   { if (b < 0 && (/;"	f	typeref:typename:T
ImAlphaBlendColors	imgui.cpp	/^IMGUI_API ImU32 ImAlphaBlendColors(ImU32 col_a, ImU32 col_b)$/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_RESTORE IMGUI_API ImU32
ImAtan2	includes/imgui_internal.h	/^#define ImAtan2(/;"	d
ImAtof	includes/imgui_internal.h	/^#define ImAtof(/;"	d
ImAtoi	imgui_widgets.cpp	/^static const char* ImAtoi(const char* src, TYPE* output)$/;"	f	typeref:typename:const char *	file:
ImBezierCubicCalc	imgui_draw.cpp	/^ImVec2 ImBezierCubicCalc(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4,/;"	f	typeref:typename:ImVec2
ImBezierCubicClosestPoint	imgui.cpp	/^ImVec2 ImBezierCubicClosestPoint(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImV/;"	f	typeref:typename:ImVec2
ImBezierCubicClosestPointCasteljau	imgui.cpp	/^ImVec2 ImBezierCubicClosestPointCasteljau(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, /;"	f	typeref:typename:ImVec2
ImBezierCubicClosestPointCasteljauStep	imgui.cpp	/^static void ImBezierCubicClosestPointCasteljauStep(const ImVec2& p, ImVec2& p_closest, ImVec2& p/;"	f	typeref:typename:void	file:
ImBezierQuadraticCalc	imgui_draw.cpp	/^ImVec2 ImBezierQuadraticCalc(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, float t)$/;"	f	typeref:typename:ImVec2
ImBitArray	includes/imgui_internal.h	/^    ImBitArray()                                { ClearAllBits(); }$/;"	f	struct:ImBitArray
ImBitArray	includes/imgui_internal.h	/^struct ImBitArray$/;"	s
ImBitArrayClearAllBits	includes/imgui_internal.h	/^inline void     ImBitArrayClearAllBits(ImU32* arr, int bitcount){ memset(arr, 0, ImBitArrayGetSt/;"	f	typeref:typename:void
ImBitArrayClearBit	includes/imgui_internal.h	/^inline void     ImBitArrayClearBit(ImU32* arr, int n)           { ImU32 mask = (ImU32)1 << (n & /;"	f	typeref:typename:void
ImBitArrayForNamedKeys	includes/imgui_internal.h	/^typedef ImBitArray<ImGuiKey_NamedKey_COUNT, -ImGuiKey_NamedKey_BEGIN>    ImBitArrayForNamedKeys;$/;"	t	typeref:typename:ImBitArray<ImGuiKey_NamedKey_COUNT,-ImGuiKey_NamedKey_BEGIN>
ImBitArrayGetStorageSizeInBytes	includes/imgui_internal.h	/^inline size_t   ImBitArrayGetStorageSizeInBytes(int bitcount)   { return (size_t)((bitcount + 31/;"	f	typeref:typename:size_t
ImBitArrayPtr	includes/imgui_internal.h	/^typedef ImU32* ImBitArrayPtr; \/\/ Name for use in structs$/;"	t	typeref:typename:ImU32 *
ImBitArraySetBit	includes/imgui_internal.h	/^inline void     ImBitArraySetBit(ImU32* arr, int n)             { ImU32 mask = (ImU32)1 << (n & /;"	f	typeref:typename:void
ImBitArraySetBitRange	includes/imgui_internal.h	/^inline void     ImBitArraySetBitRange(ImU32* arr, int n, int n2) \/\/ Works on range [n..n2)$/;"	f	typeref:typename:void
ImBitArrayTestBit	includes/imgui_internal.h	/^inline bool     ImBitArrayTestBit(const ImU32* arr, int n)      { ImU32 mask = (ImU32)1 << (n & /;"	f	typeref:typename:bool
ImBitVector	includes/imgui_internal.h	/^struct IMGUI_API ImBitVector$/;"	s
ImCeil	includes/imgui_internal.h	/^#define ImCeil(/;"	d
ImCharIsBlankA	includes/imgui_internal.h	/^static inline bool      ImCharIsBlankA(char c)          { return c == ' ' || c == '\\t'; }$/;"	f	typeref:typename:bool
ImCharIsBlankW	includes/imgui_internal.h	/^static inline bool      ImCharIsBlankW(unsigned int c)  { return c == ' ' || c == '\\t' || c == /;"	f	typeref:typename:bool
ImCharIsSeparatorW	imgui_widgets.cpp	/^static bool ImCharIsSeparatorW(unsigned int c)$/;"	f	namespace:ImStb	typeref:typename:bool	file:
ImCharIsXdigitA	includes/imgui_internal.h	/^static inline bool      ImCharIsXdigitA(char c)         { return (c >= '0' && c <= '9') || (c >=/;"	f	typeref:typename:bool
ImChunkStream	includes/imgui_internal.h	/^struct ImChunkStream$/;"	s
ImClamp	includes/imgui_internal.h	/^static inline ImVec2 ImClamp(const ImVec2& v, const ImVec2&mn, const ImVec2&mx) { return ImVec2(/;"	f	typeref:typename:ImVec2
ImClamp	includes/imgui_internal.h	/^template<typename T> static inline T ImClamp(T v, T mn, T mx)                   { return (v < mn/;"	f	typeref:typename:T
ImColor	includes/imgui.h	/^    constexpr ImColor()                                             { }$/;"	f	struct:ImColor
ImColor	includes/imgui.h	/^    constexpr ImColor(ImU32 rgba)                                   : Value((float)((rgba >> IM_/;"	f	struct:ImColor
ImColor	includes/imgui.h	/^    constexpr ImColor(const ImVec4& col)                            : Value(col) {}$/;"	f	struct:ImColor
ImColor	includes/imgui.h	/^    constexpr ImColor(float r, float g, float b, float a = 1.0f)    : Value(r, g, b, a) { }$/;"	f	struct:ImColor
ImColor	includes/imgui.h	/^    constexpr ImColor(int r, int g, int b, int a = 255)             : Value((float)r * (1.0f \/ /;"	f	struct:ImColor
ImColor	includes/imgui.h	/^struct ImColor$/;"	s
ImCos	includes/imgui_internal.h	/^#define ImCos(/;"	d
ImDot	includes/imgui_internal.h	/^static inline float  ImDot(const ImVec2& a, const ImVec2& b)                    { return a.x * b/;"	f	typeref:typename:float
ImDrawCallback	includes/imgui.h	/^typedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd);$/;"	t	typeref:typename:void (*)(const ImDrawList * parent_list,const ImDrawCmd * cmd)
ImDrawCallback_ResetRenderState	includes/imgui.h	/^#define ImDrawCallback_ResetRenderState /;"	d
ImDrawChannel	includes/imgui.h	/^struct ImDrawChannel$/;"	s
ImDrawCmd	includes/imgui.h	/^    ImDrawCmd()     { memset(this, 0, sizeof(*this)); } \/\/ Also ensure our padding fields are /;"	f	struct:ImDrawCmd
ImDrawCmd	includes/imgui.h	/^struct ImDrawCmd$/;"	s
ImDrawCmdHeader	includes/imgui.h	/^struct ImDrawCmdHeader$/;"	s
ImDrawCmd_AreSequentialIdxOffset	imgui_draw.cpp	/^#define ImDrawCmd_AreSequentialIdxOffset(/;"	d	file:
ImDrawCmd_HeaderCompare	imgui_draw.cpp	/^#define ImDrawCmd_HeaderCompare(/;"	d	file:
ImDrawCmd_HeaderCopy	imgui_draw.cpp	/^#define ImDrawCmd_HeaderCopy(/;"	d	file:
ImDrawCmd_HeaderSize	imgui_draw.cpp	/^#define ImDrawCmd_HeaderSize /;"	d	file:
ImDrawData	includes/imgui.h	/^    ImDrawData()    { Clear(); }$/;"	f	struct:ImDrawData
ImDrawData	includes/imgui.h	/^struct ImDrawData$/;"	s
ImDrawDataBuilder	includes/imgui_internal.h	/^    ImDrawDataBuilder()                     { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImDrawDataBuilder
ImDrawDataBuilder	includes/imgui_internal.h	/^struct ImDrawDataBuilder$/;"	s
ImDrawFlags	includes/imgui.h	/^typedef int ImDrawFlags;            \/\/ -> enum ImDrawFlags_          \/\/ Flags: for ImDrawLis/;"	t	typeref:typename:int
ImDrawFlags_	includes/imgui.h	/^enum ImDrawFlags_$/;"	g
ImDrawFlags_Closed	includes/imgui.h	/^    ImDrawFlags_Closed                      = 1 << 0, \/\/ PathStroke(), AddPolyline(): specify /;"	e	enum:ImDrawFlags_
ImDrawFlags_None	includes/imgui.h	/^    ImDrawFlags_None                        = 0,$/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersAll	includes/imgui.h	/^    ImDrawFlags_RoundCornersAll             = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_Roun/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersBottom	includes/imgui.h	/^    ImDrawFlags_RoundCornersBottom          = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_R/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersBottomLeft	includes/imgui.h	/^    ImDrawFlags_RoundCornersBottomLeft      = 1 << 6, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersBottomRight	includes/imgui.h	/^    ImDrawFlags_RoundCornersBottomRight     = 1 << 7, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersDefault_	includes/imgui.h	/^    ImDrawFlags_RoundCornersDefault_        = ImDrawFlags_RoundCornersAll, \/\/ Default to ALL c/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersLeft	includes/imgui.h	/^    ImDrawFlags_RoundCornersLeft            = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_R/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersMask_	includes/imgui.h	/^    ImDrawFlags_RoundCornersMask_           = ImDrawFlags_RoundCornersAll | ImDrawFlags_RoundCor/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersNone	includes/imgui.h	/^    ImDrawFlags_RoundCornersNone            = 1 << 8, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersRight	includes/imgui.h	/^    ImDrawFlags_RoundCornersRight           = ImDrawFlags_RoundCornersBottomRight | ImDrawFlags_/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersTop	includes/imgui.h	/^    ImDrawFlags_RoundCornersTop             = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_Roun/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersTopLeft	includes/imgui.h	/^    ImDrawFlags_RoundCornersTopLeft         = 1 << 4, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersTopRight	includes/imgui.h	/^    ImDrawFlags_RoundCornersTopRight        = 1 << 5, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawIdx	includes/imgui.h	/^typedef unsigned short ImDrawIdx;   \/\/ Default: 16-bit (for maximum compatibility with rendere/;"	t	typeref:typename:unsigned short
ImDrawList	imgui_draw.cpp	/^ImDrawList::ImDrawList(ImDrawListSharedData* shared_data)$/;"	f	class:ImDrawList
ImDrawList	includes/imgui.h	/^struct ImDrawList$/;"	s
ImDrawListFlags	includes/imgui.h	/^typedef int ImDrawListFlags;        \/\/ -> enum ImDrawListFlags_      \/\/ Flags: for ImDrawLis/;"	t	typeref:typename:int
ImDrawListFlags_	includes/imgui.h	/^enum ImDrawListFlags_$/;"	g
ImDrawListFlags_AllowVtxOffset	includes/imgui.h	/^    ImDrawListFlags_AllowVtxOffset          = 1 << 3,  \/\/ Can emit 'VtxOffset > 0' to allow la/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedFill	includes/imgui.h	/^    ImDrawListFlags_AntiAliasedFill         = 1 << 2,  \/\/ Enable anti-aliased edge around fill/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedLines	includes/imgui.h	/^    ImDrawListFlags_AntiAliasedLines        = 1 << 0,  \/\/ Enable anti-aliased lines\/borders (/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedLinesUseTex	includes/imgui.h	/^    ImDrawListFlags_AntiAliasedLinesUseTex  = 1 << 1,  \/\/ Enable anti-aliased lines\/borders u/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_None	includes/imgui.h	/^    ImDrawListFlags_None                    = 0,$/;"	e	enum:ImDrawListFlags_
ImDrawListSharedData	imgui_draw.cpp	/^ImDrawListSharedData::ImDrawListSharedData()$/;"	f	class:ImDrawListSharedData
ImDrawListSharedData	includes/imgui_internal.h	/^struct IMGUI_API ImDrawListSharedData$/;"	s
ImDrawListSplitter	includes/imgui.h	/^    inline ImDrawListSplitter()  { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImDrawListSplitter
ImDrawListSplitter	includes/imgui.h	/^struct ImDrawListSplitter$/;"	s
ImDrawVert	includes/imgui.h	/^struct ImDrawVert$/;"	s
ImExponentialMovingAverage	includes/imgui_internal.h	/^static inline float  ImExponentialMovingAverage(float avg, float sample, int n) { avg -= avg \/ /;"	f	typeref:typename:float
ImFabs	includes/imgui_internal.h	/^#define ImFabs(/;"	d
ImFileClose	imgui.cpp	/^bool    ImFileClose(ImFileHandle f)     { return fclose(f) == 0; }$/;"	f	typeref:typename:bool
ImFileClose	includes/imgui_internal.h	/^static inline bool          ImFileClose(ImFileHandle)                               { return fal/;"	f	typeref:typename:bool
ImFileGetSize	imgui.cpp	/^ImU64   ImFileGetSize(ImFileHandle f)   { long off = 0, sz = 0; return ((off = ftell(f)) != -1 &/;"	f	typeref:typename:ImU64
ImFileGetSize	includes/imgui_internal.h	/^static inline ImU64         ImFileGetSize(ImFileHandle)                             { return (Im/;"	f	typeref:typename:ImU64
ImFileHandle	includes/imgui_internal.h	/^typedef FILE* ImFileHandle;$/;"	t	typeref:typename:FILE *
ImFileHandle	includes/imgui_internal.h	/^typedef void* ImFileHandle;$/;"	t	typeref:typename:void *
ImFileLoadToMemory	imgui.cpp	/^void*   ImFileLoadToMemory(const char* filename, const char* mode, size_t* out_file_size, int pa/;"	f	typeref:typename:void *
ImFileOpen	imgui.cpp	/^ImFileHandle ImFileOpen(const char* filename, const char* mode)$/;"	f	typeref:typename:ImFileHandle
ImFileOpen	includes/imgui_internal.h	/^static inline ImFileHandle  ImFileOpen(const char*, const char*)                    { return NUL/;"	f	typeref:typename:ImFileHandle
ImFileRead	imgui.cpp	/^ImU64   ImFileRead(void* data, ImU64 sz, ImU64 count, ImFileHandle f)           { return fread(d/;"	f	typeref:typename:ImU64
ImFileRead	includes/imgui_internal.h	/^static inline ImU64         ImFileRead(void*, ImU64, ImU64, ImFileHandle)           { return 0; /;"	f	typeref:typename:ImU64
ImFileWrite	imgui.cpp	/^ImU64   ImFileWrite(const void* data, ImU64 sz, ImU64 count, ImFileHandle f)    { return fwrite(/;"	f	typeref:typename:ImU64
ImFileWrite	includes/imgui_internal.h	/^static inline ImU64         ImFileWrite(const void*, ImU64, ImU64, ImFileHandle)    { return 0; /;"	f	typeref:typename:ImU64
ImFloor	includes/imgui_internal.h	/^static inline ImVec2 ImFloor(const ImVec2& v)                                   { return ImVec2(/;"	f	typeref:typename:ImVec2
ImFloor	includes/imgui_internal.h	/^static inline float  ImFloor(float f)                                           { return (float)/;"	f	typeref:typename:float
ImFmod	includes/imgui_internal.h	/^#define ImFmod(/;"	d
ImFont	imgui_draw.cpp	/^ImFont::ImFont()$/;"	f	class:ImFont
ImFont	includes/imgui.h	/^struct ImFont$/;"	s
ImFontAtlas	imgui_draw.cpp	/^ImFontAtlas::ImFontAtlas()$/;"	f	class:ImFontAtlas
ImFontAtlas	includes/imgui.h	/^struct ImFontAtlas$/;"	s
ImFontAtlasBuildFinish	imgui_draw.cpp	/^void ImFontAtlasBuildFinish(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontAtlasBuildInit	imgui_draw.cpp	/^void ImFontAtlasBuildInit(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontAtlasBuildMultiplyCalcLookupTable	imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256], float in_brighten_/;"	f	typeref:typename:void
ImFontAtlasBuildMultiplyRectAlpha8	imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyRectAlpha8(const unsigned char table[256], unsigned char* pixels/;"	f	typeref:typename:void
ImFontAtlasBuildPackCustomRects	imgui_draw.cpp	/^void ImFontAtlasBuildPackCustomRects(ImFontAtlas* atlas, void* stbrp_context_opaque)$/;"	f	typeref:typename:void
ImFontAtlasBuildRender32bppRectFromString	imgui_draw.cpp	/^void ImFontAtlasBuildRender32bppRectFromString(ImFontAtlas* atlas, int x, int y, int w, int h, c/;"	f	typeref:typename:void
ImFontAtlasBuildRender8bppRectFromString	imgui_draw.cpp	/^void ImFontAtlasBuildRender8bppRectFromString(ImFontAtlas* atlas, int x, int y, int w, int h, co/;"	f	typeref:typename:void
ImFontAtlasBuildRenderDefaultTexData	imgui_draw.cpp	/^static void ImFontAtlasBuildRenderDefaultTexData(ImFontAtlas* atlas)$/;"	f	typeref:typename:void	file:
ImFontAtlasBuildRenderLinesTexData	imgui_draw.cpp	/^static void ImFontAtlasBuildRenderLinesTexData(ImFontAtlas* atlas)$/;"	f	typeref:typename:void	file:
ImFontAtlasBuildSetupFont	imgui_draw.cpp	/^void ImFontAtlasBuildSetupFont(ImFontAtlas* atlas, ImFont* font, ImFontConfig* font_config, floa/;"	f	typeref:typename:void
ImFontAtlasBuildWithStbTruetype	imgui_draw.cpp	/^static bool ImFontAtlasBuildWithStbTruetype(ImFontAtlas* atlas)$/;"	f	typeref:typename:bool	file:
ImFontAtlasCustomRect	includes/imgui.h	/^    ImFontAtlasCustomRect()         { X = Y = 0xFFFF; Width = Height = 0; GlyphID = 0; GlyphColo/;"	f	struct:ImFontAtlasCustomRect
ImFontAtlasCustomRect	includes/imgui.h	/^struct ImFontAtlasCustomRect$/;"	s
ImFontAtlasFlags	includes/imgui.h	/^typedef int ImFontAtlasFlags;       \/\/ -> enum ImFontAtlasFlags_     \/\/ Flags: for ImFontAtl/;"	t	typeref:typename:int
ImFontAtlasFlags_	includes/imgui.h	/^enum ImFontAtlasFlags_$/;"	g
ImFontAtlasFlags_NoBakedLines	includes/imgui.h	/^    ImFontAtlasFlags_NoBakedLines       = 1 << 2,   \/\/ Don't build thick line textures into th/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_NoMouseCursors	includes/imgui.h	/^    ImFontAtlasFlags_NoMouseCursors     = 1 << 1,   \/\/ Don't build software mouse cursors into/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_NoPowerOfTwoHeight	includes/imgui.h	/^    ImFontAtlasFlags_NoPowerOfTwoHeight = 1 << 0,   \/\/ Don't round the height to next power of/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_None	includes/imgui.h	/^    ImFontAtlasFlags_None               = 0,$/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasGetBuilderForStbTruetype	imgui_draw.cpp	/^const ImFontBuilderIO* ImFontAtlasGetBuilderForStbTruetype()$/;"	f	typeref:typename:const ImFontBuilderIO *
ImFontAtlasUpdateConfigDataPointers	imgui_draw.cpp	/^void ImFontAtlasUpdateConfigDataPointers(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontBuildDstData	imgui_draw.cpp	/^struct ImFontBuildDstData$/;"	s	file:
ImFontBuildSrcData	imgui_draw.cpp	/^struct ImFontBuildSrcData$/;"	s	file:
ImFontBuilderIO	includes/imgui_internal.h	/^struct ImFontBuilderIO$/;"	s
ImFontConfig	imgui_draw.cpp	/^ImFontConfig::ImFontConfig()$/;"	f	class:ImFontConfig
ImFontConfig	includes/imgui.h	/^struct ImFontConfig$/;"	s
ImFontGetCharAdvanceX	imgui_draw.cpp	/^#define ImFontGetCharAdvanceX(/;"	d	file:
ImFontGlyph	includes/imgui.h	/^struct ImFontGlyph$/;"	s
ImFontGlyphRangesBuilder	includes/imgui.h	/^    ImFontGlyphRangesBuilder()              { Clear(); }$/;"	f	struct:ImFontGlyphRangesBuilder
ImFontGlyphRangesBuilder	includes/imgui.h	/^struct ImFontGlyphRangesBuilder$/;"	s
ImFormatString	imgui.cpp	/^int ImFormatString(char* buf, size_t buf_size, const char* fmt, ...)$/;"	f	typeref:typename:int
ImFormatStringToTempBuffer	imgui.cpp	/^void ImFormatStringToTempBuffer(const char** out_buf, const char** out_buf_end, const char* fmt,/;"	f	typeref:typename:void
ImFormatStringToTempBufferV	imgui.cpp	/^void ImFormatStringToTempBufferV(const char** out_buf, const char** out_buf_end, const char* fmt/;"	f	typeref:typename:void
ImFormatStringV	imgui.cpp	/^int ImFormatStringV(char* buf, size_t buf_size, const char* fmt, va_list args)$/;"	f	typeref:typename:int
ImGetDirQuadrantFromDelta	imgui.cpp	/^static ImGuiDir ImGetDirQuadrantFromDelta(float dx, float dy)$/;"	f	typeref:typename:ImGuiDir	file:
ImGui	imgui.cpp	/^namespace ImGui$/;"	n	file:
ImGui	imgui_demo.cpp	/^namespace ImGui { IMGUI_API void ShowFontAtlas(ImFontAtlas* atlas); }$/;"	n	file:
ImGui	imgui_widgets.cpp	/^namespace ImGui$/;"	n	file:
ImGui	includes/imgui.h	/^namespace ImGui$/;"	n
ImGui	includes/imgui_internal.h	/^namespace ImGui$/;"	n
ImGuiActivateFlags	includes/imgui_internal.h	/^typedef int ImGuiActivateFlags;         \/\/ -> enum ImGuiActivateFlags_      \/\/ Flags: for na/;"	t	typeref:typename:int
ImGuiActivateFlags_	includes/imgui_internal.h	/^enum ImGuiActivateFlags_$/;"	g
ImGuiActivateFlags_FromShortcut	includes/imgui_internal.h	/^    ImGuiActivateFlags_FromShortcut         = 1 << 4,       \/\/ Activation requested by an item/;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_FromTabbing	includes/imgui_internal.h	/^    ImGuiActivateFlags_FromTabbing          = 1 << 3,       \/\/ Activation requested by a tabbi/;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_None	includes/imgui_internal.h	/^    ImGuiActivateFlags_None                 = 0,$/;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_PreferInput	includes/imgui_internal.h	/^    ImGuiActivateFlags_PreferInput          = 1 << 0,       \/\/ Favor activation that requires /;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_PreferTweak	includes/imgui_internal.h	/^    ImGuiActivateFlags_PreferTweak          = 1 << 1,       \/\/ Favor activation for tweaking w/;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_TryToPreserveState	includes/imgui_internal.h	/^    ImGuiActivateFlags_TryToPreserveState   = 1 << 2,       \/\/ Request widget to preserve stat/;"	e	enum:ImGuiActivateFlags_
ImGuiAxis	includes/imgui_internal.h	/^enum ImGuiAxis$/;"	g
ImGuiAxis_None	includes/imgui_internal.h	/^    ImGuiAxis_None = -1,$/;"	e	enum:ImGuiAxis
ImGuiAxis_X	includes/imgui_internal.h	/^    ImGuiAxis_X = 0,$/;"	e	enum:ImGuiAxis
ImGuiAxis_Y	includes/imgui_internal.h	/^    ImGuiAxis_Y = 1$/;"	e	enum:ImGuiAxis
ImGuiBackendFlags	includes/imgui.h	/^typedef int ImGuiBackendFlags;      \/\/ -> enum ImGuiBackendFlags_    \/\/ Flags: for io.Backen/;"	t	typeref:typename:int
ImGuiBackendFlags_	includes/imgui.h	/^enum ImGuiBackendFlags_$/;"	g
ImGuiBackendFlags_HasGamepad	includes/imgui.h	/^    ImGuiBackendFlags_HasGamepad            = 1 << 0,   \/\/ Backend Platform supports gamepad a/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasMouseCursors	includes/imgui.h	/^    ImGuiBackendFlags_HasMouseCursors       = 1 << 1,   \/\/ Backend Platform supports honoring /;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasSetMousePos	includes/imgui.h	/^    ImGuiBackendFlags_HasSetMousePos        = 1 << 2,   \/\/ Backend Platform supports io.WantSe/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_None	includes/imgui.h	/^    ImGuiBackendFlags_None                  = 0,$/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_RendererHasVtxOffset	includes/imgui.h	/^    ImGuiBackendFlags_RendererHasVtxOffset  = 1 << 3,   \/\/ Backend Renderer supports ImDrawCmd/;"	e	enum:ImGuiBackendFlags_
ImGuiBoxSelectState	includes/imgui_internal.h	/^    ImGuiBoxSelectState()   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiBoxSelectState
ImGuiBoxSelectState	includes/imgui_internal.h	/^struct ImGuiBoxSelectState$/;"	s
ImGuiButtonFlags	includes/imgui.h	/^typedef int ImGuiButtonFlags;       \/\/ -> enum ImGuiButtonFlags_     \/\/ Flags: for Invisible/;"	t	typeref:typename:int
ImGuiButtonFlagsPrivate_	includes/imgui_internal.h	/^enum ImGuiButtonFlagsPrivate_$/;"	g
ImGuiButtonFlags_	includes/imgui.h	/^enum ImGuiButtonFlags_$/;"	g
ImGuiButtonFlags_AlignTextBaseLine	includes/imgui_internal.h	/^    ImGuiButtonFlags_AlignTextBaseLine      = 1 << 15,  \/\/ vertically align button to match te/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_AllowOverlap	includes/imgui_internal.h	/^    ImGuiButtonFlags_AllowOverlap           = 1 << 12,  \/\/ require previous frame HoveredId to/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_EnableNav	includes/imgui.h	/^    ImGuiButtonFlags_EnableNav              = 1 << 3,   \/\/ InvisibleButton(): do not disable n/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_FlattenChildren	includes/imgui_internal.h	/^    ImGuiButtonFlags_FlattenChildren        = 1 << 11,  \/\/ allow interactions even if a child /;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_MouseButtonLeft	includes/imgui.h	/^    ImGuiButtonFlags_MouseButtonLeft        = 1 << 0,   \/\/ React on left mouse button (default/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonMask_	includes/imgui.h	/^    ImGuiButtonFlags_MouseButtonMask_       = ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlag/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonMiddle	includes/imgui.h	/^    ImGuiButtonFlags_MouseButtonMiddle      = 1 << 2,   \/\/ React on center mouse button$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonRight	includes/imgui.h	/^    ImGuiButtonFlags_MouseButtonRight       = 1 << 1,   \/\/ React on right mouse button$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_NoHoldingActiveId	includes/imgui_internal.h	/^    ImGuiButtonFlags_NoHoldingActiveId      = 1 << 17,  \/\/ don't set ActiveId while holding th/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoHoveredOnFocus	includes/imgui_internal.h	/^    ImGuiButtonFlags_NoHoveredOnFocus       = 1 << 19,  \/\/ don't report as hovered when nav fo/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoKeyModsAllowed	includes/imgui_internal.h	/^    ImGuiButtonFlags_NoKeyModsAllowed       = 1 << 16,  \/\/ disable mouse interaction if a key /;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoNavFocus	includes/imgui_internal.h	/^    ImGuiButtonFlags_NoNavFocus             = 1 << 18,  \/\/ don't override navigation focus whe/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoSetKeyOwner	includes/imgui_internal.h	/^    ImGuiButtonFlags_NoSetKeyOwner          = 1 << 20,  \/\/ don't set key\/input owner on the i/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoTestKeyOwner	includes/imgui_internal.h	/^    ImGuiButtonFlags_NoTestKeyOwner         = 1 << 21,  \/\/ don't test key\/input owner when po/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_None	includes/imgui.h	/^    ImGuiButtonFlags_None                   = 0,$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnClick	includes/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClick         = 1 << 4,   \/\/ return true on click (mouse down ev/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnClickRelease	includes/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClickRelease  = 1 << 5,   \/\/ [Default] return true on click + re/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnClickReleaseAnywhere	includes/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClickReleaseAnywhere = 1 << 6, \/\/ return true on click + release/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnDefault_	includes/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDefault_      = ImGuiButtonFlags_PressedOnClickRelease,$/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnDoubleClick	includes/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDoubleClick   = 1 << 8,   \/\/ return true on double-click (defaul/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnDragDropHold	includes/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDragDropHold  = 1 << 9,   \/\/ return true when held into while we/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnMask_	includes/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnMask_         = ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnRelease	includes/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnRelease       = 1 << 7,   \/\/ return true on release (default req/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiChildFlags	includes/imgui.h	/^typedef int ImGuiChildFlags;        \/\/ -> enum ImGuiChildFlags_      \/\/ Flags: for BeginChil/;"	t	typeref:typename:int
ImGuiChildFlags_	includes/imgui.h	/^enum ImGuiChildFlags_$/;"	g
ImGuiChildFlags_AlwaysAutoResize	includes/imgui.h	/^    ImGuiChildFlags_AlwaysAutoResize        = 1 << 6,   \/\/ Combined with AutoResizeX\/AutoResi/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_AlwaysUseWindowPadding	includes/imgui.h	/^    ImGuiChildFlags_AlwaysUseWindowPadding  = 1 << 1,   \/\/ Pad with style.WindowPadding even i/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_AutoResizeX	includes/imgui.h	/^    ImGuiChildFlags_AutoResizeX             = 1 << 4,   \/\/ Enable auto-resizing width. Read "I/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_AutoResizeY	includes/imgui.h	/^    ImGuiChildFlags_AutoResizeY             = 1 << 5,   \/\/ Enable auto-resizing height. Read "/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_Border	includes/imgui.h	/^    ImGuiChildFlags_Border                  = ImGuiChildFlags_Borders,  \/\/ Renamed in 1.91.1 (/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_Borders	includes/imgui.h	/^    ImGuiChildFlags_Borders                 = 1 << 0,   \/\/ Show an outer border and enable Win/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_FrameStyle	includes/imgui.h	/^    ImGuiChildFlags_FrameStyle              = 1 << 7,   \/\/ Style the child window like a frame/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_NavFlattened	includes/imgui.h	/^    ImGuiChildFlags_NavFlattened            = 1 << 8,   \/\/ [BETA] Share focus scope, allow key/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_None	includes/imgui.h	/^    ImGuiChildFlags_None                    = 0,$/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_ResizeX	includes/imgui.h	/^    ImGuiChildFlags_ResizeX                 = 1 << 2,   \/\/ Allow resize from right border (lay/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_ResizeY	includes/imgui.h	/^    ImGuiChildFlags_ResizeY                 = 1 << 3,   \/\/ Allow resize from bottom border (la/;"	e	enum:ImGuiChildFlags_
ImGuiCol	includes/imgui.h	/^typedef int ImGuiCol;               \/\/ -> enum ImGuiCol_             \/\/ Enum: A color identi/;"	t	typeref:typename:int
ImGuiCol_	includes/imgui.h	/^enum ImGuiCol_$/;"	g
ImGuiCol_Border	includes/imgui.h	/^    ImGuiCol_Border,$/;"	e	enum:ImGuiCol_
ImGuiCol_BorderShadow	includes/imgui.h	/^    ImGuiCol_BorderShadow,$/;"	e	enum:ImGuiCol_
ImGuiCol_Button	includes/imgui.h	/^    ImGuiCol_Button,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonActive	includes/imgui.h	/^    ImGuiCol_ButtonActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonHovered	includes/imgui.h	/^    ImGuiCol_ButtonHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_COUNT	includes/imgui.h	/^    ImGuiCol_COUNT,$/;"	e	enum:ImGuiCol_
ImGuiCol_CheckMark	includes/imgui.h	/^    ImGuiCol_CheckMark,             \/\/ Checkbox tick and RadioButton circle$/;"	e	enum:ImGuiCol_
ImGuiCol_ChildBg	includes/imgui.h	/^    ImGuiCol_ChildBg,               \/\/ Background of child windows$/;"	e	enum:ImGuiCol_
ImGuiCol_DragDropTarget	includes/imgui.h	/^    ImGuiCol_DragDropTarget,        \/\/ Rectangle highlighting a drop target$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBg	includes/imgui.h	/^    ImGuiCol_FrameBg,               \/\/ Background of checkbox, radio button, plot, slider, tex/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgActive	includes/imgui.h	/^    ImGuiCol_FrameBgActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgHovered	includes/imgui.h	/^    ImGuiCol_FrameBgHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Header	includes/imgui.h	/^    ImGuiCol_Header,                \/\/ Header* colors are used for CollapsingHeader, TreeNode,/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderActive	includes/imgui.h	/^    ImGuiCol_HeaderActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderHovered	includes/imgui.h	/^    ImGuiCol_HeaderHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_MenuBarBg	includes/imgui.h	/^    ImGuiCol_MenuBarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ModalWindowDimBg	includes/imgui.h	/^    ImGuiCol_ModalWindowDimBg,      \/\/ Darken\/colorize entire screen behind a modal window, w/;"	e	enum:ImGuiCol_
ImGuiCol_NavCursor	includes/imgui.h	/^    ImGuiCol_NavCursor,             \/\/ Color of keyboard\/gamepad navigation cursor\/rectangle/;"	e	enum:ImGuiCol_
ImGuiCol_NavHighlight	includes/imgui.h	/^    ImGuiCol_NavHighlight = ImGuiCol_NavCursor,                 \/\/ [renamed in 1.91.4]$/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingDimBg	includes/imgui.h	/^    ImGuiCol_NavWindowingDimBg,     \/\/ Darken\/colorize entire screen behind the CTRL+TAB wind/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingHighlight	includes/imgui.h	/^    ImGuiCol_NavWindowingHighlight, \/\/ Highlight window when using CTRL+TAB$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogram	includes/imgui.h	/^    ImGuiCol_PlotHistogram,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogramHovered	includes/imgui.h	/^    ImGuiCol_PlotHistogramHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLines	includes/imgui.h	/^    ImGuiCol_PlotLines,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLinesHovered	includes/imgui.h	/^    ImGuiCol_PlotLinesHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PopupBg	includes/imgui.h	/^    ImGuiCol_PopupBg,               \/\/ Background of popups, menus, tooltips windows$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGrip	includes/imgui.h	/^    ImGuiCol_ResizeGrip,            \/\/ Resize grip in lower-right and lower-left corners of wi/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripActive	includes/imgui.h	/^    ImGuiCol_ResizeGripActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripHovered	includes/imgui.h	/^    ImGuiCol_ResizeGripHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarBg	includes/imgui.h	/^    ImGuiCol_ScrollbarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrab	includes/imgui.h	/^    ImGuiCol_ScrollbarGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabActive	includes/imgui.h	/^    ImGuiCol_ScrollbarGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabHovered	includes/imgui.h	/^    ImGuiCol_ScrollbarGrabHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Separator	includes/imgui.h	/^    ImGuiCol_Separator,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorActive	includes/imgui.h	/^    ImGuiCol_SeparatorActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorHovered	includes/imgui.h	/^    ImGuiCol_SeparatorHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrab	includes/imgui.h	/^    ImGuiCol_SliderGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrabActive	includes/imgui.h	/^    ImGuiCol_SliderGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_Tab	includes/imgui.h	/^    ImGuiCol_Tab,                   \/\/ Tab background, when tab-bar is focused & tab is unsele/;"	e	enum:ImGuiCol_
ImGuiCol_TabActive	includes/imgui.h	/^    ImGuiCol_TabActive = ImGuiCol_TabSelected,                  \/\/ [renamed in 1.90.9]$/;"	e	enum:ImGuiCol_
ImGuiCol_TabDimmed	includes/imgui.h	/^    ImGuiCol_TabDimmed,             \/\/ Tab background, when tab-bar is unfocused & tab is unse/;"	e	enum:ImGuiCol_
ImGuiCol_TabDimmedSelected	includes/imgui.h	/^    ImGuiCol_TabDimmedSelected,     \/\/ Tab background, when tab-bar is unfocused & tab is sele/;"	e	enum:ImGuiCol_
ImGuiCol_TabDimmedSelectedOverline	includes/imgui.h	/^    ImGuiCol_TabDimmedSelectedOverline,\/\/..horizontal overline, when tab-bar is unfocused & ta/;"	e	enum:ImGuiCol_
ImGuiCol_TabHovered	includes/imgui.h	/^    ImGuiCol_TabHovered,            \/\/ Tab background, when hovered$/;"	e	enum:ImGuiCol_
ImGuiCol_TabSelected	includes/imgui.h	/^    ImGuiCol_TabSelected,           \/\/ Tab background, when tab-bar is focused & tab is select/;"	e	enum:ImGuiCol_
ImGuiCol_TabSelectedOverline	includes/imgui.h	/^    ImGuiCol_TabSelectedOverline,   \/\/ Tab horizontal overline, when tab-bar is focused & tab /;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocused	includes/imgui.h	/^    ImGuiCol_TabUnfocused = ImGuiCol_TabDimmed,                 \/\/ [renamed in 1.90.9]$/;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocusedActive	includes/imgui.h	/^    ImGuiCol_TabUnfocusedActive = ImGuiCol_TabDimmedSelected,   \/\/ [renamed in 1.90.9]$/;"	e	enum:ImGuiCol_
ImGuiCol_TableBorderLight	includes/imgui.h	/^    ImGuiCol_TableBorderLight,      \/\/ Table inner borders (prefer using Alpha=1.0 here)$/;"	e	enum:ImGuiCol_
ImGuiCol_TableBorderStrong	includes/imgui.h	/^    ImGuiCol_TableBorderStrong,     \/\/ Table outer and header borders (prefer using Alpha=1.0 /;"	e	enum:ImGuiCol_
ImGuiCol_TableHeaderBg	includes/imgui.h	/^    ImGuiCol_TableHeaderBg,         \/\/ Table header background$/;"	e	enum:ImGuiCol_
ImGuiCol_TableRowBg	includes/imgui.h	/^    ImGuiCol_TableRowBg,            \/\/ Table row background (even rows)$/;"	e	enum:ImGuiCol_
ImGuiCol_TableRowBgAlt	includes/imgui.h	/^    ImGuiCol_TableRowBgAlt,         \/\/ Table row background (odd rows)$/;"	e	enum:ImGuiCol_
ImGuiCol_Text	includes/imgui.h	/^    ImGuiCol_Text,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextDisabled	includes/imgui.h	/^    ImGuiCol_TextDisabled,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextLink	includes/imgui.h	/^    ImGuiCol_TextLink,              \/\/ Hyperlink color$/;"	e	enum:ImGuiCol_
ImGuiCol_TextSelectedBg	includes/imgui.h	/^    ImGuiCol_TextSelectedBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBg	includes/imgui.h	/^    ImGuiCol_TitleBg,               \/\/ Title bar$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgActive	includes/imgui.h	/^    ImGuiCol_TitleBgActive,         \/\/ Title bar when focused$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgCollapsed	includes/imgui.h	/^    ImGuiCol_TitleBgCollapsed,      \/\/ Title bar when collapsed$/;"	e	enum:ImGuiCol_
ImGuiCol_WindowBg	includes/imgui.h	/^    ImGuiCol_WindowBg,              \/\/ Background of normal windows$/;"	e	enum:ImGuiCol_
ImGuiColorEditFlags	includes/imgui.h	/^typedef int ImGuiColorEditFlags;    \/\/ -> enum ImGuiColorEditFlags_  \/\/ Flags: for ColorEdit/;"	t	typeref:typename:int
ImGuiColorEditFlags_	includes/imgui.h	/^enum ImGuiColorEditFlags_$/;"	g
ImGuiColorEditFlags_AlphaBar	includes/imgui.h	/^    ImGuiColorEditFlags_AlphaBar        = 1 << 16,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaMask_	includes/imgui.h	/^    ImGuiColorEditFlags_AlphaMask_      = ImGuiColorEditFlags_NoAlpha | ImGuiColorEditFlags_Alph/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaNoBg	includes/imgui.h	/^    ImGuiColorEditFlags_AlphaNoBg       = 1 << 12,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaOpaque	includes/imgui.h	/^    ImGuiColorEditFlags_AlphaOpaque     = 1 << 11,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreview	includes/imgui.h	/^    ImGuiColorEditFlags_AlphaPreview = 0,         \/\/ [Removed in 1.91.8] This is the default n/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreviewHalf	includes/imgui.h	/^    ImGuiColorEditFlags_AlphaPreviewHalf= 1 << 13,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DataTypeMask_	includes/imgui.h	/^    ImGuiColorEditFlags_DataTypeMask_   = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Float,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DefaultOptions_	includes/imgui.h	/^    ImGuiColorEditFlags_DefaultOptions_ = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Displa/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayHSV	includes/imgui.h	/^    ImGuiColorEditFlags_DisplayHSV      = 1 << 21,  \/\/ [Display]    \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayHex	includes/imgui.h	/^    ImGuiColorEditFlags_DisplayHex      = 1 << 22,  \/\/ [Display]    \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayMask_	includes/imgui.h	/^    ImGuiColorEditFlags_DisplayMask_    = ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_D/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayRGB	includes/imgui.h	/^    ImGuiColorEditFlags_DisplayRGB      = 1 << 20,  \/\/ [Display]    \/\/ ColorEdit: override _/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Float	includes/imgui.h	/^    ImGuiColorEditFlags_Float           = 1 << 24,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_HDR	includes/imgui.h	/^    ImGuiColorEditFlags_HDR             = 1 << 19,  \/\/              \/\/ (WIP) ColorEdit: Curr/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputHSV	includes/imgui.h	/^    ImGuiColorEditFlags_InputHSV        = 1 << 28,  \/\/ [Input]      \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputMask_	includes/imgui.h	/^    ImGuiColorEditFlags_InputMask_      = ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_Inp/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputRGB	includes/imgui.h	/^    ImGuiColorEditFlags_InputRGB        = 1 << 27,  \/\/ [Input]      \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoAlpha	includes/imgui.h	/^    ImGuiColorEditFlags_NoAlpha         = 1 << 1,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoBorder	includes/imgui.h	/^    ImGuiColorEditFlags_NoBorder        = 1 << 10,  \/\/              \/\/ ColorButton: disable /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoDragDrop	includes/imgui.h	/^    ImGuiColorEditFlags_NoDragDrop      = 1 << 9,   \/\/              \/\/ ColorEdit: disable dr/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoInputs	includes/imgui.h	/^    ImGuiColorEditFlags_NoInputs        = 1 << 5,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoLabel	includes/imgui.h	/^    ImGuiColorEditFlags_NoLabel         = 1 << 7,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoOptions	includes/imgui.h	/^    ImGuiColorEditFlags_NoOptions       = 1 << 3,   \/\/              \/\/ ColorEdit: disable to/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoPicker	includes/imgui.h	/^    ImGuiColorEditFlags_NoPicker        = 1 << 2,   \/\/              \/\/ ColorEdit: disable pi/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSidePreview	includes/imgui.h	/^    ImGuiColorEditFlags_NoSidePreview   = 1 << 8,   \/\/              \/\/ ColorPicker: disable /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSmallPreview	includes/imgui.h	/^    ImGuiColorEditFlags_NoSmallPreview  = 1 << 4,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoTooltip	includes/imgui.h	/^    ImGuiColorEditFlags_NoTooltip       = 1 << 6,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_None	includes/imgui.h	/^    ImGuiColorEditFlags_None            = 0,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueBar	includes/imgui.h	/^    ImGuiColorEditFlags_PickerHueBar    = 1 << 25,  \/\/ [Picker]     \/\/ ColorPicker: bar for /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueWheel	includes/imgui.h	/^    ImGuiColorEditFlags_PickerHueWheel  = 1 << 26,  \/\/ [Picker]     \/\/ ColorPicker: wheel fo/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerMask_	includes/imgui.h	/^    ImGuiColorEditFlags_PickerMask_     = ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFla/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Uint8	includes/imgui.h	/^    ImGuiColorEditFlags_Uint8           = 1 << 23,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorMod	includes/imgui_internal.h	/^struct ImGuiColorMod$/;"	s
ImGuiComboFlags	includes/imgui.h	/^typedef int ImGuiComboFlags;        \/\/ -> enum ImGuiComboFlags_      \/\/ Flags: for BeginComb/;"	t	typeref:typename:int
ImGuiComboFlagsPrivate_	includes/imgui_internal.h	/^enum ImGuiComboFlagsPrivate_$/;"	g
ImGuiComboFlags_	includes/imgui.h	/^enum ImGuiComboFlags_$/;"	g
ImGuiComboFlags_CustomPreview	includes/imgui_internal.h	/^    ImGuiComboFlags_CustomPreview           = 1 << 20,  \/\/ enable BeginComboPreview()$/;"	e	enum:ImGuiComboFlagsPrivate_
ImGuiComboFlags_HeightLarge	includes/imgui.h	/^    ImGuiComboFlags_HeightLarge             = 1 << 3,   \/\/ Max ~20 items visible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightLargest	includes/imgui.h	/^    ImGuiComboFlags_HeightLargest           = 1 << 4,   \/\/ As many fitting items as possible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightMask_	includes/imgui.h	/^    ImGuiComboFlags_HeightMask_             = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_Heig/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightRegular	includes/imgui.h	/^    ImGuiComboFlags_HeightRegular           = 1 << 2,   \/\/ Max ~8 items visible (default)$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightSmall	includes/imgui.h	/^    ImGuiComboFlags_HeightSmall             = 1 << 1,   \/\/ Max ~4 items visible. Tip: If you w/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoArrowButton	includes/imgui.h	/^    ImGuiComboFlags_NoArrowButton           = 1 << 5,   \/\/ Display on the preview box without /;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoPreview	includes/imgui.h	/^    ImGuiComboFlags_NoPreview               = 1 << 6,   \/\/ Display only a square arrow button$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_None	includes/imgui.h	/^    ImGuiComboFlags_None                    = 0,$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_PopupAlignLeft	includes/imgui.h	/^    ImGuiComboFlags_PopupAlignLeft          = 1 << 0,   \/\/ Align the popup toward the left by /;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_WidthFitPreview	includes/imgui.h	/^    ImGuiComboFlags_WidthFitPreview         = 1 << 7,   \/\/ Width dynamically calculated from p/;"	e	enum:ImGuiComboFlags_
ImGuiComboPreviewData	includes/imgui_internal.h	/^    ImGuiComboPreviewData() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiComboPreviewData
ImGuiComboPreviewData	includes/imgui_internal.h	/^struct IMGUI_API ImGuiComboPreviewData$/;"	s
ImGuiCond	includes/imgui.h	/^typedef int ImGuiCond;              \/\/ -> enum ImGuiCond_            \/\/ Enum: A condition fo/;"	t	typeref:typename:int
ImGuiCond_	includes/imgui.h	/^enum ImGuiCond_$/;"	g
ImGuiCond_Always	includes/imgui.h	/^    ImGuiCond_Always        = 1 << 0,   \/\/ No condition (always set the variable), same as _No/;"	e	enum:ImGuiCond_
ImGuiCond_Appearing	includes/imgui.h	/^    ImGuiCond_Appearing     = 1 << 3,   \/\/ Set the variable if the object\/window is appearing/;"	e	enum:ImGuiCond_
ImGuiCond_FirstUseEver	includes/imgui.h	/^    ImGuiCond_FirstUseEver  = 1 << 2,   \/\/ Set the variable if the object\/window has no persi/;"	e	enum:ImGuiCond_
ImGuiCond_None	includes/imgui.h	/^    ImGuiCond_None          = 0,        \/\/ No condition (always set the variable), same as _Al/;"	e	enum:ImGuiCond_
ImGuiCond_Once	includes/imgui.h	/^    ImGuiCond_Once          = 1 << 1,   \/\/ Set the variable once per runtime session (only the/;"	e	enum:ImGuiCond_
ImGuiConfigFlags	includes/imgui.h	/^typedef int ImGuiConfigFlags;       \/\/ -> enum ImGuiConfigFlags_     \/\/ Flags: for io.Config/;"	t	typeref:typename:int
ImGuiConfigFlags_	includes/imgui.h	/^enum ImGuiConfigFlags_$/;"	g
ImGuiConfigFlags_IsSRGB	includes/imgui.h	/^    ImGuiConfigFlags_IsSRGB                 = 1 << 20,  \/\/ Application is SRGB-aware.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_IsTouchScreen	includes/imgui.h	/^    ImGuiConfigFlags_IsTouchScreen          = 1 << 21,  \/\/ Application is using a touch screen/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableGamepad	includes/imgui.h	/^    ImGuiConfigFlags_NavEnableGamepad       = 1 << 1,   \/\/ Master gamepad navigation enable fl/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableKeyboard	includes/imgui.h	/^    ImGuiConfigFlags_NavEnableKeyboard      = 1 << 0,   \/\/ Master keyboard navigation enable f/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableSetMousePos	includes/imgui.h	/^    ImGuiConfigFlags_NavEnableSetMousePos   = 1 << 2,   \/\/ [moved\/renamed in 1.91.4] -> use b/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavNoCaptureKeyboard	includes/imgui.h	/^    ImGuiConfigFlags_NavNoCaptureKeyboard   = 1 << 3,   \/\/ [moved\/renamed in 1.91.4] -> use b/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoKeyboard	includes/imgui.h	/^    ImGuiConfigFlags_NoKeyboard             = 1 << 6,   \/\/ Instruct dear imgui to disable keyb/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouse	includes/imgui.h	/^    ImGuiConfigFlags_NoMouse                = 1 << 4,   \/\/ Instruct dear imgui to disable mous/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouseCursorChange	includes/imgui.h	/^    ImGuiConfigFlags_NoMouseCursorChange    = 1 << 5,   \/\/ Instruct backend to not alter mouse/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_None	includes/imgui.h	/^    ImGuiConfigFlags_None                   = 0,$/;"	e	enum:ImGuiConfigFlags_
ImGuiContext	imgui.cpp	/^ImGuiContext::ImGuiContext(ImFontAtlas* shared_font_atlas)$/;"	f	class:ImGuiContext
ImGuiContext	includes/imgui_internal.h	/^struct ImGuiContext$/;"	s
ImGuiContextHook	includes/imgui_internal.h	/^    ImGuiContextHook()          { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiContextHook
ImGuiContextHook	includes/imgui_internal.h	/^struct ImGuiContextHook$/;"	s
ImGuiContextHookCallback	includes/imgui_internal.h	/^typedef void (*ImGuiContextHookCallback)(ImGuiContext* ctx, ImGuiContextHook* hook);$/;"	t	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiContextHook * hook)
ImGuiContextHookType	includes/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	g
ImGuiContextHookType_EndFramePost	includes/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_EndFramePre	includes/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_NewFramePost	includes/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_NewFramePre	includes/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_PendingRemoval_	includes/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_RenderPost	includes/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_RenderPre	includes/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_Shutdown	includes/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiDataType	includes/imgui.h	/^typedef int ImGuiDataType;          \/\/ -> enum ImGuiDataType_        \/\/ Enum: A primary data/;"	t	typeref:typename:int
ImGuiDataTypeInfo	includes/imgui_internal.h	/^struct ImGuiDataTypeInfo$/;"	s
ImGuiDataTypePrivate_	includes/imgui_internal.h	/^enum ImGuiDataTypePrivate_$/;"	g
ImGuiDataTypeStorage	includes/imgui_internal.h	/^struct ImGuiDataTypeStorage$/;"	s
ImGuiDataType_	includes/imgui.h	/^enum ImGuiDataType_$/;"	g
ImGuiDataType_Bool	includes/imgui.h	/^    ImGuiDataType_Bool,     \/\/ bool (provided for user convenience, not supported by scalar wi/;"	e	enum:ImGuiDataType_
ImGuiDataType_COUNT	includes/imgui.h	/^    ImGuiDataType_COUNT$/;"	e	enum:ImGuiDataType_
ImGuiDataType_Double	includes/imgui.h	/^    ImGuiDataType_Double,   \/\/ double$/;"	e	enum:ImGuiDataType_
ImGuiDataType_Float	includes/imgui.h	/^    ImGuiDataType_Float,    \/\/ float$/;"	e	enum:ImGuiDataType_
ImGuiDataType_ID	includes/imgui_internal.h	/^    ImGuiDataType_ID,$/;"	e	enum:ImGuiDataTypePrivate_
ImGuiDataType_Pointer	includes/imgui_internal.h	/^    ImGuiDataType_Pointer = ImGuiDataType_COUNT + 1,$/;"	e	enum:ImGuiDataTypePrivate_
ImGuiDataType_S16	includes/imgui.h	/^    ImGuiDataType_S16,      \/\/ short$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S32	includes/imgui.h	/^    ImGuiDataType_S32,      \/\/ int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S64	includes/imgui.h	/^    ImGuiDataType_S64,      \/\/ long long \/ __int64$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S8	includes/imgui.h	/^    ImGuiDataType_S8,       \/\/ signed char \/ char (with sensible compilers)$/;"	e	enum:ImGuiDataType_
ImGuiDataType_String	includes/imgui.h	/^    ImGuiDataType_String,   \/\/ char* (provided for user convenience, not supported by scalar w/;"	e	enum:ImGuiDataType_
ImGuiDataType_U16	includes/imgui.h	/^    ImGuiDataType_U16,      \/\/ unsigned short$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U32	includes/imgui.h	/^    ImGuiDataType_U32,      \/\/ unsigned int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U64	includes/imgui.h	/^    ImGuiDataType_U64,      \/\/ unsigned long long \/ unsigned __int64$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U8	includes/imgui.h	/^    ImGuiDataType_U8,       \/\/ unsigned char$/;"	e	enum:ImGuiDataType_
ImGuiDataVarInfo	includes/imgui_internal.h	/^struct ImGuiDataVarInfo$/;"	s
ImGuiDeactivatedItemData	includes/imgui_internal.h	/^struct ImGuiDeactivatedItemData$/;"	s
ImGuiDebugAllocEntry	includes/imgui_internal.h	/^struct ImGuiDebugAllocEntry$/;"	s
ImGuiDebugAllocInfo	includes/imgui_internal.h	/^    ImGuiDebugAllocInfo() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiDebugAllocInfo
ImGuiDebugAllocInfo	includes/imgui_internal.h	/^struct ImGuiDebugAllocInfo$/;"	s
ImGuiDebugLogFlags	includes/imgui_internal.h	/^typedef int ImGuiDebugLogFlags;         \/\/ -> enum ImGuiDebugLogFlags_      \/\/ Flags: for Sh/;"	t	typeref:typename:int
ImGuiDebugLogFlags_	includes/imgui_internal.h	/^enum ImGuiDebugLogFlags_$/;"	g
ImGuiDebugLogFlags_EventActiveId	includes/imgui_internal.h	/^    ImGuiDebugLogFlags_EventActiveId        = 1 << 1,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventClipper	includes/imgui_internal.h	/^    ImGuiDebugLogFlags_EventClipper         = 1 << 5,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventDocking	includes/imgui_internal.h	/^    ImGuiDebugLogFlags_EventDocking         = 1 << 10,  \/\/ Unused in this branch$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventError	includes/imgui_internal.h	/^    ImGuiDebugLogFlags_EventError           = 1 << 0,   \/\/ Error submitted by IM_ASSERT_USER_E/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventFocus	includes/imgui_internal.h	/^    ImGuiDebugLogFlags_EventFocus           = 1 << 2,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventFont	includes/imgui_internal.h	/^    ImGuiDebugLogFlags_EventFont            = 1 << 8,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventIO	includes/imgui_internal.h	/^    ImGuiDebugLogFlags_EventIO              = 1 << 7,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventInputRouting	includes/imgui_internal.h	/^    ImGuiDebugLogFlags_EventInputRouting    = 1 << 9,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventMask_	includes/imgui_internal.h	/^    ImGuiDebugLogFlags_EventMask_           = ImGuiDebugLogFlags_EventError | ImGuiDebugLogFlags/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventNav	includes/imgui_internal.h	/^    ImGuiDebugLogFlags_EventNav             = 1 << 4,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventPopup	includes/imgui_internal.h	/^    ImGuiDebugLogFlags_EventPopup           = 1 << 3,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventSelection	includes/imgui_internal.h	/^    ImGuiDebugLogFlags_EventSelection       = 1 << 6,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventViewport	includes/imgui_internal.h	/^    ImGuiDebugLogFlags_EventViewport        = 1 << 11,  \/\/ Unused in this branch$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_None	includes/imgui_internal.h	/^    ImGuiDebugLogFlags_None                 = 0,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_OutputToTTY	includes/imgui_internal.h	/^    ImGuiDebugLogFlags_OutputToTTY          = 1 << 20,  \/\/ Also send output to TTY$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_OutputToTestEngine	includes/imgui_internal.h	/^    ImGuiDebugLogFlags_OutputToTestEngine   = 1 << 21,  \/\/ Also send output to Test Engine$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDemoMarkerCallback	imgui_demo.cpp	/^typedef void (*ImGuiDemoMarkerCallback)(const char* file, int line, const char* section, void* u/;"	t	typeref:typename:void (*)(const char * file,int line,const char * section,void * user_data)	file:
ImGuiDemoWindowData	imgui_demo.cpp	/^struct ImGuiDemoWindowData$/;"	s	file:
ImGuiDir	includes/imgui.h	/^enum ImGuiDir : int$/;"	g	typeref:typename:int
ImGuiDir_COUNT	includes/imgui.h	/^    ImGuiDir_COUNT$/;"	e	enum:ImGuiDir
ImGuiDir_Down	includes/imgui.h	/^    ImGuiDir_Down    = 3,$/;"	e	enum:ImGuiDir
ImGuiDir_Left	includes/imgui.h	/^    ImGuiDir_Left    = 0,$/;"	e	enum:ImGuiDir
ImGuiDir_None	includes/imgui.h	/^    ImGuiDir_None    = -1,$/;"	e	enum:ImGuiDir
ImGuiDir_Right	includes/imgui.h	/^    ImGuiDir_Right   = 1,$/;"	e	enum:ImGuiDir
ImGuiDir_Up	includes/imgui.h	/^    ImGuiDir_Up      = 2,$/;"	e	enum:ImGuiDir
ImGuiDragDropFlags	includes/imgui.h	/^typedef int ImGuiDragDropFlags;     \/\/ -> enum ImGuiDragDropFlags_   \/\/ Flags: for BeginDrag/;"	t	typeref:typename:int
ImGuiDragDropFlags_	includes/imgui.h	/^enum ImGuiDragDropFlags_$/;"	g
ImGuiDragDropFlags_AcceptBeforeDelivery	includes/imgui.h	/^    ImGuiDragDropFlags_AcceptBeforeDelivery         = 1 << 10,  \/\/ AcceptDragDropPayload() wil/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoDrawDefaultRect	includes/imgui.h	/^    ImGuiDragDropFlags_AcceptNoDrawDefaultRect      = 1 << 11,  \/\/ Do not draw the default hig/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoPreviewTooltip	includes/imgui.h	/^    ImGuiDragDropFlags_AcceptNoPreviewTooltip       = 1 << 12,  \/\/ Request hiding the BeginDra/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptPeekOnly	includes/imgui.h	/^    ImGuiDragDropFlags_AcceptPeekOnly               = ImGuiDragDropFlags_AcceptBeforeDelivery | /;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_None	includes/imgui.h	/^    ImGuiDragDropFlags_None                         = 0,$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_PayloadAutoExpire	includes/imgui.h	/^    ImGuiDragDropFlags_PayloadAutoExpire            = 1 << 5,   \/\/ Automatically expire the pa/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_PayloadNoCrossContext	includes/imgui.h	/^    ImGuiDragDropFlags_PayloadNoCrossContext        = 1 << 6,   \/\/ Hint to specify that the pa/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_PayloadNoCrossProcess	includes/imgui.h	/^    ImGuiDragDropFlags_PayloadNoCrossProcess        = 1 << 7,   \/\/ Hint to specify that the pa/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAllowNullID	includes/imgui.h	/^    ImGuiDragDropFlags_SourceAllowNullID            = 1 << 3,   \/\/ Allow items such as Text(),/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAutoExpirePayload	includes/imgui.h	/^    ImGuiDragDropFlags_SourceAutoExpirePayload = ImGuiDragDropFlags_PayloadAutoExpire, \/\/ Rena/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceExtern	includes/imgui.h	/^    ImGuiDragDropFlags_SourceExtern                 = 1 << 4,   \/\/ External source (from outsi/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoDisableHover	includes/imgui.h	/^    ImGuiDragDropFlags_SourceNoDisableHover         = 1 << 1,   \/\/ By default, when dragging w/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoHoldToOpenOthers	includes/imgui.h	/^    ImGuiDragDropFlags_SourceNoHoldToOpenOthers     = 1 << 2,   \/\/ Disable the behavior that a/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoPreviewTooltip	includes/imgui.h	/^    ImGuiDragDropFlags_SourceNoPreviewTooltip       = 1 << 0,   \/\/ Disable preview tooltip. By/;"	e	enum:ImGuiDragDropFlags_
ImGuiErrorCallback	includes/imgui_internal.h	/^typedef void (*ImGuiErrorCallback)(ImGuiContext* ctx, void* user_data, const char* msg); \/\/ Fu/;"	t	typeref:typename:void (*)(ImGuiContext * ctx,void * user_data,const char * msg)
ImGuiErrorRecoveryState	includes/imgui_internal.h	/^    ImGuiErrorRecoveryState() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiErrorRecoveryState
ImGuiErrorRecoveryState	includes/imgui_internal.h	/^struct IMGUI_API ImGuiErrorRecoveryState$/;"	s
ImGuiFocusRequestFlags	includes/imgui_internal.h	/^typedef int ImGuiFocusRequestFlags;     \/\/ -> enum ImGuiFocusRequestFlags_  \/\/ Flags: for Fo/;"	t	typeref:typename:int
ImGuiFocusRequestFlags_	includes/imgui_internal.h	/^enum ImGuiFocusRequestFlags_$/;"	g
ImGuiFocusRequestFlags_None	includes/imgui_internal.h	/^    ImGuiFocusRequestFlags_None                 = 0,$/;"	e	enum:ImGuiFocusRequestFlags_
ImGuiFocusRequestFlags_RestoreFocusedChild	includes/imgui_internal.h	/^    ImGuiFocusRequestFlags_RestoreFocusedChild  = 1 << 0,   \/\/ Find last focused child (if any/;"	e	enum:ImGuiFocusRequestFlags_
ImGuiFocusRequestFlags_UnlessBelowModal	includes/imgui_internal.h	/^    ImGuiFocusRequestFlags_UnlessBelowModal     = 1 << 1,   \/\/ Do not set focus if the window /;"	e	enum:ImGuiFocusRequestFlags_
ImGuiFocusScopeData	includes/imgui_internal.h	/^struct ImGuiFocusScopeData$/;"	s
ImGuiFocusedFlags	includes/imgui.h	/^typedef int ImGuiFocusedFlags;      \/\/ -> enum ImGuiFocusedFlags_    \/\/ Flags: for IsWindowF/;"	t	typeref:typename:int
ImGuiFocusedFlags_	includes/imgui.h	/^enum ImGuiFocusedFlags_$/;"	g
ImGuiFocusedFlags_AnyWindow	includes/imgui.h	/^    ImGuiFocusedFlags_AnyWindow                     = 1 << 2,   \/\/ Return true if any window i/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_ChildWindows	includes/imgui.h	/^    ImGuiFocusedFlags_ChildWindows                  = 1 << 0,   \/\/ Return true if any children/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_NoPopupHierarchy	includes/imgui.h	/^    ImGuiFocusedFlags_NoPopupHierarchy              = 1 << 3,   \/\/ Do not consider popup hiera/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_None	includes/imgui.h	/^    ImGuiFocusedFlags_None                          = 0,$/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootAndChildWindows	includes/imgui.h	/^    ImGuiFocusedFlags_RootAndChildWindows           = ImGuiFocusedFlags_RootWindow | ImGuiFocuse/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootWindow	includes/imgui.h	/^    ImGuiFocusedFlags_RootWindow                    = 1 << 1,   \/\/ Test from root window (top /;"	e	enum:ImGuiFocusedFlags_
ImGuiGetNameFromIndexOldToNewCallback	imgui_widgets.cpp	/^static const char* ImGuiGetNameFromIndexOldToNewCallback(void* user_data, int idx)$/;"	f	typeref:typename:const char *	file:
ImGuiGetNameFromIndexOldToNewCallbackData	imgui_widgets.cpp	/^struct ImGuiGetNameFromIndexOldToNewCallbackData { void* UserData; bool (*OldCallback)(void*, in/;"	s	file:
ImGuiGroupData	includes/imgui_internal.h	/^struct IMGUI_API ImGuiGroupData$/;"	s
ImGuiHoveredFlags	includes/imgui.h	/^typedef int ImGuiHoveredFlags;      \/\/ -> enum ImGuiHoveredFlags_    \/\/ Flags: for IsItemHov/;"	t	typeref:typename:int
ImGuiHoveredFlagsPrivate_	includes/imgui_internal.h	/^enum ImGuiHoveredFlagsPrivate_$/;"	g
ImGuiHoveredFlags_	includes/imgui.h	/^enum ImGuiHoveredFlags_$/;"	g
ImGuiHoveredFlags_AllowWhenBlockedByActiveItem	includes/imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByActiveItem  = 1 << 7,   \/\/ Return true even if an acti/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenBlockedByPopup	includes/imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByPopup       = 1 << 5,   \/\/ Return true even if a popup/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenDisabled	includes/imgui.h	/^    ImGuiHoveredFlags_AllowWhenDisabled             = 1 << 10,  \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenOverlapped	includes/imgui.h	/^    ImGuiHoveredFlags_AllowWhenOverlapped           = ImGuiHoveredFlags_AllowWhenOverlappedByIte/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenOverlappedByItem	includes/imgui.h	/^    ImGuiHoveredFlags_AllowWhenOverlappedByItem     = 1 << 8,   \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenOverlappedByWindow	includes/imgui.h	/^    ImGuiHoveredFlags_AllowWhenOverlappedByWindow   = 1 << 9,   \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowedMaskForIsItemHovered	includes/imgui_internal.h	/^    ImGuiHoveredFlags_AllowedMaskForIsItemHovered   = ImGuiHoveredFlags_AllowWhenBlockedByPopup /;"	e	enum:ImGuiHoveredFlagsPrivate_
ImGuiHoveredFlags_AllowedMaskForIsWindowHovered	includes/imgui_internal.h	/^    ImGuiHoveredFlags_AllowedMaskForIsWindowHovered = ImGuiHoveredFlags_ChildWindows | ImGuiHove/;"	e	enum:ImGuiHoveredFlagsPrivate_
ImGuiHoveredFlags_AnyWindow	includes/imgui.h	/^    ImGuiHoveredFlags_AnyWindow                     = 1 << 2,   \/\/ IsWindowHovered() only: Ret/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_ChildWindows	includes/imgui.h	/^    ImGuiHoveredFlags_ChildWindows                  = 1 << 0,   \/\/ IsWindowHovered() only: Ret/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_DelayMask_	includes/imgui_internal.h	/^    ImGuiHoveredFlags_DelayMask_                    = ImGuiHoveredFlags_DelayNone | ImGuiHovered/;"	e	enum:ImGuiHoveredFlagsPrivate_
ImGuiHoveredFlags_DelayNone	includes/imgui.h	/^    ImGuiHoveredFlags_DelayNone                     = 1 << 14,  \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_DelayNormal	includes/imgui.h	/^    ImGuiHoveredFlags_DelayNormal                   = 1 << 16,  \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_DelayShort	includes/imgui.h	/^    ImGuiHoveredFlags_DelayShort                    = 1 << 15,  \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_ForTooltip	includes/imgui.h	/^    ImGuiHoveredFlags_ForTooltip                    = 1 << 12,  \/\/ Shortcut for standard flags/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_NoNavOverride	includes/imgui.h	/^    ImGuiHoveredFlags_NoNavOverride                 = 1 << 11,  \/\/ IsItemHovered() only: Disab/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_NoPopupHierarchy	includes/imgui.h	/^    ImGuiHoveredFlags_NoPopupHierarchy              = 1 << 3,   \/\/ IsWindowHovered() only: Do /;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_NoSharedDelay	includes/imgui.h	/^    ImGuiHoveredFlags_NoSharedDelay                 = 1 << 17,  \/\/ IsItemHovered() only: Disab/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_None	includes/imgui.h	/^    ImGuiHoveredFlags_None                          = 0,        \/\/ Return true if directly ove/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RectOnly	includes/imgui.h	/^    ImGuiHoveredFlags_RectOnly                      = ImGuiHoveredFlags_AllowWhenBlockedByPopup /;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootAndChildWindows	includes/imgui.h	/^    ImGuiHoveredFlags_RootAndChildWindows           = ImGuiHoveredFlags_RootWindow | ImGuiHovere/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootWindow	includes/imgui.h	/^    ImGuiHoveredFlags_RootWindow                    = 1 << 1,   \/\/ IsWindowHovered() only: Tes/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_Stationary	includes/imgui.h	/^    ImGuiHoveredFlags_Stationary                    = 1 << 13,  \/\/ Require mouse to be station/;"	e	enum:ImGuiHoveredFlags_
ImGuiID	includes/imgui.h	/^typedef unsigned int        ImGuiID;\/\/ A unique ID used by widgets (typically the result of ha/;"	t	typeref:typename:unsigned int
ImGuiIDStackTool	includes/imgui_internal.h	/^    ImGuiIDStackTool()      { memset(this, 0, sizeof(*this)); CopyToClipboardLastTime = -FLT_MAX/;"	f	struct:ImGuiIDStackTool
ImGuiIDStackTool	includes/imgui_internal.h	/^struct ImGuiIDStackTool$/;"	s
ImGuiIO	imgui.cpp	/^ImGuiIO::ImGuiIO()$/;"	f	class:ImGuiIO
ImGuiIO	includes/imgui.h	/^struct ImGuiIO$/;"	s
ImGuiInputEvent	includes/imgui_internal.h	/^    ImGuiInputEvent() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiInputEvent
ImGuiInputEvent	includes/imgui_internal.h	/^struct ImGuiInputEvent$/;"	s
ImGuiInputEventAppFocused	includes/imgui_internal.h	/^struct ImGuiInputEventAppFocused    { bool Focused; };$/;"	s
ImGuiInputEventKey	includes/imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	s
ImGuiInputEventMouseButton	includes/imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; ImGuiMouseSource MouseSource; };$/;"	s
ImGuiInputEventMousePos	includes/imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; ImGuiMouseSource MouseSource; };$/;"	s
ImGuiInputEventMouseWheel	includes/imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; ImGuiMouseSource MouseSource; };$/;"	s
ImGuiInputEventText	includes/imgui_internal.h	/^struct ImGuiInputEventText          { unsigned int Char; };$/;"	s
ImGuiInputEventType	includes/imgui_internal.h	/^enum ImGuiInputEventType$/;"	g
ImGuiInputEventType_COUNT	includes/imgui_internal.h	/^    ImGuiInputEventType_COUNT$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_Focus	includes/imgui_internal.h	/^    ImGuiInputEventType_Focus,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_Key	includes/imgui_internal.h	/^    ImGuiInputEventType_Key,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_MouseButton	includes/imgui_internal.h	/^    ImGuiInputEventType_MouseButton,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_MousePos	includes/imgui_internal.h	/^    ImGuiInputEventType_MousePos,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_MouseWheel	includes/imgui_internal.h	/^    ImGuiInputEventType_MouseWheel,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_None	includes/imgui_internal.h	/^    ImGuiInputEventType_None = 0,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_Text	includes/imgui_internal.h	/^    ImGuiInputEventType_Text,$/;"	e	enum:ImGuiInputEventType
ImGuiInputFlags	includes/imgui.h	/^typedef int ImGuiInputFlags;        \/\/ -> enum ImGuiInputFlags_      \/\/ Flags: for Shortcut(/;"	t	typeref:typename:int
ImGuiInputFlagsPrivate_	includes/imgui_internal.h	/^enum ImGuiInputFlagsPrivate_$/;"	g
ImGuiInputFlags_	includes/imgui.h	/^enum ImGuiInputFlags_$/;"	g
ImGuiInputFlags_CondActive	includes/imgui_internal.h	/^    ImGuiInputFlags_CondActive                  = 1 << 23,  \/\/ Only set if item is active (def/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_CondDefault_	includes/imgui_internal.h	/^    ImGuiInputFlags_CondDefault_                = ImGuiInputFlags_CondHovered | ImGuiInputFlags_/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_CondHovered	includes/imgui_internal.h	/^    ImGuiInputFlags_CondHovered                 = 1 << 22,  \/\/ Only set if item is hovered (de/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_CondMask_	includes/imgui_internal.h	/^    ImGuiInputFlags_CondMask_                   = ImGuiInputFlags_CondHovered | ImGuiInputFlags_/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_LockThisFrame	includes/imgui_internal.h	/^    ImGuiInputFlags_LockThisFrame               = 1 << 20,  \/\/ Further accesses to key data wi/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_LockUntilRelease	includes/imgui_internal.h	/^    ImGuiInputFlags_LockUntilRelease            = 1 << 21,  \/\/ Further accesses to key data wi/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_None	includes/imgui.h	/^    ImGuiInputFlags_None                    = 0,$/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_Repeat	includes/imgui.h	/^    ImGuiInputFlags_Repeat                  = 1 << 0,   \/\/ Enable repeat. Return true on succe/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatMask_	includes/imgui_internal.h	/^    ImGuiInputFlags_RepeatMask_                 = ImGuiInputFlags_Repeat | ImGuiInputFlags_Repea/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RepeatRateDefault	includes/imgui_internal.h	/^    ImGuiInputFlags_RepeatRateDefault           = 1 << 1,   \/\/ Repeat rate: Regular (default)$/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RepeatRateMask_	includes/imgui_internal.h	/^    ImGuiInputFlags_RepeatRateMask_             = ImGuiInputFlags_RepeatRateDefault | ImGuiInput/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RepeatRateNavMove	includes/imgui_internal.h	/^    ImGuiInputFlags_RepeatRateNavMove           = 1 << 2,   \/\/ Repeat rate: Fast$/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RepeatRateNavTweak	includes/imgui_internal.h	/^    ImGuiInputFlags_RepeatRateNavTweak          = 1 << 3,   \/\/ Repeat rate: Faster$/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RepeatUntilKeyModsChange	includes/imgui_internal.h	/^    ImGuiInputFlags_RepeatUntilKeyModsChange    = 1 << 5,   \/\/ Stop repeating when released OR/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RepeatUntilKeyModsChangeFromNone	includes/imgui_internal.h	/^    ImGuiInputFlags_RepeatUntilKeyModsChangeFromNone = 1 << 6,  \/\/ Stop repeating when release/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RepeatUntilMask_	includes/imgui_internal.h	/^    ImGuiInputFlags_RepeatUntilMask_            = ImGuiInputFlags_RepeatUntilRelease | ImGuiInpu/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RepeatUntilOtherKeyPress	includes/imgui_internal.h	/^    ImGuiInputFlags_RepeatUntilOtherKeyPress    = 1 << 7,   \/\/ Stop repeating when released OR/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RepeatUntilRelease	includes/imgui_internal.h	/^    ImGuiInputFlags_RepeatUntilRelease          = 1 << 4,   \/\/ Stop repeating when released (d/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RouteActive	includes/imgui.h	/^    ImGuiInputFlags_RouteActive             = 1 << 10,  \/\/ Route to active item only.$/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteAlways	includes/imgui.h	/^    ImGuiInputFlags_RouteAlways             = 1 << 13,  \/\/ Do not register route, poll keys di/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteFocused	includes/imgui.h	/^    ImGuiInputFlags_RouteFocused            = 1 << 11,  \/\/ Route to windows in the focus stack/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteFromRootWindow	includes/imgui.h	/^    ImGuiInputFlags_RouteFromRootWindow     = 1 << 17,  \/\/ Option: route evaluated from the po/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteGlobal	includes/imgui.h	/^    ImGuiInputFlags_RouteGlobal             = 1 << 12,  \/\/ Global route (unless a focused wind/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteOptionsMask_	includes/imgui_internal.h	/^    ImGuiInputFlags_RouteOptionsMask_           = ImGuiInputFlags_RouteOverFocused | ImGuiInputF/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RouteOverActive	includes/imgui.h	/^    ImGuiInputFlags_RouteOverActive         = 1 << 15,  \/\/ Option: global route: higher priori/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteOverFocused	includes/imgui.h	/^    ImGuiInputFlags_RouteOverFocused        = 1 << 14,  \/\/ Option: global route: higher priori/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteTypeMask_	includes/imgui_internal.h	/^    ImGuiInputFlags_RouteTypeMask_              = ImGuiInputFlags_RouteActive | ImGuiInputFlags_/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RouteUnlessBgFocused	includes/imgui.h	/^    ImGuiInputFlags_RouteUnlessBgFocused    = 1 << 16,  \/\/ Option: global route: will not be a/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_SupportedByIsKeyPressed	includes/imgui_internal.h	/^    ImGuiInputFlags_SupportedByIsKeyPressed     = ImGuiInputFlags_RepeatMask_,$/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_SupportedByIsMouseClicked	includes/imgui_internal.h	/^    ImGuiInputFlags_SupportedByIsMouseClicked   = ImGuiInputFlags_Repeat,$/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_SupportedBySetItemKeyOwner	includes/imgui_internal.h	/^    ImGuiInputFlags_SupportedBySetItemKeyOwner  = ImGuiInputFlags_SupportedBySetKeyOwner | ImGui/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_SupportedBySetKeyOwner	includes/imgui_internal.h	/^    ImGuiInputFlags_SupportedBySetKeyOwner      = ImGuiInputFlags_LockThisFrame | ImGuiInputFlag/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_SupportedBySetNextItemShortcut	includes/imgui_internal.h	/^    ImGuiInputFlags_SupportedBySetNextItemShortcut = ImGuiInputFlags_RepeatMask_ | ImGuiInputFla/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_SupportedByShortcut	includes/imgui_internal.h	/^    ImGuiInputFlags_SupportedByShortcut         = ImGuiInputFlags_RepeatMask_ | ImGuiInputFlags_/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_Tooltip	includes/imgui.h	/^    ImGuiInputFlags_Tooltip                 = 1 << 18,  \/\/ Automatically display a tooltip whe/;"	e	enum:ImGuiInputFlags_
ImGuiInputSource	includes/imgui_internal.h	/^enum ImGuiInputSource$/;"	g
ImGuiInputSource_COUNT	includes/imgui_internal.h	/^    ImGuiInputSource_COUNT$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Gamepad	includes/imgui_internal.h	/^    ImGuiInputSource_Gamepad,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Keyboard	includes/imgui_internal.h	/^    ImGuiInputSource_Keyboard,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Mouse	includes/imgui_internal.h	/^    ImGuiInputSource_Mouse,         \/\/ Note: may be Mouse or TouchScreen or Pen. See io.MouseS/;"	e	enum:ImGuiInputSource
ImGuiInputSource_None	includes/imgui_internal.h	/^    ImGuiInputSource_None = 0,$/;"	e	enum:ImGuiInputSource
ImGuiInputTextCallback	includes/imgui.h	/^typedef int     (*ImGuiInputTextCallback)(ImGuiInputTextCallbackData* data);    \/\/ Callback fu/;"	t	typeref:typename:int (*)(ImGuiInputTextCallbackData * data)
ImGuiInputTextCallbackData	imgui_widgets.cpp	/^ImGuiInputTextCallbackData::ImGuiInputTextCallbackData()$/;"	f	class:ImGuiInputTextCallbackData
ImGuiInputTextCallbackData	includes/imgui.h	/^struct ImGuiInputTextCallbackData$/;"	s
ImGuiInputTextDeactivatedState	includes/imgui_internal.h	/^    ImGuiInputTextDeactivatedState()    { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiInputTextDeactivatedState
ImGuiInputTextDeactivatedState	includes/imgui_internal.h	/^struct IMGUI_API ImGuiInputTextDeactivatedState$/;"	s
ImGuiInputTextFlags	includes/imgui.h	/^typedef int ImGuiInputTextFlags;    \/\/ -> enum ImGuiInputTextFlags_  \/\/ Flags: for InputText/;"	t	typeref:typename:int
ImGuiInputTextFlagsPrivate_	includes/imgui_internal.h	/^enum ImGuiInputTextFlagsPrivate_$/;"	g
ImGuiInputTextFlags_	includes/imgui.h	/^enum ImGuiInputTextFlags_$/;"	g
ImGuiInputTextFlags_AllowTabInput	includes/imgui.h	/^    ImGuiInputTextFlags_AllowTabInput       = 1 << 5,   \/\/ Pressing TAB input a '\\t' characte/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AlwaysOverwrite	includes/imgui.h	/^    ImGuiInputTextFlags_AlwaysOverwrite     = 1 << 11,  \/\/ Overwrite mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AutoSelectAll	includes/imgui.h	/^    ImGuiInputTextFlags_AutoSelectAll       = 1 << 12,  \/\/ Select entire text when first takin/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackAlways	includes/imgui.h	/^    ImGuiInputTextFlags_CallbackAlways      = 1 << 20,  \/\/ Callback on each iteration. User co/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCharFilter	includes/imgui.h	/^    ImGuiInputTextFlags_CallbackCharFilter  = 1 << 21,  \/\/ Callback on character inputs to rep/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCompletion	includes/imgui.h	/^    ImGuiInputTextFlags_CallbackCompletion  = 1 << 18,  \/\/ Callback on pressing TAB (for compl/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackEdit	includes/imgui.h	/^    ImGuiInputTextFlags_CallbackEdit        = 1 << 23,  \/\/ Callback on any edit. Note that Inp/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackHistory	includes/imgui.h	/^    ImGuiInputTextFlags_CallbackHistory     = 1 << 19,  \/\/ Callback on pressing Up\/Down arrow/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackResize	includes/imgui.h	/^    ImGuiInputTextFlags_CallbackResize      = 1 << 22,  \/\/ Callback on buffer capacity changes/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsDecimal	includes/imgui.h	/^    ImGuiInputTextFlags_CharsDecimal        = 1 << 0,   \/\/ Allow 0123456789.+-*\/$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsHexadecimal	includes/imgui.h	/^    ImGuiInputTextFlags_CharsHexadecimal    = 1 << 1,   \/\/ Allow 0123456789ABCDEFabcdef$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsNoBlank	includes/imgui.h	/^    ImGuiInputTextFlags_CharsNoBlank        = 1 << 4,   \/\/ Filter out spaces, tabs$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsScientific	includes/imgui.h	/^    ImGuiInputTextFlags_CharsScientific     = 1 << 2,   \/\/ Allow 0123456789.+-*\/eE (Scientifi/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsUppercase	includes/imgui.h	/^    ImGuiInputTextFlags_CharsUppercase      = 1 << 3,   \/\/ Turn a..z into A..Z$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CtrlEnterForNewLine	includes/imgui.h	/^    ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 8,   \/\/ In multi-line mode, validate with E/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_DisplayEmptyRefVal	includes/imgui.h	/^    ImGuiInputTextFlags_DisplayEmptyRefVal  = 1 << 14,  \/\/ InputFloat(), InputInt(), InputScal/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_ElideLeft	includes/imgui.h	/^    ImGuiInputTextFlags_ElideLeft			= 1 << 17,	\/\/ When text doesn't fit, elide left side to en/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_EnterReturnsTrue	includes/imgui.h	/^    ImGuiInputTextFlags_EnterReturnsTrue    = 1 << 6,   \/\/ Return 'true' when Enter is pressed/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_EscapeClearsAll	includes/imgui.h	/^    ImGuiInputTextFlags_EscapeClearsAll     = 1 << 7,   \/\/ Escape key clears content if not em/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_LocalizeDecimalPoint	includes/imgui_internal.h	/^    ImGuiInputTextFlags_LocalizeDecimalPoint= 1 << 28,  \/\/ For internal use by InputScalar() a/;"	e	enum:ImGuiInputTextFlagsPrivate_
ImGuiInputTextFlags_MergedItem	includes/imgui_internal.h	/^    ImGuiInputTextFlags_MergedItem          = 1 << 27,  \/\/ For internal use by TempInputText()/;"	e	enum:ImGuiInputTextFlagsPrivate_
ImGuiInputTextFlags_Multiline	includes/imgui_internal.h	/^    ImGuiInputTextFlags_Multiline           = 1 << 26,  \/\/ For internal use by InputTextMultil/;"	e	enum:ImGuiInputTextFlagsPrivate_
ImGuiInputTextFlags_NoHorizontalScroll	includes/imgui.h	/^    ImGuiInputTextFlags_NoHorizontalScroll  = 1 << 15,  \/\/ Disable following the cursor horizo/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_NoUndoRedo	includes/imgui.h	/^    ImGuiInputTextFlags_NoUndoRedo          = 1 << 16,  \/\/ Disable undo\/redo. Note that input/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_None	includes/imgui.h	/^    ImGuiInputTextFlags_None                = 0,$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_ParseEmptyRefVal	includes/imgui.h	/^    ImGuiInputTextFlags_ParseEmptyRefVal    = 1 << 13,  \/\/ InputFloat(), InputInt(), InputScal/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_Password	includes/imgui.h	/^    ImGuiInputTextFlags_Password            = 1 << 10,  \/\/ Password mode, display all characte/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_ReadOnly	includes/imgui.h	/^    ImGuiInputTextFlags_ReadOnly            = 1 << 9,   \/\/ Read-only mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextState	imgui_widgets.cpp	/^ImGuiInputTextState::ImGuiInputTextState()$/;"	f	class:ImGuiInputTextState
ImGuiInputTextState	includes/imgui_internal.h	/^struct IMGUI_API ImGuiInputTextState$/;"	s
ImGuiItemFlags	includes/imgui.h	/^typedef int ImGuiItemFlags;         \/\/ -> enum ImGuiItemFlags_       \/\/ Flags: for PushItemF/;"	t	typeref:typename:int
ImGuiItemFlagsPrivate_	includes/imgui_internal.h	/^enum ImGuiItemFlagsPrivate_$/;"	g
ImGuiItemFlags_	includes/imgui.h	/^enum ImGuiItemFlags_$/;"	g
ImGuiItemFlags_AllowDuplicateId	includes/imgui.h	/^    ImGuiItemFlags_AllowDuplicateId         = 1 << 5,   \/\/ false    \/\/ Allow submitting an i/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_AllowOverlap	includes/imgui_internal.h	/^    ImGuiItemFlags_AllowOverlap             = 1 << 14, \/\/ false     \/\/ Allow being overlappe/;"	e	enum:ImGuiItemFlagsPrivate_
ImGuiItemFlags_AutoClosePopups	includes/imgui.h	/^    ImGuiItemFlags_AutoClosePopups          = 1 << 4,   \/\/ true     \/\/ MenuItem()\/Selectabl/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_ButtonRepeat	includes/imgui.h	/^    ImGuiItemFlags_ButtonRepeat             = 1 << 3,   \/\/ false    \/\/ Any button-like behav/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_Default_	includes/imgui_internal.h	/^    ImGuiItemFlags_Default_                 = ImGuiItemFlags_AutoClosePopups,    \/\/ Please don/;"	e	enum:ImGuiItemFlagsPrivate_
ImGuiItemFlags_Disabled	includes/imgui_internal.h	/^    ImGuiItemFlags_Disabled                 = 1 << 10, \/\/ false     \/\/ Disable interactions /;"	e	enum:ImGuiItemFlagsPrivate_
ImGuiItemFlags_HasSelectionUserData	includes/imgui_internal.h	/^    ImGuiItemFlags_HasSelectionUserData     = 1 << 21, \/\/ false     \/\/ Set by SetNextItemSel/;"	e	enum:ImGuiItemFlagsPrivate_
ImGuiItemFlags_Inputable	includes/imgui_internal.h	/^    ImGuiItemFlags_Inputable                = 1 << 20, \/\/ false     \/\/ [WIP] Auto-activate i/;"	e	enum:ImGuiItemFlagsPrivate_
ImGuiItemFlags_IsMultiSelect	includes/imgui_internal.h	/^    ImGuiItemFlags_IsMultiSelect            = 1 << 22, \/\/ false     \/\/ Set by SetNextItemSel/;"	e	enum:ImGuiItemFlagsPrivate_
ImGuiItemFlags_MixedValue	includes/imgui_internal.h	/^    ImGuiItemFlags_MixedValue               = 1 << 12, \/\/ false     \/\/ [BETA] Represent a mi/;"	e	enum:ImGuiItemFlagsPrivate_
ImGuiItemFlags_NoMarkEdited	includes/imgui_internal.h	/^    ImGuiItemFlags_NoMarkEdited             = 1 << 16, \/\/ false     \/\/ Skip calling MarkItem/;"	e	enum:ImGuiItemFlagsPrivate_
ImGuiItemFlags_NoNav	includes/imgui.h	/^    ImGuiItemFlags_NoNav                    = 1 << 1,   \/\/ false    \/\/ Disable any form of f/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoNavDefaultFocus	includes/imgui.h	/^    ImGuiItemFlags_NoNavDefaultFocus        = 1 << 2,   \/\/ false    \/\/ Disable item being a /;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoNavDisableMouseHover	includes/imgui_internal.h	/^    ImGuiItemFlags_NoNavDisableMouseHover   = 1 << 15, \/\/ false     \/\/ Nav keyboard\/gamepad/;"	e	enum:ImGuiItemFlagsPrivate_
ImGuiItemFlags_NoTabStop	includes/imgui.h	/^    ImGuiItemFlags_NoTabStop                = 1 << 0,   \/\/ false    \/\/ Disable keyboard tabb/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoWindowHoverableCheck	includes/imgui_internal.h	/^    ImGuiItemFlags_NoWindowHoverableCheck   = 1 << 13, \/\/ false     \/\/ Disable hoverable che/;"	e	enum:ImGuiItemFlagsPrivate_
ImGuiItemFlags_None	includes/imgui.h	/^    ImGuiItemFlags_None                     = 0,        \/\/ (Default)$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_ReadOnly	includes/imgui_internal.h	/^    ImGuiItemFlags_ReadOnly                 = 1 << 11, \/\/ false     \/\/ [ALPHA] Allow hoverin/;"	e	enum:ImGuiItemFlagsPrivate_
ImGuiItemStatusFlags	includes/imgui_internal.h	/^typedef int ImGuiItemStatusFlags;       \/\/ -> enum ImGuiItemStatusFlags_    \/\/ Flags: for g./;"	t	typeref:typename:int
ImGuiItemStatusFlags_	includes/imgui_internal.h	/^enum ImGuiItemStatusFlags_$/;"	g
ImGuiItemStatusFlags_Checkable	includes/imgui_internal.h	/^    ImGuiItemStatusFlags_Checkable          = 1 << 22,  \/\/ Item is a checkable (e.g. CheckBox,/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Checked	includes/imgui_internal.h	/^    ImGuiItemStatusFlags_Checked            = 1 << 23,  \/\/ Checked status$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Deactivated	includes/imgui_internal.h	/^    ImGuiItemStatusFlags_Deactivated        = 1 << 6,   \/\/ Only valid if ImGuiItemStatusFlags_/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Edited	includes/imgui_internal.h	/^    ImGuiItemStatusFlags_Edited             = 1 << 2,   \/\/ Value exposed by item was edited in/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasClipRect	includes/imgui_internal.h	/^    ImGuiItemStatusFlags_HasClipRect        = 1 << 9,   \/\/ g.LastItemData.ClipRect is valid.$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasDeactivated	includes/imgui_internal.h	/^    ImGuiItemStatusFlags_HasDeactivated     = 1 << 5,   \/\/ Set if the widget\/group is able to/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasDisplayRect	includes/imgui_internal.h	/^    ImGuiItemStatusFlags_HasDisplayRect     = 1 << 1,   \/\/ g.LastItemData.DisplayRect is valid$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasShortcut	includes/imgui_internal.h	/^    ImGuiItemStatusFlags_HasShortcut        = 1 << 10,  \/\/ g.LastItemData.Shortcut valid. Set /;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HoveredRect	includes/imgui_internal.h	/^    ImGuiItemStatusFlags_HoveredRect        = 1 << 0,   \/\/ Mouse position is within item recta/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HoveredWindow	includes/imgui_internal.h	/^    ImGuiItemStatusFlags_HoveredWindow      = 1 << 7,   \/\/ Override the HoveredWindow test to /;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Inputable	includes/imgui_internal.h	/^    ImGuiItemStatusFlags_Inputable          = 1 << 24,  \/\/ Item is a text-inputable (e.g. Inpu/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_None	includes/imgui_internal.h	/^    ImGuiItemStatusFlags_None               = 0,$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Openable	includes/imgui_internal.h	/^    ImGuiItemStatusFlags_Openable           = 1 << 20,  \/\/ Item is an openable (e.g. TreeNode)$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Opened	includes/imgui_internal.h	/^    ImGuiItemStatusFlags_Opened             = 1 << 21,  \/\/ Opened status$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_ToggledOpen	includes/imgui_internal.h	/^    ImGuiItemStatusFlags_ToggledOpen        = 1 << 4,   \/\/ Set when TreeNode() reports togglin/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_ToggledSelection	includes/imgui_internal.h	/^    ImGuiItemStatusFlags_ToggledSelection   = 1 << 3,   \/\/ Set when Selectable(), TreeNode() r/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Visible	includes/imgui_internal.h	/^    ImGuiItemStatusFlags_Visible            = 1 << 8,   \/\/ [WIP] Set when item is overlapping /;"	e	enum:ImGuiItemStatusFlags_
ImGuiKey	includes/imgui.h	/^enum ImGuiKey : int$/;"	g	typeref:typename:int
ImGuiKeyChord	includes/imgui.h	/^typedef int ImGuiKeyChord;          \/\/ -> ImGuiKey | ImGuiMod_XXX    \/\/ Flags: for IsKeyChor/;"	t	typeref:typename:int
ImGuiKeyData	includes/imgui.h	/^struct ImGuiKeyData$/;"	s
ImGuiKeyOwnerData	includes/imgui_internal.h	/^    ImGuiKeyOwnerData()             { OwnerCurr = OwnerNext = ImGuiKeyOwner_NoOwner; LockThisFra/;"	f	struct:ImGuiKeyOwnerData
ImGuiKeyOwnerData	includes/imgui_internal.h	/^struct ImGuiKeyOwnerData$/;"	s
ImGuiKeyOwner_Any	includes/imgui_internal.h	/^#define ImGuiKeyOwner_Any /;"	d
ImGuiKeyOwner_NoOwner	includes/imgui_internal.h	/^#define ImGuiKeyOwner_NoOwner /;"	d
ImGuiKeyRoutingData	includes/imgui_internal.h	/^    ImGuiKeyRoutingData()           { NextEntryIndex = -1; Mods = 0; RoutingCurrScore = RoutingN/;"	f	struct:ImGuiKeyRoutingData
ImGuiKeyRoutingData	includes/imgui_internal.h	/^struct ImGuiKeyRoutingData$/;"	s
ImGuiKeyRoutingIndex	includes/imgui_internal.h	/^typedef ImS16 ImGuiKeyRoutingIndex;$/;"	t	typeref:typename:ImS16
ImGuiKeyRoutingTable	includes/imgui_internal.h	/^    ImGuiKeyRoutingTable()          { Clear(); }$/;"	f	struct:ImGuiKeyRoutingTable
ImGuiKeyRoutingTable	includes/imgui_internal.h	/^struct ImGuiKeyRoutingTable$/;"	s
ImGuiKey_0	includes/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_1	includes/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_2	includes/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_3	includes/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_4	includes/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_5	includes/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_6	includes/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_7	includes/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_8	includes/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_9	includes/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_A	includes/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Aliases_BEGIN	includes/imgui_internal.h	/^#define ImGuiKey_Aliases_BEGIN /;"	d
ImGuiKey_Aliases_END	includes/imgui_internal.h	/^#define ImGuiKey_Aliases_END /;"	d
ImGuiKey_Apostrophe	includes/imgui.h	/^    ImGuiKey_Apostrophe,        \/\/ '$/;"	e	enum:ImGuiKey
ImGuiKey_AppBack	includes/imgui.h	/^    ImGuiKey_AppBack,               \/\/ Available on some keyboard\/mouses. Often referred as "/;"	e	enum:ImGuiKey
ImGuiKey_AppForward	includes/imgui.h	/^    ImGuiKey_AppForward,$/;"	e	enum:ImGuiKey
ImGuiKey_B	includes/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Backslash	includes/imgui.h	/^    ImGuiKey_Backslash,         \/\/ \\ (this text inhibit multiline comment caused by backslash/;"	e	enum:ImGuiKey
ImGuiKey_Backspace	includes/imgui.h	/^    ImGuiKey_Backspace,$/;"	e	enum:ImGuiKey
ImGuiKey_C	includes/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_COUNT	includes/imgui.h	/^    ImGuiKey_COUNT                  = ImGuiKey_NamedKey_END,    \/\/ Obsoleted in 1.91.5 because/;"	e	enum:ImGuiKey
ImGuiKey_CapsLock	includes/imgui.h	/^    ImGuiKey_CapsLock,$/;"	e	enum:ImGuiKey
ImGuiKey_Comma	includes/imgui.h	/^    ImGuiKey_Comma,             \/\/ ,$/;"	e	enum:ImGuiKey
ImGuiKey_D	includes/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Delete	includes/imgui.h	/^    ImGuiKey_Delete,$/;"	e	enum:ImGuiKey
ImGuiKey_DownArrow	includes/imgui.h	/^    ImGuiKey_DownArrow,$/;"	e	enum:ImGuiKey
ImGuiKey_E	includes/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_End	includes/imgui.h	/^    ImGuiKey_End,$/;"	e	enum:ImGuiKey
ImGuiKey_Enter	includes/imgui.h	/^    ImGuiKey_Enter,$/;"	e	enum:ImGuiKey
ImGuiKey_Equal	includes/imgui.h	/^    ImGuiKey_Equal,             \/\/ =$/;"	e	enum:ImGuiKey
ImGuiKey_Escape	includes/imgui.h	/^    ImGuiKey_Escape,$/;"	e	enum:ImGuiKey
ImGuiKey_F	includes/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_F1	includes/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F10	includes/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F11	includes/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F12	includes/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F13	includes/imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F14	includes/imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F15	includes/imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F16	includes/imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F17	includes/imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F18	includes/imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F19	includes/imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F2	includes/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F20	includes/imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F21	includes/imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F22	includes/imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F23	includes/imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F24	includes/imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F3	includes/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F4	includes/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F5	includes/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F6	includes/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F7	includes/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F8	includes/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F9	includes/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_G	includes/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_GamepadBack	includes/imgui.h	/^    ImGuiKey_GamepadBack,           \/\/ View (Xbox)      - (Switch)   Share (PS)$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadDpadDown	includes/imgui.h	/^    ImGuiKey_GamepadDpadDown,       \/\/ D-pad Down                                       \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadDpadLeft	includes/imgui.h	/^    ImGuiKey_GamepadDpadLeft,       \/\/ D-pad Left                                       \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadDpadRight	includes/imgui.h	/^    ImGuiKey_GamepadDpadRight,      \/\/ D-pad Right                                      \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadDpadUp	includes/imgui.h	/^    ImGuiKey_GamepadDpadUp,         \/\/ D-pad Up                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadFaceDown	includes/imgui.h	/^    ImGuiKey_GamepadFaceDown,       \/\/ A (Xbox)         B (Switch)   Cross (PS)         \/\/ A/;"	e	enum:ImGuiKey
ImGuiKey_GamepadFaceLeft	includes/imgui.h	/^    ImGuiKey_GamepadFaceLeft,       \/\/ X (Xbox)         Y (Switch)   Square (PS)        \/\/ T/;"	e	enum:ImGuiKey
ImGuiKey_GamepadFaceRight	includes/imgui.h	/^    ImGuiKey_GamepadFaceRight,      \/\/ B (Xbox)         A (Switch)   Circle (PS)        \/\/ C/;"	e	enum:ImGuiKey
ImGuiKey_GamepadFaceUp	includes/imgui.h	/^    ImGuiKey_GamepadFaceUp,         \/\/ Y (Xbox)         X (Switch)   Triangle (PS)      \/\/ T/;"	e	enum:ImGuiKey
ImGuiKey_GamepadL1	includes/imgui.h	/^    ImGuiKey_GamepadL1,             \/\/ L Bumper (Xbox)  L (Switch)   L1 (PS)            \/\/ T/;"	e	enum:ImGuiKey
ImGuiKey_GamepadL2	includes/imgui.h	/^    ImGuiKey_GamepadL2,             \/\/ L Trig. (Xbox)   ZL (Switch)  L2 (PS) [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadL3	includes/imgui.h	/^    ImGuiKey_GamepadL3,             \/\/ L Stick (Xbox)   L3 (Switch)  L3 (PS)$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadLStickDown	includes/imgui.h	/^    ImGuiKey_GamepadLStickDown,     \/\/ [Analog]                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadLStickLeft	includes/imgui.h	/^    ImGuiKey_GamepadLStickLeft,     \/\/ [Analog]                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadLStickRight	includes/imgui.h	/^    ImGuiKey_GamepadLStickRight,    \/\/ [Analog]                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadLStickUp	includes/imgui.h	/^    ImGuiKey_GamepadLStickUp,       \/\/ [Analog]                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadR1	includes/imgui.h	/^    ImGuiKey_GamepadR1,             \/\/ R Bumper (Xbox)  R (Switch)   R1 (PS)            \/\/ T/;"	e	enum:ImGuiKey
ImGuiKey_GamepadR2	includes/imgui.h	/^    ImGuiKey_GamepadR2,             \/\/ R Trig. (Xbox)   ZR (Switch)  R2 (PS) [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadR3	includes/imgui.h	/^    ImGuiKey_GamepadR3,             \/\/ R Stick (Xbox)   R3 (Switch)  R3 (PS)$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadRStickDown	includes/imgui.h	/^    ImGuiKey_GamepadRStickDown,     \/\/ [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadRStickLeft	includes/imgui.h	/^    ImGuiKey_GamepadRStickLeft,     \/\/ [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadRStickRight	includes/imgui.h	/^    ImGuiKey_GamepadRStickRight,    \/\/ [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadRStickUp	includes/imgui.h	/^    ImGuiKey_GamepadRStickUp,       \/\/ [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadStart	includes/imgui.h	/^    ImGuiKey_GamepadStart,          \/\/ Menu (Xbox)      + (Switch)   Start\/Options (PS)$/;"	e	enum:ImGuiKey
ImGuiKey_Gamepad_BEGIN	includes/imgui_internal.h	/^#define ImGuiKey_Gamepad_BEGIN /;"	d
ImGuiKey_Gamepad_END	includes/imgui_internal.h	/^#define ImGuiKey_Gamepad_END /;"	d
ImGuiKey_GraveAccent	includes/imgui.h	/^    ImGuiKey_GraveAccent,       \/\/ `$/;"	e	enum:ImGuiKey
ImGuiKey_H	includes/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Home	includes/imgui.h	/^    ImGuiKey_Home,$/;"	e	enum:ImGuiKey
ImGuiKey_I	includes/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Insert	includes/imgui.h	/^    ImGuiKey_Insert,$/;"	e	enum:ImGuiKey
ImGuiKey_J	includes/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_K	includes/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Keyboard_BEGIN	includes/imgui_internal.h	/^#define ImGuiKey_Keyboard_BEGIN /;"	d
ImGuiKey_Keyboard_END	includes/imgui_internal.h	/^#define ImGuiKey_Keyboard_END /;"	d
ImGuiKey_Keypad0	includes/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad1	includes/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad2	includes/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad3	includes/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad4	includes/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad5	includes/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad6	includes/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad7	includes/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad8	includes/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad9	includes/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadAdd	includes/imgui.h	/^    ImGuiKey_KeypadAdd,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadDecimal	includes/imgui.h	/^    ImGuiKey_KeypadDecimal,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadDivide	includes/imgui.h	/^    ImGuiKey_KeypadDivide,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadEnter	includes/imgui.h	/^    ImGuiKey_KeypadEnter,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadEqual	includes/imgui.h	/^    ImGuiKey_KeypadEqual,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadMultiply	includes/imgui.h	/^    ImGuiKey_KeypadMultiply,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadSubtract	includes/imgui.h	/^    ImGuiKey_KeypadSubtract,$/;"	e	enum:ImGuiKey
ImGuiKey_L	includes/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_LeftAlt	includes/imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_LeftArrow	includes/imgui.h	/^    ImGuiKey_LeftArrow,$/;"	e	enum:ImGuiKey
ImGuiKey_LeftBracket	includes/imgui.h	/^    ImGuiKey_LeftBracket,       \/\/ [$/;"	e	enum:ImGuiKey
ImGuiKey_LeftCtrl	includes/imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_LeftShift	includes/imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_LeftSuper	includes/imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_LegacyNativeKey_BEGIN	includes/imgui_internal.h	/^#define ImGuiKey_LegacyNativeKey_BEGIN /;"	d
ImGuiKey_LegacyNativeKey_END	includes/imgui_internal.h	/^#define ImGuiKey_LegacyNativeKey_END /;"	d
ImGuiKey_M	includes/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Menu	includes/imgui.h	/^    ImGuiKey_Menu,$/;"	e	enum:ImGuiKey
ImGuiKey_Minus	includes/imgui.h	/^    ImGuiKey_Minus,             \/\/ -$/;"	e	enum:ImGuiKey
ImGuiKey_ModAlt	includes/imgui.h	/^    ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGu/;"	e	enum:ImGuiKey
ImGuiKey_ModCtrl	includes/imgui.h	/^    ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGu/;"	e	enum:ImGuiKey
ImGuiKey_ModShift	includes/imgui.h	/^    ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGu/;"	e	enum:ImGuiKey
ImGuiKey_ModSuper	includes/imgui.h	/^    ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGu/;"	e	enum:ImGuiKey
ImGuiKey_MouseLeft	includes/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseMiddle	includes/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseRight	includes/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseWheelX	includes/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseWheelY	includes/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseX1	includes/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseX2	includes/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_Mouse_BEGIN	includes/imgui_internal.h	/^#define ImGuiKey_Mouse_BEGIN /;"	d
ImGuiKey_Mouse_END	includes/imgui_internal.h	/^#define ImGuiKey_Mouse_END /;"	d
ImGuiKey_N	includes/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_NamedKey_BEGIN	includes/imgui.h	/^    ImGuiKey_NamedKey_BEGIN = 512,  \/\/ First valid key value (other than 0)$/;"	e	enum:ImGuiKey
ImGuiKey_NamedKey_COUNT	includes/imgui.h	/^    ImGuiKey_NamedKey_COUNT         = ImGuiKey_NamedKey_END - ImGuiKey_NamedKey_BEGIN,$/;"	e	enum:ImGuiKey
ImGuiKey_NamedKey_END	includes/imgui.h	/^    ImGuiKey_NamedKey_END,$/;"	e	enum:ImGuiKey
ImGuiKey_NavGamepadActivate	includes/imgui_internal.h	/^#define ImGuiKey_NavGamepadActivate /;"	d
ImGuiKey_NavGamepadCancel	includes/imgui_internal.h	/^#define ImGuiKey_NavGamepadCancel /;"	d
ImGuiKey_NavGamepadInput	includes/imgui_internal.h	/^#define ImGuiKey_NavGamepadInput /;"	d
ImGuiKey_NavGamepadMenu	includes/imgui_internal.h	/^#define ImGuiKey_NavGamepadMenu /;"	d
ImGuiKey_NavGamepadTweakFast	includes/imgui_internal.h	/^#define ImGuiKey_NavGamepadTweakFast /;"	d
ImGuiKey_NavGamepadTweakSlow	includes/imgui_internal.h	/^#define ImGuiKey_NavGamepadTweakSlow /;"	d
ImGuiKey_NavKeyboardTweakFast	includes/imgui_internal.h	/^#define ImGuiKey_NavKeyboardTweakFast /;"	d
ImGuiKey_NavKeyboardTweakSlow	includes/imgui_internal.h	/^#define ImGuiKey_NavKeyboardTweakSlow /;"	d
ImGuiKey_None	includes/imgui.h	/^    ImGuiKey_None = 0,$/;"	e	enum:ImGuiKey
ImGuiKey_NumLock	includes/imgui.h	/^    ImGuiKey_NumLock,$/;"	e	enum:ImGuiKey
ImGuiKey_O	includes/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_P	includes/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_PageDown	includes/imgui.h	/^    ImGuiKey_PageDown,$/;"	e	enum:ImGuiKey
ImGuiKey_PageUp	includes/imgui.h	/^    ImGuiKey_PageUp,$/;"	e	enum:ImGuiKey
ImGuiKey_Pause	includes/imgui.h	/^    ImGuiKey_Pause,$/;"	e	enum:ImGuiKey
ImGuiKey_Period	includes/imgui.h	/^    ImGuiKey_Period,            \/\/ .$/;"	e	enum:ImGuiKey
ImGuiKey_PrintScreen	includes/imgui.h	/^    ImGuiKey_PrintScreen,$/;"	e	enum:ImGuiKey
ImGuiKey_Q	includes/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_R	includes/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_ReservedForModAlt	includes/imgui.h	/^    ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGui/;"	e	enum:ImGuiKey
ImGuiKey_ReservedForModCtrl	includes/imgui.h	/^    ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGui/;"	e	enum:ImGuiKey
ImGuiKey_ReservedForModShift	includes/imgui.h	/^    ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGui/;"	e	enum:ImGuiKey
ImGuiKey_ReservedForModSuper	includes/imgui.h	/^    ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGui/;"	e	enum:ImGuiKey
ImGuiKey_RightAlt	includes/imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_RightArrow	includes/imgui.h	/^    ImGuiKey_RightArrow,$/;"	e	enum:ImGuiKey
ImGuiKey_RightBracket	includes/imgui.h	/^    ImGuiKey_RightBracket,      \/\/ ]$/;"	e	enum:ImGuiKey
ImGuiKey_RightCtrl	includes/imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_RightShift	includes/imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_RightSuper	includes/imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_S	includes/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_ScrollLock	includes/imgui.h	/^    ImGuiKey_ScrollLock,$/;"	e	enum:ImGuiKey
ImGuiKey_Semicolon	includes/imgui.h	/^    ImGuiKey_Semicolon,         \/\/ ;$/;"	e	enum:ImGuiKey
ImGuiKey_Slash	includes/imgui.h	/^    ImGuiKey_Slash,             \/\/ \/$/;"	e	enum:ImGuiKey
ImGuiKey_Space	includes/imgui.h	/^    ImGuiKey_Space,$/;"	e	enum:ImGuiKey
ImGuiKey_T	includes/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Tab	includes/imgui.h	/^    ImGuiKey_Tab = 512,             \/\/ == ImGuiKey_NamedKey_BEGIN$/;"	e	enum:ImGuiKey
ImGuiKey_U	includes/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_UpArrow	includes/imgui.h	/^    ImGuiKey_UpArrow,$/;"	e	enum:ImGuiKey
ImGuiKey_V	includes/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_W	includes/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_X	includes/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_Y	includes/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_Z	includes/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiLastItemData	includes/imgui_internal.h	/^    ImGuiLastItemData()     { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiLastItemData
ImGuiLastItemData	includes/imgui_internal.h	/^struct ImGuiLastItemData$/;"	s
ImGuiLayoutType	includes/imgui_internal.h	/^typedef int ImGuiLayoutType;            \/\/ -> enum ImGuiLayoutType_         \/\/ Enum: Horizon/;"	t	typeref:typename:int
ImGuiLayoutType_	includes/imgui_internal.h	/^enum ImGuiLayoutType_$/;"	g
ImGuiLayoutType_Horizontal	includes/imgui_internal.h	/^    ImGuiLayoutType_Horizontal = 0,$/;"	e	enum:ImGuiLayoutType_
ImGuiLayoutType_Vertical	includes/imgui_internal.h	/^    ImGuiLayoutType_Vertical = 1$/;"	e	enum:ImGuiLayoutType_
ImGuiListClipper	imgui.cpp	/^ImGuiListClipper::ImGuiListClipper()$/;"	f	class:ImGuiListClipper
ImGuiListClipper	includes/imgui.h	/^struct ImGuiListClipper$/;"	s
ImGuiListClipperData	includes/imgui_internal.h	/^    ImGuiListClipperData()          { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiListClipperData
ImGuiListClipperData	includes/imgui_internal.h	/^struct ImGuiListClipperData$/;"	s
ImGuiListClipperRange	includes/imgui_internal.h	/^struct ImGuiListClipperRange$/;"	s
ImGuiListClipper_SeekCursorAndSetupPrevLine	imgui.cpp	/^static void ImGuiListClipper_SeekCursorAndSetupPrevLine(float pos_y, float line_height)$/;"	f	typeref:typename:void	file:
ImGuiListClipper_SortAndFuseRanges	imgui.cpp	/^static void ImGuiListClipper_SortAndFuseRanges(ImVector<ImGuiListClipperRange>& ranges, int offs/;"	f	typeref:typename:void	file:
ImGuiListClipper_StepInternal	imgui.cpp	/^static bool ImGuiListClipper_StepInternal(ImGuiListClipper* clipper)$/;"	f	typeref:typename:bool	file:
ImGuiLocEntry	includes/imgui_internal.h	/^struct ImGuiLocEntry$/;"	s
ImGuiLocKey	includes/imgui_internal.h	/^enum ImGuiLocKey : int$/;"	g	typeref:typename:int
ImGuiLocKey_COUNT	includes/imgui_internal.h	/^    ImGuiLocKey_COUNT$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_CopyLink	includes/imgui_internal.h	/^    ImGuiLocKey_CopyLink,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_OpenLink_s	includes/imgui_internal.h	/^    ImGuiLocKey_OpenLink_s,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_TableResetOrder	includes/imgui_internal.h	/^    ImGuiLocKey_TableResetOrder,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_TableSizeAllDefault	includes/imgui_internal.h	/^    ImGuiLocKey_TableSizeAllDefault,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_TableSizeAllFit	includes/imgui_internal.h	/^    ImGuiLocKey_TableSizeAllFit,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_TableSizeOne	includes/imgui_internal.h	/^    ImGuiLocKey_TableSizeOne,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_VersionStr	includes/imgui_internal.h	/^    ImGuiLocKey_VersionStr,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_WindowingMainMenuBar	includes/imgui_internal.h	/^    ImGuiLocKey_WindowingMainMenuBar,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_WindowingPopup	includes/imgui_internal.h	/^    ImGuiLocKey_WindowingPopup,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_WindowingUntitled	includes/imgui_internal.h	/^    ImGuiLocKey_WindowingUntitled,$/;"	e	enum:ImGuiLocKey
ImGuiLogFlags	includes/imgui_internal.h	/^typedef int ImGuiLogFlags;              \/\/ -> enum ImGuiLogFlags_           \/\/ Flags: for Lo/;"	t	typeref:typename:int
ImGuiLogFlags_	includes/imgui_internal.h	/^enum ImGuiLogFlags_$/;"	g
ImGuiLogFlags_None	includes/imgui_internal.h	/^    ImGuiLogFlags_None = 0,$/;"	e	enum:ImGuiLogFlags_
ImGuiLogFlags_OutputBuffer	includes/imgui_internal.h	/^    ImGuiLogFlags_OutputBuffer      = 1 << 2,$/;"	e	enum:ImGuiLogFlags_
ImGuiLogFlags_OutputClipboard	includes/imgui_internal.h	/^    ImGuiLogFlags_OutputClipboard   = 1 << 3,$/;"	e	enum:ImGuiLogFlags_
ImGuiLogFlags_OutputFile	includes/imgui_internal.h	/^    ImGuiLogFlags_OutputFile        = 1 << 1,$/;"	e	enum:ImGuiLogFlags_
ImGuiLogFlags_OutputMask_	includes/imgui_internal.h	/^    ImGuiLogFlags_OutputMask_       = ImGuiLogFlags_OutputTTY | ImGuiLogFlags_OutputFile | ImGui/;"	e	enum:ImGuiLogFlags_
ImGuiLogFlags_OutputTTY	includes/imgui_internal.h	/^    ImGuiLogFlags_OutputTTY         = 1 << 0,$/;"	e	enum:ImGuiLogFlags_
ImGuiMemAllocFunc	includes/imgui.h	/^typedef void*   (*ImGuiMemAllocFunc)(size_t sz, void* user_data);               \/\/ Function si/;"	t	typeref:typename:void * (*)(size_t sz,void * user_data)
ImGuiMemFreeFunc	includes/imgui.h	/^typedef void    (*ImGuiMemFreeFunc)(void* ptr, void* user_data);                \/\/ Function si/;"	t	typeref:typename:void (*)(void * ptr,void * user_data)
ImGuiMenuColumns	includes/imgui_internal.h	/^    ImGuiMenuColumns() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiMenuColumns
ImGuiMenuColumns	includes/imgui_internal.h	/^struct IMGUI_API ImGuiMenuColumns$/;"	s
ImGuiMetricsConfig	includes/imgui_internal.h	/^struct ImGuiMetricsConfig$/;"	s
ImGuiMod_Alt	includes/imgui.h	/^    ImGuiMod_Alt                    = 1 << 14, \/\/ Option\/Menu$/;"	e	enum:ImGuiKey
ImGuiMod_Ctrl	includes/imgui.h	/^    ImGuiMod_Ctrl                   = 1 << 12, \/\/ Ctrl (non-macOS), Cmd (macOS)$/;"	e	enum:ImGuiKey
ImGuiMod_Mask_	includes/imgui.h	/^    ImGuiMod_Mask_                  = 0xF000,  \/\/ 4-bits$/;"	e	enum:ImGuiKey
ImGuiMod_None	includes/imgui.h	/^    ImGuiMod_None                   = 0,$/;"	e	enum:ImGuiKey
ImGuiMod_Shift	includes/imgui.h	/^    ImGuiMod_Shift                  = 1 << 13, \/\/ Shift$/;"	e	enum:ImGuiKey
ImGuiMod_Shortcut	includes/imgui.h	/^    ImGuiMod_Shortcut               = ImGuiMod_Ctrl,            \/\/ Removed in 1.90.7, you can /;"	e	enum:ImGuiKey
ImGuiMod_Super	includes/imgui.h	/^    ImGuiMod_Super                  = 1 << 15, \/\/ Windows\/Super (non-macOS), Ctrl (macOS)$/;"	e	enum:ImGuiKey
ImGuiMouseButton	includes/imgui.h	/^typedef int ImGuiMouseButton;       \/\/ -> enum ImGuiMouseButton_     \/\/ Enum: A mouse button/;"	t	typeref:typename:int
ImGuiMouseButton_	includes/imgui.h	/^enum ImGuiMouseButton_$/;"	g
ImGuiMouseButton_COUNT	includes/imgui.h	/^    ImGuiMouseButton_COUNT = 5$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Left	includes/imgui.h	/^    ImGuiMouseButton_Left = 0,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Middle	includes/imgui.h	/^    ImGuiMouseButton_Middle = 2,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Right	includes/imgui.h	/^    ImGuiMouseButton_Right = 1,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseCursor	includes/imgui.h	/^typedef int ImGuiMouseCursor;       \/\/ -> enum ImGuiMouseCursor_     \/\/ Enum: A mouse cursor/;"	t	typeref:typename:int
ImGuiMouseCursor_	includes/imgui.h	/^enum ImGuiMouseCursor_$/;"	g
ImGuiMouseCursor_Arrow	includes/imgui.h	/^    ImGuiMouseCursor_Arrow = 0,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_COUNT	includes/imgui.h	/^    ImGuiMouseCursor_COUNT$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_Hand	includes/imgui.h	/^    ImGuiMouseCursor_Hand,              \/\/ (Unused by Dear ImGui functions. Use for e.g. hyper/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_None	includes/imgui.h	/^    ImGuiMouseCursor_None = -1,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_NotAllowed	includes/imgui.h	/^    ImGuiMouseCursor_NotAllowed,        \/\/ When hovering something with disallowed interaction/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeAll	includes/imgui.h	/^    ImGuiMouseCursor_ResizeAll,         \/\/ (Unused by Dear ImGui functions)$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeEW	includes/imgui.h	/^    ImGuiMouseCursor_ResizeEW,          \/\/ When hovering over a vertical border or a column$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNESW	includes/imgui.h	/^    ImGuiMouseCursor_ResizeNESW,        \/\/ When hovering over the bottom-left corner of a wind/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNS	includes/imgui.h	/^    ImGuiMouseCursor_ResizeNS,          \/\/ When hovering over a horizontal border$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNWSE	includes/imgui.h	/^    ImGuiMouseCursor_ResizeNWSE,        \/\/ When hovering over the bottom-right corner of a win/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_TextInput	includes/imgui.h	/^    ImGuiMouseCursor_TextInput,         \/\/ When hovering over InputText, etc.$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseSource	includes/imgui.h	/^enum ImGuiMouseSource : int$/;"	g	typeref:typename:int
ImGuiMouseSource_COUNT	includes/imgui.h	/^    ImGuiMouseSource_COUNT$/;"	e	enum:ImGuiMouseSource
ImGuiMouseSource_Mouse	includes/imgui.h	/^    ImGuiMouseSource_Mouse = 0,         \/\/ Input is coming from an actual mouse.$/;"	e	enum:ImGuiMouseSource
ImGuiMouseSource_Pen	includes/imgui.h	/^    ImGuiMouseSource_Pen,               \/\/ Input is coming from a pressure\/magnetic pen (ofte/;"	e	enum:ImGuiMouseSource
ImGuiMouseSource_TouchScreen	includes/imgui.h	/^    ImGuiMouseSource_TouchScreen,       \/\/ Input is coming from a touch screen (no hovering pr/;"	e	enum:ImGuiMouseSource
ImGuiMultiSelectFlags	includes/imgui.h	/^typedef int ImGuiMultiSelectFlags;  \/\/ -> enum ImGuiMultiSelectFlags_\/\/ Flags: for BeginMult/;"	t	typeref:typename:int
ImGuiMultiSelectFlags_	includes/imgui.h	/^enum ImGuiMultiSelectFlags_$/;"	g
ImGuiMultiSelectFlags_BoxSelect1d	includes/imgui.h	/^    ImGuiMultiSelectFlags_BoxSelect1d           = 1 << 6,   \/\/ Enable box-selection with same /;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_BoxSelect2d	includes/imgui.h	/^    ImGuiMultiSelectFlags_BoxSelect2d           = 1 << 7,   \/\/ Enable box-selection with varyi/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_BoxSelectNoScroll	includes/imgui.h	/^    ImGuiMultiSelectFlags_BoxSelectNoScroll     = 1 << 8,   \/\/ Disable scrolling when box-sele/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_ClearOnClickVoid	includes/imgui.h	/^    ImGuiMultiSelectFlags_ClearOnClickVoid      = 1 << 10,  \/\/ Clear selection when clicking o/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_ClearOnEscape	includes/imgui.h	/^    ImGuiMultiSelectFlags_ClearOnEscape         = 1 << 9,   \/\/ Clear selection when pressing E/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_NavWrapX	includes/imgui.h	/^    ImGuiMultiSelectFlags_NavWrapX              = 1 << 16,  \/\/ [Temporary] Enable navigation w/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_NoAutoClear	includes/imgui.h	/^    ImGuiMultiSelectFlags_NoAutoClear           = 1 << 4,   \/\/ Disable clearing selection when/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_NoAutoClearOnReselect	includes/imgui.h	/^    ImGuiMultiSelectFlags_NoAutoClearOnReselect = 1 << 5,   \/\/ Disable clearing selection when/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_NoAutoSelect	includes/imgui.h	/^    ImGuiMultiSelectFlags_NoAutoSelect          = 1 << 3,   \/\/ Disable selecting items when na/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_NoRangeSelect	includes/imgui.h	/^    ImGuiMultiSelectFlags_NoRangeSelect         = 1 << 2,   \/\/ Disable Shift+selection mouse\//;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_NoSelectAll	includes/imgui.h	/^    ImGuiMultiSelectFlags_NoSelectAll           = 1 << 1,   \/\/ Disable CTRL+A shortcut to sele/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_None	includes/imgui.h	/^    ImGuiMultiSelectFlags_None                  = 0,$/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_ScopeRect	includes/imgui.h	/^    ImGuiMultiSelectFlags_ScopeRect             = 1 << 12,  \/\/ Scope for _BoxSelect and _Clear/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_ScopeWindow	includes/imgui.h	/^    ImGuiMultiSelectFlags_ScopeWindow           = 1 << 11,  \/\/ Scope for _BoxSelect and _Clear/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_SelectOnClick	includes/imgui.h	/^    ImGuiMultiSelectFlags_SelectOnClick         = 1 << 13,  \/\/ Apply selection on mouse down w/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_SelectOnClickRelease	includes/imgui.h	/^    ImGuiMultiSelectFlags_SelectOnClickRelease  = 1 << 14,  \/\/ Apply selection on mouse releas/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_SingleSelect	includes/imgui.h	/^    ImGuiMultiSelectFlags_SingleSelect          = 1 << 0,   \/\/ Disable selecting more than one/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectIO	includes/imgui.h	/^struct ImGuiMultiSelectIO$/;"	s
ImGuiMultiSelectState	includes/imgui_internal.h	/^    ImGuiMultiSelectState() { Window = NULL; ID = 0; LastFrameActive = LastSelectionSize = 0; Ra/;"	f	struct:ImGuiMultiSelectState
ImGuiMultiSelectState	includes/imgui_internal.h	/^struct IMGUI_API ImGuiMultiSelectState$/;"	s
ImGuiMultiSelectTempData	includes/imgui_internal.h	/^    ImGuiMultiSelectTempData()  { Clear(); }$/;"	f	struct:ImGuiMultiSelectTempData
ImGuiMultiSelectTempData	includes/imgui_internal.h	/^struct IMGUI_API ImGuiMultiSelectTempData$/;"	s
ImGuiNavHighlightFlags_AlwaysDraw	includes/imgui_internal.h	/^    ImGuiNavHighlightFlags_AlwaysDraw       = ImGuiNavRenderCursorFlags_AlwaysDraw, \/\/ Renamed/;"	e	enum:ImGuiNavRenderCursorFlags_
ImGuiNavHighlightFlags_Compact	includes/imgui_internal.h	/^    ImGuiNavHighlightFlags_Compact          = ImGuiNavRenderCursorFlags_Compact,    \/\/ Renamed/;"	e	enum:ImGuiNavRenderCursorFlags_
ImGuiNavHighlightFlags_NoRounding	includes/imgui_internal.h	/^    ImGuiNavHighlightFlags_NoRounding       = ImGuiNavRenderCursorFlags_NoRounding, \/\/ Renamed/;"	e	enum:ImGuiNavRenderCursorFlags_
ImGuiNavHighlightFlags_None	includes/imgui_internal.h	/^    ImGuiNavHighlightFlags_None             = ImGuiNavRenderCursorFlags_None,       \/\/ Renamed/;"	e	enum:ImGuiNavRenderCursorFlags_
ImGuiNavItemData	includes/imgui_internal.h	/^    ImGuiNavItemData()  { Clear(); }$/;"	f	struct:ImGuiNavItemData
ImGuiNavItemData	includes/imgui_internal.h	/^struct ImGuiNavItemData$/;"	s
ImGuiNavLayer	includes/imgui_internal.h	/^enum ImGuiNavLayer$/;"	g
ImGuiNavLayer_COUNT	includes/imgui_internal.h	/^    ImGuiNavLayer_COUNT$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Main	includes/imgui_internal.h	/^    ImGuiNavLayer_Main  = 0,    \/\/ Main scrolling layer$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Menu	includes/imgui_internal.h	/^    ImGuiNavLayer_Menu  = 1,    \/\/ Menu layer (access with Alt)$/;"	e	enum:ImGuiNavLayer
ImGuiNavMoveFlags	includes/imgui_internal.h	/^typedef int ImGuiNavMoveFlags;          \/\/ -> enum ImGuiNavMoveFlags_       \/\/ Flags: for na/;"	t	typeref:typename:int
ImGuiNavMoveFlags_	includes/imgui_internal.h	/^enum ImGuiNavMoveFlags_$/;"	g
ImGuiNavMoveFlags_Activate	includes/imgui_internal.h	/^    ImGuiNavMoveFlags_Activate              = 1 << 12,  \/\/ Activate\/select target item.$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_AllowCurrentNavId	includes/imgui_internal.h	/^    ImGuiNavMoveFlags_AllowCurrentNavId     = 1 << 4,   \/\/ Allow scoring and considering the c/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_AlsoScoreVisibleSet	includes/imgui_internal.h	/^    ImGuiNavMoveFlags_AlsoScoreVisibleSet   = 1 << 5,   \/\/ Store alternate result in NavMoveRe/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_DebugNoResult	includes/imgui_internal.h	/^    ImGuiNavMoveFlags_DebugNoResult         = 1 << 8,   \/\/ Dummy scoring for debug purpose, do/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_FocusApi	includes/imgui_internal.h	/^    ImGuiNavMoveFlags_FocusApi              = 1 << 9,   \/\/ Requests from focus API can land\/f/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_Forwarded	includes/imgui_internal.h	/^    ImGuiNavMoveFlags_Forwarded             = 1 << 7,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_IsPageMove	includes/imgui_internal.h	/^    ImGuiNavMoveFlags_IsPageMove            = 1 << 11,  \/\/ Identify a PageDown\/PageUp request/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_IsTabbing	includes/imgui_internal.h	/^    ImGuiNavMoveFlags_IsTabbing             = 1 << 10,  \/\/ == Focus + Activate if item is Inpu/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopX	includes/imgui_internal.h	/^    ImGuiNavMoveFlags_LoopX                 = 1 << 0,   \/\/ On failed request, restart from opp/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopY	includes/imgui_internal.h	/^    ImGuiNavMoveFlags_LoopY                 = 1 << 1,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_NoClearActiveId	includes/imgui_internal.h	/^    ImGuiNavMoveFlags_NoClearActiveId       = 1 << 15,  \/\/ (Experimental) Do not clear active /;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_NoSelect	includes/imgui_internal.h	/^    ImGuiNavMoveFlags_NoSelect              = 1 << 13,  \/\/ Don't trigger selection by not sett/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_NoSetNavCursorVisible	includes/imgui_internal.h	/^    ImGuiNavMoveFlags_NoSetNavCursorVisible = 1 << 14,  \/\/ Do not alter the nav cursor visible/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_None	includes/imgui_internal.h	/^    ImGuiNavMoveFlags_None                  = 0,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_ScrollToEdgeY	includes/imgui_internal.h	/^    ImGuiNavMoveFlags_ScrollToEdgeY         = 1 << 6,   \/\/ Force scrolling to min\/max (used b/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapMask_	includes/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapMask_             = ImGuiNavMoveFlags_LoopX | ImGuiNavMoveFlags_LoopY /;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapX	includes/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapX                 = 1 << 2,   \/\/ On failed request, request from opp/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapY	includes/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapY                 = 1 << 3,   \/\/ This is not super useful but provid/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavRenderCursorFlags	includes/imgui_internal.h	/^typedef int ImGuiNavRenderCursorFlags;  \/\/ -> enum ImGuiNavRenderCursorFlags_\/\/Flags: for Re/;"	t	typeref:typename:int
ImGuiNavRenderCursorFlags_	includes/imgui_internal.h	/^enum ImGuiNavRenderCursorFlags_$/;"	g
ImGuiNavRenderCursorFlags_AlwaysDraw	includes/imgui_internal.h	/^    ImGuiNavRenderCursorFlags_AlwaysDraw    = 1 << 2,       \/\/ Draw rectangular highlight if (/;"	e	enum:ImGuiNavRenderCursorFlags_
ImGuiNavRenderCursorFlags_Compact	includes/imgui_internal.h	/^    ImGuiNavRenderCursorFlags_Compact       = 1 << 1,       \/\/ Compact highlight, no padding\//;"	e	enum:ImGuiNavRenderCursorFlags_
ImGuiNavRenderCursorFlags_NoRounding	includes/imgui_internal.h	/^    ImGuiNavRenderCursorFlags_NoRounding    = 1 << 3,$/;"	e	enum:ImGuiNavRenderCursorFlags_
ImGuiNavRenderCursorFlags_None	includes/imgui_internal.h	/^    ImGuiNavRenderCursorFlags_None          = 0,$/;"	e	enum:ImGuiNavRenderCursorFlags_
ImGuiNewFrame	rlImGui.cpp	/^static void ImGuiNewFrame(float deltaTime)$/;"	f	typeref:typename:void	file:
ImGuiNextItemData	includes/imgui_internal.h	/^    ImGuiNextItemData()         { memset(this, 0, sizeof(*this)); SelectionUserData = -1; }$/;"	f	struct:ImGuiNextItemData
ImGuiNextItemData	includes/imgui_internal.h	/^struct ImGuiNextItemData$/;"	s
ImGuiNextItemDataFlags	includes/imgui_internal.h	/^typedef int ImGuiNextItemDataFlags;     \/\/ -> enum ImGuiNextItemDataFlags_  \/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiNextItemDataFlags_	includes/imgui_internal.h	/^enum ImGuiNextItemDataFlags_$/;"	g
ImGuiNextItemDataFlags_HasOpen	includes/imgui_internal.h	/^    ImGuiNextItemDataFlags_HasOpen      = 1 << 1,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_HasRefVal	includes/imgui_internal.h	/^    ImGuiNextItemDataFlags_HasRefVal    = 1 << 3,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_HasShortcut	includes/imgui_internal.h	/^    ImGuiNextItemDataFlags_HasShortcut  = 1 << 2,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_HasStorageID	includes/imgui_internal.h	/^    ImGuiNextItemDataFlags_HasStorageID = 1 << 4,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_HasWidth	includes/imgui_internal.h	/^    ImGuiNextItemDataFlags_HasWidth     = 1 << 0,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_None	includes/imgui_internal.h	/^    ImGuiNextItemDataFlags_None         = 0,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextWindowData	includes/imgui_internal.h	/^    ImGuiNextWindowData()       { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiNextWindowData
ImGuiNextWindowData	includes/imgui_internal.h	/^struct ImGuiNextWindowData$/;"	s
ImGuiNextWindowDataFlags	includes/imgui_internal.h	/^typedef int ImGuiNextWindowDataFlags;   \/\/ -> enum ImGuiNextWindowDataFlags_\/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiNextWindowDataFlags_	includes/imgui_internal.h	/^enum ImGuiNextWindowDataFlags_$/;"	g
ImGuiNextWindowDataFlags_HasBgAlpha	includes/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasBgAlpha         = 1 << 6,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasChildFlags	includes/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasChildFlags      = 1 << 8,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasCollapsed	includes/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasCollapsed       = 1 << 3,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasContentSize	includes/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasContentSize     = 1 << 2,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasFocus	includes/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasFocus           = 1 << 5,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasPos	includes/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasPos             = 1 << 0,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasRefreshPolicy	includes/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasRefreshPolicy   = 1 << 9,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasScroll	includes/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasScroll          = 1 << 7,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasSize	includes/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasSize            = 1 << 1,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasSizeConstraint	includes/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasSizeConstraint  = 1 << 4,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_None	includes/imgui_internal.h	/^    ImGuiNextWindowDataFlags_None               = 0,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiOldColumnData	includes/imgui_internal.h	/^    ImGuiOldColumnData() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiOldColumnData
ImGuiOldColumnData	includes/imgui_internal.h	/^struct ImGuiOldColumnData$/;"	s
ImGuiOldColumnFlags	includes/imgui_internal.h	/^typedef int ImGuiOldColumnFlags;        \/\/ -> enum ImGuiOldColumnFlags_     \/\/ Flags: for Be/;"	t	typeref:typename:int
ImGuiOldColumnFlags_	includes/imgui_internal.h	/^enum ImGuiOldColumnFlags_$/;"	g
ImGuiOldColumnFlags_GrowParentContentsSize	includes/imgui_internal.h	/^    ImGuiOldColumnFlags_GrowParentContentsSize  = 1 << 4,   \/\/ Restore pre-1.51 behavior of ex/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoBorder	includes/imgui_internal.h	/^    ImGuiOldColumnFlags_NoBorder                = 1 << 0,   \/\/ Disable column dividers$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoForceWithinWindow	includes/imgui_internal.h	/^    ImGuiOldColumnFlags_NoForceWithinWindow     = 1 << 3,   \/\/ Disable forcing columns to fit /;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoPreserveWidths	includes/imgui_internal.h	/^    ImGuiOldColumnFlags_NoPreserveWidths        = 1 << 2,   \/\/ Disable column width preservati/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoResize	includes/imgui_internal.h	/^    ImGuiOldColumnFlags_NoResize                = 1 << 1,   \/\/ Disable resizing columns when c/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_None	includes/imgui_internal.h	/^    ImGuiOldColumnFlags_None                    = 0,$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumns	includes/imgui_internal.h	/^    ImGuiOldColumns()   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiOldColumns
ImGuiOldColumns	includes/imgui_internal.h	/^struct ImGuiOldColumns$/;"	s
ImGuiOnceUponAFrame	includes/imgui.h	/^    ImGuiOnceUponAFrame() { RefFrame = -1; }$/;"	f	struct:ImGuiOnceUponAFrame
ImGuiOnceUponAFrame	includes/imgui.h	/^struct ImGuiOnceUponAFrame$/;"	s
ImGuiPayload	includes/imgui.h	/^    ImGuiPayload()  { Clear(); }$/;"	f	struct:ImGuiPayload
ImGuiPayload	includes/imgui.h	/^struct ImGuiPayload$/;"	s
ImGuiPlatformIO	imgui.cpp	/^ImGuiPlatformIO::ImGuiPlatformIO()$/;"	f	class:ImGuiPlatformIO
ImGuiPlatformIO	includes/imgui.h	/^struct ImGuiPlatformIO$/;"	s
ImGuiPlatformImeData	includes/imgui.h	/^    ImGuiPlatformImeData() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiPlatformImeData
ImGuiPlatformImeData	includes/imgui.h	/^struct ImGuiPlatformImeData$/;"	s
ImGuiPlotArrayGetterData	imgui_widgets.cpp	/^    ImGuiPlotArrayGetterData(const float* values, int stride) { Values = values; Stride = stride/;"	f	struct:ImGuiPlotArrayGetterData	file:
ImGuiPlotArrayGetterData	imgui_widgets.cpp	/^struct ImGuiPlotArrayGetterData$/;"	s	file:
ImGuiPlotType	includes/imgui_internal.h	/^enum ImGuiPlotType$/;"	g
ImGuiPlotType_Histogram	includes/imgui_internal.h	/^    ImGuiPlotType_Histogram,$/;"	e	enum:ImGuiPlotType
ImGuiPlotType_Lines	includes/imgui_internal.h	/^    ImGuiPlotType_Lines,$/;"	e	enum:ImGuiPlotType
ImGuiPopupData	includes/imgui_internal.h	/^    ImGuiPopupData()    { memset(this, 0, sizeof(*this)); ParentNavLayer = OpenFrameCount = -1; /;"	f	struct:ImGuiPopupData
ImGuiPopupData	includes/imgui_internal.h	/^struct ImGuiPopupData$/;"	s
ImGuiPopupFlags	includes/imgui.h	/^typedef int ImGuiPopupFlags;        \/\/ -> enum ImGuiPopupFlags_      \/\/ Flags: for OpenPopup/;"	t	typeref:typename:int
ImGuiPopupFlags_	includes/imgui.h	/^enum ImGuiPopupFlags_$/;"	g
ImGuiPopupFlags_AnyPopup	includes/imgui.h	/^    ImGuiPopupFlags_AnyPopup                = ImGuiPopupFlags_AnyPopupId | ImGuiPopupFlags_AnyPo/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_AnyPopupId	includes/imgui.h	/^    ImGuiPopupFlags_AnyPopupId              = 1 << 10,  \/\/ For IsPopupOpen(): ignore the ImGui/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_AnyPopupLevel	includes/imgui.h	/^    ImGuiPopupFlags_AnyPopupLevel           = 1 << 11,  \/\/ For IsPopupOpen(): search\/test at /;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonDefault_	includes/imgui.h	/^    ImGuiPopupFlags_MouseButtonDefault_     = 1,$/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonLeft	includes/imgui.h	/^    ImGuiPopupFlags_MouseButtonLeft         = 0,        \/\/ For BeginPopupContext*(): open on L/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonMask_	includes/imgui.h	/^    ImGuiPopupFlags_MouseButtonMask_        = 0x1F,$/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonMiddle	includes/imgui.h	/^    ImGuiPopupFlags_MouseButtonMiddle       = 2,        \/\/ For BeginPopupContext*(): open on M/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonRight	includes/imgui.h	/^    ImGuiPopupFlags_MouseButtonRight        = 1,        \/\/ For BeginPopupContext*(): open on R/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_NoOpenOverExistingPopup	includes/imgui.h	/^    ImGuiPopupFlags_NoOpenOverExistingPopup = 1 << 7,   \/\/ For OpenPopup*(), BeginPopupContext/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_NoOpenOverItems	includes/imgui.h	/^    ImGuiPopupFlags_NoOpenOverItems         = 1 << 8,   \/\/ For BeginPopupContextWindow(): don'/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_NoReopen	includes/imgui.h	/^    ImGuiPopupFlags_NoReopen                = 1 << 5,   \/\/ For OpenPopup*(), BeginPopupContext/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_None	includes/imgui.h	/^    ImGuiPopupFlags_None                    = 0,$/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupPositionPolicy	includes/imgui_internal.h	/^enum ImGuiPopupPositionPolicy$/;"	g
ImGuiPopupPositionPolicy_ComboBox	includes/imgui_internal.h	/^    ImGuiPopupPositionPolicy_ComboBox,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPopupPositionPolicy_Default	includes/imgui_internal.h	/^    ImGuiPopupPositionPolicy_Default,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPopupPositionPolicy_Tooltip	includes/imgui_internal.h	/^    ImGuiPopupPositionPolicy_Tooltip,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPtrOrIndex	includes/imgui_internal.h	/^    ImGuiPtrOrIndex(int index)  { Ptr = NULL; Index = index; }$/;"	f	struct:ImGuiPtrOrIndex
ImGuiPtrOrIndex	includes/imgui_internal.h	/^    ImGuiPtrOrIndex(void* ptr)  { Ptr = ptr; Index = -1; }$/;"	f	struct:ImGuiPtrOrIndex
ImGuiPtrOrIndex	includes/imgui_internal.h	/^struct ImGuiPtrOrIndex$/;"	s
ImGuiRenderTriangles	rlImGui.cpp	/^static void ImGuiRenderTriangles(unsigned int count, int indexStart, const ImVector<ImDrawIdx>& /;"	f	typeref:typename:void	file:
ImGuiResizeBorderDef	imgui.cpp	/^struct ImGuiResizeBorderDef$/;"	s	file:
ImGuiResizeGripDef	imgui.cpp	/^struct ImGuiResizeGripDef$/;"	s	file:
ImGuiScrollFlags	includes/imgui_internal.h	/^typedef int ImGuiScrollFlags;           \/\/ -> enum ImGuiScrollFlags_        \/\/ Flags: for Sc/;"	t	typeref:typename:int
ImGuiScrollFlags_	includes/imgui_internal.h	/^enum ImGuiScrollFlags_$/;"	g
ImGuiScrollFlags_AlwaysCenterX	includes/imgui_internal.h	/^    ImGuiScrollFlags_AlwaysCenterX          = 1 << 4,       \/\/ Always center the result item o/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_AlwaysCenterY	includes/imgui_internal.h	/^    ImGuiScrollFlags_AlwaysCenterY          = 1 << 5,       \/\/ Always center the result item o/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleCenterX	includes/imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleCenterX     = 1 << 2,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleCenterY	includes/imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleCenterY     = 1 << 3,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleEdgeX	includes/imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleEdgeX       = 1 << 0,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleEdgeY	includes/imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleEdgeY       = 1 << 1,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_MaskX_	includes/imgui_internal.h	/^    ImGuiScrollFlags_MaskX_                 = ImGuiScrollFlags_KeepVisibleEdgeX | ImGuiScrollFla/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_MaskY_	includes/imgui_internal.h	/^    ImGuiScrollFlags_MaskY_                 = ImGuiScrollFlags_KeepVisibleEdgeY | ImGuiScrollFla/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_NoScrollParent	includes/imgui_internal.h	/^    ImGuiScrollFlags_NoScrollParent         = 1 << 6,       \/\/ Disable forwarding scrolling to/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_None	includes/imgui_internal.h	/^    ImGuiScrollFlags_None                   = 0,$/;"	e	enum:ImGuiScrollFlags_
ImGuiSelectableFlags	includes/imgui.h	/^typedef int ImGuiSelectableFlags;   \/\/ -> enum ImGuiSelectableFlags_ \/\/ Flags: for Selectabl/;"	t	typeref:typename:int
ImGuiSelectableFlagsPrivate_	includes/imgui_internal.h	/^enum ImGuiSelectableFlagsPrivate_$/;"	g
ImGuiSelectableFlags_	includes/imgui.h	/^enum ImGuiSelectableFlags_$/;"	g
ImGuiSelectableFlags_AllowDoubleClick	includes/imgui.h	/^    ImGuiSelectableFlags_AllowDoubleClick   = 1 << 2,   \/\/ Generate press events on double cli/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_AllowItemOverlap	includes/imgui.h	/^    ImGuiSelectableFlags_AllowItemOverlap   = ImGuiSelectableFlags_AllowOverlap,        \/\/ Ren/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_AllowOverlap	includes/imgui.h	/^    ImGuiSelectableFlags_AllowOverlap       = 1 << 4,   \/\/ (WIP) Hit testing to allow subseque/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_Disabled	includes/imgui.h	/^    ImGuiSelectableFlags_Disabled           = 1 << 3,   \/\/ Cannot be selected, display grayed /;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_DontClosePopups	includes/imgui.h	/^    ImGuiSelectableFlags_DontClosePopups    = ImGuiSelectableFlags_NoAutoClosePopups,   \/\/ Ren/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_Highlight	includes/imgui.h	/^    ImGuiSelectableFlags_Highlight          = 1 << 5,   \/\/ Make the item be displayed as if it/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_NoAutoClosePopups	includes/imgui.h	/^    ImGuiSelectableFlags_NoAutoClosePopups  = 1 << 0,   \/\/ Clicking this doesn't close parent /;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_NoHoldingActiveID	includes/imgui_internal.h	/^    ImGuiSelectableFlags_NoHoldingActiveID      = 1 << 20,$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_NoPadWithHalfSpacing	includes/imgui_internal.h	/^    ImGuiSelectableFlags_NoPadWithHalfSpacing   = 1 << 26,  \/\/ Disable padding each side with /;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_NoSetKeyOwner	includes/imgui_internal.h	/^    ImGuiSelectableFlags_NoSetKeyOwner          = 1 << 27,  \/\/ Don't set key\/input owner on t/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_None	includes/imgui.h	/^    ImGuiSelectableFlags_None               = 0,$/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_SelectOnClick	includes/imgui_internal.h	/^    ImGuiSelectableFlags_SelectOnClick          = 1 << 22,  \/\/ Override button behavior to rea/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SelectOnNav	includes/imgui_internal.h	/^    ImGuiSelectableFlags_SelectOnNav            = 1 << 21,  \/\/ (WIP) Auto-select when moved in/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SelectOnRelease	includes/imgui_internal.h	/^    ImGuiSelectableFlags_SelectOnRelease        = 1 << 23,  \/\/ Override button behavior to rea/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SetNavIdOnHover	includes/imgui_internal.h	/^    ImGuiSelectableFlags_SetNavIdOnHover        = 1 << 25,  \/\/ Set Nav\/Focus ID on mouse hove/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SpanAllColumns	includes/imgui.h	/^    ImGuiSelectableFlags_SpanAllColumns     = 1 << 1,   \/\/ Frame will span all columns of its /;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_SpanAvailWidth	includes/imgui_internal.h	/^    ImGuiSelectableFlags_SpanAvailWidth         = 1 << 24,  \/\/ Span all avail width even if we/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectionBasicStorage	imgui_widgets.cpp	/^ImGuiSelectionBasicStorage::ImGuiSelectionBasicStorage()$/;"	f	class:ImGuiSelectionBasicStorage
ImGuiSelectionBasicStorage	includes/imgui.h	/^struct ImGuiSelectionBasicStorage$/;"	s
ImGuiSelectionBasicStorage_BatchFinish	imgui_widgets.cpp	/^static void ImGuiSelectionBasicStorage_BatchFinish(ImGuiSelectionBasicStorage* selection, bool s/;"	f	typeref:typename:void	file:
ImGuiSelectionBasicStorage_BatchSetItemSelected	imgui_widgets.cpp	/^static void ImGuiSelectionBasicStorage_BatchSetItemSelected(ImGuiSelectionBasicStorage* selectio/;"	f	typeref:typename:void	file:
ImGuiSelectionExternalStorage	imgui_widgets.cpp	/^ImGuiSelectionExternalStorage::ImGuiSelectionExternalStorage()$/;"	f	class:ImGuiSelectionExternalStorage
ImGuiSelectionExternalStorage	includes/imgui.h	/^struct ImGuiSelectionExternalStorage$/;"	s
ImGuiSelectionRequest	includes/imgui.h	/^struct ImGuiSelectionRequest$/;"	s
ImGuiSelectionRequestType	includes/imgui.h	/^enum ImGuiSelectionRequestType$/;"	g
ImGuiSelectionRequestType_None	includes/imgui.h	/^    ImGuiSelectionRequestType_None = 0,$/;"	e	enum:ImGuiSelectionRequestType
ImGuiSelectionRequestType_SetAll	includes/imgui.h	/^    ImGuiSelectionRequestType_SetAll,           \/\/ Request app to clear selection (if Selected/;"	e	enum:ImGuiSelectionRequestType
ImGuiSelectionRequestType_SetRange	includes/imgui.h	/^    ImGuiSelectionRequestType_SetRange,         \/\/ Request app to select\/unselect [RangeFirst/;"	e	enum:ImGuiSelectionRequestType
ImGuiSelectionUserData	includes/imgui.h	/^typedef ImS64 ImGuiSelectionUserData;$/;"	t	typeref:typename:ImS64
ImGuiSelectionUserData_Invalid	includes/imgui_internal.h	/^#define ImGuiSelectionUserData_Invalid /;"	d
ImGuiSeparatorFlags	includes/imgui_internal.h	/^typedef int ImGuiSeparatorFlags;        \/\/ -> enum ImGuiSeparatorFlags_     \/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiSeparatorFlags_	includes/imgui_internal.h	/^enum ImGuiSeparatorFlags_$/;"	g
ImGuiSeparatorFlags_Horizontal	includes/imgui_internal.h	/^    ImGuiSeparatorFlags_Horizontal              = 1 << 0,   \/\/ Axis default to current layout /;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_None	includes/imgui_internal.h	/^    ImGuiSeparatorFlags_None                    = 0,$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_SpanAllColumns	includes/imgui_internal.h	/^    ImGuiSeparatorFlags_SpanAllColumns          = 1 << 2,   \/\/ Make separator cover all column/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_Vertical	includes/imgui_internal.h	/^    ImGuiSeparatorFlags_Vertical                = 1 << 1,$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSettingsHandler	includes/imgui_internal.h	/^    ImGuiSettingsHandler() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiSettingsHandler
ImGuiSettingsHandler	includes/imgui_internal.h	/^struct ImGuiSettingsHandler$/;"	s
ImGuiShrinkWidthItem	includes/imgui_internal.h	/^struct ImGuiShrinkWidthItem$/;"	s
ImGuiSizeCallback	includes/imgui.h	/^typedef void    (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data);              \/\/ Callback fu/;"	t	typeref:typename:void (*)(ImGuiSizeCallbackData * data)
ImGuiSizeCallbackData	includes/imgui.h	/^struct ImGuiSizeCallbackData$/;"	s
ImGuiSliderFlags	includes/imgui.h	/^typedef int ImGuiSliderFlags;       \/\/ -> enum ImGuiSliderFlags_     \/\/ Flags: for DragFloat/;"	t	typeref:typename:int
ImGuiSliderFlagsPrivate_	includes/imgui_internal.h	/^enum ImGuiSliderFlagsPrivate_$/;"	g
ImGuiSliderFlags_	includes/imgui.h	/^enum ImGuiSliderFlags_$/;"	g
ImGuiSliderFlags_AlwaysClamp	includes/imgui.h	/^    ImGuiSliderFlags_AlwaysClamp        = ImGuiSliderFlags_ClampOnInput | ImGuiSliderFlags_Clamp/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_ClampOnInput	includes/imgui.h	/^    ImGuiSliderFlags_ClampOnInput       = 1 << 9,       \/\/ Clamp value to min\/max bounds when/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_ClampZeroRange	includes/imgui.h	/^    ImGuiSliderFlags_ClampZeroRange     = 1 << 10,      \/\/ Clamp even if min==max==0.0f. Other/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_InvalidMask_	includes/imgui.h	/^    ImGuiSliderFlags_InvalidMask_       = 0x7000000F,   \/\/ [Internal] We treat using those bit/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_Logarithmic	includes/imgui.h	/^    ImGuiSliderFlags_Logarithmic        = 1 << 5,       \/\/ Make the widget logarithmic (linear/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_NoInput	includes/imgui.h	/^    ImGuiSliderFlags_NoInput            = 1 << 7,       \/\/ Disable CTRL+Click or Enter key all/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_NoRoundToFormat	includes/imgui.h	/^    ImGuiSliderFlags_NoRoundToFormat    = 1 << 6,       \/\/ Disable rounding underlying value t/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_NoSpeedTweaks	includes/imgui.h	/^    ImGuiSliderFlags_NoSpeedTweaks      = 1 << 11,      \/\/ Disable keyboard modifiers altering/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_None	includes/imgui.h	/^    ImGuiSliderFlags_None               = 0,$/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_ReadOnly	includes/imgui_internal.h	/^    ImGuiSliderFlags_ReadOnly               = 1 << 21,  \/\/ Consider using g.NextItemData.ItemF/;"	e	enum:ImGuiSliderFlagsPrivate_
ImGuiSliderFlags_Vertical	includes/imgui_internal.h	/^    ImGuiSliderFlags_Vertical               = 1 << 20,  \/\/ Should this slider be orientated ve/;"	e	enum:ImGuiSliderFlagsPrivate_
ImGuiSliderFlags_WrapAround	includes/imgui.h	/^    ImGuiSliderFlags_WrapAround         = 1 << 8,       \/\/ Enable wrapping around from max to /;"	e	enum:ImGuiSliderFlags_
ImGuiSortDirection	includes/imgui.h	/^enum ImGuiSortDirection : ImU8$/;"	g	typeref:typename:ImU8
ImGuiSortDirection_Ascending	includes/imgui.h	/^    ImGuiSortDirection_Ascending    = 1,    \/\/ Ascending = 0->9, A->Z etc.$/;"	e	enum:ImGuiSortDirection
ImGuiSortDirection_Descending	includes/imgui.h	/^    ImGuiSortDirection_Descending   = 2     \/\/ Descending = 9->0, Z->A etc.$/;"	e	enum:ImGuiSortDirection
ImGuiSortDirection_None	includes/imgui.h	/^    ImGuiSortDirection_None         = 0,$/;"	e	enum:ImGuiSortDirection
ImGuiStackLevelInfo	includes/imgui_internal.h	/^    ImGuiStackLevelInfo()   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiStackLevelInfo
ImGuiStackLevelInfo	includes/imgui_internal.h	/^struct ImGuiStackLevelInfo$/;"	s
ImGuiStorage	includes/imgui.h	/^struct ImGuiStorage$/;"	s
ImGuiStoragePair	includes/imgui.h	/^    ImGuiStoragePair(ImGuiID _key, float _val)  { key = _key; val_f = _val; }$/;"	f	struct:ImGuiStoragePair
ImGuiStoragePair	includes/imgui.h	/^    ImGuiStoragePair(ImGuiID _key, int _val)    { key = _key; val_i = _val; }$/;"	f	struct:ImGuiStoragePair
ImGuiStoragePair	includes/imgui.h	/^    ImGuiStoragePair(ImGuiID _key, void* _val)  { key = _key; val_p = _val; }$/;"	f	struct:ImGuiStoragePair
ImGuiStoragePair	includes/imgui.h	/^struct ImGuiStoragePair$/;"	s
ImGuiStyle	imgui.cpp	/^ImGuiStyle::ImGuiStyle()$/;"	f	class:ImGuiStyle
ImGuiStyle	includes/imgui.h	/^struct ImGuiStyle$/;"	s
ImGuiStyleMod	includes/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, ImVec2 v)  { VarIdx = idx; BackupFloat[0] = v.x; BackupFloa/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	includes/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, float v)   { VarIdx = idx; BackupFloat[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	includes/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, int v)     { VarIdx = idx; BackupInt[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	includes/imgui_internal.h	/^struct ImGuiStyleMod$/;"	s
ImGuiStyleVar	includes/imgui.h	/^typedef int ImGuiStyleVar;          \/\/ -> enum ImGuiStyleVar_        \/\/ Enum: A variable ide/;"	t	typeref:typename:int
ImGuiStyleVar_	includes/imgui.h	/^enum ImGuiStyleVar_$/;"	g
ImGuiStyleVar_Alpha	includes/imgui.h	/^    ImGuiStyleVar_Alpha,                    \/\/ float     Alpha$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ButtonTextAlign	includes/imgui.h	/^    ImGuiStyleVar_ButtonTextAlign,          \/\/ ImVec2    ButtonTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_COUNT	includes/imgui.h	/^    ImGuiStyleVar_COUNT$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_CellPadding	includes/imgui.h	/^    ImGuiStyleVar_CellPadding,              \/\/ ImVec2    CellPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildBorderSize	includes/imgui.h	/^    ImGuiStyleVar_ChildBorderSize,          \/\/ float     ChildBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildRounding	includes/imgui.h	/^    ImGuiStyleVar_ChildRounding,            \/\/ float     ChildRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_DisabledAlpha	includes/imgui.h	/^    ImGuiStyleVar_DisabledAlpha,            \/\/ float     DisabledAlpha$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameBorderSize	includes/imgui.h	/^    ImGuiStyleVar_FrameBorderSize,          \/\/ float     FrameBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FramePadding	includes/imgui.h	/^    ImGuiStyleVar_FramePadding,             \/\/ ImVec2    FramePadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameRounding	includes/imgui.h	/^    ImGuiStyleVar_FrameRounding,            \/\/ float     FrameRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabMinSize	includes/imgui.h	/^    ImGuiStyleVar_GrabMinSize,              \/\/ float     GrabMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabRounding	includes/imgui.h	/^    ImGuiStyleVar_GrabRounding,             \/\/ float     GrabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_IndentSpacing	includes/imgui.h	/^    ImGuiStyleVar_IndentSpacing,            \/\/ float     IndentSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemInnerSpacing	includes/imgui.h	/^    ImGuiStyleVar_ItemInnerSpacing,         \/\/ ImVec2    ItemInnerSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemSpacing	includes/imgui.h	/^    ImGuiStyleVar_ItemSpacing,              \/\/ ImVec2    ItemSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupBorderSize	includes/imgui.h	/^    ImGuiStyleVar_PopupBorderSize,          \/\/ float     PopupBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupRounding	includes/imgui.h	/^    ImGuiStyleVar_PopupRounding,            \/\/ float     PopupRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarRounding	includes/imgui.h	/^    ImGuiStyleVar_ScrollbarRounding,        \/\/ float     ScrollbarRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarSize	includes/imgui.h	/^    ImGuiStyleVar_ScrollbarSize,            \/\/ float     ScrollbarSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SelectableTextAlign	includes/imgui.h	/^    ImGuiStyleVar_SelectableTextAlign,      \/\/ ImVec2    SelectableTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SeparatorTextAlign	includes/imgui.h	/^    ImGuiStyleVar_SeparatorTextAlign,       \/\/ ImVec2    SeparatorTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SeparatorTextBorderSize	includes/imgui.h	/^    ImGuiStyleVar_SeparatorTextBorderSize,  \/\/ float     SeparatorTextBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SeparatorTextPadding	includes/imgui.h	/^    ImGuiStyleVar_SeparatorTextPadding,     \/\/ ImVec2    SeparatorTextPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TabBarBorderSize	includes/imgui.h	/^    ImGuiStyleVar_TabBarBorderSize,         \/\/ float     TabBarBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TabBarOverlineSize	includes/imgui.h	/^    ImGuiStyleVar_TabBarOverlineSize,       \/\/ float     TabBarOverlineSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TabBorderSize	includes/imgui.h	/^    ImGuiStyleVar_TabBorderSize,            \/\/ float     TabBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TabRounding	includes/imgui.h	/^    ImGuiStyleVar_TabRounding,              \/\/ float     TabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TableAngledHeadersAngle	includes/imgui.h	/^    ImGuiStyleVar_TableAngledHeadersAngle,  \/\/ float     TableAngledHeadersAngle$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TableAngledHeadersTextAlign	includes/imgui.h	/^    ImGuiStyleVar_TableAngledHeadersTextAlign,\/\/ ImVec2  TableAngledHeadersTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowBorderSize	includes/imgui.h	/^    ImGuiStyleVar_WindowBorderSize,         \/\/ float     WindowBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowMinSize	includes/imgui.h	/^    ImGuiStyleVar_WindowMinSize,            \/\/ ImVec2    WindowMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowPadding	includes/imgui.h	/^    ImGuiStyleVar_WindowPadding,            \/\/ ImVec2    WindowPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowRounding	includes/imgui.h	/^    ImGuiStyleVar_WindowRounding,           \/\/ float     WindowRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowTitleAlign	includes/imgui.h	/^    ImGuiStyleVar_WindowTitleAlign,         \/\/ ImVec2    WindowTitleAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiTabBar	imgui_widgets.cpp	/^ImGuiTabBar::ImGuiTabBar()$/;"	f	class:ImGuiTabBar
ImGuiTabBar	includes/imgui_internal.h	/^struct IMGUI_API ImGuiTabBar$/;"	s
ImGuiTabBarFlags	includes/imgui.h	/^typedef int ImGuiTabBarFlags;       \/\/ -> enum ImGuiTabBarFlags_     \/\/ Flags: for BeginTabB/;"	t	typeref:typename:int
ImGuiTabBarFlagsPrivate_	includes/imgui_internal.h	/^enum ImGuiTabBarFlagsPrivate_$/;"	g
ImGuiTabBarFlags_	includes/imgui.h	/^enum ImGuiTabBarFlags_$/;"	g
ImGuiTabBarFlags_AutoSelectNewTabs	includes/imgui.h	/^    ImGuiTabBarFlags_AutoSelectNewTabs              = 1 << 1,   \/\/ Automatically select new ta/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_DockNode	includes/imgui_internal.h	/^    ImGuiTabBarFlags_DockNode                   = 1 << 20,  \/\/ Part of a dock node [we don't u/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_DrawSelectedOverline	includes/imgui.h	/^    ImGuiTabBarFlags_DrawSelectedOverline           = 1 << 6,   \/\/ Draw selected overline mark/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyDefault_	includes/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyDefault_          = ImGuiTabBarFlags_FittingPolicyResizeDown,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyMask_	includes/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyMask_             = ImGuiTabBarFlags_FittingPolicyResizeDown |/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyResizeDown	includes/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyResizeDown        = 1 << 7,   \/\/ Resize tabs when they don't/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyScroll	includes/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyScroll            = 1 << 8,   \/\/ Add scroll buttons when tab/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_IsFocused	includes/imgui_internal.h	/^    ImGuiTabBarFlags_IsFocused                  = 1 << 21,$/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_NoCloseWithMiddleMouseButton	includes/imgui.h	/^    ImGuiTabBarFlags_NoCloseWithMiddleMouseButton   = 1 << 3,   \/\/ Disable behavior of closing/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTabListScrollingButtons	includes/imgui.h	/^    ImGuiTabBarFlags_NoTabListScrollingButtons      = 1 << 4,   \/\/ Disable scrolling buttons (/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTooltip	includes/imgui.h	/^    ImGuiTabBarFlags_NoTooltip                      = 1 << 5,   \/\/ Disable tooltips when hover/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_None	includes/imgui.h	/^    ImGuiTabBarFlags_None                           = 0,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_Reorderable	includes/imgui.h	/^    ImGuiTabBarFlags_Reorderable                    = 1 << 0,   \/\/ Allow manually dragging tab/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_SaveSettings	includes/imgui_internal.h	/^    ImGuiTabBarFlags_SaveSettings               = 1 << 22,  \/\/ FIXME: Settings are handled by /;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_TabListPopupButton	includes/imgui.h	/^    ImGuiTabBarFlags_TabListPopupButton             = 1 << 2,   \/\/ Disable buttons to open the/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarSection	imgui_widgets.cpp	/^    ImGuiTabBarSection() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTabBarSection	file:
ImGuiTabBarSection	imgui_widgets.cpp	/^struct ImGuiTabBarSection$/;"	s	file:
ImGuiTabItem	includes/imgui_internal.h	/^    ImGuiTabItem()      { memset(this, 0, sizeof(*this)); LastFrameVisible = LastFrameSelected =/;"	f	struct:ImGuiTabItem
ImGuiTabItem	includes/imgui_internal.h	/^struct ImGuiTabItem$/;"	s
ImGuiTabItemFlags	includes/imgui.h	/^typedef int ImGuiTabItemFlags;      \/\/ -> enum ImGuiTabItemFlags_    \/\/ Flags: for BeginTabI/;"	t	typeref:typename:int
ImGuiTabItemFlagsPrivate_	includes/imgui_internal.h	/^enum ImGuiTabItemFlagsPrivate_$/;"	g
ImGuiTabItemFlags_	includes/imgui.h	/^enum ImGuiTabItemFlags_$/;"	g
ImGuiTabItemFlags_Button	includes/imgui_internal.h	/^    ImGuiTabItemFlags_Button                    = 1 << 21,  \/\/ Used by TabItemButton, change t/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_Leading	includes/imgui.h	/^    ImGuiTabItemFlags_Leading                       = 1 << 6,   \/\/ Enforce the tab position to/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoAssumedClosure	includes/imgui.h	/^    ImGuiTabItemFlags_NoAssumedClosure              = 1 << 8,   \/\/ Tab is selected when trying/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoCloseButton	includes/imgui_internal.h	/^    ImGuiTabItemFlags_NoCloseButton             = 1 << 20,  \/\/ Track whether p_open was set or/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_NoCloseWithMiddleMouseButton	includes/imgui.h	/^    ImGuiTabItemFlags_NoCloseWithMiddleMouseButton  = 1 << 2,   \/\/ Disable behavior of closing/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoPushId	includes/imgui.h	/^    ImGuiTabItemFlags_NoPushId                      = 1 << 3,   \/\/ Don't call PushID()\/PopID(/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoReorder	includes/imgui.h	/^    ImGuiTabItemFlags_NoReorder                     = 1 << 5,   \/\/ Disable reordering this tab/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoTooltip	includes/imgui.h	/^    ImGuiTabItemFlags_NoTooltip                     = 1 << 4,   \/\/ Disable tooltip for the giv/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_None	includes/imgui.h	/^    ImGuiTabItemFlags_None                          = 0,$/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_SectionMask_	includes/imgui_internal.h	/^    ImGuiTabItemFlags_SectionMask_              = ImGuiTabItemFlags_Leading | ImGuiTabItemFlags_/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_SetSelected	includes/imgui.h	/^    ImGuiTabItemFlags_SetSelected                   = 1 << 1,   \/\/ Trigger flag to programmati/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_Trailing	includes/imgui.h	/^    ImGuiTabItemFlags_Trailing                      = 1 << 7,   \/\/ Enforce the tab position to/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_UnsavedDocument	includes/imgui.h	/^    ImGuiTabItemFlags_UnsavedDocument               = 1 << 0,   \/\/ Display a dot next to the t/;"	e	enum:ImGuiTabItemFlags_
ImGuiTable	includes/imgui_internal.h	/^    ImGuiTable()                { memset(this, 0, sizeof(*this)); LastFrameActive = -1; }$/;"	f	struct:ImGuiTable
ImGuiTable	includes/imgui_internal.h	/^struct IMGUI_API ImGuiTable$/;"	s
ImGuiTableBgTarget	includes/imgui.h	/^typedef int ImGuiTableBgTarget;     \/\/ -> enum ImGuiTableBgTarget_   \/\/ Enum: A color target/;"	t	typeref:typename:int
ImGuiTableBgTarget_	includes/imgui.h	/^enum ImGuiTableBgTarget_$/;"	g
ImGuiTableBgTarget_CellBg	includes/imgui.h	/^    ImGuiTableBgTarget_CellBg                   = 3,        \/\/ Set cell background color (top-/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableBgTarget_None	includes/imgui.h	/^    ImGuiTableBgTarget_None                     = 0,$/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableBgTarget_RowBg0	includes/imgui.h	/^    ImGuiTableBgTarget_RowBg0                   = 1,        \/\/ Set row background color 0 (gen/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableBgTarget_RowBg1	includes/imgui.h	/^    ImGuiTableBgTarget_RowBg1                   = 2,        \/\/ Set row background color 1 (gen/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableCellData	includes/imgui_internal.h	/^struct ImGuiTableCellData$/;"	s
ImGuiTableColumn	includes/imgui_internal.h	/^    ImGuiTableColumn()$/;"	f	struct:ImGuiTableColumn
ImGuiTableColumn	includes/imgui_internal.h	/^struct ImGuiTableColumn$/;"	s
ImGuiTableColumnFlags	includes/imgui.h	/^typedef int ImGuiTableColumnFlags;  \/\/ -> enum ImGuiTableColumnFlags_\/\/ Flags: For TableSetu/;"	t	typeref:typename:int
ImGuiTableColumnFlags_	includes/imgui.h	/^enum ImGuiTableColumnFlags_$/;"	g
ImGuiTableColumnFlags_AngledHeader	includes/imgui.h	/^    ImGuiTableColumnFlags_AngledHeader          = 1 << 18,  \/\/ TableHeadersRow() will submit a/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_DefaultHide	includes/imgui.h	/^    ImGuiTableColumnFlags_DefaultHide           = 1 << 1,   \/\/ Default as a hidden\/disabled c/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_DefaultSort	includes/imgui.h	/^    ImGuiTableColumnFlags_DefaultSort           = 1 << 2,   \/\/ Default as a sorting column.$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_Disabled	includes/imgui.h	/^    ImGuiTableColumnFlags_Disabled              = 1 << 0,   \/\/ Overriding\/master disable flag/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IndentDisable	includes/imgui.h	/^    ImGuiTableColumnFlags_IndentDisable         = 1 << 17,  \/\/ Ignore current Indent value whe/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IndentEnable	includes/imgui.h	/^    ImGuiTableColumnFlags_IndentEnable          = 1 << 16,  \/\/ Use current Indent value when e/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IndentMask_	includes/imgui.h	/^    ImGuiTableColumnFlags_IndentMask_           = ImGuiTableColumnFlags_IndentEnable | ImGuiTabl/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsEnabled	includes/imgui.h	/^    ImGuiTableColumnFlags_IsEnabled             = 1 << 24,  \/\/ Status: is enabled == not hidde/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsHovered	includes/imgui.h	/^    ImGuiTableColumnFlags_IsHovered             = 1 << 27,  \/\/ Status: is hovered by mouse$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsSorted	includes/imgui.h	/^    ImGuiTableColumnFlags_IsSorted              = 1 << 26,  \/\/ Status: is currently part of th/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsVisible	includes/imgui.h	/^    ImGuiTableColumnFlags_IsVisible             = 1 << 25,  \/\/ Status: is visible == is enable/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoClip	includes/imgui.h	/^    ImGuiTableColumnFlags_NoClip                = 1 << 8,   \/\/ Disable clipping for this colum/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoDirectResize_	includes/imgui.h	/^    ImGuiTableColumnFlags_NoDirectResize_       = 1 << 30,  \/\/ [Internal] Disable user resizin/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoHeaderLabel	includes/imgui.h	/^    ImGuiTableColumnFlags_NoHeaderLabel         = 1 << 12,  \/\/ TableHeadersRow() will submit a/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoHeaderWidth	includes/imgui.h	/^    ImGuiTableColumnFlags_NoHeaderWidth         = 1 << 13,  \/\/ Disable header text width contr/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoHide	includes/imgui.h	/^    ImGuiTableColumnFlags_NoHide                = 1 << 7,   \/\/ Disable ability to hide\/disabl/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoReorder	includes/imgui.h	/^    ImGuiTableColumnFlags_NoReorder             = 1 << 6,   \/\/ Disable manual reordering this /;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoResize	includes/imgui.h	/^    ImGuiTableColumnFlags_NoResize              = 1 << 5,   \/\/ Disable manual resizing.$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoSort	includes/imgui.h	/^    ImGuiTableColumnFlags_NoSort                = 1 << 9,   \/\/ Disable ability to sort on this/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoSortAscending	includes/imgui.h	/^    ImGuiTableColumnFlags_NoSortAscending       = 1 << 10,  \/\/ Disable ability to sort in the /;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoSortDescending	includes/imgui.h	/^    ImGuiTableColumnFlags_NoSortDescending      = 1 << 11,  \/\/ Disable ability to sort in the /;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_None	includes/imgui.h	/^    ImGuiTableColumnFlags_None                  = 0,$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_PreferSortAscending	includes/imgui.h	/^    ImGuiTableColumnFlags_PreferSortAscending   = 1 << 14,  \/\/ Make the initial sort direction/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_PreferSortDescending	includes/imgui.h	/^    ImGuiTableColumnFlags_PreferSortDescending  = 1 << 15,  \/\/ Make the initial sort direction/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_StatusMask_	includes/imgui.h	/^    ImGuiTableColumnFlags_StatusMask_           = ImGuiTableColumnFlags_IsEnabled | ImGuiTableCo/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_WidthFixed	includes/imgui.h	/^    ImGuiTableColumnFlags_WidthFixed            = 1 << 4,   \/\/ Column will not stretch. Prefer/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_WidthMask_	includes/imgui.h	/^    ImGuiTableColumnFlags_WidthMask_            = ImGuiTableColumnFlags_WidthStretch | ImGuiTabl/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_WidthStretch	includes/imgui.h	/^    ImGuiTableColumnFlags_WidthStretch          = 1 << 3,   \/\/ Column will stretch. Preferable/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnIdx	includes/imgui_internal.h	/^typedef ImS16 ImGuiTableColumnIdx;$/;"	t	typeref:typename:ImS16
ImGuiTableColumnSettings	includes/imgui_internal.h	/^    ImGuiTableColumnSettings()$/;"	f	struct:ImGuiTableColumnSettings
ImGuiTableColumnSettings	includes/imgui_internal.h	/^struct ImGuiTableColumnSettings$/;"	s
ImGuiTableColumnSortSpecs	includes/imgui.h	/^    ImGuiTableColumnSortSpecs() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTableColumnSortSpecs
ImGuiTableColumnSortSpecs	includes/imgui.h	/^struct ImGuiTableColumnSortSpecs$/;"	s
ImGuiTableDrawChannelIdx	includes/imgui_internal.h	/^typedef ImU16 ImGuiTableDrawChannelIdx;$/;"	t	typeref:typename:ImU16
ImGuiTableFlags	includes/imgui.h	/^typedef int ImGuiTableFlags;        \/\/ -> enum ImGuiTableFlags_      \/\/ Flags: For BeginTabl/;"	t	typeref:typename:int
ImGuiTableFlags_	includes/imgui.h	/^enum ImGuiTableFlags_$/;"	g
ImGuiTableFlags_Borders	includes/imgui.h	/^    ImGuiTableFlags_Borders                    = ImGuiTableFlags_BordersInner | ImGuiTableFlags_/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersH	includes/imgui.h	/^    ImGuiTableFlags_BordersH                   = ImGuiTableFlags_BordersInnerH | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersInner	includes/imgui.h	/^    ImGuiTableFlags_BordersInner               = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersInnerH	includes/imgui.h	/^    ImGuiTableFlags_BordersInnerH              = 1 << 7,   \/\/ Draw horizontal borders between /;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersInnerV	includes/imgui.h	/^    ImGuiTableFlags_BordersInnerV              = 1 << 9,   \/\/ Draw vertical borders between co/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersOuter	includes/imgui.h	/^    ImGuiTableFlags_BordersOuter               = ImGuiTableFlags_BordersOuterV | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersOuterH	includes/imgui.h	/^    ImGuiTableFlags_BordersOuterH              = 1 << 8,   \/\/ Draw horizontal borders at the t/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersOuterV	includes/imgui.h	/^    ImGuiTableFlags_BordersOuterV              = 1 << 10,  \/\/ Draw vertical borders on the lef/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersV	includes/imgui.h	/^    ImGuiTableFlags_BordersV                   = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_ContextMenuInBody	includes/imgui.h	/^    ImGuiTableFlags_ContextMenuInBody          = 1 << 5,   \/\/ Right-click on columns body\/con/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Hideable	includes/imgui.h	/^    ImGuiTableFlags_Hideable                   = 1 << 2,   \/\/ Enable hiding\/disabling columns/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_HighlightHoveredColumn	includes/imgui.h	/^    ImGuiTableFlags_HighlightHoveredColumn     = 1 << 28,  \/\/ Highlight column headers when ho/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoBordersInBody	includes/imgui.h	/^    ImGuiTableFlags_NoBordersInBody            = 1 << 11,  \/\/ [ALPHA] Disable vertical borders/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoBordersInBodyUntilResize	includes/imgui.h	/^    ImGuiTableFlags_NoBordersInBodyUntilResize = 1 << 12,  \/\/ [ALPHA] Disable vertical borders/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoClip	includes/imgui.h	/^    ImGuiTableFlags_NoClip                     = 1 << 20,  \/\/ Disable clipping rectangle for e/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoHostExtendX	includes/imgui.h	/^    ImGuiTableFlags_NoHostExtendX              = 1 << 16,  \/\/ Make outer width auto-fit to col/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoHostExtendY	includes/imgui.h	/^    ImGuiTableFlags_NoHostExtendY              = 1 << 17,  \/\/ Make outer height stop exactly a/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoKeepColumnsVisible	includes/imgui.h	/^    ImGuiTableFlags_NoKeepColumnsVisible       = 1 << 18,  \/\/ Disable keeping column always mi/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoPadInnerX	includes/imgui.h	/^    ImGuiTableFlags_NoPadInnerX                = 1 << 23,  \/\/ Disable inner padding between co/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoPadOuterX	includes/imgui.h	/^    ImGuiTableFlags_NoPadOuterX                = 1 << 22,  \/\/ Default if BordersOuterV is off./;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoSavedSettings	includes/imgui.h	/^    ImGuiTableFlags_NoSavedSettings            = 1 << 4,   \/\/ Disable persisting columns order/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_None	includes/imgui.h	/^    ImGuiTableFlags_None                       = 0,$/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_PadOuterX	includes/imgui.h	/^    ImGuiTableFlags_PadOuterX                  = 1 << 21,  \/\/ Default if BordersOuterV is on. /;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_PreciseWidths	includes/imgui.h	/^    ImGuiTableFlags_PreciseWidths              = 1 << 19,  \/\/ Disable distributing remainder w/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Reorderable	includes/imgui.h	/^    ImGuiTableFlags_Reorderable                = 1 << 1,   \/\/ Enable reordering columns in hea/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Resizable	includes/imgui.h	/^    ImGuiTableFlags_Resizable                  = 1 << 0,   \/\/ Enable resizing columns.$/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_RowBg	includes/imgui.h	/^    ImGuiTableFlags_RowBg                      = 1 << 6,   \/\/ Set each RowBg color with ImGuiC/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_ScrollX	includes/imgui.h	/^    ImGuiTableFlags_ScrollX                    = 1 << 24,  \/\/ Enable horizontal scrolling. Req/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_ScrollY	includes/imgui.h	/^    ImGuiTableFlags_ScrollY                    = 1 << 25,  \/\/ Enable vertical scrolling. Requi/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingFixedFit	includes/imgui.h	/^    ImGuiTableFlags_SizingFixedFit             = 1 << 13,  \/\/ Columns default to _WidthFixed o/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingFixedSame	includes/imgui.h	/^    ImGuiTableFlags_SizingFixedSame            = 2 << 13,  \/\/ Columns default to _WidthFixed o/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingMask_	includes/imgui.h	/^    ImGuiTableFlags_SizingMask_                = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlag/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingStretchProp	includes/imgui.h	/^    ImGuiTableFlags_SizingStretchProp          = 3 << 13,  \/\/ Columns default to _WidthStretch/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingStretchSame	includes/imgui.h	/^    ImGuiTableFlags_SizingStretchSame          = 4 << 13,  \/\/ Columns default to _WidthStretch/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SortMulti	includes/imgui.h	/^    ImGuiTableFlags_SortMulti                  = 1 << 26,  \/\/ Hold shift when clicking headers/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SortTristate	includes/imgui.h	/^    ImGuiTableFlags_SortTristate               = 1 << 27,  \/\/ Allow no sorting, disable defaul/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Sortable	includes/imgui.h	/^    ImGuiTableFlags_Sortable                   = 1 << 3,   \/\/ Enable sorting. Call TableGetSor/;"	e	enum:ImGuiTableFlags_
ImGuiTableHeaderData	includes/imgui_internal.h	/^struct ImGuiTableHeaderData$/;"	s
ImGuiTableInstanceData	includes/imgui_internal.h	/^    ImGuiTableInstanceData()    { TableInstanceID = 0; LastOuterHeight = LastTopHeadersRowHeight/;"	f	struct:ImGuiTableInstanceData
ImGuiTableInstanceData	includes/imgui_internal.h	/^struct ImGuiTableInstanceData$/;"	s
ImGuiTableRowFlags	includes/imgui.h	/^typedef int ImGuiTableRowFlags;     \/\/ -> enum ImGuiTableRowFlags_   \/\/ Flags: For TableNext/;"	t	typeref:typename:int
ImGuiTableRowFlags_	includes/imgui.h	/^enum ImGuiTableRowFlags_$/;"	g
ImGuiTableRowFlags_Headers	includes/imgui.h	/^    ImGuiTableRowFlags_Headers                  = 1 << 0,   \/\/ Identify header row (set defaul/;"	e	enum:ImGuiTableRowFlags_
ImGuiTableRowFlags_None	includes/imgui.h	/^    ImGuiTableRowFlags_None                     = 0,$/;"	e	enum:ImGuiTableRowFlags_
ImGuiTableSettings	includes/imgui_internal.h	/^    ImGuiTableSettings()        { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTableSettings
ImGuiTableSettings	includes/imgui_internal.h	/^struct ImGuiTableSettings$/;"	s
ImGuiTableSortSpecs	includes/imgui.h	/^    ImGuiTableSortSpecs()       { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTableSortSpecs
ImGuiTableSortSpecs	includes/imgui.h	/^struct ImGuiTableSortSpecs$/;"	s
ImGuiTableTempData	includes/imgui_internal.h	/^    ImGuiTableTempData()        { memset(this, 0, sizeof(*this)); LastTimeActive = -1.0f; }$/;"	f	struct:ImGuiTableTempData
ImGuiTableTempData	includes/imgui_internal.h	/^struct IMGUI_API ImGuiTableTempData$/;"	s
ImGuiTextBuffer	includes/imgui.h	/^    ImGuiTextBuffer()   { }$/;"	f	struct:ImGuiTextBuffer
ImGuiTextBuffer	includes/imgui.h	/^struct ImGuiTextBuffer$/;"	s
ImGuiTextFilter	imgui.cpp	/^ImGuiTextFilter::ImGuiTextFilter(const char* default_filter) \/\/-V1077$/;"	f	class:ImGuiTextFilter	typeref:typename:IM_MSVC_RUNTIME_CHECKS_RESTORE
ImGuiTextFilter	includes/imgui.h	/^struct ImGuiTextFilter$/;"	s
ImGuiTextFlags	includes/imgui_internal.h	/^typedef int ImGuiTextFlags;             \/\/ -> enum ImGuiTextFlags_          \/\/ Flags: for Te/;"	t	typeref:typename:int
ImGuiTextFlags_	includes/imgui_internal.h	/^enum ImGuiTextFlags_$/;"	g
ImGuiTextFlags_NoWidthForLargeClippedText	includes/imgui_internal.h	/^    ImGuiTextFlags_NoWidthForLargeClippedText   = 1 << 0,$/;"	e	enum:ImGuiTextFlags_
ImGuiTextFlags_None	includes/imgui_internal.h	/^    ImGuiTextFlags_None                         = 0,$/;"	e	enum:ImGuiTextFlags_
ImGuiTextIndex	includes/imgui_internal.h	/^struct ImGuiTextIndex$/;"	s
ImGuiTextRange	includes/imgui.h	/^        ImGuiTextRange()                                { b = e = NULL; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange
ImGuiTextRange	includes/imgui.h	/^        ImGuiTextRange(const char* _b, const char* _e)  { b = _b; e = _e; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange
ImGuiTextRange	includes/imgui.h	/^    struct ImGuiTextRange$/;"	s	struct:ImGuiTextFilter
ImGuiTooltipFlags	includes/imgui_internal.h	/^typedef int ImGuiTooltipFlags;          \/\/ -> enum ImGuiTooltipFlags_       \/\/ Flags: for Be/;"	t	typeref:typename:int
ImGuiTooltipFlags_	includes/imgui_internal.h	/^enum ImGuiTooltipFlags_$/;"	g
ImGuiTooltipFlags_None	includes/imgui_internal.h	/^    ImGuiTooltipFlags_None                      = 0,$/;"	e	enum:ImGuiTooltipFlags_
ImGuiTooltipFlags_OverridePrevious	includes/imgui_internal.h	/^    ImGuiTooltipFlags_OverridePrevious          = 1 << 1,   \/\/ Clear\/ignore previously submit/;"	e	enum:ImGuiTooltipFlags_
ImGuiTreeNodeFlags	includes/imgui.h	/^typedef int ImGuiTreeNodeFlags;     \/\/ -> enum ImGuiTreeNodeFlags_   \/\/ Flags: for TreeNode(/;"	t	typeref:typename:int
ImGuiTreeNodeFlagsPrivate_	includes/imgui_internal.h	/^enum ImGuiTreeNodeFlagsPrivate_$/;"	g
ImGuiTreeNodeFlags_	includes/imgui.h	/^enum ImGuiTreeNodeFlags_$/;"	g
ImGuiTreeNodeFlags_AllowItemOverlap	includes/imgui.h	/^    ImGuiTreeNodeFlags_AllowItemOverlap     = ImGuiTreeNodeFlags_AllowOverlap,  \/\/ Renamed in /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_AllowOverlap	includes/imgui.h	/^    ImGuiTreeNodeFlags_AllowOverlap         = 1 << 2,   \/\/ Hit testing to allow subsequent wid/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Bullet	includes/imgui.h	/^    ImGuiTreeNodeFlags_Bullet               = 1 << 9,   \/\/ Display a bullet instead of arrow. /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_ClipLabelForTrailingButton	includes/imgui_internal.h	/^    ImGuiTreeNodeFlags_ClipLabelForTrailingButton = 1 << 28,\/\/ FIXME-WIP: Hard-coded for Colla/;"	e	enum:ImGuiTreeNodeFlagsPrivate_
ImGuiTreeNodeFlags_CollapsingHeader	includes/imgui.h	/^    ImGuiTreeNodeFlags_CollapsingHeader     = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoT/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_DefaultOpen	includes/imgui.h	/^    ImGuiTreeNodeFlags_DefaultOpen          = 1 << 5,   \/\/ Default node to be open$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_FramePadding	includes/imgui.h	/^    ImGuiTreeNodeFlags_FramePadding         = 1 << 10,  \/\/ Use FramePadding (even for an unfra/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Framed	includes/imgui.h	/^    ImGuiTreeNodeFlags_Framed               = 1 << 1,   \/\/ Draw frame with background (e.g. fo/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_LabelSpanAllColumns	includes/imgui.h	/^    ImGuiTreeNodeFlags_LabelSpanAllColumns  = 1 << 15,  \/\/ Label will span all columns of its /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Leaf	includes/imgui.h	/^    ImGuiTreeNodeFlags_Leaf                 = 1 << 8,   \/\/ No collapsing, no arrow (use as a c/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NavLeftJumpsBackHere	includes/imgui.h	/^    ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 17,  \/\/ (WIP) Nav: left direction may move /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoAutoOpenOnLog	includes/imgui.h	/^    ImGuiTreeNodeFlags_NoAutoOpenOnLog      = 1 << 4,   \/\/ Don't automatically and temporarily/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoTreePushOnOpen	includes/imgui.h	/^    ImGuiTreeNodeFlags_NoTreePushOnOpen     = 1 << 3,   \/\/ Don't do a TreePush() when open (e./;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_None	includes/imgui.h	/^    ImGuiTreeNodeFlags_None                 = 0,$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnArrow	includes/imgui.h	/^    ImGuiTreeNodeFlags_OpenOnArrow          = 1 << 7,   \/\/ Open when clicking on the arrow par/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnDoubleClick	includes/imgui.h	/^    ImGuiTreeNodeFlags_OpenOnDoubleClick    = 1 << 6,   \/\/ Open on double-click instead of sim/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnMask_	includes/imgui_internal.h	/^    ImGuiTreeNodeFlags_OpenOnMask_                = ImGuiTreeNodeFlags_OpenOnDoubleClick | ImGui/;"	e	enum:ImGuiTreeNodeFlagsPrivate_
ImGuiTreeNodeFlags_Selected	includes/imgui.h	/^    ImGuiTreeNodeFlags_Selected             = 1 << 0,   \/\/ Draw as selected$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanAllColumns	includes/imgui.h	/^    ImGuiTreeNodeFlags_SpanAllColumns       = 1 << 14,  \/\/ Frame will span all columns of its /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanAvailWidth	includes/imgui.h	/^    ImGuiTreeNodeFlags_SpanAvailWidth       = 1 << 11,  \/\/ Extend hit box to the right-most ed/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanFullWidth	includes/imgui.h	/^    ImGuiTreeNodeFlags_SpanFullWidth        = 1 << 12,  \/\/ Extend hit box to the left-most and/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanLabelWidth	includes/imgui.h	/^    ImGuiTreeNodeFlags_SpanLabelWidth       = 1 << 13,  \/\/ Narrow hit box + narrow hovering hi/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanTextWidth	includes/imgui.h	/^    ImGuiTreeNodeFlags_SpanTextWidth        = ImGuiTreeNodeFlags_SpanLabelWidth,\/\/ Renamed in /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_UpsideDownArrow	includes/imgui_internal.h	/^    ImGuiTreeNodeFlags_UpsideDownArrow            = 1 << 29,\/\/ FIXME-WIP: Turn Down arrow into/;"	e	enum:ImGuiTreeNodeFlagsPrivate_
ImGuiTreeNodeStackData	includes/imgui_internal.h	/^struct ImGuiTreeNodeStackData$/;"	s
ImGuiTriangleVert	rlImGui.cpp	/^static void ImGuiTriangleVert(ImDrawVert& idx_vert)$/;"	f	typeref:typename:void	file:
ImGuiTypingSelectFlags	includes/imgui_internal.h	/^typedef int ImGuiTypingSelectFlags;     \/\/ -> enum ImGuiTypingSelectFlags_  \/\/ Flags: for Ge/;"	t	typeref:typename:int
ImGuiTypingSelectFlags_	includes/imgui_internal.h	/^enum ImGuiTypingSelectFlags_$/;"	g
ImGuiTypingSelectFlags_AllowBackspace	includes/imgui_internal.h	/^    ImGuiTypingSelectFlags_AllowBackspace       = 1 << 0,   \/\/ Backspace to delete character i/;"	e	enum:ImGuiTypingSelectFlags_
ImGuiTypingSelectFlags_AllowSingleCharMode	includes/imgui_internal.h	/^    ImGuiTypingSelectFlags_AllowSingleCharMode  = 1 << 1,   \/\/ Allow "single char" search mode/;"	e	enum:ImGuiTypingSelectFlags_
ImGuiTypingSelectFlags_None	includes/imgui_internal.h	/^    ImGuiTypingSelectFlags_None                 = 0,$/;"	e	enum:ImGuiTypingSelectFlags_
ImGuiTypingSelectRequest	includes/imgui_internal.h	/^struct IMGUI_API ImGuiTypingSelectRequest$/;"	s
ImGuiTypingSelectState	includes/imgui_internal.h	/^    ImGuiTypingSelectState() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTypingSelectState
ImGuiTypingSelectState	includes/imgui_internal.h	/^struct IMGUI_API ImGuiTypingSelectState$/;"	s
ImGuiViewport	includes/imgui.h	/^    ImGuiViewport()     { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiViewport
ImGuiViewport	includes/imgui.h	/^struct ImGuiViewport$/;"	s
ImGuiViewportFlags	includes/imgui.h	/^typedef int ImGuiViewportFlags;     \/\/ -> enum ImGuiViewportFlags_   \/\/ Flags: for ImGuiView/;"	t	typeref:typename:int
ImGuiViewportFlags_	includes/imgui.h	/^enum ImGuiViewportFlags_$/;"	g
ImGuiViewportFlags_IsPlatformMonitor	includes/imgui.h	/^    ImGuiViewportFlags_IsPlatformMonitor        = 1 << 1,   \/\/ Represent a Platform Monitor (u/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_IsPlatformWindow	includes/imgui.h	/^    ImGuiViewportFlags_IsPlatformWindow         = 1 << 0,   \/\/ Represent a Platform Window$/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_None	includes/imgui.h	/^    ImGuiViewportFlags_None                     = 0,$/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_OwnedByApp	includes/imgui.h	/^    ImGuiViewportFlags_OwnedByApp               = 1 << 2,   \/\/ Platform Window: Is created\/ma/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportP	includes/imgui_internal.h	/^    ImGuiViewportP()    { BgFgDrawListsLastFrame[0] = BgFgDrawListsLastFrame[1] = -1; BgFgDrawLi/;"	f	struct:ImGuiViewportP
ImGuiViewportP	includes/imgui_internal.h	/^struct ImGuiViewportP : public ImGuiViewport$/;"	s
ImGuiWindow	imgui.cpp	/^ImGuiWindow::ImGuiWindow(ImGuiContext* ctx, const char* name) : DrawListInst(NULL)$/;"	f	class:ImGuiWindow
ImGuiWindow	includes/imgui_internal.h	/^struct IMGUI_API ImGuiWindow$/;"	s
ImGuiWindowFlags	includes/imgui.h	/^typedef int ImGuiWindowFlags;       \/\/ -> enum ImGuiWindowFlags_     \/\/ Flags: for Begin(), /;"	t	typeref:typename:int
ImGuiWindowFlags_	includes/imgui.h	/^enum ImGuiWindowFlags_$/;"	g
ImGuiWindowFlags_AlwaysAutoResize	includes/imgui.h	/^    ImGuiWindowFlags_AlwaysAutoResize       = 1 << 6,   \/\/ Resize every window to its content /;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysHorizontalScrollbar	includes/imgui.h	/^    ImGuiWindowFlags_AlwaysHorizontalScrollbar=1<< 15,  \/\/ Always show horizontal scrollbar (e/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysUseWindowPadding	includes/imgui.h	/^    ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 30,  \/\/ Obsoleted in 1.90.0: Use ImGuiChild/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysVerticalScrollbar	includes/imgui.h	/^    ImGuiWindowFlags_AlwaysVerticalScrollbar= 1 << 14,  \/\/ Always show vertical scrollbar (eve/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildMenu	includes/imgui.h	/^    ImGuiWindowFlags_ChildMenu              = 1 << 28,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildWindow	includes/imgui.h	/^    ImGuiWindowFlags_ChildWindow            = 1 << 24,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_HorizontalScrollbar	includes/imgui.h	/^    ImGuiWindowFlags_HorizontalScrollbar    = 1 << 11,  \/\/ Allow horizontal scrollbar to appea/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_MenuBar	includes/imgui.h	/^    ImGuiWindowFlags_MenuBar                = 1 << 10,  \/\/ Has a menu-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Modal	includes/imgui.h	/^    ImGuiWindowFlags_Modal                  = 1 << 27,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NavFlattened	includes/imgui.h	/^    ImGuiWindowFlags_NavFlattened           = 1 << 29,  \/\/ Obsoleted in 1.90.9: Use ImGuiChild/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBackground	includes/imgui.h	/^    ImGuiWindowFlags_NoBackground           = 1 << 7,   \/\/ Disable drawing background color (W/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBringToFrontOnFocus	includes/imgui.h	/^    ImGuiWindowFlags_NoBringToFrontOnFocus  = 1 << 13,  \/\/ Disable bringing window to front wh/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoCollapse	includes/imgui.h	/^    ImGuiWindowFlags_NoCollapse             = 1 << 5,   \/\/ Disable user collapsing window by d/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoDecoration	includes/imgui.h	/^    ImGuiWindowFlags_NoDecoration           = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoR/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoFocusOnAppearing	includes/imgui.h	/^    ImGuiWindowFlags_NoFocusOnAppearing     = 1 << 12,  \/\/ Disable taking focus when transitio/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoInputs	includes/imgui.h	/^    ImGuiWindowFlags_NoInputs               = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMouseInputs	includes/imgui.h	/^    ImGuiWindowFlags_NoMouseInputs          = 1 << 9,   \/\/ Disable catching mouse, hovering te/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMove	includes/imgui.h	/^    ImGuiWindowFlags_NoMove                 = 1 << 2,   \/\/ Disable user moving the window$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNav	includes/imgui.h	/^    ImGuiWindowFlags_NoNav                  = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_No/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavFocus	includes/imgui.h	/^    ImGuiWindowFlags_NoNavFocus             = 1 << 17,  \/\/ No focusing toward this window with/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavInputs	includes/imgui.h	/^    ImGuiWindowFlags_NoNavInputs            = 1 << 16,  \/\/ No keyboard\/gamepad navigation wit/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoResize	includes/imgui.h	/^    ImGuiWindowFlags_NoResize               = 1 << 1,   \/\/ Disable user resizing with the lowe/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoSavedSettings	includes/imgui.h	/^    ImGuiWindowFlags_NoSavedSettings        = 1 << 8,   \/\/ Never load\/save settings in .ini f/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollWithMouse	includes/imgui.h	/^    ImGuiWindowFlags_NoScrollWithMouse      = 1 << 4,   \/\/ Disable user vertically scrolling w/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollbar	includes/imgui.h	/^    ImGuiWindowFlags_NoScrollbar            = 1 << 3,   \/\/ Disable scrollbars (window can stil/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoTitleBar	includes/imgui.h	/^    ImGuiWindowFlags_NoTitleBar             = 1 << 0,   \/\/ Disable title-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_None	includes/imgui.h	/^    ImGuiWindowFlags_None                   = 0,$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Popup	includes/imgui.h	/^    ImGuiWindowFlags_Popup                  = 1 << 26,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Tooltip	includes/imgui.h	/^    ImGuiWindowFlags_Tooltip                = 1 << 25,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_UnsavedDocument	includes/imgui.h	/^    ImGuiWindowFlags_UnsavedDocument        = 1 << 18,  \/\/ Display a dot next to the title. Wh/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowRefreshFlags	includes/imgui_internal.h	/^typedef int ImGuiWindowRefreshFlags;    \/\/ -> enum ImGuiWindowRefreshFlags_ \/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiWindowRefreshFlags_	includes/imgui_internal.h	/^enum ImGuiWindowRefreshFlags_$/;"	g
ImGuiWindowRefreshFlags_None	includes/imgui_internal.h	/^    ImGuiWindowRefreshFlags_None                = 0,$/;"	e	enum:ImGuiWindowRefreshFlags_
ImGuiWindowRefreshFlags_RefreshOnFocus	includes/imgui_internal.h	/^    ImGuiWindowRefreshFlags_RefreshOnFocus      = 1 << 2,   \/\/ [EXPERIMENTAL] Always refresh o/;"	e	enum:ImGuiWindowRefreshFlags_
ImGuiWindowRefreshFlags_RefreshOnHover	includes/imgui_internal.h	/^    ImGuiWindowRefreshFlags_RefreshOnHover      = 1 << 1,   \/\/ [EXPERIMENTAL] Always refresh o/;"	e	enum:ImGuiWindowRefreshFlags_
ImGuiWindowRefreshFlags_TryToAvoidRefresh	includes/imgui_internal.h	/^    ImGuiWindowRefreshFlags_TryToAvoidRefresh   = 1 << 0,   \/\/ [EXPERIMENTAL] Try to keep exis/;"	e	enum:ImGuiWindowRefreshFlags_
ImGuiWindowSettings	includes/imgui_internal.h	/^    ImGuiWindowSettings()       { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiWindowSettings
ImGuiWindowSettings	includes/imgui_internal.h	/^struct ImGuiWindowSettings$/;"	s
ImGuiWindowStackData	includes/imgui_internal.h	/^struct ImGuiWindowStackData$/;"	s
ImGuiWindowTempData	includes/imgui_internal.h	/^struct IMGUI_API ImGuiWindowTempData$/;"	s
ImGui_ImplRaylib_BuildFontAtlas	rlImGui.cpp	/^void ImGui_ImplRaylib_BuildFontAtlas(void)$/;"	f	typeref:typename:void
ImGui_ImplRaylib_Init	rlImGui.cpp	/^bool ImGui_ImplRaylib_Init(void)$/;"	f	typeref:typename:bool
ImGui_ImplRaylib_NewFrame	rlImGui.cpp	/^void ImGui_ImplRaylib_NewFrame(void)$/;"	f	typeref:typename:void
ImGui_ImplRaylib_ProcessEvents	rlImGui.cpp	/^bool ImGui_ImplRaylib_ProcessEvents(void)$/;"	f	typeref:typename:bool
ImGui_ImplRaylib_RenderDrawData	rlImGui.cpp	/^void ImGui_ImplRaylib_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplRaylib_Shutdown	rlImGui.cpp	/^void ImGui_ImplRaylib_Shutdown()$/;"	f	typeref:typename:void
ImHashData	imgui.cpp	/^ImGuiID ImHashData(const void* data_p, size_t data_size, ImGuiID seed)$/;"	f	typeref:typename:ImGuiID
ImHashStr	imgui.cpp	/^ImGuiID ImHashStr(const char* data_p, size_t data_size, ImGuiID seed)$/;"	f	typeref:typename:ImGuiID
ImInvLength	includes/imgui_internal.h	/^static inline float  ImInvLength(const ImVec2& lhs, float fail_value)           { float d = (lhs/;"	f	typeref:typename:float
ImIsFloatAboveGuaranteedIntegerPrecision	includes/imgui_internal.h	/^static inline bool   ImIsFloatAboveGuaranteedIntegerPrecision(float f)          { return f <= -1/;"	f	typeref:typename:bool
ImIsPowerOfTwo	includes/imgui_internal.h	/^static inline bool      ImIsPowerOfTwo(ImU64 v)         { return v != 0 && (v & (v - 1)) == 0; }$/;"	f	typeref:typename:bool
ImIsPowerOfTwo	includes/imgui_internal.h	/^static inline bool      ImIsPowerOfTwo(int v)           { return v != 0 && (v & (v - 1)) == 0; }$/;"	f	typeref:typename:bool
ImLengthSqr	includes/imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec2& lhs)                             { return (lhs.x /;"	f	typeref:typename:float
ImLengthSqr	includes/imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec4& lhs)                             { return (lhs.x /;"	f	typeref:typename:float
ImLerp	includes/imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, const ImVec2& t)  { return ImVec2(/;"	f	typeref:typename:ImVec2
ImLerp	includes/imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, float t)          { return ImVec2(/;"	f	typeref:typename:ImVec2
ImLerp	includes/imgui_internal.h	/^static inline ImVec4 ImLerp(const ImVec4& a, const ImVec4& b, float t)          { return ImVec4(/;"	f	typeref:typename:ImVec4
ImLerp	includes/imgui_internal.h	/^template<typename T> static inline T ImLerp(T a, T b, float t)                  { return (T)(a +/;"	f	typeref:typename:T
ImLineClosestPoint	imgui.cpp	/^ImVec2 ImLineClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& p)$/;"	f	typeref:typename:ImVec2
ImLinearRemapClamp	includes/imgui_internal.h	/^static inline float  ImLinearRemapClamp(float s0, float s1, float d0, float d1, float x) { retur/;"	f	typeref:typename:float
ImLinearSweep	includes/imgui_internal.h	/^static inline float  ImLinearSweep(float current, float target, float speed)    { if (current < /;"	f	typeref:typename:float
ImLog	includes/imgui_internal.h	/^static inline double ImLog(double x)            { return log(x); }$/;"	f	typeref:typename:double
ImLog	includes/imgui_internal.h	/^static inline float  ImLog(float x)             { return logf(x); }             \/\/ DragBehavio/;"	f	typeref:typename:float
ImLowerBound	imgui.cpp	/^ImGuiStoragePair* ImLowerBound(ImGuiStoragePair* in_begin, ImGuiStoragePair* in_end, ImGuiID key/;"	f	typeref:typename:ImGuiStoragePair *
ImMax	includes/imgui_internal.h	/^static inline ImVec2 ImMax(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImMax	includes/imgui_internal.h	/^template<typename T> static inline T ImMax(T lhs, T rhs)                        { return lhs >= /;"	f	typeref:typename:T
ImMin	includes/imgui_internal.h	/^static inline ImVec2 ImMin(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImMin	includes/imgui_internal.h	/^template<typename T> static inline T ImMin(T lhs, T rhs)                        { return lhs < r/;"	f	typeref:typename:T
ImModPositive	includes/imgui_internal.h	/^static inline int    ImModPositive(int a, int b)                                { return (a + b)/;"	f	typeref:typename:int
ImMul	includes/imgui_internal.h	/^static inline ImVec2 ImMul(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImNewWrapper	includes/imgui.h	/^struct ImNewWrapper {};$/;"	s
ImParseFormatFindEnd	imgui_widgets.cpp	/^const char* ImParseFormatFindEnd(const char* fmt)$/;"	f	typeref:typename:const char *
ImParseFormatFindStart	imgui_widgets.cpp	/^const char* ImParseFormatFindStart(const char* fmt)$/;"	f	typeref:typename:const char *
ImParseFormatPrecision	imgui_widgets.cpp	/^int ImParseFormatPrecision(const char* fmt, int default_precision)$/;"	f	typeref:typename:int
ImParseFormatSanitizeForPrinting	imgui_widgets.cpp	/^void ImParseFormatSanitizeForPrinting(const char* fmt_in, char* fmt_out, size_t fmt_out_size)$/;"	f	typeref:typename:void
ImParseFormatSanitizeForScanning	imgui_widgets.cpp	/^const char* ImParseFormatSanitizeForScanning(const char* fmt_in, char* fmt_out, size_t fmt_out_s/;"	f	typeref:typename:const char *
ImParseFormatTrimDecorations	imgui_widgets.cpp	/^const char* ImParseFormatTrimDecorations(const char* fmt, char* buf, size_t buf_size)$/;"	f	typeref:typename:const char *
ImPool	includes/imgui_internal.h	/^    ImPool()    { FreeIdx = AliveCount = 0; }$/;"	f	struct:ImPool
ImPool	includes/imgui_internal.h	/^struct ImPool$/;"	s
ImPoolIdx	includes/imgui_internal.h	/^typedef int ImPoolIdx;$/;"	t	typeref:typename:int
ImPow	includes/imgui_internal.h	/^static inline double ImPow(double x, double y)  { return pow(x, y); }$/;"	f	typeref:typename:double
ImPow	includes/imgui_internal.h	/^static inline float  ImPow(float x, float y)    { return powf(x, y); }          \/\/ DragBehavio/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF float
ImQsort	includes/imgui_internal.h	/^static inline void      ImQsort(void* base, size_t count, size_t size_of_element, int(IMGUI_CDEC/;"	f	typeref:typename:void
ImRect	includes/imgui_internal.h	/^    constexpr ImRect()                                        : Min(0.0f, 0.0f), Max(0.0f, 0.0f)/;"	f	struct:ImRect
ImRect	includes/imgui_internal.h	/^    constexpr ImRect(const ImVec2& min, const ImVec2& max)    : Min(min), Max(max)              /;"	f	struct:ImRect
ImRect	includes/imgui_internal.h	/^    constexpr ImRect(const ImVec4& v)                         : Min(v.x, v.y), Max(v.z, v.w)    /;"	f	struct:ImRect
ImRect	includes/imgui_internal.h	/^    constexpr ImRect(float x1, float y1, float x2, float y2)  : Min(x1, y1), Max(x2, y2)        /;"	f	struct:ImRect
ImRect	includes/imgui_internal.h	/^struct IMGUI_API ImRect$/;"	s
ImRotate	includes/imgui_internal.h	/^static inline ImVec2 ImRotate(const ImVec2& v, float cos_a, float sin_a)        { return ImVec2(/;"	f	typeref:typename:ImVec2
ImRsqrt	includes/imgui_internal.h	/^static inline double ImRsqrt(double x)          { return 1.0 \/ sqrt(x); }$/;"	f	typeref:typename:double
ImRsqrt	includes/imgui_internal.h	/^static inline float  ImRsqrt(float x)           { return 1.0f \/ sqrtf(x); }$/;"	f	typeref:typename:float
ImRsqrt	includes/imgui_internal.h	/^static inline float  ImRsqrt(float x)           { return _mm_cvtss_f32(_mm_rsqrt_ss(_mm_set_ss(x/;"	f	typeref:typename:float
ImS16	includes/imgui.h	/^typedef signed short        ImS16;  \/\/ 16-bit signed integer$/;"	t	typeref:typename:signed short
ImS32	includes/imgui.h	/^typedef signed int          ImS32;  \/\/ 32-bit signed integer == int$/;"	t	typeref:typename:signed int
ImS64	includes/imgui.h	/^typedef signed   long long  ImS64;  \/\/ 64-bit signed integer$/;"	t	typeref:typename:signed long long
ImS8	includes/imgui.h	/^typedef signed char         ImS8;   \/\/ 8-bit signed integer$/;"	t	typeref:typename:signed char
ImSaturate	includes/imgui_internal.h	/^static inline float  ImSaturate(float f)                                        { return (f < 0./;"	f	typeref:typename:float
ImSign	includes/imgui_internal.h	/^static inline double ImSign(double x)           { return (x < 0.0) ? -1.0 : (x > 0.0) ? 1.0 : 0./;"	f	typeref:typename:double
ImSign	includes/imgui_internal.h	/^static inline float  ImSign(float x)            { return (x < 0.0f) ? -1.0f : (x > 0.0f) ? 1.0f /;"	f	typeref:typename:float
ImSin	includes/imgui_internal.h	/^#define ImSin(/;"	d
ImSpan	includes/imgui_internal.h	/^    inline ImSpan()                                 { Data = DataEnd = NULL; }$/;"	f	struct:ImSpan
ImSpan	includes/imgui_internal.h	/^    inline ImSpan(T* data, T* data_end)             { Data = data; DataEnd = data_end; }$/;"	f	struct:ImSpan
ImSpan	includes/imgui_internal.h	/^    inline ImSpan(T* data, int size)                { Data = data; DataEnd = data + size; }$/;"	f	struct:ImSpan
ImSpan	includes/imgui_internal.h	/^struct ImSpan$/;"	s
ImSpanAllocator	includes/imgui_internal.h	/^    ImSpanAllocator()                               { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImSpanAllocator
ImSpanAllocator	includes/imgui_internal.h	/^struct ImSpanAllocator$/;"	s
ImSqrt	includes/imgui_internal.h	/^#define ImSqrt(/;"	d
ImStb	imgui_widgets.cpp	/^namespace ImStb$/;"	n	file:
ImStb	includes/imgui_internal.h	/^namespace ImStb { struct STB_TexteditState; }$/;"	n
ImStbTexteditState	includes/imgui_internal.h	/^typedef ImStb::STB_TexteditState ImStbTexteditState;$/;"	t	typeref:typename:ImStb::STB_TexteditState
ImStrSkipBlank	imgui.cpp	/^const char* ImStrSkipBlank(const char* str)$/;"	f	typeref:typename:const char *
ImStrTrimBlanks	imgui.cpp	/^void ImStrTrimBlanks(char* buf)$/;"	f	typeref:typename:void
ImStrbol	imgui.cpp	/^const char* ImStrbol(const char* buf_mid_line, const char* buf_begin) \/\/ find beginning-of-lin/;"	f	typeref:typename:const char *
ImStrchrRange	imgui.cpp	/^const char* ImStrchrRange(const char* str, const char* str_end, char c)$/;"	f	typeref:typename:const char *
ImStrdup	imgui.cpp	/^char* ImStrdup(const char* str)$/;"	f	typeref:typename:char *
ImStrdupcpy	imgui.cpp	/^char* ImStrdupcpy(char* dst, size_t* p_dst_size, const char* src)$/;"	f	typeref:typename:char *
ImStreolRange	imgui.cpp	/^const char* ImStreolRange(const char* str, const char* str_end)$/;"	f	typeref:typename:const char *
ImStricmp	imgui.cpp	/^int ImStricmp(const char* str1, const char* str2)$/;"	f	typeref:typename:int
ImStrimatchlen	imgui_widgets.cpp	/^static int ImStrimatchlen(const char* s1, const char* s1_end, const char* s2)$/;"	f	typeref:typename:int	file:
ImStristr	imgui.cpp	/^const char* ImStristr(const char* haystack, const char* haystack_end, const char* needle, const /;"	f	typeref:typename:const char *
ImStrlenW	imgui.cpp	/^int ImStrlenW(const ImWchar* str)$/;"	f	typeref:typename:int
ImStrncpy	imgui.cpp	/^void ImStrncpy(char* dst, const char* src, size_t count)$/;"	f	typeref:typename:void
ImStrnicmp	imgui.cpp	/^int ImStrnicmp(const char* str1, const char* str2, size_t count)$/;"	f	typeref:typename:int
ImSubClampOverflow	includes/imgui_internal.h	/^template<typename T> static inline T ImSubClampOverflow(T a, T b, T mn, T mx)   { if (b > 0 && (/;"	f	typeref:typename:T
ImSwap	includes/imgui_internal.h	/^template<typename T> static inline void ImSwap(T& a, T& b)                      { T tmp = a; a =/;"	f	typeref:typename:void
ImTextCharFromUtf8	imgui.cpp	/^int ImTextCharFromUtf8(unsigned int* out_char, const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF int
ImTextCharToUtf8	imgui.cpp	/^const char* ImTextCharToUtf8(char out_buf[5], unsigned int c)$/;"	f	typeref:typename:const char *
ImTextCharToUtf8_inline	imgui.cpp	/^static inline int ImTextCharToUtf8_inline(char* buf, int buf_size, unsigned int c)$/;"	f	typeref:typename:int	file:
ImTextCountCharsFromUtf8	imgui.cpp	/^int ImTextCountCharsFromUtf8(const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCountLines	imgui.cpp	/^int ImTextCountLines(const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCountUtf8BytesFromChar	imgui.cpp	/^int ImTextCountUtf8BytesFromChar(const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCountUtf8BytesFromChar	imgui.cpp	/^static inline int ImTextCountUtf8BytesFromChar(unsigned int c)$/;"	f	typeref:typename:int	file:
ImTextCountUtf8BytesFromStr	imgui.cpp	/^int ImTextCountUtf8BytesFromStr(const ImWchar* in_text, const ImWchar* in_text_end)$/;"	f	typeref:typename:int
ImTextFindPreviousUtf8Codepoint	imgui.cpp	/^const char* ImTextFindPreviousUtf8Codepoint(const char* in_text_start, const char* in_text_curr)$/;"	f	typeref:typename:const char *
ImTextStrFromUtf8	imgui.cpp	/^int ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, /;"	f	typeref:typename:int
ImTextStrToUtf8	imgui.cpp	/^int ImTextStrToUtf8(char* out_buf, int out_buf_size, const ImWchar* in_text, const ImWchar* in_t/;"	f	typeref:typename:int
ImTextureID	includes/imgui.h	/^typedef ImU64 ImTextureID;          \/\/ Default: store a pointer or an integer fitting in a poi/;"	t	typeref:typename:ImU64
ImToUpper	includes/imgui_internal.h	/^static inline char      ImToUpper(char c)               { return (c >= 'a' && c <= 'z') ? c &= ~/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF char
ImTriangleArea	includes/imgui_internal.h	/^inline float         ImTriangleArea(const ImVec2& a, const ImVec2& b, const ImVec2& c)          /;"	f	typeref:typename:float
ImTriangleBarycentricCoords	imgui.cpp	/^void ImTriangleBarycentricCoords(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2/;"	f	typeref:typename:void
ImTriangleClosestPoint	imgui.cpp	/^ImVec2 ImTriangleClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p/;"	f	typeref:typename:ImVec2
ImTriangleContainsPoint	imgui.cpp	/^bool ImTriangleContainsPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p)$/;"	f	typeref:typename:bool
ImTriangleIsClockwise	includes/imgui_internal.h	/^inline bool          ImTriangleIsClockwise(const ImVec2& a, const ImVec2& b, const ImVec2& c)   /;"	f	typeref:typename:bool
ImTriangulator	imgui_draw.cpp	/^struct ImTriangulator$/;"	s	file:
ImTriangulatorNode	imgui_draw.cpp	/^struct ImTriangulatorNode$/;"	s	file:
ImTriangulatorNodeSpan	imgui_draw.cpp	/^struct ImTriangulatorNodeSpan$/;"	s	file:
ImTriangulatorNodeType	imgui_draw.cpp	/^enum ImTriangulatorNodeType$/;"	g	file:
ImTriangulatorNodeType_Convex	imgui_draw.cpp	/^    ImTriangulatorNodeType_Convex,$/;"	e	enum:ImTriangulatorNodeType	file:
ImTriangulatorNodeType_Ear	imgui_draw.cpp	/^    ImTriangulatorNodeType_Ear,$/;"	e	enum:ImTriangulatorNodeType	file:
ImTriangulatorNodeType_Reflex	imgui_draw.cpp	/^    ImTriangulatorNodeType_Reflex$/;"	e	enum:ImTriangulatorNodeType	file:
ImTrunc	includes/imgui_internal.h	/^static inline ImVec2 ImTrunc(const ImVec2& v)                                   { return ImVec2(/;"	f	typeref:typename:ImVec2
ImTrunc	includes/imgui_internal.h	/^static inline float  ImTrunc(float f)                                           { return (float)/;"	f	typeref:typename:float
ImU16	includes/imgui.h	/^typedef unsigned short      ImU16;  \/\/ 16-bit unsigned integer$/;"	t	typeref:typename:unsigned short
ImU32	includes/imgui.h	/^typedef unsigned int        ImU32;  \/\/ 32-bit unsigned integer (often used to store packed col/;"	t	typeref:typename:unsigned int
ImU64	includes/imgui.h	/^typedef unsigned long long  ImU64;  \/\/ 64-bit unsigned integer$/;"	t	typeref:typename:unsigned long long
ImU8	includes/imgui.h	/^typedef unsigned char       ImU8;   \/\/ 8-bit unsigned integer$/;"	t	typeref:typename:unsigned char
ImUpperPowerOfTwo	includes/imgui_internal.h	/^static inline int       ImUpperPowerOfTwo(int v)        { v--; v |= v >> 1; v |= v >> 2; v |= v /;"	f	typeref:typename:int
ImVec1	includes/imgui_internal.h	/^    constexpr ImVec1()         : x(0.0f) { }$/;"	f	struct:ImVec1
ImVec1	includes/imgui_internal.h	/^    constexpr ImVec1(float _x) : x(_x) { }$/;"	f	struct:ImVec1
ImVec1	includes/imgui_internal.h	/^struct ImVec1$/;"	s
ImVec2	includes/imgui.h	/^    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }$/;"	f	struct:ImVec2
ImVec2	includes/imgui.h	/^    constexpr ImVec2(float _x, float _y)    : x(_x), y(_y) { }$/;"	f	struct:ImVec2
ImVec2	includes/imgui.h	/^struct ImVec2$/;"	s
ImVec2ih	includes/imgui_internal.h	/^    constexpr ImVec2ih()                           : x(0), y(0) {}$/;"	f	struct:ImVec2ih
ImVec2ih	includes/imgui_internal.h	/^    constexpr ImVec2ih(short _x, short _y)         : x(_x), y(_y) {}$/;"	f	struct:ImVec2ih
ImVec2ih	includes/imgui_internal.h	/^    constexpr explicit ImVec2ih(const ImVec2& rhs) : x((short)rhs.x), y((short)rhs.y) {}$/;"	f	struct:ImVec2ih
ImVec2ih	includes/imgui_internal.h	/^struct ImVec2ih$/;"	s
ImVec4	includes/imgui.h	/^    constexpr ImVec4()                                        : x(0.0f), y(0.0f), z(0.0f), w(0.0/;"	f	struct:ImVec4
ImVec4	includes/imgui.h	/^    constexpr ImVec4(float _x, float _y, float _z, float _w)  : x(_x), y(_y), z(_z), w(_w) { }$/;"	f	struct:ImVec4
ImVec4	includes/imgui.h	/^struct ImVec4$/;"	s
ImVector	includes/imgui.h	/^    inline ImVector()                                       { Size = Capacity = 0; Data = NULL; /;"	f	struct:ImVector
ImVector	includes/imgui.h	/^    inline ImVector(const ImVector<T>& src)                 { Size = Capacity = 0; Data = NULL; /;"	f	struct:ImVector
ImVector	includes/imgui.h	/^struct ImVector$/;"	s
ImWchar	includes/imgui.h	/^typedef ImWchar16 ImWchar;$/;"	t	typeref:typename:ImWchar16
ImWchar	includes/imgui.h	/^typedef ImWchar32 ImWchar;$/;"	t	typeref:typename:ImWchar32
ImWchar16	includes/imgui.h	/^typedef unsigned short ImWchar16;   \/\/ A single decoded U16 character\/code point. We encode t/;"	t	typeref:typename:unsigned short
ImWchar32	includes/imgui.h	/^typedef unsigned int ImWchar32;     \/\/ A single decoded U32 character\/code point. We encode t/;"	t	typeref:typename:unsigned int
Image	imgui_widgets.cpp	/^void ImGui::Image(ImTextureID user_texture_id, const ImVec2& image_size, const ImVec2& uv0, cons/;"	f	class:ImGui	typeref:typename:void
Image	includes/raylib.h	/^typedef struct Image {$/;"	s
Image	includes/raylib.h	/^} Image;$/;"	t	typeref:struct:Image
ImageButton	imgui_widgets.cpp	/^bool ImGui::ImageButton(const char* str_id, ImTextureID user_texture_id, const ImVec2& image_siz/;"	f	class:ImGui	typeref:typename:bool
ImageButtonEx	imgui_widgets.cpp	/^bool ImGui::ImageButtonEx(ImGuiID id, ImTextureID user_texture_id, const ImVec2& image_size, con/;"	f	class:ImGui	typeref:typename:bool
IncludeItemByIndex	includes/imgui.h	/^    inline void     IncludeItemByIndex(int item_index)                  { IncludeItemsByIndex(it/;"	f	struct:ImGuiListClipper	typeref:typename:void
IncludeItemsByIndex	imgui.cpp	/^void ImGuiListClipper::IncludeItemsByIndex(int item_begin, int item_end)$/;"	f	class:ImGuiListClipper	typeref:typename:void
IncludeRangeByIndices	includes/imgui.h	/^    inline void IncludeRangeByIndices(int item_begin, int item_end)      { IncludeItemsByIndex(i/;"	f	struct:ImGuiListClipper	typeref:typename:void
Indent	imgui.cpp	/^void ImGui::Indent(float indent_w)$/;"	f	class:ImGui	typeref:typename:void
Indent	includes/imgui_internal.h	/^    ImVec1                  Indent;                 \/\/ Indentation \/ start position from left/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
IndentSpacing	includes/imgui.h	/^    float       IndentSpacing;              \/\/ Horizontal indentation when e.g. entering a tre/;"	m	struct:ImGuiStyle	typeref:typename:float
Index	imgui_draw.cpp	/^    int                     Index;$/;"	m	struct:ImTriangulatorNode	typeref:typename:int	file:
Index	includes/imgui_internal.h	/^    ImGuiKeyRoutingIndex            Index[ImGuiKey_NamedKey_COUNT]; \/\/ Index of first entry in/;"	m	struct:ImGuiKeyRoutingTable	typeref:typename:ImGuiKeyRoutingIndex[]
Index	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         Index;      \/\/ Column index$/;"	m	struct:ImGuiTableHeaderData	typeref:typename:ImGuiTableColumnIdx
Index	includes/imgui_internal.h	/^    ImGuiTableColumnIdx     Index;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiTableColumnIdx
Index	includes/imgui_internal.h	/^    int         Index;          \/\/ Usually index in a main pool.$/;"	m	struct:ImGuiPtrOrIndex	typeref:typename:int
Index	includes/imgui_internal.h	/^    int         Index;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:int
IndexAdvanceX	includes/imgui.h	/^    ImVector<float>             IndexAdvanceX;      \/\/ 12-16 \/\/ out \/\/            \/\/ Spa/;"	m	struct:ImFont	typeref:typename:ImVector<float>
IndexDuringLayout	includes/imgui_internal.h	/^    ImS16               IndexDuringLayout;      \/\/ Index only used during TabBarLayout(). Tabs/;"	m	struct:ImGuiTabItem	typeref:typename:ImS16
IndexInParent	imgui_demo.cpp	/^    unsigned short              IndexInParent = 0;  \/\/ Maintaining this allows us to implement/;"	m	struct:ExampleTreeNode	typeref:typename:unsigned short	file:
IndexLookup	includes/imgui.h	/^    ImVector<ImWchar>           IndexLookup;        \/\/ 12-16 \/\/ out \/\/            \/\/ Spa/;"	m	struct:ImFont	typeref:typename:ImVector<ImWchar>
IndexWithinEnabledSet	includes/imgui_internal.h	/^    ImGuiTableColumnIdx     IndexWithinEnabledSet;          \/\/ Index within enabled\/visible s/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
IniFilename	includes/imgui.h	/^    const char* IniFilename;                    \/\/ = "imgui.ini"    \/\/ Path to .ini file (im/;"	m	struct:ImGuiIO	typeref:typename:const char *
IniSavingRate	includes/imgui.h	/^    float       IniSavingRate;                  \/\/ = 5.0f           \/\/ Minimum time between /;"	m	struct:ImGuiIO	typeref:typename:float
Init	imgui_draw.cpp	/^void ImTriangulator::Init(const ImVec2* points, int points_count, void* scratch_buffer)$/;"	f	class:ImTriangulator	typeref:typename:void
InitOrLoadWindowSettings	imgui.cpp	/^static void InitOrLoadWindowSettings(ImGuiWindow* window, ImGuiWindowSettings* settings)$/;"	f	typeref:typename:void	file:
InitStretchWeightOrWidth	includes/imgui_internal.h	/^    float                   InitStretchWeightOrWidth;       \/\/ Value passed to TableSetupColum/;"	m	struct:ImGuiTableColumn	typeref:typename:float
InitViewportDrawData	imgui.cpp	/^static void InitViewportDrawData(ImGuiViewportP* viewport)$/;"	f	typeref:typename:void	file:
InitialFlags	includes/imgui_internal.h	/^    ImDrawListFlags InitialFlags;               \/\/ Initial flags at the beginning of the frame/;"	m	struct:ImDrawListSharedData	typeref:typename:ImDrawListFlags
InitialWidth	includes/imgui_internal.h	/^    float       InitialWidth;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:float
Initialize	imgui.cpp	/^void ImGui::Initialize()$/;"	f	class:ImGui	typeref:typename:void
Initialized	includes/imgui_internal.h	/^    bool                    Initialized;$/;"	m	struct:ImGuiContext	typeref:typename:bool
InnerClipRect	includes/imgui_internal.h	/^    ImRect                      InnerClipRect;$/;"	m	struct:ImGuiTable	typeref:typename:ImRect
InnerClipRect	includes/imgui_internal.h	/^    ImRect                  InnerClipRect;                      \/\/ == InnerRect shrunk by Wind/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
InnerDir	imgui.cpp	/^    ImVec2  InnerDir;               \/\/ Normal toward inside$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
InnerDir	imgui.cpp	/^    ImVec2  InnerDir;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:ImVec2	file:
InnerRect	includes/imgui_internal.h	/^    ImRect                      InnerRect;                  \/\/ InnerRect but without decoratio/;"	m	struct:ImGuiTable	typeref:typename:ImRect
InnerRect	includes/imgui_internal.h	/^    ImRect                  InnerRect;                          \/\/ Inner rectangle (omit title/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
InnerWidth	includes/imgui_internal.h	/^    float                       InnerWidth;                 \/\/ User value passed to BeginTable/;"	m	struct:ImGuiTable	typeref:typename:float
InnerWindow	includes/imgui_internal.h	/^    ImGuiWindow*                InnerWindow;                \/\/ Window holding the table data (/;"	m	struct:ImGuiTable	typeref:typename:ImGuiWindow *
InputBuf	imgui_demo.cpp	/^    char                  InputBuf[256];$/;"	m	struct:ExampleAppConsole	typeref:typename:char[256]	file:
InputBuf	includes/imgui.h	/^    char                    InputBuf[256];$/;"	m	struct:ImGuiTextFilter	typeref:typename:char[256]
InputDouble	imgui_widgets.cpp	/^bool ImGui::InputDouble(const char* label, double* v, double step, double step_fast, const char*/;"	f	class:ImGui	typeref:typename:bool
InputEventsNextEventId	includes/imgui_internal.h	/^    ImU32                   InputEventsNextEventId;$/;"	m	struct:ImGuiContext	typeref:typename:ImU32
InputEventsNextMouseSource	includes/imgui_internal.h	/^    ImGuiMouseSource        InputEventsNextMouseSource;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMouseSource
InputEventsQueue	includes/imgui_internal.h	/^    ImVector<ImGuiInputEvent> InputEventsQueue;                 \/\/ Input events which will be /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiInputEvent>
InputEventsTrail	includes/imgui_internal.h	/^    ImVector<ImGuiInputEvent> InputEventsTrail;                 \/\/ Past input events processed/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiInputEvent>
InputFloat	imgui_widgets.cpp	/^bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, const char* for/;"	f	class:ImGui	typeref:typename:bool
InputFloat2	imgui_widgets.cpp	/^bool ImGui::InputFloat2(const char* label, float v[2], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputFloat3	imgui_widgets.cpp	/^bool ImGui::InputFloat3(const char* label, float v[3], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputFloat4	imgui_widgets.cpp	/^bool ImGui::InputFloat4(const char* label, float v[4], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputInt	imgui_widgets.cpp	/^bool ImGui::InputInt(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags fla/;"	f	class:ImGui	typeref:typename:bool
InputInt2	imgui_widgets.cpp	/^bool ImGui::InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputInt3	imgui_widgets.cpp	/^bool ImGui::InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputInt4	imgui_widgets.cpp	/^bool ImGui::InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputLineHeight	includes/imgui.h	/^    float   InputLineHeight;    \/\/ Line height$/;"	m	struct:ImGuiPlatformImeData	typeref:typename:float
InputPos	includes/imgui.h	/^    ImVec2  InputPos;           \/\/ Position of the input cursor$/;"	m	struct:ImGuiPlatformImeData	typeref:typename:ImVec2
InputQueueCharacters	includes/imgui.h	/^    ImVector<ImWchar> InputQueueCharacters;         \/\/ Queue of _characters_ input (obtained b/;"	m	struct:ImGuiIO	typeref:typename:ImVector<ImWchar>
InputQueueSurrogate	includes/imgui.h	/^    ImWchar16   InputQueueSurrogate;                \/\/ For AddInputCharacterUTF16()$/;"	m	struct:ImGuiIO	typeref:typename:ImWchar16
InputScalar	imgui_widgets.cpp	/^bool ImGui::InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_/;"	f	class:ImGui	typeref:typename:bool
InputScalarN	imgui_widgets.cpp	/^bool ImGui::InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int component/;"	f	class:ImGui	typeref:typename:bool
InputText	imgui_widgets.cpp	/^bool ImGui::InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, /;"	f	class:ImGui	typeref:typename:bool
InputTextCalcTextLenAndLineCount	imgui_widgets.cpp	/^static int InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end)$/;"	f	typeref:typename:int	file:
InputTextCalcTextSize	imgui_widgets.cpp	/^static ImVec2 InputTextCalcTextSize(ImGuiContext* ctx, const char* text_begin, const char* text_/;"	f	typeref:typename:ImVec2	file:
InputTextDeactivateHook	imgui_widgets.cpp	/^void ImGui::InputTextDeactivateHook(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
InputTextDeactivatedState	includes/imgui_internal.h	/^    ImGuiInputTextDeactivatedState InputTextDeactivatedState;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputTextDeactivatedState
InputTextEx	imgui_widgets.cpp	/^bool ImGui::InputTextEx(const char* label, const char* hint, char* buf, int buf_size, const ImVe/;"	f	class:ImGui	typeref:typename:bool
InputTextFilterCharacter	imgui_widgets.cpp	/^static bool InputTextFilterCharacter(ImGuiContext* ctx, unsigned int* p_char, ImGuiInputTextFlag/;"	f	typeref:typename:bool	file:
InputTextMultiline	imgui_widgets.cpp	/^bool ImGui::InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size/;"	f	class:ImGui	typeref:typename:bool
InputTextPasswordFont	includes/imgui_internal.h	/^    ImFont                  InputTextPasswordFont;$/;"	m	struct:ImGuiContext	typeref:typename:ImFont
InputTextReconcileUndoState	imgui_widgets.cpp	/^static void InputTextReconcileUndoState(ImGuiInputTextState* state, const char* old_buf, int old/;"	f	typeref:typename:void	file:
InputTextState	includes/imgui_internal.h	/^    ImGuiInputTextState     InputTextState;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputTextState
InputTextWithHint	imgui_widgets.cpp	/^bool ImGui::InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, I/;"	f	class:ImGui	typeref:typename:bool
InsertChars	imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::InsertChars(int pos, const char* new_text, const char* new_text/;"	f	class:ImGuiInputTextCallbackData	typeref:typename:void
InstanceCurrent	includes/imgui_internal.h	/^    ImS16                       InstanceCurrent;            \/\/ Count of BeginTable() calls wit/;"	m	struct:ImGuiTable	typeref:typename:ImS16
InstanceDataExtra	includes/imgui_internal.h	/^    ImVector<ImGuiTableInstanceData>    InstanceDataExtra;  \/\/ FIXME-OPT: Using a small-vector/;"	m	struct:ImGuiTable	typeref:typename:ImVector<ImGuiTableInstanceData>
InstanceDataFirst	includes/imgui_internal.h	/^    ImGuiTableInstanceData      InstanceDataFirst;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableInstanceData
InstanceInteracted	includes/imgui_internal.h	/^    ImS16                       InstanceInteracted;         \/\/ Mark which instance (generally /;"	m	struct:ImGuiTable	typeref:typename:ImS16
InvisibleButton	imgui_widgets.cpp	/^bool ImGui::InvisibleButton(const char* str_id, const ImVec2& size_arg, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsActive	includes/imgui.h	/^    bool                IsActive() const { return !Filters.empty(); }$/;"	f	struct:ImGuiTextFilter	typeref:typename:bool
IsActive	includes/imgui_internal.h	/^    bool                    IsActive;$/;"	m	struct:ImGuiBoxSelectState	typeref:typename:bool
IsActiveIdAliveBeforeTable	includes/imgui_internal.h	/^    bool                        IsActiveIdAliveBeforeTable;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsActiveIdInTable	includes/imgui_internal.h	/^    bool                        IsActiveIdInTable;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsActiveIdUsingNavDir	includes/imgui_internal.h	/^    inline bool             IsActiveIdUsingNavDir(ImGuiDir dir)                         { ImGuiC/;"	f	namespace:ImGui	typeref:typename:bool
IsAliasKey	includes/imgui_internal.h	/^    inline bool             IsAliasKey(ImGuiKey key)                    { return key >= ImGuiKey/;"	f	namespace:ImGui	typeref:typename:bool
IsAlive	includes/imgui_internal.h	/^    bool        IsAlive;$/;"	m	struct:ImGuiDeactivatedItemData	typeref:typename:bool
IsAnyItemActive	imgui.cpp	/^bool ImGui::IsAnyItemActive()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyItemFocused	imgui.cpp	/^bool ImGui::IsAnyItemFocused()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyItemHovered	imgui.cpp	/^bool ImGui::IsAnyItemHovered()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyMouseDown	imgui.cpp	/^bool ImGui::IsAnyMouseDown()$/;"	f	class:ImGui	typeref:typename:bool
IsBeingResized	includes/imgui_internal.h	/^    bool                IsBeingResized;$/;"	m	struct:ImGuiOldColumns	typeref:typename:bool
IsBuilt	includes/imgui.h	/^    bool                        IsBuilt() const             { return Fonts.Size > 0 && TexReady;/;"	f	struct:ImFontAtlas	typeref:typename:bool
IsChild	imgui.ini	/^IsChild=1$/;"	k	section:Window
IsChild	includes/imgui_internal.h	/^    bool        IsChild;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
IsClippedEx	imgui.cpp	/^bool ImGui::IsClippedEx(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
IsContextPopupOpen	includes/imgui_internal.h	/^    bool                        IsContextPopupOpen;         \/\/ Set when default context menu i/;"	m	struct:ImGuiTable	typeref:typename:bool
IsDataType	includes/imgui.h	/^    bool IsDataType(const char* type) const { return DataFrameCount != -1 && strcmp(type, DataTy/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsDefaultDisplayOrder	includes/imgui_internal.h	/^    bool                        IsDefaultDisplayOrder;      \/\/ Set when display order is uncha/;"	m	struct:ImGuiTable	typeref:typename:bool
IsDefaultSizingPolicy	includes/imgui_internal.h	/^    bool                        IsDefaultSizingPolicy;      \/\/ Set if user didn't explicitly s/;"	m	struct:ImGuiTable	typeref:typename:bool
IsDelivery	includes/imgui.h	/^    bool IsDelivery() const                 { return Delivery; }$/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsDragDropActive	imgui.cpp	/^bool ImGui::IsDragDropActive()$/;"	f	class:ImGui	typeref:typename:bool
IsDragDropPayloadBeingAccepted	imgui.cpp	/^bool ImGui::IsDragDropPayloadBeingAccepted()$/;"	f	class:ImGui	typeref:typename:bool
IsEar	imgui_draw.cpp	/^bool ImTriangulator::IsEar(int i0, int i1, int i2, const ImVec2& v0, const ImVec2& v1, const ImV/;"	f	class:ImTriangulator	typeref:typename:bool
IsEnabled	includes/imgui_internal.h	/^    ImU8                    IsEnabled : 1; \/\/ "Visible" in ini file$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImU8:1
IsEnabled	includes/imgui_internal.h	/^    bool                    IsEnabled;                      \/\/ IsUserEnabled && (Flags & ImGui/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsEndIO	includes/imgui_internal.h	/^    bool                    IsEndIO;            \/\/ Set when switching IO from BeginMultiSelect/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:bool
IsExplicitChild	includes/imgui_internal.h	/^    bool                    IsExplicitChild;                    \/\/ Set when passed _ChildWindo/;"	m	struct:ImGuiWindow	typeref:typename:bool
IsFallbackWindow	includes/imgui_internal.h	/^    bool                    IsFallbackWindow;                   \/\/ Set on the "Debug##Default"/;"	m	struct:ImGuiWindow	typeref:typename:bool
IsFirstFrame	includes/imgui_internal.h	/^    bool                IsFirstFrame;$/;"	m	struct:ImGuiOldColumns	typeref:typename:bool
IsFocused	includes/imgui_internal.h	/^    bool                    IsFocused;          \/\/ Set if currently focusing the selection sco/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:bool
IsGamepadKey	includes/imgui_internal.h	/^    inline bool             IsGamepadKey(ImGuiKey key)                  { return key >= ImGuiKey/;"	f	namespace:ImGui	typeref:typename:bool
IsGlyphRangeUnused	imgui_draw.cpp	/^bool ImFont::IsGlyphRangeUnused(unsigned int c_begin, unsigned int c_last)$/;"	f	class:ImFont	typeref:typename:bool
IsInitializing	includes/imgui_internal.h	/^    bool                        IsInitializing;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsInsideRow	includes/imgui_internal.h	/^    bool                        IsInsideRow;                \/\/ Set when inside TableBeginRow()/;"	m	struct:ImGuiTable	typeref:typename:bool
IsInverted	includes/imgui_internal.h	/^    bool        IsInverted() const                  { return Min.x > Max.x || Min.y > Max.y; }$/;"	f	struct:ImRect	typeref:typename:bool
IsItemActivated	imgui.cpp	/^bool ImGui::IsItemActivated()$/;"	f	class:ImGui	typeref:typename:bool
IsItemActive	imgui.cpp	/^bool ImGui::IsItemActive()$/;"	f	class:ImGui	typeref:typename:bool
IsItemClicked	imgui.cpp	/^bool ImGui::IsItemClicked(ImGuiMouseButton mouse_button)$/;"	f	class:ImGui	typeref:typename:bool
IsItemDeactivated	imgui.cpp	/^bool ImGui::IsItemDeactivated()$/;"	f	class:ImGui	typeref:typename:bool
IsItemDeactivatedAfterEdit	imgui.cpp	/^bool ImGui::IsItemDeactivatedAfterEdit()$/;"	f	class:ImGui	typeref:typename:bool
IsItemEdited	imgui.cpp	/^bool ImGui::IsItemEdited()$/;"	f	class:ImGui	typeref:typename:bool
IsItemFocused	imgui.cpp	/^bool ImGui::IsItemFocused()$/;"	f	class:ImGui	typeref:typename:bool
IsItemHovered	imgui.cpp	/^bool ImGui::IsItemHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsItemToggledOpen	imgui.cpp	/^bool ImGui::IsItemToggledOpen()$/;"	f	class:ImGui	typeref:typename:bool
IsItemToggledSelection	imgui.cpp	/^bool ImGui::IsItemToggledSelection()$/;"	f	class:ImGui	typeref:typename:bool
IsItemVisible	imgui.cpp	/^bool ImGui::IsItemVisible()$/;"	f	class:ImGui	typeref:typename:bool
IsKeyChordPotentiallyCharInput	imgui.cpp	/^static bool IsKeyChordPotentiallyCharInput(ImGuiKeyChord key_chord)$/;"	f	typeref:typename:bool	file:
IsKeyChordPressed	imgui.cpp	/^bool ImGui::IsKeyChordPressed(ImGuiKeyChord key_chord)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyChordPressed	imgui.cpp	/^bool ImGui::IsKeyChordPressed(ImGuiKeyChord key_chord, ImGuiInputFlags flags, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyDown	imgui.cpp	/^bool ImGui::IsKeyDown(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyDown	imgui.cpp	/^bool ImGui::IsKeyDown(ImGuiKey key, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyPressed	imgui.cpp	/^bool ImGui::IsKeyPressed(ImGuiKey key, ImGuiInputFlags flags, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyPressed	imgui.cpp	/^bool ImGui::IsKeyPressed(ImGuiKey key, bool repeat)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyReleased	imgui.cpp	/^bool ImGui::IsKeyReleased(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyReleased	imgui.cpp	/^bool ImGui::IsKeyReleased(ImGuiKey key, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyboardKey	includes/imgui_internal.h	/^    inline bool             IsKeyboardKey(ImGuiKey key)                 { return key >= ImGuiKey/;"	f	namespace:ImGui	typeref:typename:bool
IsKeyboardSetRange	includes/imgui_internal.h	/^    bool                    IsKeyboardSetRange; \/\/ Set by BeginMultiSelect() when using Shift+/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:bool
IsLRModKey	includes/imgui_internal.h	/^    inline bool             IsLRModKey(ImGuiKey key)                    { return key >= ImGuiKey/;"	f	namespace:ImGui	typeref:typename:bool
IsLayoutLocked	includes/imgui_internal.h	/^    bool                        IsLayoutLocked;             \/\/ Set by TableUpdateLayout() whic/;"	m	struct:ImGuiTable	typeref:typename:bool
IsLegacyKey	includes/imgui_internal.h	/^    inline bool             IsLegacyKey(ImGuiKey key)                   { return key >= ImGuiKey/;"	f	namespace:ImGui	typeref:typename:bool
IsLegacyNativeDupe	imgui_demo.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };$/;"	f	struct:ShowDemoWindowInputs::funcs	typeref:typename:bool	file:
IsLoaded	includes/imgui.h	/^    bool                        IsLoaded() const                    { return ContainerAtlas != N/;"	f	struct:ImFont	typeref:typename:bool
IsMouseClicked	imgui.cpp	/^bool ImGui::IsMouseClicked(ImGuiMouseButton button, ImGuiInputFlags flags, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseClicked	imgui.cpp	/^bool ImGui::IsMouseClicked(ImGuiMouseButton button, bool repeat)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDoubleClicked	imgui.cpp	/^bool ImGui::IsMouseDoubleClicked(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDoubleClicked	imgui.cpp	/^bool ImGui::IsMouseDoubleClicked(ImGuiMouseButton button, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDown	imgui.cpp	/^bool ImGui::IsMouseDown(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDown	imgui.cpp	/^bool ImGui::IsMouseDown(ImGuiMouseButton button, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDragPastThreshold	imgui.cpp	/^bool ImGui::IsMouseDragPastThreshold(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDragging	imgui.cpp	/^bool ImGui::IsMouseDragging(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseHoveringRect	imgui.cpp	/^bool ImGui::IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseKey	includes/imgui_internal.h	/^    inline bool             IsMouseKey(ImGuiKey key)                    { return key >= ImGuiKey/;"	f	namespace:ImGui	typeref:typename:bool
IsMousePosValid	imgui.cpp	/^bool ImGui::IsMousePosValid(const ImVec2* mouse_pos)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseReleased	imgui.cpp	/^bool ImGui::IsMouseReleased(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseReleased	imgui.cpp	/^bool ImGui::IsMouseReleased(ImGuiMouseButton button, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseReleasedWithDelay	imgui.cpp	/^bool ImGui::IsMouseReleasedWithDelay(ImGuiMouseButton button, float delay)$/;"	f	class:ImGui	typeref:typename:bool
IsNamedKey	includes/imgui_internal.h	/^    inline bool             IsNamedKey(ImGuiKey key)                    { return key >= ImGuiKey/;"	f	namespace:ImGui	typeref:typename:bool
IsNamedKeyOrMod	includes/imgui_internal.h	/^    inline bool             IsNamedKeyOrMod(ImGuiKey key)               { return (key >= ImGuiKe/;"	f	namespace:ImGui	typeref:typename:bool
IsPacked	includes/imgui.h	/^    bool IsPacked() const           { return X != 0xFFFF; }$/;"	f	struct:ImFontAtlasCustomRect	typeref:typename:bool
IsPopupOpen	imgui.cpp	/^bool ImGui::IsPopupOpen(ImGuiID id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
IsPopupOpen	imgui.cpp	/^bool ImGui::IsPopupOpen(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
IsPreserveWidthAuto	includes/imgui_internal.h	/^    bool                    IsPreserveWidthAuto;$/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsPreview	includes/imgui.h	/^    bool IsPreview() const                  { return Preview; }$/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsRectVisible	imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max)$/;"	f	class:ImGui	typeref:typename:bool
IsRectVisible	imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:bool
IsRequestOutput	includes/imgui_internal.h	/^    bool                    IsRequestOutput;                \/\/ Return value for TableSetColumn/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsResetAllRequest	includes/imgui_internal.h	/^    bool                        IsResetAllRequest;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsResetDisplayOrderRequest	includes/imgui_internal.h	/^    bool                        IsResetDisplayOrderRequest;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsRootOfOpenMenuSet	imgui_widgets.cpp	/^static bool IsRootOfOpenMenuSet()$/;"	f	typeref:typename:bool	file:
IsSameLine	includes/imgui_internal.h	/^    bool                    IsSameLine;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
IsSetPos	includes/imgui_internal.h	/^    bool                    IsSetPos;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
IsSettingsDirty	includes/imgui_internal.h	/^    bool                        IsSettingsDirty;            \/\/ Set when table settings have ch/;"	m	struct:ImGuiTable	typeref:typename:bool
IsSettingsRequestLoad	includes/imgui_internal.h	/^    bool                        IsSettingsRequestLoad;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsSkipItems	includes/imgui_internal.h	/^    bool                    IsSkipItems;                    \/\/ Do we want item submissions to /;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsSortSpecsDirty	includes/imgui_internal.h	/^    bool                        IsSortSpecsDirty;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsStartedFromVoid	includes/imgui_internal.h	/^    bool                    IsStartedFromVoid;  \/\/ Starting click was not from an item.$/;"	m	struct:ImGuiBoxSelectState	typeref:typename:bool
IsStartedSetNavIdOnce	includes/imgui_internal.h	/^    bool                    IsStartedSetNavIdOnce;$/;"	m	struct:ImGuiBoxSelectState	typeref:typename:bool
IsStarting	includes/imgui_internal.h	/^    bool                    IsStarting;$/;"	m	struct:ImGuiBoxSelectState	typeref:typename:bool
IsStretch	includes/imgui_internal.h	/^    ImU8                    IsStretch : 1;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImU8:1
IsUnfrozenRows	includes/imgui_internal.h	/^    bool                        IsUnfrozenRows;             \/\/ Set when we got past the frozen/;"	m	struct:ImGuiTable	typeref:typename:bool
IsUserEnabled	includes/imgui_internal.h	/^    bool                    IsUserEnabled;                  \/\/ Is the column not marked Hidden/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsUserEnabledNextFrame	includes/imgui_internal.h	/^    bool                    IsUserEnabledNextFrame;$/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsUsingHeaders	includes/imgui_internal.h	/^    bool                        IsUsingHeaders;             \/\/ Set when the first row had the /;"	m	struct:ImGuiTable	typeref:typename:bool
IsVisibleX	includes/imgui_internal.h	/^    bool                    IsVisibleX;                     \/\/ Is actually in view (e.g. overl/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsVisibleY	includes/imgui_internal.h	/^    bool                    IsVisibleY;$/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsWindowAbove	imgui.cpp	/^bool ImGui::IsWindowAbove(ImGuiWindow* potential_above, ImGuiWindow* potential_below)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowActiveAndVisible	imgui.cpp	/^static bool IsWindowActiveAndVisible(ImGuiWindow* window)$/;"	f	typeref:typename:bool	file:
IsWindowAppearing	imgui.cpp	/^bool ImGui::IsWindowAppearing()$/;"	f	class:ImGui	typeref:typename:bool
IsWindowChildOf	imgui.cpp	/^bool ImGui::IsWindowChildOf(ImGuiWindow* window, ImGuiWindow* potential_parent, bool popup_hiera/;"	f	class:ImGui	typeref:typename:bool
IsWindowCollapsed	imgui.cpp	/^bool ImGui::IsWindowCollapsed()$/;"	f	class:ImGui	typeref:typename:bool
IsWindowContentHoverable	imgui.cpp	/^bool ImGui::IsWindowContentHoverable(ImGuiWindow* window, ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowFocused	imgui.cpp	/^bool ImGui::IsWindowFocused(ImGuiFocusedFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowHovered	imgui.cpp	/^bool ImGui::IsWindowHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowNavFocusable	imgui.cpp	/^bool ImGui::IsWindowNavFocusable(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowWithinBeginStackOf	imgui.cpp	/^bool ImGui::IsWindowWithinBeginStackOf(ImGuiWindow* window, ImGuiWindow* potential_parent)$/;"	f	class:ImGui	typeref:typename:bool
ItemAdd	imgui.cpp	/^bool ImGui::ItemAdd(const ImRect& bb, ImGuiID id, const ImRect* nav_bb_arg, ImGuiItemFlags extra/;"	f	class:ImGui	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF bool
ItemFlags	includes/imgui_internal.h	/^    ImGuiItemFlags              ItemFlags;          \/\/ Currently only tested\/used for ImGuiIt/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiItemFlags
ItemFlags	includes/imgui_internal.h	/^    ImGuiItemFlags          ItemFlags;          \/\/ See ImGuiItemFlags_ (called 'InFlags' befor/;"	m	struct:ImGuiLastItemData	typeref:typename:ImGuiItemFlags
ItemFlags	includes/imgui_internal.h	/^    ImGuiItemFlags          ItemFlags;  \/\/ Used for nav landing$/;"	m	struct:ImGuiTreeNodeStackData	typeref:typename:ImGuiItemFlags
ItemFlags	includes/imgui_internal.h	/^    ImGuiItemFlags      ItemFlags;      \/\/ ????,Move    \/\/ Best candidate item flags$/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiItemFlags
ItemFlagsStack	includes/imgui_internal.h	/^    ImVector<ImGuiItemFlags>        ItemFlagsStack;             \/\/ Stack for PushItemFlag()\/P/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiItemFlags>
ItemHandleShortcut	imgui.cpp	/^void ImGui::ItemHandleShortcut(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
ItemHoverable	imgui.cpp	/^bool ImGui::ItemHoverable(const ImRect& bb, ImGuiID id, ImGuiItemFlags item_flags)$/;"	f	class:ImGui	typeref:typename:bool
ItemInnerSpacing	includes/imgui.h	/^    ImVec2      ItemInnerSpacing;           \/\/ Horizontal and vertical spacing between within /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
ItemSize	imgui.cpp	/^void ImGui::ItemSize(const ImVec2& size, float text_baseline_y)$/;"	f	class:ImGui	typeref:typename:IM_MSVC_RUNTIME_CHECKS_RESTORE IM_MSVC_RUNTIME_CHECKS_OFF void
ItemSize	includes/imgui_internal.h	/^    inline void             ItemSize(const ImRect& bb, float text_baseline_y = -1.0f) { ItemSize/;"	f	namespace:ImGui	typeref:typename:void
ItemSpacing	includes/imgui.h	/^    ImVec2      ItemSpacing;                \/\/ Horizontal and vertical spacing between widgets/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
ItemSpacingY	includes/imgui_internal.h	/^    float               ItemSpacingY;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ItemUnclipByLog	includes/imgui_internal.h	/^    bool                    ItemUnclipByLog;                    \/\/ Disable ItemAdd() clipping,/;"	m	struct:ImGuiContext	typeref:typename:bool
ItemWidth	includes/imgui_internal.h	/^    float                   ItemWidth;                      \/\/ Current item width for the colu/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ItemWidth	includes/imgui_internal.h	/^    float                   ItemWidth;              \/\/ Current item width (>0.0: width in pixe/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
ItemWidthDefault	includes/imgui_internal.h	/^    float                   ItemWidthDefault;$/;"	m	struct:ImGuiWindow	typeref:typename:float
ItemWidthStack	includes/imgui_internal.h	/^    ImVector<float>         ItemWidthStack;         \/\/ Store item widths to restore (attention/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<float>
Items	imgui_demo.cpp	/^    ImVector<ExampleAsset> Items;               \/\/ Our items$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:ImVector<ExampleAsset>	file:
Items	imgui_demo.cpp	/^    ImVector<ImGuiID>           Items[2];               \/\/ ID is index into ExampleName[]$/;"	m	struct:ExampleDualListBox	typeref:typename:ImVector<ImGuiID>[2]	file:
Items	imgui_demo.cpp	/^    ImVector<char*>       Items;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<char * >	file:
ItemsCount	includes/imgui.h	/^    int                         ItemsCount;     \/\/  ms:w, app:r     \/        app:r   \/\/ 'in/;"	m	struct:ImGuiMultiSelectIO	typeref:typename:int
ItemsCount	includes/imgui.h	/^    int             ItemsCount;         \/\/ [Internal] Number of items$/;"	m	struct:ImGuiListClipper	typeref:typename:int
ItemsFrozen	includes/imgui_internal.h	/^    int                             ItemsFrozen;$/;"	m	struct:ImGuiListClipperData	typeref:typename:int
ItemsHeight	includes/imgui.h	/^    float           ItemsHeight;        \/\/ [Internal] Height of item after a first step and it/;"	m	struct:ImGuiListClipper	typeref:typename:float
Items_ArrayGetter	imgui_widgets.cpp	/^static const char* Items_ArrayGetter(void* data, int idx)$/;"	f	typeref:typename:const char *	file:
Items_SingleStringGetter	imgui_widgets.cpp	/^static const char* Items_SingleStringGetter(void* data, int idx)$/;"	f	typeref:typename:const char *	file:
KEY_A	includes/raylib.h	/^    KEY_A               = 65,       \/\/ Key: A | a$/;"	e	enum:__anonce11f6a40403
KEY_APOSTROPHE	includes/raylib.h	/^    KEY_APOSTROPHE      = 39,       \/\/ Key: '$/;"	e	enum:__anonce11f6a40403
KEY_B	includes/raylib.h	/^    KEY_B               = 66,       \/\/ Key: B | b$/;"	e	enum:__anonce11f6a40403
KEY_BACK	includes/raylib.h	/^    KEY_BACK            = 4,        \/\/ Key: Android back button$/;"	e	enum:__anonce11f6a40403
KEY_BACKSLASH	includes/raylib.h	/^    KEY_BACKSLASH       = 92,       \/\/ Key: '\\'$/;"	e	enum:__anonce11f6a40403
KEY_BACKSPACE	includes/raylib.h	/^    KEY_BACKSPACE       = 259,      \/\/ Key: Backspace$/;"	e	enum:__anonce11f6a40403
KEY_C	includes/raylib.h	/^    KEY_C               = 67,       \/\/ Key: C | c$/;"	e	enum:__anonce11f6a40403
KEY_CAPS_LOCK	includes/raylib.h	/^    KEY_CAPS_LOCK       = 280,      \/\/ Key: Caps lock$/;"	e	enum:__anonce11f6a40403
KEY_COMMA	includes/raylib.h	/^    KEY_COMMA           = 44,       \/\/ Key: ,$/;"	e	enum:__anonce11f6a40403
KEY_D	includes/raylib.h	/^    KEY_D               = 68,       \/\/ Key: D | d$/;"	e	enum:__anonce11f6a40403
KEY_DELETE	includes/raylib.h	/^    KEY_DELETE          = 261,      \/\/ Key: Del$/;"	e	enum:__anonce11f6a40403
KEY_DOWN	includes/raylib.h	/^    KEY_DOWN            = 264,      \/\/ Key: Cursor down$/;"	e	enum:__anonce11f6a40403
KEY_E	includes/raylib.h	/^    KEY_E               = 69,       \/\/ Key: E | e$/;"	e	enum:__anonce11f6a40403
KEY_EIGHT	includes/raylib.h	/^    KEY_EIGHT           = 56,       \/\/ Key: 8$/;"	e	enum:__anonce11f6a40403
KEY_END	includes/raylib.h	/^    KEY_END             = 269,      \/\/ Key: End$/;"	e	enum:__anonce11f6a40403
KEY_ENTER	includes/raylib.h	/^    KEY_ENTER           = 257,      \/\/ Key: Enter$/;"	e	enum:__anonce11f6a40403
KEY_EQUAL	includes/raylib.h	/^    KEY_EQUAL           = 61,       \/\/ Key: =$/;"	e	enum:__anonce11f6a40403
KEY_ESCAPE	includes/raylib.h	/^    KEY_ESCAPE          = 256,      \/\/ Key: Esc$/;"	e	enum:__anonce11f6a40403
KEY_F	includes/raylib.h	/^    KEY_F               = 70,       \/\/ Key: F | f$/;"	e	enum:__anonce11f6a40403
KEY_F1	includes/raylib.h	/^    KEY_F1              = 290,      \/\/ Key: F1$/;"	e	enum:__anonce11f6a40403
KEY_F10	includes/raylib.h	/^    KEY_F10             = 299,      \/\/ Key: F10$/;"	e	enum:__anonce11f6a40403
KEY_F11	includes/raylib.h	/^    KEY_F11             = 300,      \/\/ Key: F11$/;"	e	enum:__anonce11f6a40403
KEY_F12	includes/raylib.h	/^    KEY_F12             = 301,      \/\/ Key: F12$/;"	e	enum:__anonce11f6a40403
KEY_F2	includes/raylib.h	/^    KEY_F2              = 291,      \/\/ Key: F2$/;"	e	enum:__anonce11f6a40403
KEY_F3	includes/raylib.h	/^    KEY_F3              = 292,      \/\/ Key: F3$/;"	e	enum:__anonce11f6a40403
KEY_F4	includes/raylib.h	/^    KEY_F4              = 293,      \/\/ Key: F4$/;"	e	enum:__anonce11f6a40403
KEY_F5	includes/raylib.h	/^    KEY_F5              = 294,      \/\/ Key: F5$/;"	e	enum:__anonce11f6a40403
KEY_F6	includes/raylib.h	/^    KEY_F6              = 295,      \/\/ Key: F6$/;"	e	enum:__anonce11f6a40403
KEY_F7	includes/raylib.h	/^    KEY_F7              = 296,      \/\/ Key: F7$/;"	e	enum:__anonce11f6a40403
KEY_F8	includes/raylib.h	/^    KEY_F8              = 297,      \/\/ Key: F8$/;"	e	enum:__anonce11f6a40403
KEY_F9	includes/raylib.h	/^    KEY_F9              = 298,      \/\/ Key: F9$/;"	e	enum:__anonce11f6a40403
KEY_FIVE	includes/raylib.h	/^    KEY_FIVE            = 53,       \/\/ Key: 5$/;"	e	enum:__anonce11f6a40403
KEY_FOUR	includes/raylib.h	/^    KEY_FOUR            = 52,       \/\/ Key: 4$/;"	e	enum:__anonce11f6a40403
KEY_G	includes/raylib.h	/^    KEY_G               = 71,       \/\/ Key: G | g$/;"	e	enum:__anonce11f6a40403
KEY_GRAVE	includes/raylib.h	/^    KEY_GRAVE           = 96,       \/\/ Key: `$/;"	e	enum:__anonce11f6a40403
KEY_H	includes/raylib.h	/^    KEY_H               = 72,       \/\/ Key: H | h$/;"	e	enum:__anonce11f6a40403
KEY_HOME	includes/raylib.h	/^    KEY_HOME            = 268,      \/\/ Key: Home$/;"	e	enum:__anonce11f6a40403
KEY_I	includes/raylib.h	/^    KEY_I               = 73,       \/\/ Key: I | i$/;"	e	enum:__anonce11f6a40403
KEY_INSERT	includes/raylib.h	/^    KEY_INSERT          = 260,      \/\/ Key: Ins$/;"	e	enum:__anonce11f6a40403
KEY_J	includes/raylib.h	/^    KEY_J               = 74,       \/\/ Key: J | j$/;"	e	enum:__anonce11f6a40403
KEY_K	includes/raylib.h	/^    KEY_K               = 75,       \/\/ Key: K | k$/;"	e	enum:__anonce11f6a40403
KEY_KB_MENU	includes/raylib.h	/^    KEY_KB_MENU         = 348,      \/\/ Key: KB menu$/;"	e	enum:__anonce11f6a40403
KEY_KP_0	includes/raylib.h	/^    KEY_KP_0            = 320,      \/\/ Key: Keypad 0$/;"	e	enum:__anonce11f6a40403
KEY_KP_1	includes/raylib.h	/^    KEY_KP_1            = 321,      \/\/ Key: Keypad 1$/;"	e	enum:__anonce11f6a40403
KEY_KP_2	includes/raylib.h	/^    KEY_KP_2            = 322,      \/\/ Key: Keypad 2$/;"	e	enum:__anonce11f6a40403
KEY_KP_3	includes/raylib.h	/^    KEY_KP_3            = 323,      \/\/ Key: Keypad 3$/;"	e	enum:__anonce11f6a40403
KEY_KP_4	includes/raylib.h	/^    KEY_KP_4            = 324,      \/\/ Key: Keypad 4$/;"	e	enum:__anonce11f6a40403
KEY_KP_5	includes/raylib.h	/^    KEY_KP_5            = 325,      \/\/ Key: Keypad 5$/;"	e	enum:__anonce11f6a40403
KEY_KP_6	includes/raylib.h	/^    KEY_KP_6            = 326,      \/\/ Key: Keypad 6$/;"	e	enum:__anonce11f6a40403
KEY_KP_7	includes/raylib.h	/^    KEY_KP_7            = 327,      \/\/ Key: Keypad 7$/;"	e	enum:__anonce11f6a40403
KEY_KP_8	includes/raylib.h	/^    KEY_KP_8            = 328,      \/\/ Key: Keypad 8$/;"	e	enum:__anonce11f6a40403
KEY_KP_9	includes/raylib.h	/^    KEY_KP_9            = 329,      \/\/ Key: Keypad 9$/;"	e	enum:__anonce11f6a40403
KEY_KP_ADD	includes/raylib.h	/^    KEY_KP_ADD          = 334,      \/\/ Key: Keypad +$/;"	e	enum:__anonce11f6a40403
KEY_KP_DECIMAL	includes/raylib.h	/^    KEY_KP_DECIMAL      = 330,      \/\/ Key: Keypad .$/;"	e	enum:__anonce11f6a40403
KEY_KP_DIVIDE	includes/raylib.h	/^    KEY_KP_DIVIDE       = 331,      \/\/ Key: Keypad \/$/;"	e	enum:__anonce11f6a40403
KEY_KP_ENTER	includes/raylib.h	/^    KEY_KP_ENTER        = 335,      \/\/ Key: Keypad Enter$/;"	e	enum:__anonce11f6a40403
KEY_KP_EQUAL	includes/raylib.h	/^    KEY_KP_EQUAL        = 336,      \/\/ Key: Keypad =$/;"	e	enum:__anonce11f6a40403
KEY_KP_MULTIPLY	includes/raylib.h	/^    KEY_KP_MULTIPLY     = 332,      \/\/ Key: Keypad *$/;"	e	enum:__anonce11f6a40403
KEY_KP_SUBTRACT	includes/raylib.h	/^    KEY_KP_SUBTRACT     = 333,      \/\/ Key: Keypad -$/;"	e	enum:__anonce11f6a40403
KEY_L	includes/raylib.h	/^    KEY_L               = 76,       \/\/ Key: L | l$/;"	e	enum:__anonce11f6a40403
KEY_LEFT	includes/raylib.h	/^    KEY_LEFT            = 263,      \/\/ Key: Cursor left$/;"	e	enum:__anonce11f6a40403
KEY_LEFT_ALT	includes/raylib.h	/^    KEY_LEFT_ALT        = 342,      \/\/ Key: Alt left$/;"	e	enum:__anonce11f6a40403
KEY_LEFT_BRACKET	includes/raylib.h	/^    KEY_LEFT_BRACKET    = 91,       \/\/ Key: [$/;"	e	enum:__anonce11f6a40403
KEY_LEFT_CONTROL	includes/raylib.h	/^    KEY_LEFT_CONTROL    = 341,      \/\/ Key: Control left$/;"	e	enum:__anonce11f6a40403
KEY_LEFT_SHIFT	includes/raylib.h	/^    KEY_LEFT_SHIFT      = 340,      \/\/ Key: Shift left$/;"	e	enum:__anonce11f6a40403
KEY_LEFT_SUPER	includes/raylib.h	/^    KEY_LEFT_SUPER      = 343,      \/\/ Key: Super left$/;"	e	enum:__anonce11f6a40403
KEY_M	includes/raylib.h	/^    KEY_M               = 77,       \/\/ Key: M | m$/;"	e	enum:__anonce11f6a40403
KEY_MENU	includes/raylib.h	/^    KEY_MENU            = 5,        \/\/ Key: Android menu button$/;"	e	enum:__anonce11f6a40403
KEY_MINUS	includes/raylib.h	/^    KEY_MINUS           = 45,       \/\/ Key: -$/;"	e	enum:__anonce11f6a40403
KEY_N	includes/raylib.h	/^    KEY_N               = 78,       \/\/ Key: N | n$/;"	e	enum:__anonce11f6a40403
KEY_NINE	includes/raylib.h	/^    KEY_NINE            = 57,       \/\/ Key: 9$/;"	e	enum:__anonce11f6a40403
KEY_NULL	includes/raylib.h	/^    KEY_NULL            = 0,        \/\/ Key: NULL, used for no key pressed$/;"	e	enum:__anonce11f6a40403
KEY_NUM_LOCK	includes/raylib.h	/^    KEY_NUM_LOCK        = 282,      \/\/ Key: Num lock$/;"	e	enum:__anonce11f6a40403
KEY_O	includes/raylib.h	/^    KEY_O               = 79,       \/\/ Key: O | o$/;"	e	enum:__anonce11f6a40403
KEY_ONE	includes/raylib.h	/^    KEY_ONE             = 49,       \/\/ Key: 1$/;"	e	enum:__anonce11f6a40403
KEY_P	includes/raylib.h	/^    KEY_P               = 80,       \/\/ Key: P | p$/;"	e	enum:__anonce11f6a40403
KEY_PAGE_DOWN	includes/raylib.h	/^    KEY_PAGE_DOWN       = 267,      \/\/ Key: Page down$/;"	e	enum:__anonce11f6a40403
KEY_PAGE_UP	includes/raylib.h	/^    KEY_PAGE_UP         = 266,      \/\/ Key: Page up$/;"	e	enum:__anonce11f6a40403
KEY_PAUSE	includes/raylib.h	/^    KEY_PAUSE           = 284,      \/\/ Key: Pause$/;"	e	enum:__anonce11f6a40403
KEY_PERIOD	includes/raylib.h	/^    KEY_PERIOD          = 46,       \/\/ Key: .$/;"	e	enum:__anonce11f6a40403
KEY_PRINT_SCREEN	includes/raylib.h	/^    KEY_PRINT_SCREEN    = 283,      \/\/ Key: Print screen$/;"	e	enum:__anonce11f6a40403
KEY_Q	includes/raylib.h	/^    KEY_Q               = 81,       \/\/ Key: Q | q$/;"	e	enum:__anonce11f6a40403
KEY_R	includes/raylib.h	/^    KEY_R               = 82,       \/\/ Key: R | r$/;"	e	enum:__anonce11f6a40403
KEY_RIGHT	includes/raylib.h	/^    KEY_RIGHT           = 262,      \/\/ Key: Cursor right$/;"	e	enum:__anonce11f6a40403
KEY_RIGHT_ALT	includes/raylib.h	/^    KEY_RIGHT_ALT       = 346,      \/\/ Key: Alt right$/;"	e	enum:__anonce11f6a40403
KEY_RIGHT_BRACKET	includes/raylib.h	/^    KEY_RIGHT_BRACKET   = 93,       \/\/ Key: ]$/;"	e	enum:__anonce11f6a40403
KEY_RIGHT_CONTROL	includes/raylib.h	/^    KEY_RIGHT_CONTROL   = 345,      \/\/ Key: Control right$/;"	e	enum:__anonce11f6a40403
KEY_RIGHT_SHIFT	includes/raylib.h	/^    KEY_RIGHT_SHIFT     = 344,      \/\/ Key: Shift right$/;"	e	enum:__anonce11f6a40403
KEY_RIGHT_SUPER	includes/raylib.h	/^    KEY_RIGHT_SUPER     = 347,      \/\/ Key: Super right$/;"	e	enum:__anonce11f6a40403
KEY_S	includes/raylib.h	/^    KEY_S               = 83,       \/\/ Key: S | s$/;"	e	enum:__anonce11f6a40403
KEY_SCROLL_LOCK	includes/raylib.h	/^    KEY_SCROLL_LOCK     = 281,      \/\/ Key: Scroll down$/;"	e	enum:__anonce11f6a40403
KEY_SEMICOLON	includes/raylib.h	/^    KEY_SEMICOLON       = 59,       \/\/ Key: ;$/;"	e	enum:__anonce11f6a40403
KEY_SEVEN	includes/raylib.h	/^    KEY_SEVEN           = 55,       \/\/ Key: 7$/;"	e	enum:__anonce11f6a40403
KEY_SIX	includes/raylib.h	/^    KEY_SIX             = 54,       \/\/ Key: 6$/;"	e	enum:__anonce11f6a40403
KEY_SLASH	includes/raylib.h	/^    KEY_SLASH           = 47,       \/\/ Key: \/$/;"	e	enum:__anonce11f6a40403
KEY_SPACE	includes/raylib.h	/^    KEY_SPACE           = 32,       \/\/ Key: Space$/;"	e	enum:__anonce11f6a40403
KEY_T	includes/raylib.h	/^    KEY_T               = 84,       \/\/ Key: T | t$/;"	e	enum:__anonce11f6a40403
KEY_TAB	includes/raylib.h	/^    KEY_TAB             = 258,      \/\/ Key: Tab$/;"	e	enum:__anonce11f6a40403
KEY_THREE	includes/raylib.h	/^    KEY_THREE           = 51,       \/\/ Key: 3$/;"	e	enum:__anonce11f6a40403
KEY_TWO	includes/raylib.h	/^    KEY_TWO             = 50,       \/\/ Key: 2$/;"	e	enum:__anonce11f6a40403
KEY_U	includes/raylib.h	/^    KEY_U               = 85,       \/\/ Key: U | u$/;"	e	enum:__anonce11f6a40403
KEY_UP	includes/raylib.h	/^    KEY_UP              = 265,      \/\/ Key: Cursor up$/;"	e	enum:__anonce11f6a40403
KEY_V	includes/raylib.h	/^    KEY_V               = 86,       \/\/ Key: V | v$/;"	e	enum:__anonce11f6a40403
KEY_VOLUME_DOWN	includes/raylib.h	/^    KEY_VOLUME_DOWN     = 25        \/\/ Key: Android volume down button$/;"	e	enum:__anonce11f6a40403
KEY_VOLUME_UP	includes/raylib.h	/^    KEY_VOLUME_UP       = 24,       \/\/ Key: Android volume up button$/;"	e	enum:__anonce11f6a40403
KEY_W	includes/raylib.h	/^    KEY_W               = 87,       \/\/ Key: W | w$/;"	e	enum:__anonce11f6a40403
KEY_X	includes/raylib.h	/^    KEY_X               = 88,       \/\/ Key: X | x$/;"	e	enum:__anonce11f6a40403
KEY_Y	includes/raylib.h	/^    KEY_Y               = 89,       \/\/ Key: Y | y$/;"	e	enum:__anonce11f6a40403
KEY_Z	includes/raylib.h	/^    KEY_Z               = 90,       \/\/ Key: Z | z$/;"	e	enum:__anonce11f6a40403
KEY_ZERO	includes/raylib.h	/^    KEY_ZERO            = 48,       \/\/ Key: 0$/;"	e	enum:__anonce11f6a40403
KeepAliveID	imgui.cpp	/^void ImGui::KeepAliveID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Key	imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ImGui::DebugRenderKeyboardPreview::KeyLayoutData	typeref:typename:ImGuiKey	file:
Key	includes/imgui_internal.h	/^        ImGuiInputEventKey          Key;            \/\/ if Type == ImGuiInputEventType_Key$/;"	m	union:ImGuiInputEvent::__anonf46a7b98020a	typeref:typename:ImGuiInputEventKey
Key	includes/imgui_internal.h	/^    ImGuiLocKey     Key;$/;"	m	struct:ImGuiLocEntry	typeref:typename:ImGuiLocKey
Key	includes/imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	m	struct:ImGuiInputEventKey	typeref:typename:ImGuiKey
KeyAlt	includes/imgui.h	/^    bool        KeyAlt;                             \/\/ Keyboard modifier down: Alt$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeyCtrl	includes/imgui.h	/^    bool        KeyCtrl;                            \/\/ Keyboard modifier down: Control$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeyLayoutData	imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	s	function:ImGui::DebugRenderKeyboardPreview	file:
KeyMods	includes/imgui.h	/^    ImGuiKeyChord KeyMods;                          \/\/ Key mods flags (any of ImGuiMod_Ctrl\/I/;"	m	struct:ImGuiIO	typeref:typename:ImGuiKeyChord
KeyMods	includes/imgui_internal.h	/^    ImGuiKeyChord           KeyMods : 16;       \/\/ Latched key-mods for box-select logic.$/;"	m	struct:ImGuiBoxSelectState	typeref:typename:ImGuiKeyChord:16
KeyMods	includes/imgui_internal.h	/^    ImGuiKeyChord           KeyMods;$/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:ImGuiKeyChord
KeyRepeatDelay	includes/imgui.h	/^    float       KeyRepeatDelay;                 \/\/ = 0.275f         \/\/ When holding a key\/b/;"	m	struct:ImGuiIO	typeref:typename:float
KeyRepeatRate	includes/imgui.h	/^    float       KeyRepeatRate;                  \/\/ = 0.050f         \/\/ When holding a key\/b/;"	m	struct:ImGuiIO	typeref:typename:float
KeyShift	includes/imgui.h	/^    bool        KeyShift;                           \/\/ Keyboard modifier down: Shift$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeySuper	includes/imgui.h	/^    bool        KeySuper;                           \/\/ Keyboard modifier down: Cmd\/Super\/Win/;"	m	struct:ImGuiIO	typeref:typename:bool
KeyboardKey	includes/raylib.h	/^} KeyboardKey;$/;"	t	typeref:enum:__anonce11f6a40403
KeysData	includes/imgui.h	/^    ImGuiKeyData  KeysData[ImGuiKey_NamedKey_COUNT];\/\/ Key state for all known keys. Use IsKey/;"	m	struct:ImGuiIO	typeref:typename:ImGuiKeyData[]
KeysMayBeCharInput	includes/imgui_internal.h	/^    ImBitArrayForNamedKeys  KeysMayBeCharInput;                 \/\/ Lookup to tell if a key can/;"	m	struct:ImGuiContext	typeref:typename:ImBitArrayForNamedKeys
KeysOwnerData	includes/imgui_internal.h	/^    ImGuiKeyOwnerData       KeysOwnerData[ImGuiKey_NamedKey_COUNT];$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyOwnerData[]
KeysRoutingTable	includes/imgui_internal.h	/^    ImGuiKeyRoutingTable    KeysRoutingTable;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyRoutingTable
LIGHTGRAY	includes/raylib.h	/^#define LIGHTGRAY /;"	d
LIME	includes/raylib.h	/^#define LIME /;"	d
LOG_ALL	includes/raylib.h	/^    LOG_ALL = 0,        \/\/ Display all logs$/;"	e	enum:__anonce11f6a40303
LOG_DEBUG	includes/raylib.h	/^    LOG_DEBUG,          \/\/ Debug logging, used for internal debugging, it should be disabled o/;"	e	enum:__anonce11f6a40303
LOG_ERROR	includes/raylib.h	/^    LOG_ERROR,          \/\/ Error logging, used on unrecoverable failures$/;"	e	enum:__anonce11f6a40303
LOG_FATAL	includes/raylib.h	/^    LOG_FATAL,          \/\/ Fatal logging, used to abort program: exit(EXIT_FAILURE)$/;"	e	enum:__anonce11f6a40303
LOG_INFO	includes/raylib.h	/^    LOG_INFO,           \/\/ Info logging, used for program execution info$/;"	e	enum:__anonce11f6a40303
LOG_NONE	includes/raylib.h	/^    LOG_NONE            \/\/ Disable logging$/;"	e	enum:__anonce11f6a40303
LOG_TRACE	includes/raylib.h	/^    LOG_TRACE,          \/\/ Trace logging, intended for internal use only$/;"	e	enum:__anonce11f6a40303
LOG_WARNING	includes/raylib.h	/^    LOG_WARNING,        \/\/ Warning logging, used on recoverable failures$/;"	e	enum:__anonce11f6a40303
Label	imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ImGui::DebugRenderKeyboardPreview::KeyLayoutData	typeref:typename:const char *	file:
LabelText	imgui_widgets.cpp	/^void ImGui::LabelText(const char* label, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
LabelTextV	imgui_widgets.cpp	/^void ImGui::LabelTextV(const char* label, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
LastActiveFrame	includes/imgui_internal.h	/^    int                     LastActiveFrame;$/;"	m	struct:ImGuiIDStackTool	typeref:typename:int
LastActiveId	includes/imgui_internal.h	/^    ImGuiID                 LastActiveId;                       \/\/ Store the last non-zero Act/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
LastActiveIdTimer	includes/imgui_internal.h	/^    float                   LastActiveIdTimer;                  \/\/ Store the last non-zero Act/;"	m	struct:ImGuiContext	typeref:typename:float
LastAltPressed	rlImGui.cpp	/^static bool LastAltPressed = false;$/;"	v	typeref:typename:bool	file:
LastControlPressed	rlImGui.cpp	/^static bool LastControlPressed = false;$/;"	v	typeref:typename:bool	file:
LastEntriesBuf	includes/imgui_internal.h	/^    ImGuiDebugAllocEntry LastEntriesBuf[6]; \/\/ Track last 6 frames that had allocations$/;"	m	struct:ImGuiDebugAllocInfo	typeref:typename:ImGuiDebugAllocEntry[6]
LastEntriesIdx	includes/imgui_internal.h	/^    ImS16       LastEntriesIdx;             \/\/ Current index in buffer$/;"	m	struct:ImGuiDebugAllocInfo	typeref:typename:ImS16
LastFrameActive	includes/imgui_internal.h	/^    int                         LastFrameActive;$/;"	m	struct:ImGuiTable	typeref:typename:int
LastFrameActive	includes/imgui_internal.h	/^    int                     LastFrameActive;                    \/\/ Last frame number the windo/;"	m	struct:ImGuiWindow	typeref:typename:int
LastFrameActive	includes/imgui_internal.h	/^    int                     LastFrameActive;    \/\/ Last used frame-count, for GC.$/;"	m	struct:ImGuiMultiSelectState	typeref:typename:int
LastFrameFocused	rlImGui.cpp	/^static bool LastFrameFocused = false;$/;"	v	typeref:typename:bool	file:
LastFrameSelected	includes/imgui_internal.h	/^    int                 LastFrameSelected;      \/\/ This allows us to infer an ordered list of /;"	m	struct:ImGuiTabItem	typeref:typename:int
LastFrameVisible	includes/imgui_internal.h	/^    int                 LastFrameVisible;$/;"	m	struct:ImGuiTabItem	typeref:typename:int
LastFrozenHeight	includes/imgui_internal.h	/^    float                       LastFrozenHeight;           \/\/ Height of frozen section from l/;"	m	struct:ImGuiTableInstanceData	typeref:typename:float
LastItemData	includes/imgui_internal.h	/^    ImGuiLastItemData       LastItemData;                       \/\/ Storage for last submitted /;"	m	struct:ImGuiContext	typeref:typename:ImGuiLastItemData
LastKeyModsChangeFromNoneTime	includes/imgui_internal.h	/^    double                  LastKeyModsChangeFromNoneTime;      \/\/ Record the last time key mo/;"	m	struct:ImGuiContext	typeref:typename:double
LastKeyModsChangeTime	includes/imgui_internal.h	/^    double                  LastKeyModsChangeTime;              \/\/ Record the last time key mo/;"	m	struct:ImGuiContext	typeref:typename:double
LastKeyboardKeyPressTime	includes/imgui_internal.h	/^    double                  LastKeyboardKeyPressTime;           \/\/ Record the last time a keyb/;"	m	struct:ImGuiContext	typeref:typename:double
LastOuterHeight	includes/imgui_internal.h	/^    float                       LastOuterHeight;            \/\/ Outer height from last frame$/;"	m	struct:ImGuiTableInstanceData	typeref:typename:float
LastRequestFrame	includes/imgui_internal.h	/^    int             LastRequestFrame = 0;$/;"	m	struct:ImGuiTypingSelectState	typeref:typename:int
LastRequestTime	includes/imgui_internal.h	/^    float           LastRequestTime = 0.0f;$/;"	m	struct:ImGuiTypingSelectState	typeref:typename:float
LastResizedColumn	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         LastResizedColumn;          \/\/ Index of column being resized f/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
LastRowFlags	includes/imgui_internal.h	/^    ImGuiTableRowFlags          LastRowFlags : 16;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableRowFlags:16
LastSelectionSize	includes/imgui_internal.h	/^    int                     LastSelectionSize;  \/\/ Set by BeginMultiSelect() based on optional/;"	m	struct:ImGuiMultiSelectState	typeref:typename:int
LastShiftPressed	rlImGui.cpp	/^static bool LastShiftPressed = false;$/;"	v	typeref:typename:bool	file:
LastSubmittedItem	includes/imgui_internal.h	/^    ImGuiSelectionUserData  LastSubmittedItem;  \/\/ Copy of last submitted item data, used to m/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:ImGuiSelectionUserData
LastSuperPressed	rlImGui.cpp	/^static bool LastSuperPressed = false;$/;"	v	typeref:typename:bool	file:
LastTabItemIdx	includes/imgui_internal.h	/^    ImS16               LastTabItemIdx;         \/\/ Index of last BeginTabItem() tab for use by/;"	m	struct:ImGuiTabBar	typeref:typename:ImS16
LastTimeActive	includes/imgui_internal.h	/^    float                       LastTimeActive;             \/\/ Last timestamp this structure w/;"	m	struct:ImGuiTableTempData	typeref:typename:float
LastTimeActive	includes/imgui_internal.h	/^    float                   LastTimeActive;                     \/\/ Last timestamp the window w/;"	m	struct:ImGuiWindow	typeref:typename:float
LastTopHeadersRowHeight	includes/imgui_internal.h	/^    float                       LastTopHeadersRowHeight;    \/\/ Height of first consecutive hea/;"	m	struct:ImGuiTableInstanceData	typeref:typename:float
LayerData1	includes/imgui_internal.h	/^    ImVector<ImDrawList*>   LayerData1;$/;"	m	struct:ImDrawDataBuilder	typeref:typename:ImVector<ImDrawList * >
Layers	includes/imgui_internal.h	/^    ImVector<ImDrawList*>*  Layers[2];      \/\/ Pointers to global layers for: regular, tooltip/;"	m	struct:ImDrawDataBuilder	typeref:typename:ImVector<ImDrawList * > * [2]
LayoutColumnCount	imgui_demo.cpp	/^    int             LayoutColumnCount = 0;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:int	file:
LayoutItemSize	imgui_demo.cpp	/^    ImVec2          LayoutItemSize;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:ImVec2	file:
LayoutItemSpacing	imgui_demo.cpp	/^    float           LayoutItemSpacing = 0.0f;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:float	file:
LayoutItemStep	imgui_demo.cpp	/^    ImVec2          LayoutItemStep;             \/\/ == LayoutItemSize + LayoutItemSpacing$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:ImVec2	file:
LayoutLineCount	imgui_demo.cpp	/^    int             LayoutLineCount = 0;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:int	file:
LayoutOuterPadding	imgui_demo.cpp	/^    float           LayoutOuterPadding = 0.0f;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:float	file:
LayoutSelectableSpacing	imgui_demo.cpp	/^    float           LayoutSelectableSpacing = 0.0f;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:float	file:
LayoutType	includes/imgui_internal.h	/^    ImGuiLayoutType         LayoutType;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiLayoutType
LeftMostEnabledColumn	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         LeftMostEnabledColumn;      \/\/ Index of left-most non-hidden c/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
LeftMostStretchedColumn	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         LeftMostStretchedColumn;    \/\/ Index of left-most stretched co/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
Lerp	includes/raymath.h	/^RMAPI float Lerp(float start, float end, float amount)$/;"	f	typeref:typename:RMAPI float
LineMaxY	includes/imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
LineMinY	includes/imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
LineOffsets	imgui_demo.cpp	/^    ImVector<int>       LineOffsets; \/\/ Index to lines offset. We maintain this with AddLog() /;"	m	struct:ExampleAppLog	typeref:typename:ImVector<int>	file:
LineOffsets	includes/imgui_internal.h	/^    ImVector<int>   LineOffsets;$/;"	m	struct:ImGuiTextIndex	typeref:typename:ImVector<int>
ListBox	imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, bool (*old_getter)(void*, int, const c/;"	f	class:ImGui	typeref:typename:bool
ListBox	imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, const char* (*getter)(void* user_data,/;"	f	class:ImGui	typeref:typename:bool
ListBox	imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, const char* const items[], int items_c/;"	f	class:ImGui	typeref:typename:bool
ListClipper	includes/imgui_internal.h	/^    ImGuiListClipper*               ListClipper;$/;"	m	struct:ImGuiListClipperData	typeref:typename:ImGuiListClipper *
LoadFileDataCallback	includes/raylib.h	/^typedef unsigned char *(*LoadFileDataCallback)(const char *fileName, int *dataSize);    \/\/ Fil/;"	t	typeref:typename:unsigned char * (*)(const char * fileName,int * dataSize)
LoadFileTextCallback	includes/raylib.h	/^typedef char *(*LoadFileTextCallback)(const char *fileName);            \/\/ FileIO: Load text d/;"	t	typeref:typename:char * (*)(const char * fileName)
LoadIniSettingsFromDisk	imgui.cpp	/^void ImGui::LoadIniSettingsFromDisk(const char* ini_filename)$/;"	f	class:ImGui	typeref:typename:void
LoadIniSettingsFromMemory	imgui.cpp	/^void ImGui::LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size)$/;"	f	class:ImGui	typeref:typename:void
LocalizationTable	includes/imgui_internal.h	/^    const char*             LocalizationTable[ImGuiLocKey_COUNT];$/;"	m	struct:ImGuiContext	typeref:typename:const char * []
LocalizeGetMsg	includes/imgui_internal.h	/^    inline const char*      LocalizeGetMsg(ImGuiLocKey key) { ImGuiContext& g = *GImGui; const c/;"	f	namespace:ImGui	typeref:typename:const char *
LocalizeRegisterEntries	imgui.cpp	/^void ImGui::LocalizeRegisterEntries(const ImGuiLocEntry* entries, int count)$/;"	f	class:ImGui	typeref:typename:void
LockThisFrame	includes/imgui_internal.h	/^    bool        LockThisFrame;      \/\/ Reading this key requires explicit owner id (until end /;"	m	struct:ImGuiKeyOwnerData	typeref:typename:bool
LockUntilRelease	includes/imgui_internal.h	/^    bool        LockUntilRelease;   \/\/ Reading this key requires explicit owner id (until key /;"	m	struct:ImGuiKeyOwnerData	typeref:typename:bool
LockWheelingWindow	imgui.cpp	/^static void LockWheelingWindow(ImGuiWindow* window, float wheel_amount)$/;"	f	typeref:typename:void	file:
Locked	includes/imgui.h	/^    bool                        Locked;             \/\/ Marked as Locked by ImGui::NewFrame() s/;"	m	struct:ImFontAtlas	typeref:typename:bool
LogBegin	imgui.cpp	/^void ImGui::LogBegin(ImGuiLogFlags flags, int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogBuffer	includes/imgui_internal.h	/^    ImGuiTextBuffer         LogBuffer;                          \/\/ Accumulation buffer when lo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
LogButtons	imgui.cpp	/^void ImGui::LogButtons()$/;"	f	class:ImGui	typeref:typename:void
LogDepthRef	includes/imgui_internal.h	/^    int                     LogDepthRef;$/;"	m	struct:ImGuiContext	typeref:typename:int
LogDepthToExpand	includes/imgui_internal.h	/^    int                     LogDepthToExpand;$/;"	m	struct:ImGuiContext	typeref:typename:int
LogDepthToExpandDefault	includes/imgui_internal.h	/^    int                     LogDepthToExpandDefault;            \/\/ Default\/stored value for L/;"	m	struct:ImGuiContext	typeref:typename:int
LogEnabled	includes/imgui_internal.h	/^    bool                    LogEnabled;                         \/\/ Currently capturing$/;"	m	struct:ImGuiContext	typeref:typename:bool
LogFile	includes/imgui_internal.h	/^    ImFileHandle            LogFile;                            \/\/ If != NULL log to stdout\/ /;"	m	struct:ImGuiContext	typeref:typename:ImFileHandle
LogFilename	includes/imgui.h	/^    const char* LogFilename;                    \/\/ = "imgui_log.txt"\/\/ Path to .log file (de/;"	m	struct:ImGuiIO	typeref:typename:const char *
LogFinish	imgui.cpp	/^void ImGui::LogFinish()$/;"	f	class:ImGui	typeref:typename:void
LogFlags	includes/imgui_internal.h	/^    ImGuiLogFlags           LogFlags;                           \/\/ Capture flags\/type$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiLogFlags
LogLineFirstItem	includes/imgui_internal.h	/^    bool                    LogLineFirstItem;$/;"	m	struct:ImGuiContext	typeref:typename:bool
LogLinePosY	includes/imgui_internal.h	/^    float                   LogLinePosY;$/;"	m	struct:ImGuiContext	typeref:typename:float
LogNextPrefix	includes/imgui_internal.h	/^    const char*             LogNextPrefix;$/;"	m	struct:ImGuiContext	typeref:typename:const char *
LogNextSuffix	includes/imgui_internal.h	/^    const char*             LogNextSuffix;$/;"	m	struct:ImGuiContext	typeref:typename:const char *
LogRenderedText	imgui.cpp	/^void ImGui::LogRenderedText(const ImVec2* ref_pos, const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:void
LogSetNextTextDecoration	imgui.cpp	/^void ImGui::LogSetNextTextDecoration(const char* prefix, const char* suffix)$/;"	f	class:ImGui	typeref:typename:void
LogSliderDeadzone	includes/imgui.h	/^    float       LogSliderDeadzone;          \/\/ The size in pixels of the dead-zone around zero/;"	m	struct:ImGuiStyle	typeref:typename:float
LogText	imgui.cpp	/^void ImGui::LogText(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
LogTextV	imgui.cpp	/^static inline void LogTextV(ImGuiContext& g, const char* fmt, va_list args)$/;"	f	typeref:typename:void	file:
LogTextV	imgui.cpp	/^void ImGui::LogTextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
LogToBuffer	imgui.cpp	/^void ImGui::LogToBuffer(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogToClipboard	imgui.cpp	/^void ImGui::LogToClipboard(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogToFile	imgui.cpp	/^void ImGui::LogToFile(int auto_open_depth, const char* filename)$/;"	f	class:ImGui	typeref:typename:void
LogToTTY	imgui.cpp	/^void ImGui::LogToTTY(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogWindow	includes/imgui_internal.h	/^    ImGuiWindow*            LogWindow;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
LoopRequestSetAll	includes/imgui_internal.h	/^    ImS8                    LoopRequestSetAll;  \/\/ -1: no operation, 0: clear all, 1: select a/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:ImS8
LossynessOffset	includes/imgui_internal.h	/^    float                           LossynessOffset;$/;"	m	struct:ImGuiListClipperData	typeref:typename:float
MAGENTA	includes/raylib.h	/^#define MAGENTA /;"	d
MAROON	includes/raylib.h	/^#define MAROON /;"	d
MATERIAL_MAP_ALBEDO	includes/raylib.h	/^    MATERIAL_MAP_ALBEDO = 0,        \/\/ Albedo material (same as: MATERIAL_MAP_DIFFUSE)$/;"	e	enum:__anonce11f6a40903
MATERIAL_MAP_BRDF	includes/raylib.h	/^    MATERIAL_MAP_BRDF               \/\/ Brdf material$/;"	e	enum:__anonce11f6a40903
MATERIAL_MAP_CUBEMAP	includes/raylib.h	/^    MATERIAL_MAP_CUBEMAP,           \/\/ Cubemap material (NOTE: Uses GL_TEXTURE_CUBE_MAP)$/;"	e	enum:__anonce11f6a40903
MATERIAL_MAP_DIFFUSE	includes/raylib.h	/^#define MATERIAL_MAP_DIFFUSE /;"	d
MATERIAL_MAP_EMISSION	includes/raylib.h	/^    MATERIAL_MAP_EMISSION,          \/\/ Emission material$/;"	e	enum:__anonce11f6a40903
MATERIAL_MAP_HEIGHT	includes/raylib.h	/^    MATERIAL_MAP_HEIGHT,            \/\/ Heightmap material$/;"	e	enum:__anonce11f6a40903
MATERIAL_MAP_IRRADIANCE	includes/raylib.h	/^    MATERIAL_MAP_IRRADIANCE,        \/\/ Irradiance material (NOTE: Uses GL_TEXTURE_CUBE_MAP)$/;"	e	enum:__anonce11f6a40903
MATERIAL_MAP_METALNESS	includes/raylib.h	/^    MATERIAL_MAP_METALNESS,         \/\/ Metalness material (same as: MATERIAL_MAP_SPECULAR)$/;"	e	enum:__anonce11f6a40903
MATERIAL_MAP_NORMAL	includes/raylib.h	/^    MATERIAL_MAP_NORMAL,            \/\/ Normal material$/;"	e	enum:__anonce11f6a40903
MATERIAL_MAP_OCCLUSION	includes/raylib.h	/^    MATERIAL_MAP_OCCLUSION,         \/\/ Ambient occlusion material$/;"	e	enum:__anonce11f6a40903
MATERIAL_MAP_PREFILTER	includes/raylib.h	/^    MATERIAL_MAP_PREFILTER,         \/\/ Prefilter material (NOTE: Uses GL_TEXTURE_CUBE_MAP)$/;"	e	enum:__anonce11f6a40903
MATERIAL_MAP_ROUGHNESS	includes/raylib.h	/^    MATERIAL_MAP_ROUGHNESS,         \/\/ Roughness material$/;"	e	enum:__anonce11f6a40903
MATERIAL_MAP_SPECULAR	includes/raylib.h	/^#define MATERIAL_MAP_SPECULAR /;"	d
MAX	includes/rlgl.h	/^        #define MAX(/;"	d
MIN	includes/rlgl.h	/^        #define MIN(/;"	d
MOUSE_BUTTON_BACK	includes/raylib.h	/^    MOUSE_BUTTON_BACK    = 6,       \/\/ Mouse button back (advanced mouse device)$/;"	e	enum:__anonce11f6a40503
MOUSE_BUTTON_EXTRA	includes/raylib.h	/^    MOUSE_BUTTON_EXTRA   = 4,       \/\/ Mouse button extra (advanced mouse device)$/;"	e	enum:__anonce11f6a40503
MOUSE_BUTTON_FORWARD	includes/raylib.h	/^    MOUSE_BUTTON_FORWARD = 5,       \/\/ Mouse button forward (advanced mouse device)$/;"	e	enum:__anonce11f6a40503
MOUSE_BUTTON_LEFT	includes/raylib.h	/^    MOUSE_BUTTON_LEFT    = 0,       \/\/ Mouse button left$/;"	e	enum:__anonce11f6a40503
MOUSE_BUTTON_MIDDLE	includes/raylib.h	/^    MOUSE_BUTTON_MIDDLE  = 2,       \/\/ Mouse button middle (pressed wheel)$/;"	e	enum:__anonce11f6a40503
MOUSE_BUTTON_RIGHT	includes/raylib.h	/^    MOUSE_BUTTON_RIGHT   = 1,       \/\/ Mouse button right$/;"	e	enum:__anonce11f6a40503
MOUSE_BUTTON_SIDE	includes/raylib.h	/^    MOUSE_BUTTON_SIDE    = 3,       \/\/ Mouse button side (advanced mouse device)$/;"	e	enum:__anonce11f6a40503
MOUSE_CURSOR_ARROW	includes/raylib.h	/^    MOUSE_CURSOR_ARROW         = 1,     \/\/ Arrow shape$/;"	e	enum:__anonce11f6a40603
MOUSE_CURSOR_CROSSHAIR	includes/raylib.h	/^    MOUSE_CURSOR_CROSSHAIR     = 3,     \/\/ Cross shape$/;"	e	enum:__anonce11f6a40603
MOUSE_CURSOR_DEFAULT	includes/raylib.h	/^    MOUSE_CURSOR_DEFAULT       = 0,     \/\/ Default pointer shape$/;"	e	enum:__anonce11f6a40603
MOUSE_CURSOR_IBEAM	includes/raylib.h	/^    MOUSE_CURSOR_IBEAM         = 2,     \/\/ Text writing cursor shape$/;"	e	enum:__anonce11f6a40603
MOUSE_CURSOR_NOT_ALLOWED	includes/raylib.h	/^    MOUSE_CURSOR_NOT_ALLOWED   = 10     \/\/ The operation-not-allowed shape$/;"	e	enum:__anonce11f6a40603
MOUSE_CURSOR_POINTING_HAND	includes/raylib.h	/^    MOUSE_CURSOR_POINTING_HAND = 4,     \/\/ Pointing hand cursor$/;"	e	enum:__anonce11f6a40603
MOUSE_CURSOR_RESIZE_ALL	includes/raylib.h	/^    MOUSE_CURSOR_RESIZE_ALL    = 9,     \/\/ The omnidirectional resize\/move cursor shape$/;"	e	enum:__anonce11f6a40603
MOUSE_CURSOR_RESIZE_EW	includes/raylib.h	/^    MOUSE_CURSOR_RESIZE_EW     = 5,     \/\/ Horizontal resize\/move arrow shape$/;"	e	enum:__anonce11f6a40603
MOUSE_CURSOR_RESIZE_NESW	includes/raylib.h	/^    MOUSE_CURSOR_RESIZE_NESW   = 8,     \/\/ The top-right to bottom-left diagonal resize\/move /;"	e	enum:__anonce11f6a40603
MOUSE_CURSOR_RESIZE_NS	includes/raylib.h	/^    MOUSE_CURSOR_RESIZE_NS     = 6,     \/\/ Vertical resize\/move arrow shape$/;"	e	enum:__anonce11f6a40603
MOUSE_CURSOR_RESIZE_NWSE	includes/raylib.h	/^    MOUSE_CURSOR_RESIZE_NWSE   = 7,     \/\/ Top-left to bottom-right diagonal resize\/move arro/;"	e	enum:__anonce11f6a40603
MOUSE_LEFT_BUTTON	includes/raylib.h	/^#define MOUSE_LEFT_BUTTON /;"	d
MOUSE_MIDDLE_BUTTON	includes/raylib.h	/^#define MOUSE_MIDDLE_BUTTON /;"	d
MOUSE_RIGHT_BUTTON	includes/raylib.h	/^#define MOUSE_RIGHT_BUTTON /;"	d
MallocWrapper	imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); IM_UNUSED(/;"	f	typeref:typename:void *	file:
MallocWrapper	imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); return mal/;"	f	typeref:typename:void *	file:
Map	includes/imgui_internal.h	/^    ImGuiStorage    Map;        \/\/ ID->Index$/;"	m	struct:ImPool	typeref:typename:ImGuiStorage
MarkIniSettingsDirty	imgui.cpp	/^void ImGui::MarkIniSettingsDirty()$/;"	f	class:ImGui	typeref:typename:void
MarkIniSettingsDirty	imgui.cpp	/^void ImGui::MarkIniSettingsDirty(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
MarkItemEdited	imgui.cpp	/^void ImGui::MarkItemEdited(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Material	includes/raylib.h	/^typedef struct Material {$/;"	s
Material	includes/raylib.h	/^} Material;$/;"	t	typeref:struct:Material
MaterialMap	includes/raylib.h	/^typedef struct MaterialMap {$/;"	s
MaterialMap	includes/raylib.h	/^} MaterialMap;$/;"	t	typeref:struct:MaterialMap
MaterialMapIndex	includes/raylib.h	/^} MaterialMapIndex;$/;"	t	typeref:enum:__anonce11f6a40903
Matrix	includes/raylib.h	/^typedef struct Matrix {$/;"	s
Matrix	includes/raylib.h	/^} Matrix;$/;"	t	typeref:struct:Matrix
Matrix	includes/raymath.h	/^typedef struct Matrix {$/;"	s
Matrix	includes/raymath.h	/^} Matrix;$/;"	t	typeref:struct:Matrix
Matrix	includes/rlgl.h	/^typedef struct Matrix {$/;"	s
Matrix	includes/rlgl.h	/^} Matrix;$/;"	t	typeref:struct:Matrix
MatrixAdd	includes/raymath.h	/^RMAPI Matrix MatrixAdd(Matrix left, Matrix right)$/;"	f	typeref:typename:RMAPI Matrix
MatrixDecompose	includes/raymath.h	/^RMAPI void MatrixDecompose(Matrix mat, Vector3 *translation, Quaternion *rotation, Vector3 *scal/;"	f	typeref:typename:RMAPI void
MatrixDeterminant	includes/raymath.h	/^RMAPI float MatrixDeterminant(Matrix mat)$/;"	f	typeref:typename:RMAPI float
MatrixFrustum	includes/raymath.h	/^RMAPI Matrix MatrixFrustum(double left, double right, double bottom, double top, double nearPlan/;"	f	typeref:typename:RMAPI Matrix
MatrixIdentity	includes/raymath.h	/^RMAPI Matrix MatrixIdentity(void)$/;"	f	typeref:typename:RMAPI Matrix
MatrixInvert	includes/raymath.h	/^RMAPI Matrix MatrixInvert(Matrix mat)$/;"	f	typeref:typename:RMAPI Matrix
MatrixLookAt	includes/raymath.h	/^RMAPI Matrix MatrixLookAt(Vector3 eye, Vector3 target, Vector3 up)$/;"	f	typeref:typename:RMAPI Matrix
MatrixMultiply	includes/raymath.h	/^RMAPI Matrix MatrixMultiply(Matrix left, Matrix right)$/;"	f	typeref:typename:RMAPI Matrix
MatrixOrtho	includes/raymath.h	/^RMAPI Matrix MatrixOrtho(double left, double right, double bottom, double top, double nearPlane,/;"	f	typeref:typename:RMAPI Matrix
MatrixPerspective	includes/raymath.h	/^RMAPI Matrix MatrixPerspective(double fovY, double aspect, double nearPlane, double farPlane)$/;"	f	typeref:typename:RMAPI Matrix
MatrixRotate	includes/raymath.h	/^RMAPI Matrix MatrixRotate(Vector3 axis, float angle)$/;"	f	typeref:typename:RMAPI Matrix
MatrixRotateX	includes/raymath.h	/^RMAPI Matrix MatrixRotateX(float angle)$/;"	f	typeref:typename:RMAPI Matrix
MatrixRotateXYZ	includes/raymath.h	/^RMAPI Matrix MatrixRotateXYZ(Vector3 angle)$/;"	f	typeref:typename:RMAPI Matrix
MatrixRotateY	includes/raymath.h	/^RMAPI Matrix MatrixRotateY(float angle)$/;"	f	typeref:typename:RMAPI Matrix
MatrixRotateZ	includes/raymath.h	/^RMAPI Matrix MatrixRotateZ(float angle)$/;"	f	typeref:typename:RMAPI Matrix
MatrixRotateZYX	includes/raymath.h	/^RMAPI Matrix MatrixRotateZYX(Vector3 angle)$/;"	f	typeref:typename:RMAPI Matrix
MatrixScale	includes/raymath.h	/^RMAPI Matrix MatrixScale(float x, float y, float z)$/;"	f	typeref:typename:RMAPI Matrix
MatrixSubtract	includes/raymath.h	/^RMAPI Matrix MatrixSubtract(Matrix left, Matrix right)$/;"	f	typeref:typename:RMAPI Matrix
MatrixToFloat	includes/raymath.h	/^    #define MatrixToFloat(/;"	d
MatrixToFloatV	includes/raymath.h	/^RMAPI float16 MatrixToFloatV(Matrix mat)$/;"	f	typeref:typename:RMAPI float16
MatrixTrace	includes/raymath.h	/^RMAPI float MatrixTrace(Matrix mat)$/;"	f	typeref:typename:RMAPI float
MatrixTranslate	includes/raymath.h	/^RMAPI Matrix MatrixTranslate(float x, float y, float z)$/;"	f	typeref:typename:RMAPI Matrix
MatrixTranspose	includes/raymath.h	/^RMAPI Matrix MatrixTranspose(Matrix mat)$/;"	f	typeref:typename:RMAPI Matrix
Max	includes/imgui_internal.h	/^    ImVec2      Max;    \/\/ Lower-right$/;"	m	struct:ImRect	typeref:typename:ImVec2
Max	includes/imgui_internal.h	/^    int     Max;$/;"	m	struct:ImGuiListClipperRange	typeref:typename:int
MaxX	includes/imgui_internal.h	/^    float                   MaxX;$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
MemAlloc	imgui.cpp	/^void* ImGui::MemAlloc(size_t size)$/;"	f	class:ImGui	typeref:typename:void *
MemFree	imgui.cpp	/^void ImGui::MemFree(void* ptr)$/;"	f	class:ImGui	typeref:typename:void
MemoryCompacted	includes/imgui_internal.h	/^    bool                        MemoryCompacted;$/;"	m	struct:ImGuiTable	typeref:typename:bool
MemoryCompacted	includes/imgui_internal.h	/^    bool                    MemoryCompacted;                    \/\/ Set when window extraneous /;"	m	struct:ImGuiWindow	typeref:typename:bool
MemoryDrawListIdxCapacity	includes/imgui_internal.h	/^    int                     MemoryDrawListIdxCapacity;          \/\/ Backup of last idx\/vtx cou/;"	m	struct:ImGuiWindow	typeref:typename:int
MemoryDrawListVtxCapacity	includes/imgui_internal.h	/^    int                     MemoryDrawListVtxCapacity;$/;"	m	struct:ImGuiWindow	typeref:typename:int
MenuBarAppending	includes/imgui_internal.h	/^    bool                    MenuBarAppending;       \/\/ FIXME: Remove this$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
MenuBarHeight	includes/imgui_internal.h	/^    float                   TitleBarHeight, MenuBarHeight;      \/\/ Note that those used to be /;"	m	struct:ImGuiWindow	typeref:typename:float
MenuBarOffset	includes/imgui_internal.h	/^    ImVec2                  MenuBarOffset;          \/\/ MenuBarOffset.x is sort of equivalent o/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
MenuBarOffsetMinVal	includes/imgui_internal.h	/^    ImVec2                      MenuBarOffsetMinVal;    \/\/ (Always on) This is not exposed pub/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
MenuBarRect	includes/imgui_internal.h	/^    ImRect      MenuBarRect() const     { float y1 = Pos.y + TitleBarHeight; return ImRect(Pos.x/;"	f	struct:ImGuiWindow	typeref:typename:ImRect
MenuColumns	includes/imgui_internal.h	/^    ImGuiMenuColumns        MenuColumns;            \/\/ Simplified columns storage for menu ite/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiMenuColumns
MenuItem	imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool selected, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
MenuItem	imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
MenuItemEx	imgui_widgets.cpp	/^bool ImGui::MenuItemEx(const char* label, const char* icon, const char* shortcut, bool selected,/;"	f	class:ImGui	typeref:typename:bool
MenusIdSubmittedThisFrame	includes/imgui_internal.h	/^    ImVector<ImGuiID>       MenusIdSubmittedThisFrame;          \/\/ A list of menu IDs that wer/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiID>
Merge	imgui_draw.cpp	/^void ImDrawListSplitter::Merge(ImDrawList* draw_list)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
MergeGroup	imgui_tables.cpp	/^    struct MergeGroup$/;"	s	function:ImGui::TableMergeDrawChannels	file:
MergeMode	includes/imgui.h	/^    bool            MergeMode;              \/\/ false    \/\/ Merge into previous ImFont, so yo/;"	m	struct:ImFontConfig	typeref:typename:bool
Mesh	includes/raylib.h	/^typedef struct Mesh {$/;"	s
Mesh	includes/raylib.h	/^} Mesh;$/;"	t	typeref:struct:Mesh
MetricsActiveWindows	includes/imgui.h	/^    int         MetricsActiveWindows;               \/\/ Number of active windows$/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsHelpMarker	imgui.cpp	/^static void MetricsHelpMarker(const char* desc)$/;"	f	typeref:typename:void	file:
MetricsRenderIndices	includes/imgui.h	/^    int         MetricsRenderIndices;               \/\/ Indices output during last call to Rend/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsRenderVertices	includes/imgui.h	/^    int         MetricsRenderVertices;              \/\/ Vertices output during last call to Ren/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsRenderWindows	includes/imgui.h	/^    int         MetricsRenderWindows;               \/\/ Number of visible windows$/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsTotalSurface	includes/imgui.h	/^    int                         MetricsTotalSurface;\/\/ 4     \/\/ out \/\/            \/\/ Tot/;"	m	struct:ImFont	typeref:typename:int
Min	includes/imgui_internal.h	/^    ImVec2      Min;    \/\/ Upper-left$/;"	m	struct:ImRect	typeref:typename:ImVec2
Min	includes/imgui_internal.h	/^    int     Min;$/;"	m	struct:ImGuiListClipperRange	typeref:typename:int
MinColumnWidth	includes/imgui_internal.h	/^    float                       MinColumnWidth;$/;"	m	struct:ImGuiTable	typeref:typename:float
MinX	includes/imgui_internal.h	/^    float                   MinX;                           \/\/ Absolute positions$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ModalDimBgColor	includes/imgui_internal.h	/^    ImU32                   ModalDimBgColor;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImU32
Mode	imgui_demo.cpp	/^            enum Mode$/;"	g	function:ShowDemoWindowWidgets	file:
Mode_Copy	imgui_demo.cpp	/^                Mode_Copy,$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
Mode_Move	imgui_demo.cpp	/^                Mode_Move,$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
Mode_Swap	imgui_demo.cpp	/^                Mode_Swap$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
Model	includes/raylib.h	/^typedef struct Model {$/;"	s
Model	includes/raylib.h	/^} Model;$/;"	t	typeref:struct:Model
ModelAnimation	includes/raylib.h	/^typedef struct ModelAnimation {$/;"	s
ModelAnimation	includes/raylib.h	/^} ModelAnimation;$/;"	t	typeref:struct:ModelAnimation
Mods	includes/imgui_internal.h	/^    ImU16                           Mods;               \/\/ Technically we'd only need 4-bits b/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImU16
MouseButton	includes/imgui_internal.h	/^        ImGuiInputEventMouseButton  MouseButton;    \/\/ if Type == ImGuiInputEventType_MouseBut/;"	m	union:ImGuiInputEvent::__anonf46a7b98020a	typeref:typename:ImGuiInputEventMouseButton
MouseButton	includes/raylib.h	/^} MouseButton;$/;"	t	typeref:enum:__anonce11f6a40503
MouseButtonToKey	includes/imgui_internal.h	/^    inline ImGuiKey         MouseButtonToKey(ImGuiMouseButton button)                   { IM_ASS/;"	f	namespace:ImGui	typeref:typename:ImGuiKey
MouseClicked	includes/imgui.h	/^    bool        MouseClicked[5];                    \/\/ Mouse button went from !Down to Down (s/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseClickedCount	includes/imgui.h	/^    ImU16       MouseClickedCount[5];               \/\/ == 0 (not clicked), == 1 (same as Mouse/;"	m	struct:ImGuiIO	typeref:typename:ImU16[5]
MouseClickedLastCount	includes/imgui.h	/^    ImU16       MouseClickedLastCount[5];           \/\/ Count successive number of clicks. Stay/;"	m	struct:ImGuiIO	typeref:typename:ImU16[5]
MouseClickedPos	includes/imgui.h	/^    ImVec2      MouseClickedPos[5];                 \/\/ Position at time of clicking$/;"	m	struct:ImGuiIO	typeref:typename:ImVec2[5]
MouseClickedTime	includes/imgui.h	/^    double      MouseClickedTime[5];                \/\/ Time of last click (used to figure out /;"	m	struct:ImGuiIO	typeref:typename:double[5]
MouseCtrlLeftAsRightClick	includes/imgui.h	/^    bool        MouseCtrlLeftAsRightClick;          \/\/ (OSX) Set to true when the current clic/;"	m	struct:ImGuiIO	typeref:typename:bool
MouseCursor	includes/imgui_internal.h	/^    ImGuiMouseCursor        MouseCursor;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMouseCursor
MouseCursor	includes/raylib.h	/^} MouseCursor;$/;"	t	typeref:enum:__anonce11f6a40603
MouseCursorMap	rlImGui.cpp	/^static MouseCursor MouseCursorMap[ImGuiMouseCursor_COUNT];$/;"	v	typeref:typename:MouseCursor[]	file:
MouseCursorScale	includes/imgui.h	/^    float       MouseCursorScale;           \/\/ Scale software rendered mouse cursor (when io.M/;"	m	struct:ImGuiStyle	typeref:typename:float
MouseDelta	includes/imgui.h	/^    ImVec2      MouseDelta;                         \/\/ Mouse delta. Note that this is zero if /;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MouseDoubleClickMaxDist	includes/imgui.h	/^    float       MouseDoubleClickMaxDist;        \/\/ = 6.0f           \/\/ Distance threshold to/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDoubleClickTime	includes/imgui.h	/^    float       MouseDoubleClickTime;           \/\/ = 0.30f          \/\/ Time for a double-cli/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDoubleClicked	includes/imgui.h	/^    bool        MouseDoubleClicked[5];              \/\/ Has mouse button been double-clicked? (/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDown	includes/imgui.h	/^    bool        MouseDown[5];                       \/\/ Mouse buttons: 0=left, 1=right, 2=middl/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDownDuration	includes/imgui.h	/^    float       MouseDownDuration[5];               \/\/ Duration the mouse button has been down/;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDownDurationPrev	includes/imgui.h	/^    float       MouseDownDurationPrev[5];           \/\/ Previous time the mouse button has been/;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDownOwned	includes/imgui.h	/^    bool        MouseDownOwned[5];                  \/\/ Track if button was clicked inside a de/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDownOwnedUnlessPopupClose	includes/imgui.h	/^    bool        MouseDownOwnedUnlessPopupClose[5];  \/\/ Track if button was clicked inside a de/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDragMaxDistanceSqr	includes/imgui.h	/^    float       MouseDragMaxDistanceSqr[5];         \/\/ Squared maximum distance of how much mo/;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDragThreshold	includes/imgui.h	/^    float       MouseDragThreshold;             \/\/ = 6.0f           \/\/ Distance threshold be/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDrawCursor	includes/imgui.h	/^    bool        MouseDrawCursor;                \/\/ = false          \/\/ Request ImGui to draw/;"	m	struct:ImGuiIO	typeref:typename:bool
MouseLastValidPos	includes/imgui_internal.h	/^    ImVec2                  MouseLastValidPos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
MousePos	includes/imgui.h	/^    ImVec2      MousePos;                           \/\/ Mouse position, in pixels. Set to ImVec/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MousePos	includes/imgui_internal.h	/^        ImGuiInputEventMousePos     MousePos;       \/\/ if Type == ImGuiInputEventType_MousePos$/;"	m	union:ImGuiInputEvent::__anonf46a7b98020a	typeref:typename:ImGuiInputEventMousePos
MousePosPrev	includes/imgui.h	/^    ImVec2      MousePosPrev;                       \/\/ Previous mouse position (note that Mous/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MouseReleased	includes/imgui.h	/^    bool        MouseReleased[5];                   \/\/ Mouse button went from Down to !Down$/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseReleasedTime	includes/imgui.h	/^    double      MouseReleasedTime[5];               \/\/ Time of last released (rarely used! but/;"	m	struct:ImGuiIO	typeref:typename:double[5]
MouseSource	includes/imgui.h	/^    ImGuiMouseSource MouseSource;                   \/\/ Mouse actual input peripheral (Mouse\/T/;"	m	struct:ImGuiIO	typeref:typename:ImGuiMouseSource
MouseSource	includes/imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseButton	typeref:typename:ImGuiMouseSource
MouseSource	includes/imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMousePos	typeref:typename:ImGuiMouseSource
MouseSource	includes/imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseWheel	typeref:typename:ImGuiMouseSource
MouseStationaryTimer	includes/imgui_internal.h	/^    float                   MouseStationaryTimer;               \/\/ Time the mouse has been sta/;"	m	struct:ImGuiContext	typeref:typename:float
MouseWheel	includes/imgui.h	/^    float       MouseWheel;                         \/\/ Mouse wheel Vertical: 1 unit scrolls ab/;"	m	struct:ImGuiIO	typeref:typename:float
MouseWheel	includes/imgui_internal.h	/^        ImGuiInputEventMouseWheel   MouseWheel;     \/\/ if Type == ImGuiInputEventType_MouseWhe/;"	m	union:ImGuiInputEvent::__anonf46a7b98020a	typeref:typename:ImGuiInputEventMouseWheel
MouseWheelH	includes/imgui.h	/^    float       MouseWheelH;                        \/\/ Mouse wheel Horizontal. >0 scrolls Left/;"	m	struct:ImGuiIO	typeref:typename:float
MouseWheelRequestAxisSwap	includes/imgui.h	/^    bool        MouseWheelRequestAxisSwap;          \/\/ On a non-Mac system, holding SHIFT requ/;"	m	struct:ImGuiIO	typeref:typename:bool
MoveAll	imgui_demo.cpp	/^    void MoveAll(int src, int dst)$/;"	f	struct:ExampleDualListBox	typeref:typename:void	file:
MoveId	includes/imgui_internal.h	/^    ImGuiID                 MoveId;                             \/\/ == window->GetID("#MOVE")$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
MoveSelected	imgui_demo.cpp	/^    void MoveSelected(int src, int dst)$/;"	f	struct:ExampleDualListBox	typeref:typename:void	file:
MovingWindow	includes/imgui_internal.h	/^    ImGuiWindow*            MovingWindow;                       \/\/ Track the window we clicked/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
MultiSelectAddSetAll	imgui_widgets.cpp	/^void ImGui::MultiSelectAddSetAll(ImGuiMultiSelectTempData* ms, bool selected)$/;"	f	class:ImGui	typeref:typename:void
MultiSelectAddSetRange	imgui_widgets.cpp	/^void ImGui::MultiSelectAddSetRange(ImGuiMultiSelectTempData* ms, bool selected, int range_dir, I/;"	f	class:ImGui	typeref:typename:void
MultiSelectItemFooter	imgui_widgets.cpp	/^void ImGui::MultiSelectItemFooter(ImGuiID id, bool* p_selected, bool* p_pressed)$/;"	f	class:ImGui	typeref:typename:void
MultiSelectItemHeader	imgui_widgets.cpp	/^void ImGui::MultiSelectItemHeader(ImGuiID id, bool* p_selected, ImGuiButtonFlags* p_button_flags/;"	f	class:ImGui	typeref:typename:void
MultiSelectStorage	includes/imgui_internal.h	/^    ImPool<ImGuiMultiSelectState>   MultiSelectStorage;$/;"	m	struct:ImGuiContext	typeref:typename:ImPool<ImGuiMultiSelectState>
MultiSelectTempData	includes/imgui_internal.h	/^    ImVector<ImGuiMultiSelectTempData> MultiSelectTempData;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiMultiSelectTempData>
MultiSelectTempDataStacked	includes/imgui_internal.h	/^    int                             MultiSelectTempDataStacked; \/\/ Temporary multi-select data/;"	m	struct:ImGuiContext	typeref:typename:int
Music	includes/raylib.h	/^typedef struct Music {$/;"	s
Music	includes/raylib.h	/^} Music;$/;"	t	typeref:struct:Music
MyCallback	imgui_demo.cpp	/^                static int MyCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:int	file:
MyDocument	imgui_demo.cpp	/^    MyDocument(int uid, const char* name, bool open = true, const ImVec4& color = ImVec4(1.0f, 1/;"	f	struct:MyDocument	file:
MyDocument	imgui_demo.cpp	/^struct MyDocument$/;"	s	file:
MyInputTextMultiline	imgui_demo.cpp	/^                static bool MyInputTextMultiline(const char* label, ImVector<char>* my_str, cons/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:bool	file:
MyItem	imgui_demo.cpp	/^struct MyItem$/;"	s	namespace:__anon5ba881550511	file:
MyItemColumnID	imgui_demo.cpp	/^enum MyItemColumnID$/;"	g	namespace:__anon5ba881550511	file:
MyItemColumnID_Action	imgui_demo.cpp	/^    MyItemColumnID_Action,$/;"	e	enum:__anon5ba881550511::MyItemColumnID	file:
MyItemColumnID_Description	imgui_demo.cpp	/^    MyItemColumnID_Description$/;"	e	enum:__anon5ba881550511::MyItemColumnID	file:
MyItemColumnID_ID	imgui_demo.cpp	/^    MyItemColumnID_ID,$/;"	e	enum:__anon5ba881550511::MyItemColumnID	file:
MyItemColumnID_Name	imgui_demo.cpp	/^    MyItemColumnID_Name,$/;"	e	enum:__anon5ba881550511::MyItemColumnID	file:
MyItemColumnID_Quantity	imgui_demo.cpp	/^    MyItemColumnID_Quantity,$/;"	e	enum:__anon5ba881550511::MyItemColumnID	file:
MyResizeCallback	imgui_demo.cpp	/^                static int MyResizeCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:int	file:
MyTreeNode	imgui_demo.cpp	/^            struct MyTreeNode$/;"	s	function:ShowDemoWindowTables	file:
NAME	Makefile	/^NAME = flocksim$/;"	m
NAV_ACTIVATE_HIGHLIGHT_TIMER	imgui.cpp	/^static const float NAV_ACTIVATE_HIGHLIGHT_TIMER             = 0.10f;    \/\/ Time to highlight a/;"	v	typeref:typename:const float	file:
NAV_WINDOWING_HIGHLIGHT_DELAY	imgui.cpp	/^static const float NAV_WINDOWING_HIGHLIGHT_DELAY            = 0.20f;    \/\/ Time before the hig/;"	v	typeref:typename:const float	file:
NAV_WINDOWING_LIST_APPEAR_DELAY	imgui.cpp	/^static const float NAV_WINDOWING_LIST_APPEAR_DELAY          = 0.15f;    \/\/ Time before the win/;"	v	typeref:typename:const float	file:
NB_BOIDS	includes/classes/Boid.hpp	/^# define NB_BOIDS /;"	d
NOMINMAX	imgui.cpp	/^#define NOMINMAX$/;"	d	file:
NPATCH_NINE_PATCH	includes/raylib.h	/^    NPATCH_NINE_PATCH = 0,          \/\/ Npatch layout: 3x3 tiles$/;"	e	enum:__anonce11f6a41603
NPATCH_THREE_PATCH_HORIZONTAL	includes/raylib.h	/^    NPATCH_THREE_PATCH_HORIZONTAL   \/\/ Npatch layout: 3x1 tiles$/;"	e	enum:__anonce11f6a41603
NPATCH_THREE_PATCH_VERTICAL	includes/raylib.h	/^    NPATCH_THREE_PATCH_VERTICAL,    \/\/ Npatch layout: 1x3 tiles$/;"	e	enum:__anonce11f6a41603
NPatchInfo	includes/raylib.h	/^typedef struct NPatchInfo {$/;"	s
NPatchInfo	includes/raylib.h	/^} NPatchInfo;$/;"	t	typeref:struct:NPatchInfo
NPatchLayout	includes/raylib.h	/^} NPatchLayout;$/;"	t	typeref:enum:__anonce11f6a41603
Name	imgui_demo.cpp	/^                const char*     Name;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:const char *	file:
Name	imgui_demo.cpp	/^    char                        Name[28] = "";$/;"	m	struct:ExampleTreeNode	typeref:typename:char[28]	file:
Name	imgui_demo.cpp	/^    char        Name[32];   \/\/ Document title$/;"	m	struct:MyDocument	typeref:typename:char[32]	file:
Name	imgui_demo.cpp	/^    const char*     Name;       \/\/ Member name$/;"	m	struct:ExampleMemberInfo	typeref:typename:const char *	file:
Name	imgui_demo.cpp	/^    const char* Name;$/;"	m	struct:__anon5ba881550511::MyItem	typeref:typename:const char *	file:
Name	imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	m	struct:EditTableSizingFlags::EnumDesc	typeref:typename:const char *	file:
Name	includes/imgui.h	/^    char            Name[40];               \/\/ Name (strictly to ease debugging)$/;"	m	struct:ImFontConfig	typeref:typename:char[40]
Name	includes/imgui_internal.h	/^    char*                   Name;                               \/\/ Window name, owned by the w/;"	m	struct:ImGuiWindow	typeref:typename:char *
Name	includes/imgui_internal.h	/^    const char* Name;           \/\/ Short descriptive name for the type, for debugging$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
NameBufLen	includes/imgui_internal.h	/^    int                     NameBufLen;                         \/\/ Size of buffer storing Name/;"	m	struct:ImGuiWindow	typeref:typename:int
NameOffset	includes/imgui_internal.h	/^    ImS16                   NameOffset;                     \/\/ Offset into parent ColumnsNames/;"	m	struct:ImGuiTableColumn	typeref:typename:ImS16
NameOffset	includes/imgui_internal.h	/^    ImS32               NameOffset;             \/\/ When Window==NULL, offset to name within pa/;"	m	struct:ImGuiTabItem	typeref:typename:ImS32
NavActivateDownId	includes/imgui_internal.h	/^    ImGuiID                 NavActivateDownId;                  \/\/ ~~ IsKeyDown(ImGuiKey_Space/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActivateFlags	includes/imgui_internal.h	/^    ImGuiActivateFlags      NavActivateFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiActivateFlags
NavActivateId	includes/imgui_internal.h	/^    ImGuiID                 NavActivateId;                      \/\/ ~~ (g.ActiveId == 0) && (Is/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActivatePressedId	includes/imgui_internal.h	/^    ImGuiID                 NavActivatePressedId;               \/\/ ~~ IsKeyPressed(ImGuiKey_Sp/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActive	includes/imgui.h	/^    bool        NavActive;                          \/\/ Keyboard\/Gamepad navigation is current/;"	m	struct:ImGuiIO	typeref:typename:bool
NavAnyRequest	includes/imgui_internal.h	/^    bool                    NavAnyRequest;                      \/\/ ~~ NavMoveRequest || NavIni/;"	m	struct:ImGuiContext	typeref:typename:bool
NavApplyItemToResult	imgui.cpp	/^static void ImGui::NavApplyItemToResult(ImGuiNavItemData* result)$/;"	f	class:ImGui	typeref:typename:void	file:
NavBiasScoringRect	imgui.cpp	/^static void NavBiasScoringRect(ImRect& r, ImVec2& preferred_pos_rel, ImGuiDir move_dir, ImGuiNav/;"	f	typeref:typename:void	file:
NavCalcPreferredRefPos	imgui.cpp	/^static ImVec2 ImGui::NavCalcPreferredRefPos()$/;"	f	class:ImGui	typeref:typename:ImVec2	file:
NavCalcPreferredRefPosSource	imgui.cpp	/^static ImGuiInputSource ImGui::NavCalcPreferredRefPosSource()$/;"	f	class:ImGui	typeref:typename:ImGuiInputSource	file:
NavClearPreferredPosForAxis	imgui.cpp	/^void ImGui::NavClearPreferredPosForAxis(ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:void
NavCursorHideFrames	includes/imgui_internal.h	/^    ImS8                    NavCursorHideFrames;$/;"	m	struct:ImGuiContext	typeref:typename:ImS8
NavCursorVisible	includes/imgui_internal.h	/^    bool                    NavCursorVisible;                   \/\/ Nav focus cursor\/rectangle/;"	m	struct:ImGuiContext	typeref:typename:bool
NavEndFrame	imgui.cpp	/^static void ImGui::NavEndFrame()$/;"	f	class:ImGui	typeref:typename:void	file:
NavFocusRoute	includes/imgui_internal.h	/^    ImVector<ImGuiFocusScopeData> NavFocusRoute;                \/\/ Reversed copy focus scope s/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiFocusScopeData>
NavFocusScopeId	includes/imgui_internal.h	/^    ImGuiID                 NavFocusScopeId;                    \/\/ Focused focus scope (e.g. s/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavHideHighlightOneFrame	includes/imgui_internal.h	/^    bool                    NavHideHighlightOneFrame;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavHighlightActivated	imgui.cpp	/^void ImGui::NavHighlightActivated(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
NavHighlightActivatedId	includes/imgui_internal.h	/^    ImGuiID                 NavHighlightActivatedId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavHighlightActivatedTimer	includes/imgui_internal.h	/^    float                   NavHighlightActivatedTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavHighlightItemUnderNav	includes/imgui_internal.h	/^    bool                    NavHighlightItemUnderNav;           \/\/ Disable mouse hovering high/;"	m	struct:ImGuiContext	typeref:typename:bool
NavId	includes/imgui_internal.h	/^    ImGuiID                 NavId;                              \/\/ Focused item for navigation$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavIdIsAlive	includes/imgui_internal.h	/^    bool                    NavIdIsAlive;                       \/\/ Nav widget has been seen th/;"	m	struct:ImGuiContext	typeref:typename:bool
NavIdItem	includes/imgui.h	/^    ImGuiSelectionUserData      NavIdItem;      \/\/  ms:w, app:r     \/                \/\/ (If/;"	m	struct:ImGuiMultiSelectIO	typeref:typename:ImGuiSelectionUserData
NavIdItem	includes/imgui_internal.h	/^    ImGuiSelectionUserData  NavIdItem;          \/\/ SetNextItemSelectionUserData() value for Na/;"	m	struct:ImGuiMultiSelectState	typeref:typename:ImGuiSelectionUserData
NavIdPassedBy	includes/imgui_internal.h	/^    bool                    NavIdPassedBy;$/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:bool
NavIdSelected	includes/imgui.h	/^    bool                        NavIdSelected;  \/\/  ms:w, app:r     \/        app:r   \/\/ (If/;"	m	struct:ImGuiMultiSelectIO	typeref:typename:bool
NavIdSelected	includes/imgui_internal.h	/^    ImS8                    NavIdSelected;      \/\/ -1 (don't have) or true\/false$/;"	m	struct:ImGuiMultiSelectState	typeref:typename:ImS8
NavInitRequest	includes/imgui_internal.h	/^    bool                    NavInitRequest;                     \/\/ Init request for appearing /;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitRequestApplyResult	imgui.cpp	/^void ImGui::NavInitRequestApplyResult()$/;"	f	class:ImGui	typeref:typename:void
NavInitRequestFromMove	includes/imgui_internal.h	/^    bool                    NavInitRequestFromMove;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitResult	includes/imgui_internal.h	/^    ImGuiNavItemData        NavInitResult;                      \/\/ Init request result (first /;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavInitWindow	imgui.cpp	/^void ImGui::NavInitWindow(ImGuiWindow* window, bool force_reinit)$/;"	f	class:ImGui	typeref:typename:void
NavInputSource	includes/imgui_internal.h	/^    ImGuiInputSource        NavInputSource;                     \/\/ Keyboard or Gamepad mode? T/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputSource
NavIsScrollPushableX	includes/imgui_internal.h	/^    bool                    NavIsScrollPushableX;   \/\/ Set when current work location may be s/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavJustMovedFromFocusScopeId	includes/imgui_internal.h	/^    ImGuiID                 NavJustMovedFromFocusScopeId;       \/\/ Just navigated from this fo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavJustMovedToFocusScopeId	includes/imgui_internal.h	/^    ImGuiID                 NavJustMovedToFocusScopeId;         \/\/ Just navigated to this focu/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavJustMovedToHasSelectionData	includes/imgui_internal.h	/^    bool                    NavJustMovedToHasSelectionData;     \/\/ Copy of move result's ItemF/;"	m	struct:ImGuiContext	typeref:typename:bool
NavJustMovedToId	includes/imgui_internal.h	/^    ImGuiID                 NavJustMovedToId;                   \/\/ Just navigated to this id (/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavJustMovedToIsTabbing	includes/imgui_internal.h	/^    bool                    NavJustMovedToIsTabbing;            \/\/ Copy of ImGuiNavMoveFlags_I/;"	m	struct:ImGuiContext	typeref:typename:bool
NavJustMovedToKeyMods	includes/imgui_internal.h	/^    ImGuiKeyChord           NavJustMovedToKeyMods;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
NavLastChildNavWindow	includes/imgui_internal.h	/^    ImGuiWindow*            NavLastChildNavWindow;              \/\/ When going to the menu bar,/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
NavLastIds	includes/imgui_internal.h	/^    ImGuiID                 NavLastIds[ImGuiNavLayer_COUNT];    \/\/ Last known NavId for this w/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID[]
NavLastValidSelectionUserData	includes/imgui_internal.h	/^    ImGuiSelectionUserData  NavLastValidSelectionUserData;      \/\/ Last valid data passed to S/;"	m	struct:ImGuiContext	typeref:typename:ImGuiSelectionUserData
NavLayer	includes/imgui_internal.h	/^    ImGuiNavLayer           NavLayer;                           \/\/ Focused layer (main scrolli/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavLayer
NavLayerCurrent	includes/imgui_internal.h	/^    ImGuiNavLayer           NavLayerCurrent;        \/\/ Current layer, 0..31 (we currently only/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiNavLayer
NavLayerCurrent	includes/imgui_internal.h	/^    ImS8                    NavLayerCurrent;                \/\/ ImGuiNavLayer in 1 byte$/;"	m	struct:ImGuiTableColumn	typeref:typename:ImS8
NavLayersActiveMask	includes/imgui_internal.h	/^    short                   NavLayersActiveMask;    \/\/ Which layers have been written to (resu/;"	m	struct:ImGuiWindowTempData	typeref:typename:short
NavLayersActiveMaskNext	includes/imgui_internal.h	/^    short                   NavLayersActiveMaskNext;\/\/ Which layers have been written to (accu/;"	m	struct:ImGuiWindowTempData	typeref:typename:short
NavMousePosDirty	includes/imgui_internal.h	/^    bool                    NavMousePosDirty;                   \/\/ When set we will update mou/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveClipDir	includes/imgui_internal.h	/^    ImGuiDir                NavMoveClipDir;                     \/\/ FIXME-NAV: Describe the pur/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveDir	includes/imgui_internal.h	/^    ImGuiDir                NavMoveDir;                         \/\/ Direction of the move reque/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveDirForDebug	includes/imgui_internal.h	/^    ImGuiDir                NavMoveDirForDebug;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveFlags	includes/imgui_internal.h	/^    ImGuiNavMoveFlags       NavMoveFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavMoveFlags
NavMoveForwardToNextFrame	includes/imgui_internal.h	/^    bool                    NavMoveForwardToNextFrame;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveKeyMods	includes/imgui_internal.h	/^    ImGuiKeyChord           NavMoveKeyMods;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
NavMoveRequestApplyResult	imgui.cpp	/^void ImGui::NavMoveRequestApplyResult()$/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestButNoResultYet	imgui.cpp	/^bool ImGui::NavMoveRequestButNoResultYet()$/;"	f	class:ImGui	typeref:typename:bool
NavMoveRequestCancel	imgui.cpp	/^void ImGui::NavMoveRequestCancel()$/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestForward	imgui.cpp	/^void ImGui::NavMoveRequestForward(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_f/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestResolveWithLastItem	imgui.cpp	/^void ImGui::NavMoveRequestResolveWithLastItem(ImGuiNavItemData* result)$/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestResolveWithPastTreeNode	imgui.cpp	/^void ImGui::NavMoveRequestResolveWithPastTreeNode(ImGuiNavItemData* result, ImGuiTreeNodeStackDa/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestSubmit	imgui.cpp	/^void ImGui::NavMoveRequestSubmit(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_fl/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestTryWrapping	imgui.cpp	/^void ImGui::NavMoveRequestTryWrapping(ImGuiWindow* window, ImGuiNavMoveFlags wrap_flags)$/;"	f	class:ImGui	typeref:typename:void
NavMoveResultLocal	includes/imgui_internal.h	/^    ImGuiNavItemData        NavMoveResultLocal;                 \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavMoveResultLocalVisible	includes/imgui_internal.h	/^    ImGuiNavItemData        NavMoveResultLocalVisible;          \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavMoveResultOther	includes/imgui_internal.h	/^    ImGuiNavItemData        NavMoveResultOther;                 \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavMoveScoringItems	includes/imgui_internal.h	/^    bool                    NavMoveScoringItems;                \/\/ Move request submitted, sti/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveScrollFlags	includes/imgui_internal.h	/^    ImGuiScrollFlags        NavMoveScrollFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiScrollFlags
NavMoveSubmitted	includes/imgui_internal.h	/^    bool                    NavMoveSubmitted;                   \/\/ Move request submitted, wil/;"	m	struct:ImGuiContext	typeref:typename:bool
NavNextActivateFlags	includes/imgui_internal.h	/^    ImGuiActivateFlags      NavNextActivateFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiActivateFlags
NavNextActivateId	includes/imgui_internal.h	/^    ImGuiID                 NavNextActivateId;                  \/\/ Set by ActivateItem(), queu/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavPreferredScoringPosRel	includes/imgui_internal.h	/^    ImVec2                  NavPreferredScoringPosRel[ImGuiNavLayer_COUNT]; \/\/ Preferred X\/Y /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2[]
NavProcessItem	imgui.cpp	/^static void ImGui::NavProcessItem()$/;"	f	class:ImGui	typeref:typename:void	file:
NavProcessItemForTabbingRequest	imgui.cpp	/^void ImGui::NavProcessItemForTabbingRequest(ImGuiID id, ImGuiItemFlags item_flags, ImGuiNavMoveF/;"	f	class:ImGui	typeref:typename:void
NavRect	includes/imgui_internal.h	/^    ImRect                  NavRect;            \/\/ Navigation scoring rectangle (not displayed/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
NavRect	includes/imgui_internal.h	/^    ImRect                  NavRect;    \/\/ Used for nav landing$/;"	m	struct:ImGuiTreeNodeStackData	typeref:typename:ImRect
NavRectRel	includes/imgui_internal.h	/^    ImRect                  NavRectRel[ImGuiNavLayer_COUNT];    \/\/ Reference rectangle, in win/;"	m	struct:ImGuiWindow	typeref:typename:ImRect[]
NavRestoreLastChildNavWindow	imgui.cpp	/^static ImGuiWindow* ImGui::NavRestoreLastChildNavWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *	file:
NavRestoreLayer	imgui.cpp	/^void ImGui::NavRestoreLayer(ImGuiNavLayer layer)$/;"	f	class:ImGui	typeref:typename:void
NavRootFocusScopeId	includes/imgui_internal.h	/^    ImGuiID                 NavRootFocusScopeId;                \/\/ Focus Scope ID at the time /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
NavSaveLastChildNavWindowIntoParent	imgui.cpp	/^static void ImGui::NavSaveLastChildNavWindowIntoParent(ImGuiWindow* nav_window)$/;"	f	class:ImGui	typeref:typename:void	file:
NavScoreItem	imgui.cpp	/^static bool ImGui::NavScoreItem(ImGuiNavItemData* result)$/;"	f	class:ImGui	typeref:typename:bool	file:
NavScoreItemDistInterval	imgui.cpp	/^static float inline NavScoreItemDistInterval(float cand_min, float cand_max, float curr_min, flo/;"	f	typeref:typename:float	file:
NavScoringDebugCount	includes/imgui_internal.h	/^    int                     NavScoringDebugCount;               \/\/ Metrics for debugging$/;"	m	struct:ImGuiContext	typeref:typename:int
NavScoringNoClipRect	includes/imgui_internal.h	/^    ImRect                  NavScoringNoClipRect;               \/\/ Some nav operations (such a/;"	m	struct:ImGuiContext	typeref:typename:ImRect
NavScoringRect	includes/imgui_internal.h	/^    ImRect                  NavScoringRect;                     \/\/ Rectangle used for scoring,/;"	m	struct:ImGuiContext	typeref:typename:ImRect
NavTabbingCounter	includes/imgui_internal.h	/^    int                     NavTabbingCounter;                  \/\/ >0 when counting items for /;"	m	struct:ImGuiContext	typeref:typename:int
NavTabbingDir	includes/imgui_internal.h	/^    int                     NavTabbingDir;                      \/\/ Generally -1 or +1, 0 when /;"	m	struct:ImGuiContext	typeref:typename:int
NavTabbingResultFirst	includes/imgui_internal.h	/^    ImGuiNavItemData        NavTabbingResultFirst;              \/\/ First tabbing request candi/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavUpdate	imgui.cpp	/^static void ImGui::NavUpdate()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateAnyRequestFlag	imgui.cpp	/^static inline void ImGui::NavUpdateAnyRequestFlag()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateCancelRequest	imgui.cpp	/^static void ImGui::NavUpdateCancelRequest()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateCreateMoveRequest	imgui.cpp	/^void ImGui::NavUpdateCreateMoveRequest()$/;"	f	class:ImGui	typeref:typename:void
NavUpdateCreateTabbingRequest	imgui.cpp	/^void ImGui::NavUpdateCreateTabbingRequest()$/;"	f	class:ImGui	typeref:typename:void
NavUpdateCreateWrappingRequest	imgui.cpp	/^static void ImGui::NavUpdateCreateWrappingRequest()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateCurrentWindowIsScrollPushableX	imgui.cpp	/^void ImGui::NavUpdateCurrentWindowIsScrollPushableX()$/;"	f	class:ImGui	typeref:typename:void
NavUpdatePageUpPageDown	imgui.cpp	/^static float ImGui::NavUpdatePageUpPageDown()$/;"	f	class:ImGui	typeref:typename:float	file:
NavUpdateWindowing	imgui.cpp	/^static void ImGui::NavUpdateWindowing()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateWindowingOverlay	imgui.cpp	/^void ImGui::NavUpdateWindowingOverlay()$/;"	f	class:ImGui	typeref:typename:void
NavUpdateWindowingTarget	imgui.cpp	/^static void NavUpdateWindowingTarget(int focus_change_dir)$/;"	f	typeref:typename:void	file:
NavVisible	includes/imgui.h	/^    bool        NavVisible;                         \/\/ Keyboard\/Gamepad navigation highlight /;"	m	struct:ImGuiIO	typeref:typename:bool
NavWindow	includes/imgui_internal.h	/^    ImGuiWindow*            NavWindow;                          \/\/ Focused window for navigati/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowHasScrollY	includes/imgui_internal.h	/^    bool                    NavWindowHasScrollY;    \/\/ Set per window when scrolling can be us/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavWindowingAccumDeltaPos	includes/imgui_internal.h	/^    ImVec2                  NavWindowingAccumDeltaPos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
NavWindowingAccumDeltaSize	includes/imgui_internal.h	/^    ImVec2                  NavWindowingAccumDeltaSize;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
NavWindowingHighlightAlpha	includes/imgui_internal.h	/^    float                   NavWindowingHighlightAlpha;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavWindowingListWindow	includes/imgui_internal.h	/^    ImGuiWindow*            NavWindowingListWindow;             \/\/ Internal window actually li/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTarget	includes/imgui_internal.h	/^    ImGuiWindow*            NavWindowingTarget;                 \/\/ Target window when doing CT/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTargetAnim	includes/imgui_internal.h	/^    ImGuiWindow*            NavWindowingTargetAnim;             \/\/ Record of last valid NavWin/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTimer	includes/imgui_internal.h	/^    float                   NavWindowingTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavWindowingToggleKey	includes/imgui_internal.h	/^    ImGuiKey                NavWindowingToggleKey;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKey
NavWindowingToggleLayer	includes/imgui_internal.h	/^    bool                    NavWindowingToggleLayer;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NewFrame	imgui.cpp	/^void ImGui::NewFrame()$/;"	f	class:ImGui	typeref:typename:void
NewLine	imgui_widgets.cpp	/^void ImGui::NewLine()$/;"	f	class:ImGui	typeref:typename:void
Next	imgui_draw.cpp	/^    ImTriangulatorNode*     Next;$/;"	m	struct:ImTriangulatorNode	typeref:typename:ImTriangulatorNode *	file:
NextColumn	imgui_tables.cpp	/^void ImGui::NextColumn()$/;"	f	class:ImGui	typeref:typename:void
NextEnabledColumn	includes/imgui_internal.h	/^    ImGuiTableColumnIdx     NextEnabledColumn;              \/\/ Index of next enabled\/visible /;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
NextEntryIndex	includes/imgui_internal.h	/^    ImGuiKeyRoutingIndex            NextEntryIndex;$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImGuiKeyRoutingIndex
NextItemData	includes/imgui_internal.h	/^    ImGuiNextItemData       NextItemData;                       \/\/ Storage for SetNextItem** f/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNextItemData
NextItemId	imgui_demo.cpp	/^    ImGuiID         NextItemId = 0;             \/\/ Unique identifier when creating new items$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:ImGuiID	file:
NextSelectedTabId	includes/imgui_internal.h	/^    ImGuiID             NextSelectedTabId;      \/\/ Next selected tab\/window. Will also trigge/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
NextTotalWidth	includes/imgui_internal.h	/^    ImU32       NextTotalWidth;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU32
NextWindowData	includes/imgui_internal.h	/^    ImGuiNextWindowData     NextWindowData;                     \/\/ Storage for SetNextWindow**/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNextWindowData
Normalize	includes/raymath.h	/^RMAPI float Normalize(float value, float start, float end)$/;"	f	typeref:typename:RMAPI float
NotifyOfDocumentsClosedElsewhere	imgui_demo.cpp	/^    void NotifyOfDocumentsClosedElsewhere()$/;"	f	struct:ExampleAppDocuments	typeref:typename:void	file:
OBJ	Makefile	/^OBJ = $(SRC:.cpp=.o)$/;"	m
ORANGE	includes/raylib.h	/^#define ORANGE /;"	d
OffMaxX	includes/imgui_internal.h	/^    float               OffMinX, OffMaxX;       \/\/ Offsets from HostWorkRect.Min.x$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
OffMinX	includes/imgui_internal.h	/^    float               OffMinX, OffMaxX;       \/\/ Offsets from HostWorkRect.Min.x$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
Offset	imgui_demo.cpp	/^    int             Offset;     \/\/ Offset inside parent structure$/;"	m	struct:ExampleMemberInfo	typeref:typename:int	file:
Offset	includes/imgui_internal.h	/^    ImU32           Offset;     \/\/ Offset in parent structure$/;"	m	struct:ImGuiDataVarInfo	typeref:typename:ImU32
Offset	includes/imgui_internal.h	/^    float               Offset;                 \/\/ Position relative to beginning of tab$/;"	m	struct:ImGuiTabItem	typeref:typename:float
OffsetIcon	includes/imgui_internal.h	/^    ImU16       OffsetIcon;         \/\/ Always zero for now$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
OffsetLabel	includes/imgui_internal.h	/^    ImU16       OffsetLabel;        \/\/ Offsets are locked in Update()$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
OffsetMark	includes/imgui_internal.h	/^    ImU16       OffsetMark;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
OffsetNorm	includes/imgui_internal.h	/^    float               OffsetNorm;             \/\/ Column start offset, normalized 0.0 (far le/;"	m	struct:ImGuiOldColumnData	typeref:typename:float
OffsetNormBeforeResize	includes/imgui_internal.h	/^    float               OffsetNormBeforeResize;$/;"	m	struct:ImGuiOldColumnData	typeref:typename:float
OffsetShortcut	includes/imgui_internal.h	/^    ImU16       OffsetShortcut;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
Offsets	includes/imgui_internal.h	/^    int     Offsets[CHUNKS];$/;"	m	struct:ImSpanAllocator	typeref:typename:int[]
OldCallback	imgui_widgets.cpp	/^struct ImGuiGetNameFromIndexOldToNewCallbackData { void* UserData; bool (*OldCallback)(void*, in/;"	m	struct:ImGuiGetNameFromIndexOldToNewCallbackData	typeref:typename:bool (*)(void *,int,const char **)	file:
OnCharPressed	imgui_widgets.cpp	/^void ImGuiInputTextState::OnCharPressed(unsigned int c)$/;"	f	class:ImGuiInputTextState	typeref:typename:void
OnKeyPressed	imgui_widgets.cpp	/^void ImGuiInputTextState::OnKeyPressed(int key)$/;"	f	class:ImGuiInputTextState	typeref:typename:void
Open	imgui_demo.cpp	/^    bool        Open;       \/\/ Set when open (we keep an array of all available documents to s/;"	m	struct:MyDocument	typeref:typename:bool	file:
OpenCond	includes/imgui_internal.h	/^    ImU8                        OpenCond;           \/\/ Set by SetNextItemOpen()$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImU8
OpenFrameCount	includes/imgui_internal.h	/^    int                 OpenFrameCount; \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupData	typeref:typename:int
OpenMousePos	includes/imgui_internal.h	/^    ImVec2              OpenMousePos;   \/\/ Set on OpenPopup(), copy of mouse position at the t/;"	m	struct:ImGuiPopupData	typeref:typename:ImVec2
OpenParentId	includes/imgui_internal.h	/^    ImGuiID             OpenParentId;   \/\/ Set on OpenPopup(), we need this to differentiate m/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiID
OpenPopup	imgui.cpp	/^void ImGui::OpenPopup(ImGuiID id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopup	imgui.cpp	/^void ImGui::OpenPopup(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupEx	imgui.cpp	/^void ImGui::OpenPopupEx(ImGuiID id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupOnItemClick	imgui.cpp	/^void ImGui::OpenPopupOnItemClick(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupPos	includes/imgui_internal.h	/^    ImVec2              OpenPopupPos;   \/\/ Set on OpenPopup(), preferred popup position (typic/;"	m	struct:ImGuiPopupData	typeref:typename:ImVec2
OpenPopupStack	includes/imgui_internal.h	/^    ImVector<ImGuiPopupData>        OpenPopupStack;             \/\/ Which popups are open (pers/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPopupData>
OpenPrev	imgui_demo.cpp	/^    bool        OpenPrev;   \/\/ Copy of Open from last update.$/;"	m	struct:MyDocument	typeref:typename:bool	file:
OpenVal	includes/imgui_internal.h	/^    bool                        OpenVal;            \/\/ Set by SetNextItemOpen()$/;"	m	struct:ImGuiNextItemData	typeref:typename:bool
OptKeepSorted	imgui_demo.cpp	/^    bool                        OptKeepSorted = true;$/;"	m	struct:ExampleDualListBox	typeref:typename:bool	file:
OuterAngle	imgui.cpp	/^    float   OuterAngle;             \/\/ Angle toward outside$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:float	file:
OuterPaddingX	includes/imgui_internal.h	/^    float                       OuterPaddingX;$/;"	m	struct:ImGuiTable	typeref:typename:float
OuterRect	includes/imgui_internal.h	/^    ImRect                      OuterRect;                  \/\/ Note: for non-scrolling table, /;"	m	struct:ImGuiTable	typeref:typename:ImRect
OuterRectClipped	includes/imgui_internal.h	/^    ImRect                  OuterRectClipped;                   \/\/ == Window->Rect() just afte/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
OuterWindow	includes/imgui_internal.h	/^    ImGuiWindow*                OuterWindow;                \/\/ Parent window for the table$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiWindow *
Overlaps	includes/imgui_internal.h	/^    bool        Overlaps(const ImRect& r) const     { return r.Min.y <  Max.y && r.Max.y >  Min./;"	f	struct:ImRect	typeref:typename:bool
OversampleH	includes/imgui.h	/^    int             OversampleH;            \/\/ 2        \/\/ Rasterize at higher quality for s/;"	m	struct:ImFontConfig	typeref:typename:int
OversampleV	includes/imgui.h	/^    int             OversampleV;            \/\/ 1        \/\/ Rasterize at higher quality for s/;"	m	struct:ImFontConfig	typeref:typename:int
Owner	includes/imgui_internal.h	/^    ImGuiID                     Owner;$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiID
OwnerCurr	includes/imgui_internal.h	/^    ImGuiID     OwnerCurr;$/;"	m	struct:ImGuiKeyOwnerData	typeref:typename:ImGuiID
OwnerNext	includes/imgui_internal.h	/^    ImGuiID     OwnerNext;$/;"	m	struct:ImGuiKeyOwnerData	typeref:typename:ImGuiID
OwnerViewport	includes/imgui.h	/^    ImGuiViewport*      OwnerViewport;      \/\/ Viewport carrying the ImDrawData instance, migh/;"	m	struct:ImDrawData	typeref:typename:ImGuiViewport *
PFNGLDRAWARRAYSINSTANCEDEXTPROC	includes/rlgl.h	/^    typedef void (GL_APIENTRYP PFNGLDRAWARRAYSINSTANCEDEXTPROC) (GLenum mode, GLint start, GLsiz/;"	t	typeref:typename:void (GL_APIENTRYP)(GLenum mode,GLint start,GLsizei count,GLsizei primcount)
PFNGLDRAWELEMENTSINSTANCEDEXTPROC	includes/rlgl.h	/^    typedef void (GL_APIENTRYP PFNGLDRAWELEMENTSINSTANCEDEXTPROC) (GLenum mode, GLsizei count, G/;"	t	typeref:typename:void (GL_APIENTRYP)(GLenum mode,GLsizei count,GLenum type,const void * indices,GLsizei primcount)
PFNGLVERTEXATTRIBDIVISOREXTPROC	includes/rlgl.h	/^    typedef void (GL_APIENTRYP PFNGLVERTEXATTRIBDIVISOREXTPROC) (GLuint index, GLuint divisor);$/;"	t	typeref:typename:void (GL_APIENTRYP)(GLuint index,GLuint divisor)
PI	includes/raylib.h	/^    #define PI /;"	d
PI	includes/raymath.h	/^    #define PI /;"	d
PI	includes/rlgl.h	/^    #define PI /;"	d
PINK	includes/raylib.h	/^#define PINK /;"	d
PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA	includes/raylib.h	/^    PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA,   \/\/ 8 bpp$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA	includes/raylib.h	/^    PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA    \/\/ 2 bpp$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_COMPRESSED_DXT1_RGB	includes/raylib.h	/^    PIXELFORMAT_COMPRESSED_DXT1_RGB,        \/\/ 4 bpp (no alpha)$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_COMPRESSED_DXT1_RGBA	includes/raylib.h	/^    PIXELFORMAT_COMPRESSED_DXT1_RGBA,       \/\/ 4 bpp (1 bit alpha)$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_COMPRESSED_DXT3_RGBA	includes/raylib.h	/^    PIXELFORMAT_COMPRESSED_DXT3_RGBA,       \/\/ 8 bpp$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_COMPRESSED_DXT5_RGBA	includes/raylib.h	/^    PIXELFORMAT_COMPRESSED_DXT5_RGBA,       \/\/ 8 bpp$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_COMPRESSED_ETC1_RGB	includes/raylib.h	/^    PIXELFORMAT_COMPRESSED_ETC1_RGB,        \/\/ 4 bpp$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA	includes/raylib.h	/^    PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA,   \/\/ 8 bpp$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_COMPRESSED_ETC2_RGB	includes/raylib.h	/^    PIXELFORMAT_COMPRESSED_ETC2_RGB,        \/\/ 4 bpp$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_COMPRESSED_PVRT_RGB	includes/raylib.h	/^    PIXELFORMAT_COMPRESSED_PVRT_RGB,        \/\/ 4 bpp$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_COMPRESSED_PVRT_RGBA	includes/raylib.h	/^    PIXELFORMAT_COMPRESSED_PVRT_RGBA,       \/\/ 4 bpp$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_UNCOMPRESSED_GRAYSCALE	includes/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_GRAYSCALE = 1, \/\/ 8 bit per pixel (no alpha)$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA	includes/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA,    \/\/ 8*2 bpp (2 channels)$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_UNCOMPRESSED_R16	includes/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R16,           \/\/ 16 bpp (1 channel - half float)$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_UNCOMPRESSED_R16G16B16	includes/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R16G16B16,     \/\/ 16*3 bpp (3 channels - half float)$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_UNCOMPRESSED_R16G16B16A16	includes/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R16G16B16A16,  \/\/ 16*4 bpp (4 channels - half float)$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_UNCOMPRESSED_R32	includes/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R32,           \/\/ 32 bpp (1 channel - float)$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_UNCOMPRESSED_R32G32B32	includes/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R32G32B32,     \/\/ 32*3 bpp (3 channels - float)$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_UNCOMPRESSED_R32G32B32A32	includes/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R32G32B32A32,  \/\/ 32*4 bpp (4 channels - float)$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_UNCOMPRESSED_R4G4B4A4	includes/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R4G4B4A4,      \/\/ 16 bpp (4 bit alpha)$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_UNCOMPRESSED_R5G5B5A1	includes/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R5G5B5A1,      \/\/ 16 bpp (1 bit alpha)$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_UNCOMPRESSED_R5G6B5	includes/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R5G6B5,        \/\/ 16 bpp$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_UNCOMPRESSED_R8G8B8	includes/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R8G8B8,        \/\/ 24 bpp$/;"	e	enum:__anonce11f6a40d03
PIXELFORMAT_UNCOMPRESSED_R8G8B8A8	includes/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R8G8B8A8,      \/\/ 32 bpp$/;"	e	enum:__anonce11f6a40d03
PRId64	imgui_demo.cpp	/^#define PRId64 /;"	d	file:
PRIu64	imgui_demo.cpp	/^#define PRIu64 /;"	d	file:
PURPLE	includes/raylib.h	/^#define PURPLE /;"	d
PackIdLines	includes/imgui.h	/^    int                         PackIdLines;        \/\/ Custom texture rectangle ID for baked a/;"	m	struct:ImFontAtlas	typeref:typename:int
PackIdMouseCursors	includes/imgui.h	/^    int                         PackIdMouseCursors; \/\/ Custom texture rectangle ID for white p/;"	m	struct:ImFontAtlas	typeref:typename:int
PackRange	imgui_draw.cpp	/^    stbtt_pack_range    PackRange;          \/\/ Hold the list of codepoints to pack (essentiall/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_pack_range	file:
PackedChars	imgui_draw.cpp	/^    stbtt_packedchar*   PackedChars;        \/\/ Output glyphs$/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_packedchar *	file:
PairComparerByID	imgui.cpp	/^static int IMGUI_CDECL PairComparerByID(const void* lhs, const void* rhs)$/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF int IMGUI_CDECL	file:
PairComparerByValueInt	imgui_widgets.cpp	/^static int IMGUI_CDECL PairComparerByValueInt(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
Parent	imgui_demo.cpp	/^    ExampleTreeNode*            Parent = NULL;$/;"	m	struct:ExampleTreeNode	typeref:typename:ExampleTreeNode *	file:
ParentLastItemDataBackup	includes/imgui_internal.h	/^    ImGuiLastItemData       ParentLastItemDataBackup;$/;"	m	struct:ImGuiWindowStackData	typeref:typename:ImGuiLastItemData
ParentLayoutType	includes/imgui_internal.h	/^    ImGuiLayoutType         ParentLayoutType;       \/\/ Layout type of parent window at the tim/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiLayoutType
ParentNavLayer	includes/imgui_internal.h	/^    int                 ParentNavLayer; \/\/ Resolved on BeginPopup(). Actually a ImGuiNavLayer /;"	m	struct:ImGuiPopupData	typeref:typename:int
ParentWindow	includes/imgui_internal.h	/^    ImGuiWindow*            ParentWindow;                       \/\/ If we are a child _or_ popu/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
ParentWindowForFocusRoute	includes/imgui_internal.h	/^    ImGuiWindow*            ParentWindowForFocusRoute;          \/\/ Set to manual link a window/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
ParentWindowInBeginStack	includes/imgui_internal.h	/^    ImGuiWindow*            ParentWindowInBeginStack;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
ParentWorkRect	includes/imgui_internal.h	/^    ImRect                  ParentWorkRect;                     \/\/ Backup of WorkRect before e/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
PassFilter	imgui.cpp	/^bool ImGuiTextFilter::PassFilter(const char* text, const char* text_end) const$/;"	f	class:ImGuiTextFilter	typeref:typename:bool
PathArcTo	imgui_draw.cpp	/^void ImDrawList::PathArcTo(const ImVec2& center, float radius, float a_min, float a_max, int num/;"	f	class:ImDrawList	typeref:typename:void
PathArcToFast	imgui_draw.cpp	/^void ImDrawList::PathArcToFast(const ImVec2& center, float radius, int a_min_of_12, int a_max_of/;"	f	class:ImDrawList	typeref:typename:void
PathBezierCubicCurveTo	imgui_draw.cpp	/^void ImDrawList::PathBezierCubicCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, in/;"	f	class:ImDrawList	typeref:typename:void
PathBezierCubicCurveToCasteljau	imgui_draw.cpp	/^static void PathBezierCubicCurveToCasteljau(ImVector<ImVec2>* path, float x1, float y1, float x2/;"	f	typeref:typename:void	file:
PathBezierQuadraticCurveTo	imgui_draw.cpp	/^void ImDrawList::PathBezierQuadraticCurveTo(const ImVec2& p2, const ImVec2& p3, int num_segments/;"	f	class:ImDrawList	typeref:typename:void
PathBezierQuadraticCurveToCasteljau	imgui_draw.cpp	/^static void PathBezierQuadraticCurveToCasteljau(ImVector<ImVec2>* path, float x1, float y1, floa/;"	f	typeref:typename:void	file:
PathClear	includes/imgui.h	/^    inline    void  PathClear()                                                 { _Path.Size = 0/;"	f	struct:ImDrawList	typeref:typename:void
PathConcaveShape	imgui_demo.cpp	/^static void PathConcaveShape(ImDrawList* draw_list, float x, float y, float sz)$/;"	f	typeref:typename:void	file:
PathEllipticalArcTo	imgui_draw.cpp	/^void ImDrawList::PathEllipticalArcTo(const ImVec2& center, const ImVec2& radius, float rot, floa/;"	f	class:ImDrawList	typeref:typename:void
PathFillConcave	includes/imgui.h	/^    inline    void  PathFillConcave(ImU32 col)                                  { AddConcavePoly/;"	f	struct:ImDrawList	typeref:typename:void
PathFillConvex	includes/imgui.h	/^    inline    void  PathFillConvex(ImU32 col)                                   { AddConvexPolyF/;"	f	struct:ImDrawList	typeref:typename:void
PathLineTo	includes/imgui.h	/^    inline    void  PathLineTo(const ImVec2& pos)                               { _Path.push_bac/;"	f	struct:ImDrawList	typeref:typename:void
PathLineToMergeDuplicate	includes/imgui.h	/^    inline    void  PathLineToMergeDuplicate(const ImVec2& pos)                 { if (_Path.Size/;"	f	struct:ImDrawList	typeref:typename:void
PathRect	imgui_draw.cpp	/^void ImDrawList::PathRect(const ImVec2& a, const ImVec2& b, float rounding, ImDrawFlags flags)$/;"	f	class:ImDrawList	typeref:typename:void
PathStroke	includes/imgui.h	/^    inline    void  PathStroke(ImU32 col, ImDrawFlags flags = 0, float thickness = 1.0f) { AddPo/;"	f	struct:ImDrawList	typeref:typename:void
PenPressure	includes/imgui.h	/^    float       PenPressure;                        \/\/ Touch\/Pen pressure (0.0f to 1.0f, shou/;"	m	struct:ImGuiIO	typeref:typename:float
PixelFormat	includes/raylib.h	/^} PixelFormat;$/;"	t	typeref:enum:__anonce11f6a40d03
PixelSnapH	includes/imgui.h	/^    bool            PixelSnapH;             \/\/ false    \/\/ Align every glyph AdvanceX to pix/;"	m	struct:ImFontConfig	typeref:typename:bool
PlatformHandle	includes/imgui.h	/^    void*               PlatformHandle;         \/\/ void* to hold higher-level, platform window/;"	m	struct:ImGuiViewport	typeref:typename:void *
PlatformHandleRaw	includes/imgui.h	/^    void*               PlatformHandleRaw;      \/\/ void* to hold lower-level, platform-native /;"	m	struct:ImGuiViewport	typeref:typename:void *
PlatformIO	includes/imgui_internal.h	/^    ImGuiPlatformIO         PlatformIO;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPlatformIO
PlatformImeData	includes/imgui_internal.h	/^    ImGuiPlatformImeData    PlatformImeData;                    \/\/ Data updated by current fra/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPlatformImeData
PlatformImeDataPrev	includes/imgui_internal.h	/^    ImGuiPlatformImeData    PlatformImeDataPrev;                \/\/ Previous frame data. When c/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPlatformImeData
Platform_ClipboardUserData	includes/imgui.h	/^    void*       Platform_ClipboardUserData;$/;"	m	struct:ImGuiPlatformIO	typeref:typename:void *
Platform_GetClipboardTextFn	includes/imgui.h	/^    const char* (*Platform_GetClipboardTextFn)(ImGuiContext* ctx);$/;"	m	struct:ImGuiPlatformIO	typeref:typename:const char * (*)(ImGuiContext * ctx)
Platform_GetClipboardTextFn_DefaultImpl	imgui.cpp	/^static const char* Platform_GetClipboardTextFn_DefaultImpl(ImGuiContext* ctx)$/;"	f	typeref:typename:const char *	file:
Platform_ImeUserData	includes/imgui.h	/^    void*       Platform_ImeUserData;$/;"	m	struct:ImGuiPlatformIO	typeref:typename:void *
Platform_LocaleDecimalPoint	includes/imgui.h	/^    ImWchar     Platform_LocaleDecimalPoint;     \/\/ '.'$/;"	m	struct:ImGuiPlatformIO	typeref:typename:ImWchar
Platform_OpenInShellFn	includes/imgui.h	/^    bool        (*Platform_OpenInShellFn)(ImGuiContext* ctx, const char* path);$/;"	m	struct:ImGuiPlatformIO	typeref:typename:bool (*)(ImGuiContext * ctx,const char * path)
Platform_OpenInShellFn_DefaultImpl	imgui.cpp	/^static bool Platform_OpenInShellFn_DefaultImpl(ImGuiContext*, const char* path)$/;"	f	typeref:typename:bool	file:
Platform_OpenInShellFn_DefaultImpl	imgui.cpp	/^static bool Platform_OpenInShellFn_DefaultImpl(ImGuiContext*, const char*) { return false; }$/;"	f	typeref:typename:bool	file:
Platform_OpenInShellUserData	includes/imgui.h	/^    void*       Platform_OpenInShellUserData;$/;"	m	struct:ImGuiPlatformIO	typeref:typename:void *
Platform_SetClipboardTextFn	includes/imgui.h	/^    void        (*Platform_SetClipboardTextFn)(ImGuiContext* ctx, const char* text);$/;"	m	struct:ImGuiPlatformIO	typeref:typename:void (*)(ImGuiContext * ctx,const char * text)
Platform_SetClipboardTextFn_DefaultImpl	imgui.cpp	/^static void Platform_SetClipboardTextFn_DefaultImpl(ImGuiContext* ctx, const char* text)$/;"	f	typeref:typename:void	file:
Platform_SetClipboardTextFn_DefaultImpl	imgui.cpp	/^static void Platform_SetClipboardTextFn_DefaultImpl(ImGuiContext*, const char* text)$/;"	f	typeref:typename:void	file:
Platform_SetImeDataFn	includes/imgui.h	/^    void        (*Platform_SetImeDataFn)(ImGuiContext* ctx, ImGuiViewport* viewport, ImGuiPlatfo/;"	m	struct:ImGuiPlatformIO	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiViewport * viewport,ImGuiPlatformImeData * data)
Platform_SetImeDataFn_DefaultImpl	imgui.cpp	/^static void Platform_SetImeDataFn_DefaultImpl(ImGuiContext*, ImGuiViewport* viewport, ImGuiPlatf/;"	f	typeref:typename:void	file:
Platform_SetImeDataFn_DefaultImpl	imgui.cpp	/^static void Platform_SetImeDataFn_DefaultImpl(ImGuiContext*, ImGuiViewport*, ImGuiPlatformImeDat/;"	f	typeref:typename:void	file:
PlotEx	imgui_widgets.cpp	/^int ImGui::PlotEx(ImGuiPlotType plot_type, const char* label, float (*values_getter)(void* data,/;"	f	class:ImGui	typeref:typename:int
PlotHistogram	imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, const float* values, int values_count, int values_o/;"	f	class:ImGui	typeref:typename:void
PlotHistogram	imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, float (*values_getter)(void* data, int idx), void* /;"	f	class:ImGui	typeref:typename:void
PlotLines	imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, const float* values, int values_count, int values_offse/;"	f	class:ImGui	typeref:typename:void
PlotLines	imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, float (*values_getter)(void* data, int idx), void* data/;"	f	class:ImGui	typeref:typename:void
Plot_ArrayGetter	imgui_widgets.cpp	/^static float Plot_ArrayGetter(void* data, int idx)$/;"	f	typeref:typename:float	file:
PopAllowKeyboardFocus	includes/imgui.h	/^    static inline void  PopAllowKeyboardFocus()                                 { PopItemFlag();/;"	f	namespace:ImGui	typeref:typename:void
PopButtonRepeat	includes/imgui.h	/^    static inline void  PopButtonRepeat()                                       { PopItemFlag();/;"	f	namespace:ImGui	typeref:typename:void
PopClipRect	imgui.cpp	/^void ImGui::PopClipRect()$/;"	f	class:ImGui	typeref:typename:void
PopClipRect	imgui_draw.cpp	/^void ImDrawList::PopClipRect()$/;"	f	class:ImDrawList	typeref:typename:void
PopColumnsBackground	imgui_tables.cpp	/^void ImGui::PopColumnsBackground()$/;"	f	class:ImGui	typeref:typename:void
PopFocusScope	imgui.cpp	/^void ImGui::PopFocusScope()$/;"	f	class:ImGui	typeref:typename:void
PopFont	imgui.cpp	/^void  ImGui::PopFont()$/;"	f	class:ImGui	typeref:typename:void
PopID	imgui.cpp	/^void ImGui::PopID()$/;"	f	class:ImGui	typeref:typename:void
PopItemFlag	imgui.cpp	/^void ImGui::PopItemFlag()$/;"	f	class:ImGui	typeref:typename:void
PopItemWidth	imgui.cpp	/^void ImGui::PopItemWidth()$/;"	f	class:ImGui	typeref:typename:void
PopStyleColor	imgui.cpp	/^void ImGui::PopStyleColor(int count)$/;"	f	class:ImGui	typeref:typename:void
PopStyleCompact	imgui_demo.cpp	/^static void PopStyleCompact()$/;"	f	typeref:typename:void	file:
PopStyleVar	imgui.cpp	/^void ImGui::PopStyleVar(int count)$/;"	f	class:ImGui	typeref:typename:void
PopTabStop	includes/imgui.h	/^    static inline void  PopTabStop()                                            { PopItemFlag();/;"	f	namespace:ImGui	typeref:typename:void
PopTextWrapPos	imgui.cpp	/^void ImGui::PopTextWrapPos()$/;"	f	class:ImGui	typeref:typename:void
PopTextureID	imgui_draw.cpp	/^void ImDrawList::PopTextureID()$/;"	f	class:ImDrawList	typeref:typename:void
PopupBorderSize	includes/imgui.h	/^    float       PopupBorderSize;            \/\/ Thickness of border around popup\/tooltip windo/;"	m	struct:ImGuiStyle	typeref:typename:float
PopupId	includes/imgui_internal.h	/^    ImGuiID                 PopupId;                            \/\/ ID in the popup stack when /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
PopupId	includes/imgui_internal.h	/^    ImGuiID             PopupId;        \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiID
PopupRounding	includes/imgui.h	/^    float       PopupRounding;              \/\/ Radius of popup window corners rounding. (Note /;"	m	struct:ImGuiStyle	typeref:typename:float
Pos	imgui.ini	/^Pos=1070,24$/;"	k	section:Window
Pos	imgui.ini	/^Pos=119,69$/;"	k	section:Window
Pos	imgui.ini	/^Pos=12,78$/;"	k	section:Window
Pos	imgui.ini	/^Pos=17,277$/;"	k	section:Window
Pos	imgui.ini	/^Pos=197,227$/;"	k	section:Window
Pos	imgui.ini	/^Pos=244,76$/;"	k	section:Window
Pos	imgui.ini	/^Pos=361,129$/;"	k	section:Window
Pos	imgui.ini	/^Pos=374,16$/;"	k	section:Window
Pos	imgui.ini	/^Pos=45,112$/;"	k	section:Window
Pos	imgui.ini	/^Pos=60,60$/;"	k	section:Window
Pos	imgui.ini	/^Pos=604,401$/;"	k	section:Window
Pos	imgui.ini	/^Pos=842,91$/;"	k	section:Window
Pos	imgui.ini	/^Pos=870,253$/;"	k	section:Window
Pos	imgui.ini	/^Pos=9,111$/;"	k	section:Window
Pos	imgui.ini	/^Pos=929,167$/;"	k	section:Window
Pos	imgui.ini	/^Pos=940,107$/;"	k	section:Window
Pos	imgui_draw.cpp	/^    ImVec2                  Pos;$/;"	m	struct:ImTriangulatorNode	typeref:typename:ImVec2	file:
Pos	includes/imgui.h	/^    ImVec2              Pos;                    \/\/ Main Area: Position of the viewport (Dear I/;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
Pos	includes/imgui.h	/^    ImVec2  Pos;            \/\/ Read-only.   Window position, for reference.$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
Pos	includes/imgui_internal.h	/^    ImVec2                  Pos;                                \/\/ Position (always rounded-up/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
Pos	includes/imgui_internal.h	/^    ImVec2ih    Pos;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImVec2ih
PosCond	includes/imgui_internal.h	/^    ImGuiCond                   PosCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
PosPivotVal	includes/imgui_internal.h	/^    ImVec2                      PosPivotVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
PosToIndexConvert	includes/imgui_internal.h	/^    bool    PosToIndexConvert;      \/\/ Begin\/End are absolute position (will be converted to /;"	m	struct:ImGuiListClipperRange	typeref:typename:bool
PosToIndexOffsetMax	includes/imgui_internal.h	/^    ImS8    PosToIndexOffsetMax;    \/\/ Add to Min after converting to indices$/;"	m	struct:ImGuiListClipperRange	typeref:typename:ImS8
PosToIndexOffsetMin	includes/imgui_internal.h	/^    ImS8    PosToIndexOffsetMin;    \/\/ Add to Min after converting to indices$/;"	m	struct:ImGuiListClipperRange	typeref:typename:ImS8
PosVal	includes/imgui_internal.h	/^    ImVec2                      PosVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
PosX	includes/imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMousePos	typeref:typename:float
PosY	includes/imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMousePos	typeref:typename:float
PreserveOrder	includes/imgui.h	/^    bool            PreserveOrder;  \/\/ = false  \/\/ GetNextSelectedItem() will return ordered/;"	m	struct:ImGuiSelectionBasicStorage	typeref:typename:bool
Prev	imgui_draw.cpp	/^    ImTriangulatorNode*     Prev;$/;"	m	struct:ImTriangulatorNode	typeref:typename:ImTriangulatorNode *	file:
PrevEnabledColumn	includes/imgui_internal.h	/^    ImGuiTableColumnIdx     PrevEnabledColumn;              \/\/ Index of prev enabled\/visible /;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
PrevFrameVisible	includes/imgui_internal.h	/^    int                 PrevFrameVisible;$/;"	m	struct:ImGuiTabBar	typeref:typename:int
PrevLineSize	includes/imgui_internal.h	/^    ImVec2                  PrevLineSize;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
PrevLineTextBaseOffset	includes/imgui_internal.h	/^    float                   PrevLineTextBaseOffset;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
PrevTabsContentsHeight	includes/imgui_internal.h	/^    float               PrevTabsContentsHeight; \/\/ Record the height of contents submitted bel/;"	m	struct:ImGuiTabBar	typeref:typename:float
Preview	includes/imgui.h	/^    bool            Preview;            \/\/ Set when AcceptDragDropPayload() was called and mou/;"	m	struct:ImGuiPayload	typeref:typename:bool
PreviewRect	includes/imgui_internal.h	/^    ImRect          PreviewRect;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImRect
PrimQuadUV	imgui_draw.cpp	/^void ImDrawList::PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, /;"	f	class:ImDrawList	typeref:typename:void
PrimRect	imgui_draw.cpp	/^void ImDrawList::PrimRect(const ImVec2& a, const ImVec2& c, ImU32 col)$/;"	f	class:ImDrawList	typeref:typename:void
PrimRectUV	imgui_draw.cpp	/^void ImDrawList::PrimRectUV(const ImVec2& a, const ImVec2& c, const ImVec2& uv_a, const ImVec2& /;"	f	class:ImDrawList	typeref:typename:void
PrimReserve	imgui_draw.cpp	/^void ImDrawList::PrimReserve(int idx_count, int vtx_count)$/;"	f	class:ImDrawList	typeref:typename:void
PrimUnreserve	imgui_draw.cpp	/^void ImDrawList::PrimUnreserve(int idx_count, int vtx_count)$/;"	f	class:ImDrawList	typeref:typename:void
PrimVtx	includes/imgui.h	/^    inline    void  PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)         { PrimWriteI/;"	f	struct:ImDrawList	typeref:typename:void
PrimWriteIdx	includes/imgui.h	/^    inline    void  PrimWriteIdx(ImDrawIdx idx)                                     { *_IdxWrite/;"	f	struct:ImDrawList	typeref:typename:void
PrimWriteVtx	includes/imgui.h	/^    inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)    { _VtxWriteP/;"	f	struct:ImDrawList	typeref:typename:void
PrintFmt	includes/imgui_internal.h	/^    const char* PrintFmt;       \/\/ Default printf format for the type$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
ProgressBar	imgui_widgets.cpp	/^void ImGui::ProgressBar(float fraction, const ImVec2& size_arg, const char* overlay)$/;"	f	class:ImGui	typeref:typename:void
Ptr	includes/imgui_internal.h	/^    void*       Ptr;            \/\/ Either field can be set, not both. e.g. Dock node tab bars /;"	m	struct:ImGuiPtrOrIndex	typeref:typename:void *
PushAllowKeyboardFocus	includes/imgui.h	/^    static inline void  PushAllowKeyboardFocus(bool tab_stop)                   { PushItemFlag(I/;"	f	namespace:ImGui	typeref:typename:void
PushButtonRepeat	includes/imgui.h	/^    static inline void  PushButtonRepeat(bool repeat)                           { PushItemFlag(I/;"	f	namespace:ImGui	typeref:typename:void
PushClipRect	imgui.cpp	/^void ImGui::PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersec/;"	f	class:ImGui	typeref:typename:void
PushClipRect	imgui_draw.cpp	/^void ImDrawList::PushClipRect(const ImVec2& cr_min, const ImVec2& cr_max, bool intersect_with_cu/;"	f	class:ImDrawList	typeref:typename:void
PushClipRectFullScreen	imgui_draw.cpp	/^void ImDrawList::PushClipRectFullScreen()$/;"	f	class:ImDrawList	typeref:typename:void
PushColumnClipRect	imgui_tables.cpp	/^void ImGui::PushColumnClipRect(int column_index)$/;"	f	class:ImGui	typeref:typename:void
PushColumnsBackground	imgui_tables.cpp	/^void ImGui::PushColumnsBackground()$/;"	f	class:ImGui	typeref:typename:void
PushFocusScope	imgui.cpp	/^void ImGui::PushFocusScope(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
PushFont	imgui.cpp	/^void ImGui::PushFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
PushID	imgui.cpp	/^void ImGui::PushID(const char* str_id)$/;"	f	class:ImGui	typeref:typename:void
PushID	imgui.cpp	/^void ImGui::PushID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui	typeref:typename:void
PushID	imgui.cpp	/^void ImGui::PushID(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:void
PushID	imgui.cpp	/^void ImGui::PushID(int int_id)$/;"	f	class:ImGui	typeref:typename:void
PushItemFlag	imgui.cpp	/^void ImGui::PushItemFlag(ImGuiItemFlags option, bool enabled)$/;"	f	class:ImGui	typeref:typename:void
PushItemWidth	imgui.cpp	/^void ImGui::PushItemWidth(float item_width)$/;"	f	class:ImGui	typeref:typename:void
PushMultiItemsWidths	imgui.cpp	/^void ImGui::PushMultiItemsWidths(int components, float w_full)$/;"	f	class:ImGui	typeref:typename:void
PushOverrideID	imgui.cpp	/^void ImGui::PushOverrideID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
PushStyleColor	imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
PushStyleColor	imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, const ImVec4& col)$/;"	f	class:ImGui	typeref:typename:void
PushStyleCompact	imgui_demo.cpp	/^static void PushStyleCompact()$/;"	f	typeref:typename:void	file:
PushStyleVar	imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, const ImVec2& val)$/;"	f	class:ImGui	typeref:typename:void
PushStyleVar	imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, float val)$/;"	f	class:ImGui	typeref:typename:void
PushStyleVarX	imgui.cpp	/^void ImGui::PushStyleVarX(ImGuiStyleVar idx, float val_x)$/;"	f	class:ImGui	typeref:typename:void
PushStyleVarY	imgui.cpp	/^void ImGui::PushStyleVarY(ImGuiStyleVar idx, float val_y)$/;"	f	class:ImGui	typeref:typename:void
PushTabStop	includes/imgui.h	/^    static inline void  PushTabStop(bool tab_stop)                              { PushItemFlag(I/;"	f	namespace:ImGui	typeref:typename:void
PushTextWrapPos	imgui.cpp	/^void ImGui::PushTextWrapPos(float wrap_pos_x)$/;"	f	class:ImGui	typeref:typename:void
PushTextureID	imgui_draw.cpp	/^void ImDrawList::PushTextureID(ImTextureID texture_id)$/;"	f	class:ImDrawList	typeref:typename:void
Quantity	imgui_demo.cpp	/^    int         Quantity;$/;"	m	struct:__anon5ba881550511::MyItem	typeref:typename:int	file:
Quaternion	includes/raylib.h	/^typedef Vector4 Quaternion;$/;"	t	typeref:typename:Vector4
Quaternion	includes/raymath.h	/^typedef Vector4 Quaternion;$/;"	t	typeref:typename:Vector4
QuaternionAdd	includes/raymath.h	/^RMAPI Quaternion QuaternionAdd(Quaternion q1, Quaternion q2)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionAddValue	includes/raymath.h	/^RMAPI Quaternion QuaternionAddValue(Quaternion q, float add)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionCubicHermiteSpline	includes/raymath.h	/^RMAPI Quaternion QuaternionCubicHermiteSpline(Quaternion q1, Quaternion outTangent1, Quaternion /;"	f	typeref:typename:RMAPI Quaternion
QuaternionDivide	includes/raymath.h	/^RMAPI Quaternion QuaternionDivide(Quaternion q1, Quaternion q2)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionEquals	includes/raymath.h	/^RMAPI int QuaternionEquals(Quaternion p, Quaternion q)$/;"	f	typeref:typename:RMAPI int
QuaternionFromAxisAngle	includes/raymath.h	/^RMAPI Quaternion QuaternionFromAxisAngle(Vector3 axis, float angle)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionFromEuler	includes/raymath.h	/^RMAPI Quaternion QuaternionFromEuler(float pitch, float yaw, float roll)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionFromMatrix	includes/raymath.h	/^RMAPI Quaternion QuaternionFromMatrix(Matrix mat)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionFromVector3ToVector3	includes/raymath.h	/^RMAPI Quaternion QuaternionFromVector3ToVector3(Vector3 from, Vector3 to)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionIdentity	includes/raymath.h	/^RMAPI Quaternion QuaternionIdentity(void)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionInvert	includes/raymath.h	/^RMAPI Quaternion QuaternionInvert(Quaternion q)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionLength	includes/raymath.h	/^RMAPI float QuaternionLength(Quaternion q)$/;"	f	typeref:typename:RMAPI float
QuaternionLerp	includes/raymath.h	/^RMAPI Quaternion QuaternionLerp(Quaternion q1, Quaternion q2, float amount)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionMultiply	includes/raymath.h	/^RMAPI Quaternion QuaternionMultiply(Quaternion q1, Quaternion q2)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionNlerp	includes/raymath.h	/^RMAPI Quaternion QuaternionNlerp(Quaternion q1, Quaternion q2, float amount)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionNormalize	includes/raymath.h	/^RMAPI Quaternion QuaternionNormalize(Quaternion q)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionOnes	includes/raymath.h	/^static constexpr Quaternion QuaternionOnes = { 1, 1, 1, 1 };$/;"	v	typeref:typename:Quaternion
QuaternionScale	includes/raymath.h	/^RMAPI Quaternion QuaternionScale(Quaternion q, float mul)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionSlerp	includes/raymath.h	/^RMAPI Quaternion QuaternionSlerp(Quaternion q1, Quaternion q2, float amount)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionSubtract	includes/raymath.h	/^RMAPI Quaternion QuaternionSubtract(Quaternion q1, Quaternion q2)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionSubtractValue	includes/raymath.h	/^RMAPI Quaternion QuaternionSubtractValue(Quaternion q, float sub)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionToAxisAngle	includes/raymath.h	/^RMAPI void QuaternionToAxisAngle(Quaternion q, Vector3 *outAxis, float *outAngle)$/;"	f	typeref:typename:RMAPI void
QuaternionToEuler	includes/raymath.h	/^RMAPI Vector3 QuaternionToEuler(Quaternion q)$/;"	f	typeref:typename:RMAPI Vector3
QuaternionToMatrix	includes/raymath.h	/^RMAPI Matrix QuaternionToMatrix(Quaternion q)$/;"	f	typeref:typename:RMAPI Matrix
QuaternionTransform	includes/raymath.h	/^RMAPI Quaternion QuaternionTransform(Quaternion q, Matrix mat)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionUnitX	includes/raymath.h	/^static constexpr Quaternion QuaternionUnitX = { 0, 0, 0, 1 };$/;"	v	typeref:typename:Quaternion
QuaternionZeros	includes/raymath.h	/^static constexpr Quaternion QuaternionZeros = { 0, 0, 0, 0 };$/;"	v	typeref:typename:Quaternion
QueryFrameCount	includes/imgui_internal.h	/^    ImS8                    QueryFrameCount;            \/\/ >= 1: Query in progress$/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:ImS8
QueryId	includes/imgui_internal.h	/^    ImGuiID                 QueryId;                    \/\/ ID to query details for$/;"	m	struct:ImGuiIDStackTool	typeref:typename:ImGuiID
QuerySuccess	includes/imgui_internal.h	/^    bool                    QuerySuccess;               \/\/ Obtained result from DebugHookIdInf/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:bool
RAD2DEG	includes/raylib.h	/^    #define RAD2DEG /;"	d
RAD2DEG	includes/raymath.h	/^    #define RAD2DEG /;"	d
RAD2DEG	includes/rlgl.h	/^    #define RAD2DEG /;"	d
RAYLIB_H	includes/raylib.h	/^#define RAYLIB_H$/;"	d
RAYLIB_VERSION	includes/raylib.h	/^#define RAYLIB_VERSION /;"	d
RAYLIB_VERSION_MAJOR	includes/raylib.h	/^#define RAYLIB_VERSION_MAJOR /;"	d
RAYLIB_VERSION_MINOR	includes/raylib.h	/^#define RAYLIB_VERSION_MINOR /;"	d
RAYLIB_VERSION_PATCH	includes/raylib.h	/^#define RAYLIB_VERSION_PATCH /;"	d
RAYMATH_H	includes/raymath.h	/^#define RAYMATH_H$/;"	d
RAYWHITE	includes/raylib.h	/^#define RAYWHITE /;"	d
RED	includes/raylib.h	/^#define RED /;"	d
RLAPI	includes/raylib.h	/^        #define RLAPI /;"	d
RLAPI	includes/raylib.h	/^    #define RLAPI /;"	d
RLAPI	includes/rlgl.h	/^    #define RLAPI /;"	d
RLGL	includes/rlgl.h	/^static rlglData RLGL = { 0 };$/;"	v	typeref:typename:rlglData
RLGL_H	includes/rlgl.h	/^#define RLGL_H$/;"	d
RLGL_RENDER_TEXTURES_HINT	includes/rlgl.h	/^#define RLGL_RENDER_TEXTURES_HINT$/;"	d
RLGL_VERSION	includes/rlgl.h	/^#define RLGL_VERSION /;"	d
RLIMGUIAPI	includes/rlImGui.h	/^#define RLIMGUIAPI /;"	d
RL_ATTACHMENT_COLOR_CHANNEL0	includes/rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL0 = 0,       \/\/ Framebuffer attachment type: color 0$/;"	e	enum:__anon315aabf20a03
RL_ATTACHMENT_COLOR_CHANNEL1	includes/rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL1 = 1,       \/\/ Framebuffer attachment type: color 1$/;"	e	enum:__anon315aabf20a03
RL_ATTACHMENT_COLOR_CHANNEL2	includes/rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL2 = 2,       \/\/ Framebuffer attachment type: color 2$/;"	e	enum:__anon315aabf20a03
RL_ATTACHMENT_COLOR_CHANNEL3	includes/rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL3 = 3,       \/\/ Framebuffer attachment type: color 3$/;"	e	enum:__anon315aabf20a03
RL_ATTACHMENT_COLOR_CHANNEL4	includes/rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL4 = 4,       \/\/ Framebuffer attachment type: color 4$/;"	e	enum:__anon315aabf20a03
RL_ATTACHMENT_COLOR_CHANNEL5	includes/rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL5 = 5,       \/\/ Framebuffer attachment type: color 5$/;"	e	enum:__anon315aabf20a03
RL_ATTACHMENT_COLOR_CHANNEL6	includes/rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL6 = 6,       \/\/ Framebuffer attachment type: color 6$/;"	e	enum:__anon315aabf20a03
RL_ATTACHMENT_COLOR_CHANNEL7	includes/rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL7 = 7,       \/\/ Framebuffer attachment type: color 7$/;"	e	enum:__anon315aabf20a03
RL_ATTACHMENT_CUBEMAP_NEGATIVE_X	includes/rlgl.h	/^    RL_ATTACHMENT_CUBEMAP_NEGATIVE_X = 1,   \/\/ Framebuffer texture attachment type: cubemap, -/;"	e	enum:__anon315aabf20b03
RL_ATTACHMENT_CUBEMAP_NEGATIVE_Y	includes/rlgl.h	/^    RL_ATTACHMENT_CUBEMAP_NEGATIVE_Y = 3,   \/\/ Framebuffer texture attachment type: cubemap, -/;"	e	enum:__anon315aabf20b03
RL_ATTACHMENT_CUBEMAP_NEGATIVE_Z	includes/rlgl.h	/^    RL_ATTACHMENT_CUBEMAP_NEGATIVE_Z = 5,   \/\/ Framebuffer texture attachment type: cubemap, -/;"	e	enum:__anon315aabf20b03
RL_ATTACHMENT_CUBEMAP_POSITIVE_X	includes/rlgl.h	/^    RL_ATTACHMENT_CUBEMAP_POSITIVE_X = 0,   \/\/ Framebuffer texture attachment type: cubemap, +/;"	e	enum:__anon315aabf20b03
RL_ATTACHMENT_CUBEMAP_POSITIVE_Y	includes/rlgl.h	/^    RL_ATTACHMENT_CUBEMAP_POSITIVE_Y = 2,   \/\/ Framebuffer texture attachment type: cubemap, +/;"	e	enum:__anon315aabf20b03
RL_ATTACHMENT_CUBEMAP_POSITIVE_Z	includes/rlgl.h	/^    RL_ATTACHMENT_CUBEMAP_POSITIVE_Z = 4,   \/\/ Framebuffer texture attachment type: cubemap, +/;"	e	enum:__anon315aabf20b03
RL_ATTACHMENT_DEPTH	includes/rlgl.h	/^    RL_ATTACHMENT_DEPTH = 100,              \/\/ Framebuffer attachment type: depth$/;"	e	enum:__anon315aabf20a03
RL_ATTACHMENT_RENDERBUFFER	includes/rlgl.h	/^    RL_ATTACHMENT_RENDERBUFFER = 200,       \/\/ Framebuffer texture attachment type: renderbuff/;"	e	enum:__anon315aabf20b03
RL_ATTACHMENT_STENCIL	includes/rlgl.h	/^    RL_ATTACHMENT_STENCIL = 200,            \/\/ Framebuffer attachment type: stencil$/;"	e	enum:__anon315aabf20a03
RL_ATTACHMENT_TEXTURE2D	includes/rlgl.h	/^    RL_ATTACHMENT_TEXTURE2D = 100,          \/\/ Framebuffer texture attachment type: texture2d$/;"	e	enum:__anon315aabf20b03
RL_BLEND_ADDITIVE	includes/rlgl.h	/^    RL_BLEND_ADDITIVE,                  \/\/ Blend textures adding colors$/;"	e	enum:__anon315aabf20603
RL_BLEND_ADD_COLORS	includes/rlgl.h	/^    RL_BLEND_ADD_COLORS,                \/\/ Blend textures adding colors (alternative)$/;"	e	enum:__anon315aabf20603
RL_BLEND_ALPHA	includes/rlgl.h	/^    RL_BLEND_ALPHA = 0,                 \/\/ Blend textures considering alpha (default)$/;"	e	enum:__anon315aabf20603
RL_BLEND_ALPHA_PREMULTIPLY	includes/rlgl.h	/^    RL_BLEND_ALPHA_PREMULTIPLY,         \/\/ Blend premultiplied textures considering alpha$/;"	e	enum:__anon315aabf20603
RL_BLEND_COLOR	includes/rlgl.h	/^#define RL_BLEND_COLOR /;"	d
RL_BLEND_CUSTOM	includes/rlgl.h	/^    RL_BLEND_CUSTOM,                    \/\/ Blend textures using custom src\/dst factors (use r/;"	e	enum:__anon315aabf20603
RL_BLEND_CUSTOM_SEPARATE	includes/rlgl.h	/^    RL_BLEND_CUSTOM_SEPARATE            \/\/ Blend textures using custom src\/dst factors (use r/;"	e	enum:__anon315aabf20603
RL_BLEND_DST_ALPHA	includes/rlgl.h	/^#define RL_BLEND_DST_ALPHA /;"	d
RL_BLEND_DST_RGB	includes/rlgl.h	/^#define RL_BLEND_DST_RGB /;"	d
RL_BLEND_EQUATION	includes/rlgl.h	/^#define RL_BLEND_EQUATION /;"	d
RL_BLEND_EQUATION_ALPHA	includes/rlgl.h	/^#define RL_BLEND_EQUATION_ALPHA /;"	d
RL_BLEND_EQUATION_RGB	includes/rlgl.h	/^#define RL_BLEND_EQUATION_RGB /;"	d
RL_BLEND_MULTIPLIED	includes/rlgl.h	/^    RL_BLEND_MULTIPLIED,                \/\/ Blend textures multiplying colors$/;"	e	enum:__anon315aabf20603
RL_BLEND_SRC_ALPHA	includes/rlgl.h	/^#define RL_BLEND_SRC_ALPHA /;"	d
RL_BLEND_SRC_RGB	includes/rlgl.h	/^#define RL_BLEND_SRC_RGB /;"	d
RL_BLEND_SUBTRACT_COLORS	includes/rlgl.h	/^    RL_BLEND_SUBTRACT_COLORS,           \/\/ Blend textures subtracting colors (alternative)$/;"	e	enum:__anon315aabf20603
RL_BOOL_TYPE	includes/raylib.h	/^    #define RL_BOOL_TYPE$/;"	d
RL_CALLOC	includes/raylib.h	/^    #define RL_CALLOC(/;"	d
RL_CALLOC	includes/rlgl.h	/^    #define RL_CALLOC(/;"	d
RL_COLOR_TYPE	includes/raylib.h	/^#define RL_COLOR_TYPE$/;"	d
RL_COMPUTE_SHADER	includes/rlgl.h	/^#define RL_COMPUTE_SHADER /;"	d
RL_CONSTANT_ALPHA	includes/rlgl.h	/^#define RL_CONSTANT_ALPHA /;"	d
RL_CONSTANT_COLOR	includes/rlgl.h	/^#define RL_CONSTANT_COLOR /;"	d
RL_CULL_DISTANCE_FAR	includes/rlgl.h	/^    #define RL_CULL_DISTANCE_FAR /;"	d
RL_CULL_DISTANCE_NEAR	includes/rlgl.h	/^    #define RL_CULL_DISTANCE_NEAR /;"	d
RL_CULL_FACE_BACK	includes/rlgl.h	/^    RL_CULL_FACE_BACK$/;"	e	enum:__anon315aabf20c03
RL_CULL_FACE_FRONT	includes/rlgl.h	/^    RL_CULL_FACE_FRONT = 0,$/;"	e	enum:__anon315aabf20c03
RL_DEFAULT_BATCH_BUFFERS	includes/rlgl.h	/^    #define RL_DEFAULT_BATCH_BUFFERS /;"	d
RL_DEFAULT_BATCH_BUFFER_ELEMENTS	includes/rlgl.h	/^        #define RL_DEFAULT_BATCH_BUFFER_ELEMENTS /;"	d
RL_DEFAULT_BATCH_DRAWCALLS	includes/rlgl.h	/^    #define RL_DEFAULT_BATCH_DRAWCALLS /;"	d
RL_DEFAULT_BATCH_MAX_TEXTURE_UNITS	includes/rlgl.h	/^    #define RL_DEFAULT_BATCH_MAX_TEXTURE_UNITS /;"	d
RL_DEFAULT_SHADER_ATTRIB_LOCATION_BONEIDS	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_LOCATION_BONEIDS /;"	d
RL_DEFAULT_SHADER_ATTRIB_LOCATION_BONEWEIGHTS	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_LOCATION_BONEWEIGHTS /;"	d
RL_DEFAULT_SHADER_ATTRIB_LOCATION_COLOR	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_LOCATION_COLOR /;"	d
RL_DEFAULT_SHADER_ATTRIB_LOCATION_INDICES	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_LOCATION_INDICES /;"	d
RL_DEFAULT_SHADER_ATTRIB_LOCATION_NORMAL	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_LOCATION_NORMAL /;"	d
RL_DEFAULT_SHADER_ATTRIB_LOCATION_POSITION	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_LOCATION_POSITION /;"	d
RL_DEFAULT_SHADER_ATTRIB_LOCATION_TANGENT	includes/rlgl.h	/^#define RL_DEFAULT_SHADER_ATTRIB_LOCATION_TANGENT /;"	d
RL_DEFAULT_SHADER_ATTRIB_LOCATION_TEXCOORD	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_LOCATION_TEXCOORD /;"	d
RL_DEFAULT_SHADER_ATTRIB_LOCATION_TEXCOORD2	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_LOCATION_TEXCOORD2 /;"	d
RL_DEFAULT_SHADER_ATTRIB_NAME_BONEIDS	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_NAME_BONEIDS /;"	d
RL_DEFAULT_SHADER_ATTRIB_NAME_BONEWEIGHTS	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_NAME_BONEWEIGHTS /;"	d
RL_DEFAULT_SHADER_ATTRIB_NAME_COLOR	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_NAME_COLOR /;"	d
RL_DEFAULT_SHADER_ATTRIB_NAME_NORMAL	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_NAME_NORMAL /;"	d
RL_DEFAULT_SHADER_ATTRIB_NAME_POSITION	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_NAME_POSITION /;"	d
RL_DEFAULT_SHADER_ATTRIB_NAME_TANGENT	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_NAME_TANGENT /;"	d
RL_DEFAULT_SHADER_ATTRIB_NAME_TEXCOORD	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_NAME_TEXCOORD /;"	d
RL_DEFAULT_SHADER_ATTRIB_NAME_TEXCOORD2	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_NAME_TEXCOORD2 /;"	d
RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE0	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE0 /;"	d
RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE1	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE1 /;"	d
RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE2	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE2 /;"	d
RL_DEFAULT_SHADER_UNIFORM_NAME_BONE_MATRICES	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_UNIFORM_NAME_BONE_MATRICES /;"	d
RL_DEFAULT_SHADER_UNIFORM_NAME_COLOR	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_UNIFORM_NAME_COLOR /;"	d
RL_DEFAULT_SHADER_UNIFORM_NAME_MODEL	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_UNIFORM_NAME_MODEL /;"	d
RL_DEFAULT_SHADER_UNIFORM_NAME_MVP	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_UNIFORM_NAME_MVP /;"	d
RL_DEFAULT_SHADER_UNIFORM_NAME_NORMAL	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_UNIFORM_NAME_NORMAL /;"	d
RL_DEFAULT_SHADER_UNIFORM_NAME_PROJECTION	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_UNIFORM_NAME_PROJECTION /;"	d
RL_DEFAULT_SHADER_UNIFORM_NAME_VIEW	includes/rlgl.h	/^    #define RL_DEFAULT_SHADER_UNIFORM_NAME_VIEW /;"	d
RL_DRAW_FRAMEBUFFER	includes/rlgl.h	/^#define RL_DRAW_FRAMEBUFFER /;"	d
RL_DST_ALPHA	includes/rlgl.h	/^#define RL_DST_ALPHA /;"	d
RL_DST_COLOR	includes/rlgl.h	/^#define RL_DST_COLOR /;"	d
RL_DYNAMIC_COPY	includes/rlgl.h	/^#define RL_DYNAMIC_COPY /;"	d
RL_DYNAMIC_DRAW	includes/rlgl.h	/^#define RL_DYNAMIC_DRAW /;"	d
RL_DYNAMIC_READ	includes/rlgl.h	/^#define RL_DYNAMIC_READ /;"	d
RL_FLOAT	includes/rlgl.h	/^#define RL_FLOAT /;"	d
RL_FRAGMENT_SHADER	includes/rlgl.h	/^#define RL_FRAGMENT_SHADER /;"	d
RL_FREE	includes/raylib.h	/^    #define RL_FREE(/;"	d
RL_FREE	includes/rlgl.h	/^    #define RL_FREE(/;"	d
RL_FUNC_ADD	includes/rlgl.h	/^#define RL_FUNC_ADD /;"	d
RL_FUNC_REVERSE_SUBTRACT	includes/rlgl.h	/^#define RL_FUNC_REVERSE_SUBTRACT /;"	d
RL_FUNC_SUBTRACT	includes/rlgl.h	/^#define RL_FUNC_SUBTRACT /;"	d
RL_LINES	includes/rlgl.h	/^#define RL_LINES /;"	d
RL_LOG_ALL	includes/rlgl.h	/^    RL_LOG_ALL = 0,             \/\/ Display all logs$/;"	e	enum:__anon315aabf20303
RL_LOG_DEBUG	includes/rlgl.h	/^    RL_LOG_DEBUG,               \/\/ Debug logging, used for internal debugging, it should be di/;"	e	enum:__anon315aabf20303
RL_LOG_ERROR	includes/rlgl.h	/^    RL_LOG_ERROR,               \/\/ Error logging, used on unrecoverable failures$/;"	e	enum:__anon315aabf20303
RL_LOG_FATAL	includes/rlgl.h	/^    RL_LOG_FATAL,               \/\/ Fatal logging, used to abort program: exit(EXIT_FAILURE)$/;"	e	enum:__anon315aabf20303
RL_LOG_INFO	includes/rlgl.h	/^    RL_LOG_INFO,                \/\/ Info logging, used for program execution info$/;"	e	enum:__anon315aabf20303
RL_LOG_NONE	includes/rlgl.h	/^    RL_LOG_NONE                 \/\/ Disable logging$/;"	e	enum:__anon315aabf20303
RL_LOG_TRACE	includes/rlgl.h	/^    RL_LOG_TRACE,               \/\/ Trace logging, intended for internal use only$/;"	e	enum:__anon315aabf20303
RL_LOG_WARNING	includes/rlgl.h	/^    RL_LOG_WARNING,             \/\/ Warning logging, used on recoverable failures$/;"	e	enum:__anon315aabf20303
RL_MALLOC	includes/raylib.h	/^    #define RL_MALLOC(/;"	d
RL_MALLOC	includes/rlgl.h	/^    #define RL_MALLOC(/;"	d
RL_MATRIX_TYPE	includes/raylib.h	/^#define RL_MATRIX_TYPE$/;"	d
RL_MATRIX_TYPE	includes/raymath.h	/^#define RL_MATRIX_TYPE$/;"	d
RL_MATRIX_TYPE	includes/rlgl.h	/^#define RL_MATRIX_TYPE$/;"	d
RL_MAX	includes/rlgl.h	/^#define RL_MAX /;"	d
RL_MAX_MATRIX_STACK_SIZE	includes/rlgl.h	/^    #define RL_MAX_MATRIX_STACK_SIZE /;"	d
RL_MAX_SHADER_LOCATIONS	includes/rlgl.h	/^    #define RL_MAX_SHADER_LOCATIONS /;"	d
RL_MIN	includes/rlgl.h	/^#define RL_MIN /;"	d
RL_MODELVIEW	includes/rlgl.h	/^#define RL_MODELVIEW /;"	d
RL_ONE	includes/rlgl.h	/^#define RL_ONE /;"	d
RL_ONE_MINUS_CONSTANT_ALPHA	includes/rlgl.h	/^#define RL_ONE_MINUS_CONSTANT_ALPHA /;"	d
RL_ONE_MINUS_CONSTANT_COLOR	includes/rlgl.h	/^#define RL_ONE_MINUS_CONSTANT_COLOR /;"	d
RL_ONE_MINUS_DST_ALPHA	includes/rlgl.h	/^#define RL_ONE_MINUS_DST_ALPHA /;"	d
RL_ONE_MINUS_DST_COLOR	includes/rlgl.h	/^#define RL_ONE_MINUS_DST_COLOR /;"	d
RL_ONE_MINUS_SRC_ALPHA	includes/rlgl.h	/^#define RL_ONE_MINUS_SRC_ALPHA /;"	d
RL_ONE_MINUS_SRC_COLOR	includes/rlgl.h	/^#define RL_ONE_MINUS_SRC_COLOR /;"	d
RL_OPENGL_11	includes/rlgl.h	/^    RL_OPENGL_11 = 1,           \/\/ OpenGL 1.1$/;"	e	enum:__anon315aabf20203
RL_OPENGL_21	includes/rlgl.h	/^    RL_OPENGL_21,               \/\/ OpenGL 2.1 (GLSL 120)$/;"	e	enum:__anon315aabf20203
RL_OPENGL_33	includes/rlgl.h	/^    RL_OPENGL_33,               \/\/ OpenGL 3.3 (GLSL 330)$/;"	e	enum:__anon315aabf20203
RL_OPENGL_43	includes/rlgl.h	/^    RL_OPENGL_43,               \/\/ OpenGL 4.3 (using GLSL 330)$/;"	e	enum:__anon315aabf20203
RL_OPENGL_ES_20	includes/rlgl.h	/^    RL_OPENGL_ES_20,            \/\/ OpenGL ES 2.0 (GLSL 100)$/;"	e	enum:__anon315aabf20203
RL_OPENGL_ES_30	includes/rlgl.h	/^    RL_OPENGL_ES_30             \/\/ OpenGL ES 3.0 (GLSL 300 es)$/;"	e	enum:__anon315aabf20203
RL_PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA	includes/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA,       \/\/ 8 bpp$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA	includes/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA        \/\/ 2 bpp$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_COMPRESSED_DXT1_RGB	includes/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_DXT1_RGB,            \/\/ 4 bpp (no alpha)$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_COMPRESSED_DXT1_RGBA	includes/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_DXT1_RGBA,           \/\/ 4 bpp (1 bit alpha)$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_COMPRESSED_DXT3_RGBA	includes/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_DXT3_RGBA,           \/\/ 8 bpp$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_COMPRESSED_DXT5_RGBA	includes/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_DXT5_RGBA,           \/\/ 8 bpp$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_COMPRESSED_ETC1_RGB	includes/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_ETC1_RGB,            \/\/ 4 bpp$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA	includes/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA,       \/\/ 8 bpp$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_COMPRESSED_ETC2_RGB	includes/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_ETC2_RGB,            \/\/ 4 bpp$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_COMPRESSED_PVRT_RGB	includes/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_PVRT_RGB,            \/\/ 4 bpp$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_COMPRESSED_PVRT_RGBA	includes/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_PVRT_RGBA,           \/\/ 4 bpp$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_UNCOMPRESSED_GRAYSCALE	includes/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_GRAYSCALE = 1,     \/\/ 8 bit per pixel (no alpha)$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA	includes/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA,        \/\/ 8*2 bpp (2 channels)$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_UNCOMPRESSED_R16	includes/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R16,               \/\/ 16 bpp (1 channel - half float)$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16	includes/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16,         \/\/ 16*3 bpp (3 channels - half float)$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16A16	includes/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16A16,      \/\/ 16*4 bpp (4 channels - half float)$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_UNCOMPRESSED_R32	includes/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R32,               \/\/ 32 bpp (1 channel - float)$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32	includes/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32,         \/\/ 32*3 bpp (3 channels - float)$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32A32	includes/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32A32,      \/\/ 32*4 bpp (4 channels - float)$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_UNCOMPRESSED_R4G4B4A4	includes/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R4G4B4A4,          \/\/ 16 bpp (4 bit alpha)$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_UNCOMPRESSED_R5G5B5A1	includes/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R5G5B5A1,          \/\/ 16 bpp (1 bit alpha)$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_UNCOMPRESSED_R5G6B5	includes/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R5G6B5,            \/\/ 16 bpp$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8	includes/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8,            \/\/ 24 bpp$/;"	e	enum:__anon315aabf20403
RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8A8	includes/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8A8,          \/\/ 32 bpp$/;"	e	enum:__anon315aabf20403
RL_PROJECTION	includes/rlgl.h	/^#define RL_PROJECTION /;"	d
RL_QUADS	includes/rlgl.h	/^#define RL_QUADS /;"	d
RL_QUATERNION_TYPE	includes/raylib.h	/^#define RL_QUATERNION_TYPE$/;"	d
RL_QUATERNION_TYPE	includes/raymath.h	/^#define RL_QUATERNION_TYPE$/;"	d
RL_READ_FRAMEBUFFER	includes/rlgl.h	/^#define RL_READ_FRAMEBUFFER /;"	d
RL_REALLOC	includes/raylib.h	/^    #define RL_REALLOC(/;"	d
RL_REALLOC	includes/rlgl.h	/^    #define RL_REALLOC(/;"	d
RL_RECTANGLE_TYPE	includes/raylib.h	/^#define RL_RECTANGLE_TYPE$/;"	d
RL_SHADER_ATTRIB_FLOAT	includes/rlgl.h	/^    RL_SHADER_ATTRIB_FLOAT = 0,         \/\/ Shader attribute type: float$/;"	e	enum:__anon315aabf20903
RL_SHADER_ATTRIB_VEC2	includes/rlgl.h	/^    RL_SHADER_ATTRIB_VEC2,              \/\/ Shader attribute type: vec2 (2 float)$/;"	e	enum:__anon315aabf20903
RL_SHADER_ATTRIB_VEC3	includes/rlgl.h	/^    RL_SHADER_ATTRIB_VEC3,              \/\/ Shader attribute type: vec3 (3 float)$/;"	e	enum:__anon315aabf20903
RL_SHADER_ATTRIB_VEC4	includes/rlgl.h	/^    RL_SHADER_ATTRIB_VEC4               \/\/ Shader attribute type: vec4 (4 float)$/;"	e	enum:__anon315aabf20903
RL_SHADER_LOC_COLOR_AMBIENT	includes/rlgl.h	/^    RL_SHADER_LOC_COLOR_AMBIENT,        \/\/ Shader location: vector uniform: ambient color$/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_COLOR_DIFFUSE	includes/rlgl.h	/^    RL_SHADER_LOC_COLOR_DIFFUSE,        \/\/ Shader location: vector uniform: diffuse color$/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_COLOR_SPECULAR	includes/rlgl.h	/^    RL_SHADER_LOC_COLOR_SPECULAR,       \/\/ Shader location: vector uniform: specular color$/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_MAP_ALBEDO	includes/rlgl.h	/^    RL_SHADER_LOC_MAP_ALBEDO,           \/\/ Shader location: sampler2d texture: albedo (same as/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_MAP_BRDF	includes/rlgl.h	/^    RL_SHADER_LOC_MAP_BRDF              \/\/ Shader location: sampler2d texture: brdf$/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_MAP_CUBEMAP	includes/rlgl.h	/^    RL_SHADER_LOC_MAP_CUBEMAP,          \/\/ Shader location: samplerCube texture: cubemap$/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_MAP_DIFFUSE	includes/rlgl.h	/^#define RL_SHADER_LOC_MAP_DIFFUSE /;"	d
RL_SHADER_LOC_MAP_EMISSION	includes/rlgl.h	/^    RL_SHADER_LOC_MAP_EMISSION,         \/\/ Shader location: sampler2d texture: emission$/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_MAP_HEIGHT	includes/rlgl.h	/^    RL_SHADER_LOC_MAP_HEIGHT,           \/\/ Shader location: sampler2d texture: height$/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_MAP_IRRADIANCE	includes/rlgl.h	/^    RL_SHADER_LOC_MAP_IRRADIANCE,       \/\/ Shader location: samplerCube texture: irradiance$/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_MAP_METALNESS	includes/rlgl.h	/^    RL_SHADER_LOC_MAP_METALNESS,        \/\/ Shader location: sampler2d texture: metalness (same/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_MAP_NORMAL	includes/rlgl.h	/^    RL_SHADER_LOC_MAP_NORMAL,           \/\/ Shader location: sampler2d texture: normal$/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_MAP_OCCLUSION	includes/rlgl.h	/^    RL_SHADER_LOC_MAP_OCCLUSION,        \/\/ Shader location: sampler2d texture: occlusion$/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_MAP_PREFILTER	includes/rlgl.h	/^    RL_SHADER_LOC_MAP_PREFILTER,        \/\/ Shader location: samplerCube texture: prefilter$/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_MAP_ROUGHNESS	includes/rlgl.h	/^    RL_SHADER_LOC_MAP_ROUGHNESS,        \/\/ Shader location: sampler2d texture: roughness$/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_MAP_SPECULAR	includes/rlgl.h	/^#define RL_SHADER_LOC_MAP_SPECULAR /;"	d
RL_SHADER_LOC_MATRIX_MODEL	includes/rlgl.h	/^    RL_SHADER_LOC_MATRIX_MODEL,         \/\/ Shader location: matrix uniform: model (transform)$/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_MATRIX_MVP	includes/rlgl.h	/^    RL_SHADER_LOC_MATRIX_MVP,           \/\/ Shader location: matrix uniform: model-view-project/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_MATRIX_NORMAL	includes/rlgl.h	/^    RL_SHADER_LOC_MATRIX_NORMAL,        \/\/ Shader location: matrix uniform: normal$/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_MATRIX_PROJECTION	includes/rlgl.h	/^    RL_SHADER_LOC_MATRIX_PROJECTION,    \/\/ Shader location: matrix uniform: projection$/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_MATRIX_VIEW	includes/rlgl.h	/^    RL_SHADER_LOC_MATRIX_VIEW,          \/\/ Shader location: matrix uniform: view (camera trans/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_VECTOR_VIEW	includes/rlgl.h	/^    RL_SHADER_LOC_VECTOR_VIEW,          \/\/ Shader location: vector uniform: view$/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_VERTEX_COLOR	includes/rlgl.h	/^    RL_SHADER_LOC_VERTEX_COLOR,         \/\/ Shader location: vertex attribute: color$/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_VERTEX_NORMAL	includes/rlgl.h	/^    RL_SHADER_LOC_VERTEX_NORMAL,        \/\/ Shader location: vertex attribute: normal$/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_VERTEX_POSITION	includes/rlgl.h	/^    RL_SHADER_LOC_VERTEX_POSITION = 0,  \/\/ Shader location: vertex attribute: position$/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_VERTEX_TANGENT	includes/rlgl.h	/^    RL_SHADER_LOC_VERTEX_TANGENT,       \/\/ Shader location: vertex attribute: tangent$/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_VERTEX_TEXCOORD01	includes/rlgl.h	/^    RL_SHADER_LOC_VERTEX_TEXCOORD01,    \/\/ Shader location: vertex attribute: texcoord01$/;"	e	enum:__anon315aabf20703
RL_SHADER_LOC_VERTEX_TEXCOORD02	includes/rlgl.h	/^    RL_SHADER_LOC_VERTEX_TEXCOORD02,    \/\/ Shader location: vertex attribute: texcoord02$/;"	e	enum:__anon315aabf20703
RL_SHADER_UNIFORM_FLOAT	includes/rlgl.h	/^    RL_SHADER_UNIFORM_FLOAT = 0,        \/\/ Shader uniform type: float$/;"	e	enum:__anon315aabf20803
RL_SHADER_UNIFORM_INT	includes/rlgl.h	/^    RL_SHADER_UNIFORM_INT,              \/\/ Shader uniform type: int$/;"	e	enum:__anon315aabf20803
RL_SHADER_UNIFORM_IVEC2	includes/rlgl.h	/^    RL_SHADER_UNIFORM_IVEC2,            \/\/ Shader uniform type: ivec2 (2 int)$/;"	e	enum:__anon315aabf20803
RL_SHADER_UNIFORM_IVEC3	includes/rlgl.h	/^    RL_SHADER_UNIFORM_IVEC3,            \/\/ Shader uniform type: ivec3 (3 int)$/;"	e	enum:__anon315aabf20803
RL_SHADER_UNIFORM_IVEC4	includes/rlgl.h	/^    RL_SHADER_UNIFORM_IVEC4,            \/\/ Shader uniform type: ivec4 (4 int)$/;"	e	enum:__anon315aabf20803
RL_SHADER_UNIFORM_SAMPLER2D	includes/rlgl.h	/^    RL_SHADER_UNIFORM_SAMPLER2D         \/\/ Shader uniform type: sampler2d$/;"	e	enum:__anon315aabf20803
RL_SHADER_UNIFORM_UINT	includes/rlgl.h	/^    RL_SHADER_UNIFORM_UINT,             \/\/ Shader uniform type: unsigned int$/;"	e	enum:__anon315aabf20803
RL_SHADER_UNIFORM_UIVEC2	includes/rlgl.h	/^    RL_SHADER_UNIFORM_UIVEC2,           \/\/ Shader uniform type: uivec2 (2 unsigned int)$/;"	e	enum:__anon315aabf20803
RL_SHADER_UNIFORM_UIVEC3	includes/rlgl.h	/^    RL_SHADER_UNIFORM_UIVEC3,           \/\/ Shader uniform type: uivec3 (3 unsigned int)$/;"	e	enum:__anon315aabf20803
RL_SHADER_UNIFORM_UIVEC4	includes/rlgl.h	/^    RL_SHADER_UNIFORM_UIVEC4,           \/\/ Shader uniform type: uivec4 (4 unsigned int)$/;"	e	enum:__anon315aabf20803
RL_SHADER_UNIFORM_VEC2	includes/rlgl.h	/^    RL_SHADER_UNIFORM_VEC2,             \/\/ Shader uniform type: vec2 (2 float)$/;"	e	enum:__anon315aabf20803
RL_SHADER_UNIFORM_VEC3	includes/rlgl.h	/^    RL_SHADER_UNIFORM_VEC3,             \/\/ Shader uniform type: vec3 (3 float)$/;"	e	enum:__anon315aabf20803
RL_SHADER_UNIFORM_VEC4	includes/rlgl.h	/^    RL_SHADER_UNIFORM_VEC4,             \/\/ Shader uniform type: vec4 (4 float)$/;"	e	enum:__anon315aabf20803
RL_SRC_ALPHA	includes/rlgl.h	/^#define RL_SRC_ALPHA /;"	d
RL_SRC_ALPHA_SATURATE	includes/rlgl.h	/^#define RL_SRC_ALPHA_SATURATE /;"	d
RL_SRC_COLOR	includes/rlgl.h	/^#define RL_SRC_COLOR /;"	d
RL_STATIC_COPY	includes/rlgl.h	/^#define RL_STATIC_COPY /;"	d
RL_STATIC_DRAW	includes/rlgl.h	/^#define RL_STATIC_DRAW /;"	d
RL_STATIC_READ	includes/rlgl.h	/^#define RL_STATIC_READ /;"	d
RL_STREAM_COPY	includes/rlgl.h	/^#define RL_STREAM_COPY /;"	d
RL_STREAM_DRAW	includes/rlgl.h	/^#define RL_STREAM_DRAW /;"	d
RL_STREAM_READ	includes/rlgl.h	/^#define RL_STREAM_READ /;"	d
RL_TEXTURE	includes/rlgl.h	/^#define RL_TEXTURE /;"	d
RL_TEXTURE_FILTER_ANISOTROPIC	includes/rlgl.h	/^#define RL_TEXTURE_FILTER_ANISOTROPIC /;"	d
RL_TEXTURE_FILTER_ANISOTROPIC_16X	includes/rlgl.h	/^    RL_TEXTURE_FILTER_ANISOTROPIC_16X,  \/\/ Anisotropic filtering 16x$/;"	e	enum:__anon315aabf20503
RL_TEXTURE_FILTER_ANISOTROPIC_4X	includes/rlgl.h	/^    RL_TEXTURE_FILTER_ANISOTROPIC_4X,   \/\/ Anisotropic filtering 4x$/;"	e	enum:__anon315aabf20503
RL_TEXTURE_FILTER_ANISOTROPIC_8X	includes/rlgl.h	/^    RL_TEXTURE_FILTER_ANISOTROPIC_8X,   \/\/ Anisotropic filtering 8x$/;"	e	enum:__anon315aabf20503
RL_TEXTURE_FILTER_BILINEAR	includes/rlgl.h	/^    RL_TEXTURE_FILTER_BILINEAR,         \/\/ Linear filtering$/;"	e	enum:__anon315aabf20503
RL_TEXTURE_FILTER_LINEAR	includes/rlgl.h	/^#define RL_TEXTURE_FILTER_LINEAR /;"	d
RL_TEXTURE_FILTER_LINEAR_MIP_NEAREST	includes/rlgl.h	/^#define RL_TEXTURE_FILTER_LINEAR_MIP_NEAREST /;"	d
RL_TEXTURE_FILTER_MIP_LINEAR	includes/rlgl.h	/^#define RL_TEXTURE_FILTER_MIP_LINEAR /;"	d
RL_TEXTURE_FILTER_MIP_NEAREST	includes/rlgl.h	/^#define RL_TEXTURE_FILTER_MIP_NEAREST /;"	d
RL_TEXTURE_FILTER_NEAREST	includes/rlgl.h	/^#define RL_TEXTURE_FILTER_NEAREST /;"	d
RL_TEXTURE_FILTER_NEAREST_MIP_LINEAR	includes/rlgl.h	/^#define RL_TEXTURE_FILTER_NEAREST_MIP_LINEAR /;"	d
RL_TEXTURE_FILTER_POINT	includes/rlgl.h	/^    RL_TEXTURE_FILTER_POINT = 0,        \/\/ No filter, just pixel approximation$/;"	e	enum:__anon315aabf20503
RL_TEXTURE_FILTER_TRILINEAR	includes/rlgl.h	/^    RL_TEXTURE_FILTER_TRILINEAR,        \/\/ Trilinear filtering (linear with mipmaps)$/;"	e	enum:__anon315aabf20503
RL_TEXTURE_MAG_FILTER	includes/rlgl.h	/^#define RL_TEXTURE_MAG_FILTER /;"	d
RL_TEXTURE_MIN_FILTER	includes/rlgl.h	/^#define RL_TEXTURE_MIN_FILTER /;"	d
RL_TEXTURE_MIPMAP_BIAS_RATIO	includes/rlgl.h	/^#define RL_TEXTURE_MIPMAP_BIAS_RATIO /;"	d
RL_TEXTURE_WRAP_CLAMP	includes/rlgl.h	/^#define RL_TEXTURE_WRAP_CLAMP /;"	d
RL_TEXTURE_WRAP_MIRROR_CLAMP	includes/rlgl.h	/^#define RL_TEXTURE_WRAP_MIRROR_CLAMP /;"	d
RL_TEXTURE_WRAP_MIRROR_REPEAT	includes/rlgl.h	/^#define RL_TEXTURE_WRAP_MIRROR_REPEAT /;"	d
RL_TEXTURE_WRAP_REPEAT	includes/rlgl.h	/^#define RL_TEXTURE_WRAP_REPEAT /;"	d
RL_TEXTURE_WRAP_S	includes/rlgl.h	/^#define RL_TEXTURE_WRAP_S /;"	d
RL_TEXTURE_WRAP_T	includes/rlgl.h	/^#define RL_TEXTURE_WRAP_T /;"	d
RL_TRIANGLES	includes/rlgl.h	/^#define RL_TRIANGLES /;"	d
RL_UNSIGNED_BYTE	includes/rlgl.h	/^#define RL_UNSIGNED_BYTE /;"	d
RL_VECTOR2_TYPE	includes/raylib.h	/^#define RL_VECTOR2_TYPE$/;"	d
RL_VECTOR2_TYPE	includes/raymath.h	/^#define RL_VECTOR2_TYPE$/;"	d
RL_VECTOR3_TYPE	includes/raylib.h	/^#define RL_VECTOR3_TYPE$/;"	d
RL_VECTOR3_TYPE	includes/raymath.h	/^#define RL_VECTOR3_TYPE$/;"	d
RL_VECTOR4_TYPE	includes/raylib.h	/^#define RL_VECTOR4_TYPE$/;"	d
RL_VECTOR4_TYPE	includes/raymath.h	/^#define RL_VECTOR4_TYPE$/;"	d
RL_VERTEX_SHADER	includes/rlgl.h	/^#define RL_VERTEX_SHADER /;"	d
RL_ZERO	includes/rlgl.h	/^#define RL_ZERO /;"	d
RMAPI	includes/raymath.h	/^        #define RMAPI /;"	d
RMAPI	includes/raymath.h	/^    #define RMAPI /;"	d
RadioButton	imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, bool active)$/;"	f	class:ImGui	typeref:typename:bool
RadioButton	imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, int* v, int v_button)$/;"	f	class:ImGui	typeref:typename:bool
RangeDirection	includes/imgui.h	/^    ImS8                        RangeDirection; \/\/                  \/  ms:w  app:r   \/\/ Par/;"	m	struct:ImGuiSelectionRequest	typeref:typename:ImS8
RangeDstPassedBy	includes/imgui_internal.h	/^    bool                    RangeDstPassedBy;   \/\/ Set by the item that matches NavJustMovedTo/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:bool
RangeFirstItem	includes/imgui.h	/^    ImGuiSelectionUserData      RangeFirstItem; \/\/                  \/  ms:w, app:r   \/\/ Par/;"	m	struct:ImGuiSelectionRequest	typeref:typename:ImGuiSelectionUserData
RangeLastItem	includes/imgui.h	/^    ImGuiSelectionUserData      RangeLastItem;  \/\/                  \/  ms:w, app:r   \/\/ Par/;"	m	struct:ImGuiSelectionRequest	typeref:typename:ImGuiSelectionUserData
RangeSelected	includes/imgui_internal.h	/^    ImS8                    RangeSelected;      \/\/ -1 (don't have) or true\/false$/;"	m	struct:ImGuiMultiSelectState	typeref:typename:ImS8
RangeSrcItem	includes/imgui.h	/^    ImGuiSelectionUserData      RangeSrcItem;   \/\/  ms:w  app:r     \/                \/\/ (If/;"	m	struct:ImGuiMultiSelectIO	typeref:typename:ImGuiSelectionUserData
RangeSrcItem	includes/imgui_internal.h	/^    ImGuiSelectionUserData  RangeSrcItem;       \/\/$/;"	m	struct:ImGuiMultiSelectState	typeref:typename:ImGuiSelectionUserData
RangeSrcPassedBy	includes/imgui_internal.h	/^    bool                    RangeSrcPassedBy;   \/\/ Set by the item that matches RangeSrcItem.$/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:bool
RangeSrcReset	includes/imgui.h	/^    bool                        RangeSrcReset;  \/\/        app:w     \/  ms:r          \/\/ (If/;"	m	struct:ImGuiMultiSelectIO	typeref:typename:bool
Ranges	includes/imgui_internal.h	/^    ImVector<ImGuiListClipperRange> Ranges;$/;"	m	struct:ImGuiListClipperData	typeref:typename:ImVector<ImGuiListClipperRange>
RasterizerDensity	includes/imgui.h	/^    float           RasterizerDensity;      \/\/ 1.0f     \/\/ DPI scale for rasterization, not /;"	m	struct:ImFontConfig	typeref:typename:float
RasterizerMultiply	includes/imgui.h	/^    float           RasterizerMultiply;     \/\/ 1.0f     \/\/ Linearly brighten (>1.0f) or dark/;"	m	struct:ImFontConfig	typeref:typename:float
RawData	includes/imgui_internal.h	/^    void*                       RawData;                    \/\/ Single allocation to hold Colum/;"	m	struct:ImGuiTable	typeref:typename:void *
Ray	includes/raylib.h	/^typedef struct Ray {$/;"	s
Ray	includes/raylib.h	/^} Ray;$/;"	t	typeref:struct:Ray
RayCollision	includes/raylib.h	/^typedef struct RayCollision {$/;"	s
RayCollision	includes/raylib.h	/^} RayCollision;$/;"	t	typeref:struct:RayCollision
RaylibKeyMap	rlImGui.cpp	/^static std::map<KeyboardKey, ImGuiKey> RaylibKeyMap;$/;"	v	typeref:typename:std::map<KeyboardKey,ImGuiKey>	file:
ReadInitFn	includes/imgui_internal.h	/^    void        (*ReadInitFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);                /;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler)
ReadLineFn	includes/imgui_internal.h	/^    void        (*ReadLineFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, void* entry, con/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,void * entry,const char * line)
ReadOpenFn	includes/imgui_internal.h	/^    void*       (*ReadOpenFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, const char* name/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void * (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,const char * name)
ReclassifyNode	imgui_draw.cpp	/^void ImTriangulator::ReclassifyNode(ImTriangulatorNode* n1)$/;"	f	class:ImTriangulator	typeref:typename:void
Rect	includes/imgui_internal.h	/^    ImRect                  Rect;               \/\/ Full rectangle$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
Rect	includes/imgui_internal.h	/^    ImRect      Rect() const            { return ImRect(Pos.x, Pos.y, Pos.x + Size.x, Pos.y + Si/;"	f	struct:ImGuiWindow	typeref:typename:ImRect
RectRel	includes/imgui_internal.h	/^    ImRect              RectRel;        \/\/ Init,Move    \/\/ Best candidate bounding box in wi/;"	m	struct:ImGuiNavItemData	typeref:typename:ImRect
Rectangle	includes/raylib.h	/^typedef struct Rectangle {$/;"	s
Rectangle	includes/raylib.h	/^} Rectangle;$/;"	t	typeref:struct:Rectangle
Rects	imgui_draw.cpp	/^    stbrp_rect*         Rects;              \/\/ Rectangle to pack. We first fill in their size /;"	m	struct:ImFontBuildSrcData	typeref:typename:stbrp_rect *	file:
RefFrame	includes/imgui.h	/^    mutable int RefFrame;$/;"	m	struct:ImGuiOnceUponAFrame	typeref:typename:int
RefScale	imgui.ini	/^RefScale=13$/;"	k	section:Table
RefScale	includes/imgui_internal.h	/^    float                       RefScale;                   \/\/ Reference scale to be able to r/;"	m	struct:ImGuiTable	typeref:typename:float
RefScale	includes/imgui_internal.h	/^    float                       RefScale;               \/\/ Reference scale to be able to resca/;"	m	struct:ImGuiTableSettings	typeref:typename:float
RefVal	includes/imgui_internal.h	/^    ImGuiDataTypeStorage        RefVal;             \/\/ Not exposed yet, for ImGuiInputTextFlag/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiDataTypeStorage
RefreshFlagsVal	includes/imgui_internal.h	/^    ImGuiWindowRefreshFlags     RefreshFlagsVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiWindowRefreshFlags
ReloadFonts	rlImGui.cpp	/^void ReloadFonts(void)$/;"	f	typeref:typename:void
ReloadSelectionEnd	includes/imgui_internal.h	/^    int                     ReloadSelectionEnd;$/;"	m	struct:ImGuiInputTextState	typeref:typename:int
ReloadSelectionStart	includes/imgui_internal.h	/^    int                     ReloadSelectionStart;$/;"	m	struct:ImGuiInputTextState	typeref:typename:int
ReloadUserBufAndKeepSelection	imgui_widgets.cpp	/^void ImGuiInputTextState::ReloadUserBufAndKeepSelection()   { WantReloadUserBuf = true; ReloadSe/;"	f	class:ImGuiInputTextState	typeref:typename:void
ReloadUserBufAndMoveToEnd	imgui_widgets.cpp	/^void ImGuiInputTextState::ReloadUserBufAndMoveToEnd()       { WantReloadUserBuf = true; ReloadSe/;"	f	class:ImGuiInputTextState	typeref:typename:void
ReloadUserBufAndSelectAll	imgui_widgets.cpp	/^void ImGuiInputTextState::ReloadUserBufAndSelectAll()       { WantReloadUserBuf = true; ReloadSe/;"	f	class:ImGuiInputTextState	typeref:typename:void
Remap	includes/raymath.h	/^RMAPI float Remap(float value, float inputStart, float inputEnd, float outputStart, float output/;"	f	typeref:typename:RMAPI float
Remove	includes/imgui_internal.h	/^    void        Remove(ImGuiID key, ImPoolIdx idx)  { Buf[idx].~T(); *(int*)&Buf[idx] = FreeIdx;/;"	f	struct:ImPool	typeref:typename:void
Remove	includes/imgui_internal.h	/^    void        Remove(ImGuiID key, const T* p)     { Remove(key, GetIndex(p)); }$/;"	f	struct:ImPool	typeref:typename:void
RemoveContextHook	imgui.cpp	/^void ImGui::RemoveContextHook(ImGuiContext* ctx, ImGuiID hook_id)$/;"	f	class:ImGui	typeref:typename:void
RemoveSettingsHandler	imgui.cpp	/^void ImGui::RemoveSettingsHandler(const char* type_name)$/;"	f	class:ImGui	typeref:typename:void
RenamingDoc	imgui_demo.cpp	/^    MyDocument*             RenamingDoc = NULL;$/;"	m	struct:ExampleAppDocuments	typeref:typename:MyDocument *	file:
RenamingStarted	imgui_demo.cpp	/^    bool                    RenamingStarted = false;$/;"	m	struct:ExampleAppDocuments	typeref:typename:bool	file:
Render	imgui.cpp	/^void ImGui::Render()$/;"	f	class:ImGui	typeref:typename:void
RenderArrow	imgui_draw.cpp	/^void ImGui::RenderArrow(ImDrawList* draw_list, ImVec2 pos, ImU32 col, ImGuiDir dir, float scale)$/;"	f	class:ImGui	typeref:typename:void
RenderArrowPointingAt	imgui_draw.cpp	/^void ImGui::RenderArrowPointingAt(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, ImGuiDir di/;"	f	class:ImGui	typeref:typename:void
RenderArrowsForVerticalBar	imgui_widgets.cpp	/^static void RenderArrowsForVerticalBar(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, float /;"	f	typeref:typename:void	file:
RenderBullet	imgui_draw.cpp	/^void ImGui::RenderBullet(ImDrawList* draw_list, ImVec2 pos, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
RenderChar	imgui_draw.cpp	/^void ImFont::RenderChar(ImDrawList* draw_list, float size, const ImVec2& pos, ImU32 col, ImWchar/;"	f	class:ImFont	typeref:typename:void
RenderCheckMark	imgui_draw.cpp	/^void ImGui::RenderCheckMark(ImDrawList* draw_list, ImVec2 pos, ImU32 col, float sz)$/;"	f	class:ImGui	typeref:typename:void
RenderColorRectWithAlphaCheckerboard	imgui_draw.cpp	/^void ImGui::RenderColorRectWithAlphaCheckerboard(ImDrawList* draw_list, ImVec2 p_min, ImVec2 p_m/;"	f	class:ImGui	typeref:typename:void
RenderDimmedBackgroundBehindWindow	imgui.cpp	/^static void ImGui::RenderDimmedBackgroundBehindWindow(ImGuiWindow* window, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void	file:
RenderDimmedBackgrounds	imgui.cpp	/^static void ImGui::RenderDimmedBackgrounds()$/;"	f	class:ImGui	typeref:typename:void	file:
RenderDragDropTargetRect	imgui.cpp	/^void ImGui::RenderDragDropTargetRect(const ImRect& bb, const ImRect& item_clip_rect)$/;"	f	class:ImGui	typeref:typename:void
RenderFrame	imgui.cpp	/^void ImGui::RenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool borders, float rounding/;"	f	class:ImGui	typeref:typename:void
RenderFrameBorder	imgui.cpp	/^void ImGui::RenderFrameBorder(ImVec2 p_min, ImVec2 p_max, float rounding)$/;"	f	class:ImGui	typeref:typename:void
RenderMouseCursor	imgui.cpp	/^void ImGui::RenderMouseCursor(ImVec2 base_pos, float base_scale, ImGuiMouseCursor mouse_cursor, /;"	f	class:ImGui	typeref:typename:void
RenderNavCursor	imgui.cpp	/^void ImGui::RenderNavCursor(const ImRect& bb, ImGuiID id, ImGuiNavRenderCursorFlags flags)$/;"	f	class:ImGui	typeref:typename:void
RenderNavHighlight	includes/imgui_internal.h	/^    inline    void          RenderNavHighlight(const ImRect& bb, ImGuiID id, ImGuiNavRenderCurso/;"	f	namespace:ImGui	typeref:typename:void
RenderRectFilledRangeH	imgui_draw.cpp	/^void ImGui::RenderRectFilledRangeH(ImDrawList* draw_list, const ImRect& rect, ImU32 col, float x/;"	f	class:ImGui	typeref:typename:void
RenderRectFilledWithHole	imgui_draw.cpp	/^void ImGui::RenderRectFilledWithHole(ImDrawList* draw_list, const ImRect& outer, const ImRect& i/;"	f	class:ImGui	typeref:typename:void
RenderText	imgui.cpp	/^void ImGui::RenderText(ImVec2 pos, const char* text, const char* text_end, bool hide_text_after_/;"	f	class:ImGui	typeref:typename:void
RenderText	imgui_draw.cpp	/^void ImFont::RenderText(ImDrawList* draw_list, float size, const ImVec2& pos, ImU32 col, const I/;"	f	class:ImFont	typeref:typename:void
RenderTextClipped	imgui.cpp	/^void ImGui::RenderTextClipped(const ImVec2& pos_min, const ImVec2& pos_max, const char* text, co/;"	f	class:ImGui	typeref:typename:void
RenderTextClippedEx	imgui.cpp	/^void ImGui::RenderTextClippedEx(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_/;"	f	class:ImGui	typeref:typename:void
RenderTextEllipsis	imgui.cpp	/^void ImGui::RenderTextEllipsis(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_m/;"	f	class:ImGui	typeref:typename:void
RenderTextWrapped	imgui.cpp	/^void ImGui::RenderTextWrapped(ImVec2 pos, const char* text, const char* text_end, float wrap_wid/;"	f	class:ImGui	typeref:typename:void
RenderTexture	includes/raylib.h	/^typedef struct RenderTexture {$/;"	s
RenderTexture	includes/raylib.h	/^} RenderTexture;$/;"	t	typeref:struct:RenderTexture
RenderTexture2D	includes/raylib.h	/^typedef RenderTexture RenderTexture2D;$/;"	t	typeref:typename:RenderTexture
RenderViewportsThumbnails	imgui.cpp	/^static void RenderViewportsThumbnails()$/;"	f	typeref:typename:void	file:
RenderWindowDecorations	imgui.cpp	/^void ImGui::RenderWindowDecorations(ImGuiWindow* window, const ImRect& title_bar_rect, bool titl/;"	f	class:ImGui	typeref:typename:void
RenderWindowOuterBorders	imgui.cpp	/^static void ImGui::RenderWindowOuterBorders(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void	file:
RenderWindowOuterSingleBorder	imgui.cpp	/^static void RenderWindowOuterSingleBorder(ImGuiWindow* window, int border_n, ImU32 border_col, f/;"	f	typeref:typename:void	file:
RenderWindowTitleBarContents	imgui.cpp	/^void ImGui::RenderWindowTitleBarContents(ImGuiWindow* window, const ImRect& title_bar_rect, cons/;"	f	class:ImGui	typeref:typename:void
Renderer_RenderState	includes/imgui.h	/^    void*       Renderer_RenderState;$/;"	m	struct:ImGuiPlatformIO	typeref:typename:void *
ReorderColumn	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         ReorderColumn;              \/\/ Index of column being reordered/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ReorderColumnDir	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         ReorderColumnDir;           \/\/ -1 or +1$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ReorderRequestOffset	includes/imgui_internal.h	/^    ImS16               ReorderRequestOffset;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS16
ReorderRequestTabId	includes/imgui_internal.h	/^    ImGuiID             ReorderRequestTabId;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
Request	includes/imgui_internal.h	/^    ImGuiTypingSelectRequest Request;           \/\/ User-facing data$/;"	m	struct:ImGuiTypingSelectState	typeref:typename:ImGuiTypingSelectRequest
RequestClear	includes/imgui_internal.h	/^    bool                    RequestClear;$/;"	m	struct:ImGuiBoxSelectState	typeref:typename:bool
RequestDelete	imgui_demo.cpp	/^    bool            RequestDelete = false;      \/\/ Deferred deletion request$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:bool	file:
RequestSort	imgui_demo.cpp	/^    bool            RequestSort = false;        \/\/ Deferred sort request$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:bool	file:
RequestedWidth	includes/imgui_internal.h	/^    float               RequestedWidth;         \/\/ Width optionally requested by caller, -1.0f/;"	m	struct:ImGuiTabItem	typeref:typename:float
Requests	includes/imgui.h	/^    ImVector<ImGuiSelectionRequest> Requests;   \/\/  ms:w, app:r     \/  ms:w  app:r   \/\/ Req/;"	m	struct:ImGuiMultiSelectIO	typeref:typename:ImVector<ImGuiSelectionRequest>
Reserve	includes/imgui_internal.h	/^    inline void  Reserve(int n, size_t sz, int a=4) { IM_ASSERT(n == CurrIdx && n < CHUNKS); Cur/;"	f	struct:ImSpanAllocator	typeref:typename:void
Reserve	includes/imgui_internal.h	/^    void        Reserve(int capacity)               { Buf.reserve(capacity); Map.Data.reserve(ca/;"	f	struct:ImPool	typeref:typename:void
Reset	includes/imgui_internal.h	/^    void                            Reset(ImGuiListClipper* clipper) { ListClipper = clipper; St/;"	f	struct:ImGuiListClipperData	typeref:typename:void
ResetMouseDragDelta	imgui.cpp	/^void ImGui::ResetMouseDragDelta(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:void
ResizeBorderHeld	includes/imgui_internal.h	/^    signed char             ResizeBorderHeld;                   \/\/ Current border being held f/;"	m	struct:ImGuiWindow	typeref:typename:signed char
ResizeBorderHovered	includes/imgui_internal.h	/^    signed char             ResizeBorderHovered;                \/\/ Current border being hovere/;"	m	struct:ImGuiWindow	typeref:typename:signed char
ResizeLockMinContentsX2	includes/imgui_internal.h	/^    float                       ResizeLockMinContentsX2;    \/\/ Lock minimum contents width whi/;"	m	struct:ImGuiTable	typeref:typename:float
ResizedColumn	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         ResizedColumn;              \/\/ Index of column being resized. /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ResizedColumnNextWidth	includes/imgui_internal.h	/^    float                       ResizedColumnNextWidth;$/;"	m	struct:ImGuiTable	typeref:typename:float
RestoreNavWindow	includes/imgui_internal.h	/^    ImGuiWindow*        RestoreNavWindow;\/\/ Set on OpenPopup(), a NavWindow that will be resto/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiWindow *
Results	includes/imgui_internal.h	/^    ImVector<ImGuiStackLevelInfo> Results;$/;"	m	struct:ImGuiIDStackTool	typeref:typename:ImVector<ImGuiStackLevelInfo>
RightMostEnabledColumn	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         RightMostEnabledColumn;     \/\/ Index of right-most non-hidden /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
RightMostStretchedColumn	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         RightMostStretchedColumn;   \/\/ Index of right-most stretched c/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
RootWindow	includes/imgui_internal.h	/^    ImGuiWindow*            RootWindow;                         \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowForNav	includes/imgui_internal.h	/^    ImGuiWindow*            RootWindowForNav;                   \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowForTitleBarHighlight	includes/imgui_internal.h	/^    ImGuiWindow*            RootWindowForTitleBarHighlight;     \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowPopupTree	includes/imgui_internal.h	/^    ImGuiWindow*            RootWindowPopupTree;                \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RoundScalarWithFormatT	imgui_widgets.cpp	/^TYPE ImGui::RoundScalarWithFormatT(const char* format, ImGuiDataType data_type, TYPE v)$/;"	f	class:ImGui	typeref:typename:TYPE
RoutingCurr	includes/imgui_internal.h	/^    ImGuiID                         RoutingCurr;$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImGuiID
RoutingCurrScore	includes/imgui_internal.h	/^    ImU8                            RoutingCurrScore;   \/\/ [DEBUG] For debug display$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImU8
RoutingNext	includes/imgui_internal.h	/^    ImGuiID                         RoutingNext;$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImGuiID
RoutingNextScore	includes/imgui_internal.h	/^    ImU8                            RoutingNextScore;   \/\/ Lower is better (0: perfect score)$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImU8
Row	imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ImGui::DebugRenderKeyboardPreview::KeyLayoutData	typeref:typename:int	file:
RowBgColor	includes/imgui_internal.h	/^    ImU32                       RowBgColor[2];              \/\/ Background color override for c/;"	m	struct:ImGuiTable	typeref:typename:ImU32[2]
RowBgColorCounter	includes/imgui_internal.h	/^    int                         RowBgColorCounter;          \/\/ Counter for alternating backgro/;"	m	struct:ImGuiTable	typeref:typename:int
RowCellData	includes/imgui_internal.h	/^    ImSpan<ImGuiTableCellData>  RowCellData;                \/\/ Point within RawData[]. Store c/;"	m	struct:ImGuiTable	typeref:typename:ImSpan<ImGuiTableCellData>
RowCellDataCurrent	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         RowCellDataCurrent;         \/\/ Index of current RowCellData[] /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
RowCellPaddingY	includes/imgui_internal.h	/^    float                       RowCellPaddingY;            \/\/ Top and bottom padding. Reloade/;"	m	struct:ImGuiTable	typeref:typename:float
RowFlags	includes/imgui_internal.h	/^    ImGuiTableRowFlags          RowFlags : 16;              \/\/ Current row flags, see ImGuiTab/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableRowFlags:16
RowIndentOffsetX	includes/imgui_internal.h	/^    float                       RowIndentOffsetX;$/;"	m	struct:ImGuiTable	typeref:typename:float
RowMinHeight	includes/imgui_internal.h	/^    float                       RowMinHeight;               \/\/ Height submitted to TableNextRo/;"	m	struct:ImGuiTable	typeref:typename:float
RowPosY1	includes/imgui_internal.h	/^    float                       RowPosY1;$/;"	m	struct:ImGuiTable	typeref:typename:float
RowPosY2	includes/imgui_internal.h	/^    float                       RowPosY2;$/;"	m	struct:ImGuiTable	typeref:typename:float
RowTextBaseline	includes/imgui_internal.h	/^    float                       RowTextBaseline;$/;"	m	struct:ImGuiTable	typeref:typename:float
SHADER_ATTRIB_FLOAT	includes/raylib.h	/^    SHADER_ATTRIB_FLOAT = 0,        \/\/ Shader attribute type: float$/;"	e	enum:__anonce11f6a40c03
SHADER_ATTRIB_VEC2	includes/raylib.h	/^    SHADER_ATTRIB_VEC2,             \/\/ Shader attribute type: vec2 (2 float)$/;"	e	enum:__anonce11f6a40c03
SHADER_ATTRIB_VEC3	includes/raylib.h	/^    SHADER_ATTRIB_VEC3,             \/\/ Shader attribute type: vec3 (3 float)$/;"	e	enum:__anonce11f6a40c03
SHADER_ATTRIB_VEC4	includes/raylib.h	/^    SHADER_ATTRIB_VEC4              \/\/ Shader attribute type: vec4 (4 float)$/;"	e	enum:__anonce11f6a40c03
SHADER_LOC_BONE_MATRICES	includes/raylib.h	/^    SHADER_LOC_BONE_MATRICES        \/\/ Shader location: array of matrices uniform: boneMatrice/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_COLOR_AMBIENT	includes/raylib.h	/^    SHADER_LOC_COLOR_AMBIENT,       \/\/ Shader location: vector uniform: ambient color$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_COLOR_DIFFUSE	includes/raylib.h	/^    SHADER_LOC_COLOR_DIFFUSE,       \/\/ Shader location: vector uniform: diffuse color$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_COLOR_SPECULAR	includes/raylib.h	/^    SHADER_LOC_COLOR_SPECULAR,      \/\/ Shader location: vector uniform: specular color$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_MAP_ALBEDO	includes/raylib.h	/^    SHADER_LOC_MAP_ALBEDO,          \/\/ Shader location: sampler2d texture: albedo (same as: SH/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_MAP_BRDF	includes/raylib.h	/^    SHADER_LOC_MAP_BRDF,            \/\/ Shader location: sampler2d texture: brdf$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_MAP_CUBEMAP	includes/raylib.h	/^    SHADER_LOC_MAP_CUBEMAP,         \/\/ Shader location: samplerCube texture: cubemap$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_MAP_DIFFUSE	includes/raylib.h	/^#define SHADER_LOC_MAP_DIFFUSE /;"	d
SHADER_LOC_MAP_EMISSION	includes/raylib.h	/^    SHADER_LOC_MAP_EMISSION,        \/\/ Shader location: sampler2d texture: emission$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_MAP_HEIGHT	includes/raylib.h	/^    SHADER_LOC_MAP_HEIGHT,          \/\/ Shader location: sampler2d texture: height$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_MAP_IRRADIANCE	includes/raylib.h	/^    SHADER_LOC_MAP_IRRADIANCE,      \/\/ Shader location: samplerCube texture: irradiance$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_MAP_METALNESS	includes/raylib.h	/^    SHADER_LOC_MAP_METALNESS,       \/\/ Shader location: sampler2d texture: metalness (same as:/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_MAP_NORMAL	includes/raylib.h	/^    SHADER_LOC_MAP_NORMAL,          \/\/ Shader location: sampler2d texture: normal$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_MAP_OCCLUSION	includes/raylib.h	/^    SHADER_LOC_MAP_OCCLUSION,       \/\/ Shader location: sampler2d texture: occlusion$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_MAP_PREFILTER	includes/raylib.h	/^    SHADER_LOC_MAP_PREFILTER,       \/\/ Shader location: samplerCube texture: prefilter$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_MAP_ROUGHNESS	includes/raylib.h	/^    SHADER_LOC_MAP_ROUGHNESS,       \/\/ Shader location: sampler2d texture: roughness$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_MAP_SPECULAR	includes/raylib.h	/^#define SHADER_LOC_MAP_SPECULAR /;"	d
SHADER_LOC_MATRIX_MODEL	includes/raylib.h	/^    SHADER_LOC_MATRIX_MODEL,        \/\/ Shader location: matrix uniform: model (transform)$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_MATRIX_MVP	includes/raylib.h	/^    SHADER_LOC_MATRIX_MVP,          \/\/ Shader location: matrix uniform: model-view-projection$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_MATRIX_NORMAL	includes/raylib.h	/^    SHADER_LOC_MATRIX_NORMAL,       \/\/ Shader location: matrix uniform: normal$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_MATRIX_PROJECTION	includes/raylib.h	/^    SHADER_LOC_MATRIX_PROJECTION,   \/\/ Shader location: matrix uniform: projection$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_MATRIX_VIEW	includes/raylib.h	/^    SHADER_LOC_MATRIX_VIEW,         \/\/ Shader location: matrix uniform: view (camera transform/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_VECTOR_VIEW	includes/raylib.h	/^    SHADER_LOC_VECTOR_VIEW,         \/\/ Shader location: vector uniform: view$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_VERTEX_BONEIDS	includes/raylib.h	/^    SHADER_LOC_VERTEX_BONEIDS,      \/\/ Shader location: vertex attribute: boneIds$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_VERTEX_BONEWEIGHTS	includes/raylib.h	/^    SHADER_LOC_VERTEX_BONEWEIGHTS,  \/\/ Shader location: vertex attribute: boneWeights$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_VERTEX_COLOR	includes/raylib.h	/^    SHADER_LOC_VERTEX_COLOR,        \/\/ Shader location: vertex attribute: color$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_VERTEX_NORMAL	includes/raylib.h	/^    SHADER_LOC_VERTEX_NORMAL,       \/\/ Shader location: vertex attribute: normal$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_VERTEX_POSITION	includes/raylib.h	/^    SHADER_LOC_VERTEX_POSITION = 0, \/\/ Shader location: vertex attribute: position$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_VERTEX_TANGENT	includes/raylib.h	/^    SHADER_LOC_VERTEX_TANGENT,      \/\/ Shader location: vertex attribute: tangent$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_VERTEX_TEXCOORD01	includes/raylib.h	/^    SHADER_LOC_VERTEX_TEXCOORD01,   \/\/ Shader location: vertex attribute: texcoord01$/;"	e	enum:__anonce11f6a40a03
SHADER_LOC_VERTEX_TEXCOORD02	includes/raylib.h	/^    SHADER_LOC_VERTEX_TEXCOORD02,   \/\/ Shader location: vertex attribute: texcoord02$/;"	e	enum:__anonce11f6a40a03
SHADER_UNIFORM_FLOAT	includes/raylib.h	/^    SHADER_UNIFORM_FLOAT = 0,       \/\/ Shader uniform type: float$/;"	e	enum:__anonce11f6a40b03
SHADER_UNIFORM_INT	includes/raylib.h	/^    SHADER_UNIFORM_INT,             \/\/ Shader uniform type: int$/;"	e	enum:__anonce11f6a40b03
SHADER_UNIFORM_IVEC2	includes/raylib.h	/^    SHADER_UNIFORM_IVEC2,           \/\/ Shader uniform type: ivec2 (2 int)$/;"	e	enum:__anonce11f6a40b03
SHADER_UNIFORM_IVEC3	includes/raylib.h	/^    SHADER_UNIFORM_IVEC3,           \/\/ Shader uniform type: ivec3 (3 int)$/;"	e	enum:__anonce11f6a40b03
SHADER_UNIFORM_IVEC4	includes/raylib.h	/^    SHADER_UNIFORM_IVEC4,           \/\/ Shader uniform type: ivec4 (4 int)$/;"	e	enum:__anonce11f6a40b03
SHADER_UNIFORM_SAMPLER2D	includes/raylib.h	/^    SHADER_UNIFORM_SAMPLER2D        \/\/ Shader uniform type: sampler2d$/;"	e	enum:__anonce11f6a40b03
SHADER_UNIFORM_VEC2	includes/raylib.h	/^    SHADER_UNIFORM_VEC2,            \/\/ Shader uniform type: vec2 (2 float)$/;"	e	enum:__anonce11f6a40b03
SHADER_UNIFORM_VEC3	includes/raylib.h	/^    SHADER_UNIFORM_VEC3,            \/\/ Shader uniform type: vec3 (3 float)$/;"	e	enum:__anonce11f6a40b03
SHADER_UNIFORM_VEC4	includes/raylib.h	/^    SHADER_UNIFORM_VEC4,            \/\/ Shader uniform type: vec4 (4 float)$/;"	e	enum:__anonce11f6a40b03
SKYBLUE	includes/raylib.h	/^#define SKYBLUE /;"	d
SPATIALHASHING_HPP	includes/classes/SpatialHashing.hpp	/^# define SPATIALHASHING_HPP$/;"	d
SRC	Makefile	/^SRC =	imgui_demo.cpp						\\$/;"	m
STBRP_ASSERT	imgui_draw.cpp	/^#define STBRP_ASSERT(/;"	d	file:
STBRP_ASSERT	includes/imstb_rectpack.h	/^#define STBRP_ASSERT /;"	d
STBRP_DEF	includes/imstb_rectpack.h	/^#define STBRP_DEF /;"	d
STBRP_HEURISTIC_Skyline_BF_sortHeight	includes/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BF_sortHeight$/;"	e	enum:__anonee1baa2c0103
STBRP_HEURISTIC_Skyline_BL_sortHeight	includes/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BL_sortHeight = STBRP_HEURISTIC_Skyline_default,$/;"	e	enum:__anonee1baa2c0103
STBRP_HEURISTIC_Skyline_default	includes/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_default=0,$/;"	e	enum:__anonee1baa2c0103
STBRP_SORT	imgui_draw.cpp	/^#define STBRP_SORT /;"	d	file:
STBRP_SORT	includes/imstb_rectpack.h	/^#define STBRP_SORT /;"	d
STBRP_STATIC	imgui_draw.cpp	/^#define STBRP_STATIC$/;"	d	file:
STBRP__CDECL	includes/imstb_rectpack.h	/^#define STBRP__CDECL /;"	d
STBRP__CDECL	includes/imstb_rectpack.h	/^#define STBRP__CDECL$/;"	d
STBRP__INIT_skyline	includes/imstb_rectpack.h	/^   STBRP__INIT_skyline = 1$/;"	e	enum:__anonee1baa2c0203
STBRP__MAXVAL	includes/imstb_rectpack.h	/^#define STBRP__MAXVAL /;"	d
STBRP__NOTUSED	includes/imstb_rectpack.h	/^#define STBRP__NOTUSED(/;"	d
STBTT_DEF	includes/imstb_truetype.h	/^#define STBTT_DEF /;"	d
STBTT_FIX	includes/imstb_truetype.h	/^#define STBTT_FIX /;"	d
STBTT_FIXMASK	includes/imstb_truetype.h	/^#define STBTT_FIXMASK /;"	d
STBTT_FIXSHIFT	includes/imstb_truetype.h	/^#define STBTT_FIXSHIFT /;"	d
STBTT_GPOS_TODO_assert	includes/imstb_truetype.h	/^#define STBTT_GPOS_TODO_assert(/;"	d
STBTT_MACSTYLE_BOLD	includes/imstb_truetype.h	/^#define STBTT_MACSTYLE_BOLD /;"	d
STBTT_MACSTYLE_DONTCARE	includes/imstb_truetype.h	/^#define STBTT_MACSTYLE_DONTCARE /;"	d
STBTT_MACSTYLE_ITALIC	includes/imstb_truetype.h	/^#define STBTT_MACSTYLE_ITALIC /;"	d
STBTT_MACSTYLE_NONE	includes/imstb_truetype.h	/^#define STBTT_MACSTYLE_NONE /;"	d
STBTT_MACSTYLE_UNDERSCORE	includes/imstb_truetype.h	/^#define STBTT_MACSTYLE_UNDERSCORE /;"	d
STBTT_MAC_EID_ARABIC	includes/imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon0587e8010c03
STBTT_MAC_EID_CHINESE_TRAD	includes/imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon0587e8010c03
STBTT_MAC_EID_GREEK	includes/imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon0587e8010c03
STBTT_MAC_EID_HEBREW	includes/imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon0587e8010c03
STBTT_MAC_EID_JAPANESE	includes/imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon0587e8010c03
STBTT_MAC_EID_KOREAN	includes/imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon0587e8010c03
STBTT_MAC_EID_ROMAN	includes/imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon0587e8010c03
STBTT_MAC_EID_RUSSIAN	includes/imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon0587e8010c03
STBTT_MAC_LANG_ARABIC	includes/imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon0587e8010e03
STBTT_MAC_LANG_CHINESE_SIMPLIFIED	includes/imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon0587e8010e03
STBTT_MAC_LANG_CHINESE_TRAD	includes/imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon0587e8010e03
STBTT_MAC_LANG_DUTCH	includes/imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon0587e8010e03
STBTT_MAC_LANG_ENGLISH	includes/imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon0587e8010e03
STBTT_MAC_LANG_FRENCH	includes/imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon0587e8010e03
STBTT_MAC_LANG_GERMAN	includes/imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon0587e8010e03
STBTT_MAC_LANG_HEBREW	includes/imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon0587e8010e03
STBTT_MAC_LANG_ITALIAN	includes/imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon0587e8010e03
STBTT_MAC_LANG_JAPANESE	includes/imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon0587e8010e03
STBTT_MAC_LANG_KOREAN	includes/imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon0587e8010e03
STBTT_MAC_LANG_RUSSIAN	includes/imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon0587e8010e03
STBTT_MAC_LANG_SPANISH	includes/imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon0587e8010e03
STBTT_MAC_LANG_SWEDISH	includes/imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon0587e8010e03
STBTT_MAX_OVERSAMPLE	includes/imstb_truetype.h	/^#define STBTT_MAX_OVERSAMPLE /;"	d
STBTT_MS_EID_SHIFTJIS	includes/imstb_truetype.h	/^   STBTT_MS_EID_SHIFTJIS      =2,$/;"	e	enum:__anon0587e8010b03
STBTT_MS_EID_SYMBOL	includes/imstb_truetype.h	/^   STBTT_MS_EID_SYMBOL        =0,$/;"	e	enum:__anon0587e8010b03
STBTT_MS_EID_UNICODE_BMP	includes/imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_BMP   =1,$/;"	e	enum:__anon0587e8010b03
STBTT_MS_EID_UNICODE_FULL	includes/imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_FULL  =10$/;"	e	enum:__anon0587e8010b03
STBTT_MS_LANG_CHINESE	includes/imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon0587e8010d03
STBTT_MS_LANG_DUTCH	includes/imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon0587e8010d03
STBTT_MS_LANG_ENGLISH	includes/imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon0587e8010d03
STBTT_MS_LANG_FRENCH	includes/imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon0587e8010d03
STBTT_MS_LANG_GERMAN	includes/imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon0587e8010d03
STBTT_MS_LANG_HEBREW	includes/imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon0587e8010d03
STBTT_MS_LANG_ITALIAN	includes/imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon0587e8010d03
STBTT_MS_LANG_JAPANESE	includes/imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon0587e8010d03
STBTT_MS_LANG_KOREAN	includes/imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon0587e8010d03
STBTT_MS_LANG_RUSSIAN	includes/imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon0587e8010d03
STBTT_MS_LANG_SPANISH	includes/imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon0587e8010d03
STBTT_MS_LANG_SWEDISH	includes/imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon0587e8010d03
STBTT_PLATFORM_ID_ISO	includes/imstb_truetype.h	/^   STBTT_PLATFORM_ID_ISO       =2,$/;"	e	enum:__anon0587e8010903
STBTT_PLATFORM_ID_MAC	includes/imstb_truetype.h	/^   STBTT_PLATFORM_ID_MAC       =1,$/;"	e	enum:__anon0587e8010903
STBTT_PLATFORM_ID_MICROSOFT	includes/imstb_truetype.h	/^   STBTT_PLATFORM_ID_MICROSOFT =3$/;"	e	enum:__anon0587e8010903
STBTT_PLATFORM_ID_UNICODE	includes/imstb_truetype.h	/^   STBTT_PLATFORM_ID_UNICODE   =0,$/;"	e	enum:__anon0587e8010903
STBTT_POINT_SIZE	includes/imstb_truetype.h	/^#define STBTT_POINT_SIZE(/;"	d
STBTT_RASTERIZER_VERSION	includes/imstb_truetype.h	/^#define STBTT_RASTERIZER_VERSION /;"	d
STBTT_STATIC	imgui_draw.cpp	/^#define STBTT_STATIC$/;"	d	file:
STBTT_UNICODE_EID_ISO_10646	includes/imstb_truetype.h	/^   STBTT_UNICODE_EID_ISO_10646      =2,$/;"	e	enum:__anon0587e8010a03
STBTT_UNICODE_EID_UNICODE_1_0	includes/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_0    =0,$/;"	e	enum:__anon0587e8010a03
STBTT_UNICODE_EID_UNICODE_1_1	includes/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_1    =1,$/;"	e	enum:__anon0587e8010a03
STBTT_UNICODE_EID_UNICODE_2_0_BMP	includes/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_BMP=3,$/;"	e	enum:__anon0587e8010a03
STBTT_UNICODE_EID_UNICODE_2_0_FULL	includes/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_FULL=4$/;"	e	enum:__anon0587e8010a03
STBTT__COMPARE	includes/imstb_truetype.h	/^#define STBTT__COMPARE(/;"	d
STBTT__CSCTX_INIT	includes/imstb_truetype.h	/^#define STBTT__CSCTX_INIT(/;"	d
STBTT__CSERR	includes/imstb_truetype.h	/^#define STBTT__CSERR(/;"	d
STBTT__NOTUSED	includes/imstb_truetype.h	/^#define STBTT__NOTUSED(/;"	d
STBTT__OVER_MASK	includes/imstb_truetype.h	/^#define STBTT__OVER_MASK /;"	d
STBTT_acos	includes/imstb_truetype.h	/^   #define STBTT_acos(/;"	d
STBTT_assert	imgui_draw.cpp	/^#define STBTT_assert(/;"	d	file:
STBTT_assert	includes/imstb_truetype.h	/^   #define STBTT_assert(/;"	d
STBTT_cos	includes/imstb_truetype.h	/^   #define STBTT_cos(/;"	d
STBTT_fabs	imgui_draw.cpp	/^#define STBTT_fabs(/;"	d	file:
STBTT_fabs	includes/imstb_truetype.h	/^   #define STBTT_fabs(/;"	d
STBTT_fmod	imgui_draw.cpp	/^#define STBTT_fmod(/;"	d	file:
STBTT_fmod	includes/imstb_truetype.h	/^   #define STBTT_fmod(/;"	d
STBTT_free	imgui_draw.cpp	/^#define STBTT_free(/;"	d	file:
STBTT_free	includes/imstb_truetype.h	/^   #define STBTT_free(/;"	d
STBTT_iceil	imgui_draw.cpp	/^#define STBTT_iceil(/;"	d	file:
STBTT_iceil	includes/imstb_truetype.h	/^   #define STBTT_iceil(/;"	d
STBTT_ifloor	imgui_draw.cpp	/^#define STBTT_ifloor(/;"	d	file:
STBTT_ifloor	includes/imstb_truetype.h	/^   #define STBTT_ifloor(/;"	d
STBTT_malloc	imgui_draw.cpp	/^#define STBTT_malloc(/;"	d	file:
STBTT_malloc	includes/imstb_truetype.h	/^   #define STBTT_malloc(/;"	d
STBTT_max	includes/imstb_truetype.h	/^#define STBTT_max(/;"	d
STBTT_memcpy	includes/imstb_truetype.h	/^   #define STBTT_memcpy /;"	d
STBTT_memset	includes/imstb_truetype.h	/^   #define STBTT_memset /;"	d
STBTT_min	includes/imstb_truetype.h	/^#define STBTT_min(/;"	d
STBTT_pow	imgui_draw.cpp	/^#define STBTT_pow(/;"	d	file:
STBTT_pow	includes/imstb_truetype.h	/^   #define STBTT_pow(/;"	d
STBTT_sqrt	imgui_draw.cpp	/^#define STBTT_sqrt(/;"	d	file:
STBTT_sqrt	includes/imstb_truetype.h	/^   #define STBTT_sqrt(/;"	d
STBTT_strlen	includes/imstb_truetype.h	/^   #define STBTT_strlen(/;"	d
STBTT_vcubic	includes/imstb_truetype.h	/^      STBTT_vcubic$/;"	e	enum:__anon0587e8010603
STBTT_vcurve	includes/imstb_truetype.h	/^      STBTT_vcurve,$/;"	e	enum:__anon0587e8010603
STBTT_vline	includes/imstb_truetype.h	/^      STBTT_vline,$/;"	e	enum:__anon0587e8010603
STBTT_vmove	includes/imstb_truetype.h	/^      STBTT_vmove=1,$/;"	e	enum:__anon0587e8010603
STB_INCLUDE_STB_RECT_PACK_H	includes/imstb_rectpack.h	/^#define STB_INCLUDE_STB_RECT_PACK_H$/;"	d
STB_RECT_PACK_IMPLEMENTATION	imgui_draw.cpp	/^#define STB_RECT_PACK_IMPLEMENTATION$/;"	d	file:
STB_RECT_PACK_VERSION	includes/imstb_rectpack.h	/^#define STB_RECT_PACK_VERSION /;"	d
STB_SPRINTF_IMPLEMENTATION	imgui.cpp	/^#define STB_SPRINTF_IMPLEMENTATION$/;"	d	file:
STB_TEXTEDIT_DELETECHARS	imgui_widgets.cpp	/^static void STB_TEXTEDIT_DELETECHARS(ImGuiInputTextState* obj, int pos, int n)$/;"	f	namespace:ImStb	typeref:typename:void	file:
STB_TEXTEDIT_GETCHAR	imgui_widgets.cpp	/^static char    STB_TEXTEDIT_GETCHAR(const ImGuiInputTextState* obj, int idx)                    /;"	f	namespace:ImStb	typeref:typename:char	file:
STB_TEXTEDIT_GETWIDTH	imgui_widgets.cpp	/^static float   STB_TEXTEDIT_GETWIDTH(ImGuiInputTextState* obj, int line_start_idx, int char_idx)/;"	f	namespace:ImStb	typeref:typename:float	file:
STB_TEXTEDIT_INSERTCHARS	imgui_widgets.cpp	/^static bool STB_TEXTEDIT_INSERTCHARS(ImGuiInputTextState* obj, int pos, const char* new_text, in/;"	f	namespace:ImStb	typeref:typename:bool	file:
STB_TEXTEDIT_KEYTYPE	includes/imstb_textedit.h	/^#define STB_TEXTEDIT_KEYTYPE /;"	d
STB_TEXTEDIT_K_BACKSPACE	imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_BACKSPACE /;"	d	file:
STB_TEXTEDIT_K_DELETE	imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_DELETE /;"	d	file:
STB_TEXTEDIT_K_DOWN	imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_DOWN /;"	d	file:
STB_TEXTEDIT_K_LEFT	imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LEFT /;"	d	file:
STB_TEXTEDIT_K_LINEEND	imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LINEEND /;"	d	file:
STB_TEXTEDIT_K_LINESTART	imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LINESTART /;"	d	file:
STB_TEXTEDIT_K_PGDOWN	imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_PGDOWN /;"	d	file:
STB_TEXTEDIT_K_PGUP	imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_PGUP /;"	d	file:
STB_TEXTEDIT_K_REDO	imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_REDO /;"	d	file:
STB_TEXTEDIT_K_RIGHT	imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_RIGHT /;"	d	file:
STB_TEXTEDIT_K_SHIFT	imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_SHIFT /;"	d	file:
STB_TEXTEDIT_K_TEXTEND	imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_TEXTEND /;"	d	file:
STB_TEXTEDIT_K_TEXTSTART	imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_TEXTSTART /;"	d	file:
STB_TEXTEDIT_K_UNDO	imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_UNDO /;"	d	file:
STB_TEXTEDIT_K_UP	imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_UP /;"	d	file:
STB_TEXTEDIT_K_WORDLEFT	imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_WORDLEFT /;"	d	file:
STB_TEXTEDIT_K_WORDRIGHT	imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_WORDRIGHT /;"	d	file:
STB_TEXTEDIT_LAYOUTROW	imgui_widgets.cpp	/^static void    STB_TEXTEDIT_LAYOUTROW(StbTexteditRow* r, ImGuiInputTextState* obj, int line_star/;"	f	namespace:ImStb	typeref:typename:void	file:
STB_TEXTEDIT_MOVEWORDLEFT	imgui_widgets.cpp	/^#define STB_TEXTEDIT_MOVEWORDLEFT /;"	d	file:
STB_TEXTEDIT_MOVEWORDLEFT	includes/imstb_textedit.h	/^#define STB_TEXTEDIT_MOVEWORDLEFT /;"	d
STB_TEXTEDIT_MOVEWORDLEFT_IMPL	imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDLEFT_IMPL(ImGuiInputTextState* obj, int idx)$/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_MOVEWORDRIGHT	imgui_widgets.cpp	/^#define STB_TEXTEDIT_MOVEWORDRIGHT /;"	d	file:
STB_TEXTEDIT_MOVEWORDRIGHT	includes/imstb_textedit.h	/^#define STB_TEXTEDIT_MOVEWORDRIGHT /;"	d
STB_TEXTEDIT_MOVEWORDRIGHT_IMPL	imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(ImGuiInputTextState* obj, int idx)  { ImGuiContext& /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_MOVEWORDRIGHT_MAC	imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_MAC(ImGuiInputTextState* obj, int idx)$/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_MOVEWORDRIGHT_WIN	imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_WIN(ImGuiInputTextState* obj, int idx)$/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_NEWLINE	imgui_widgets.cpp	/^static char    STB_TEXTEDIT_NEWLINE = '\\n';$/;"	v	namespace:ImStb	typeref:typename:char	file:
STB_TEXTEDIT_STRINGLEN	imgui_widgets.cpp	/^static int     STB_TEXTEDIT_STRINGLEN(const ImGuiInputTextState* obj)                           /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXT_HAS_SELECTION	includes/imstb_textedit.h	/^#define STB_TEXT_HAS_SELECTION(/;"	d
STB_TRUETYPE_IMPLEMENTATION	imgui_draw.cpp	/^#define STB_TRUETYPE_IMPLEMENTATION$/;"	d	file:
STB_TexteditState	includes/imstb_textedit.h	/^typedef struct STB_TexteditState$/;"	s
STB_TexteditState	includes/imstb_textedit.h	/^} STB_TexteditState;$/;"	t	typeref:struct:STB_TexteditState
STDRULE	Makefile	/^STDRULE = $/;"	m
SameLine	imgui.cpp	/^void ImGui::SameLine(float offset_from_start_x, float spacing_w)$/;"	f	class:ImGui	typeref:typename:IM_MSVC_RUNTIME_CHECKS_RESTORE void
SameLineOrWrap	imgui.cpp	/^static void SameLineOrWrap(const ImVec2& size)$/;"	f	typeref:typename:void	file:
SaveFileDataCallback	includes/raylib.h	/^typedef bool (*SaveFileDataCallback)(const char *fileName, void *data, int dataSize);   \/\/ Fil/;"	t	typeref:typename:bool (*)(const char * fileName,void * data,int dataSize)
SaveFileTextCallback	includes/raylib.h	/^typedef bool (*SaveFileTextCallback)(const char *fileName, char *text); \/\/ FileIO: Save text d/;"	t	typeref:typename:bool (*)(const char * fileName,char * text)
SaveFlags	includes/imgui_internal.h	/^    ImGuiTableFlags             SaveFlags;              \/\/ Indicate data we want to save using/;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiTableFlags
SaveIniSettingsToDisk	imgui.cpp	/^void ImGui::SaveIniSettingsToDisk(const char* ini_filename)$/;"	f	class:ImGui	typeref:typename:void
SaveIniSettingsToMemory	imgui.cpp	/^const char* ImGui::SaveIniSettingsToMemory(size_t* out_size)$/;"	f	class:ImGui	typeref:typename:const char *
Saw	imgui_demo.cpp	/^            static float Saw(void*, int i) { return (i & 1) ? 1.0f : -1.0f; }$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:float	file:
Scale	includes/imgui.h	/^    float                       Scale;              \/\/ 4     \/\/ in  \/\/ = 1.f      \/\/ Bas/;"	m	struct:ImFont	typeref:typename:float
ScaleAllSizes	imgui.cpp	/^void ImGuiStyle::ScaleAllSizes(float scale_factor)$/;"	f	class:ImGuiStyle	typeref:typename:void
ScaleClipRects	imgui_draw.cpp	/^void ImDrawData::ScaleClipRects(const ImVec2& fb_scale)$/;"	f	class:ImDrawData	typeref:typename:void
ScaleRatioFromValueT	imgui_widgets.cpp	/^float ImGui::ScaleRatioFromValueT(ImGuiDataType data_type, TYPE v, TYPE v_min, TYPE v_max, bool /;"	f	class:ImGui	typeref:typename:float
ScaleWindow	imgui.cpp	/^static void ScaleWindow(ImGuiWindow* window, float scale)$/;"	f	typeref:typename:void	file:
ScaleWindowsInViewport	imgui.cpp	/^void ImGui::ScaleWindowsInViewport(ImGuiViewportP* viewport, float scale)$/;"	f	class:ImGui	typeref:typename:void
ScanFmt	includes/imgui_internal.h	/^    const char* ScanFmt;        \/\/ Default scanf format for the type$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
ScopeRectMin	includes/imgui_internal.h	/^    ImVec2                  ScopeRectMin;$/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:ImVec2
Scroll	includes/imgui_internal.h	/^    ImVec2                  Scroll;                 \/\/ horizontal offset (managed manually) + /;"	m	struct:ImGuiInputTextState	typeref:typename:ImVec2
Scroll	includes/imgui_internal.h	/^    ImVec2                  Scroll;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollAccum	includes/imgui_internal.h	/^    ImVec2                  ScrollAccum;        \/\/ Scrolling accumulator (to behave at high-fr/;"	m	struct:ImGuiBoxSelectState	typeref:typename:ImVec2
ScrollMax	includes/imgui_internal.h	/^    ImVec2                  ScrollMax;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTarget	includes/imgui_internal.h	/^    ImVec2                  ScrollTarget;                       \/\/ target scroll position. sto/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTargetCenterRatio	includes/imgui_internal.h	/^    ImVec2                  ScrollTargetCenterRatio;            \/\/ 0.0f = scroll so that targe/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTargetEdgeSnapDist	includes/imgui_internal.h	/^    ImVec2                  ScrollTargetEdgeSnapDist;           \/\/ 0.0f = no snapping, >0.0f s/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollToBottom	imgui_demo.cpp	/^    bool                  ScrollToBottom;$/;"	m	struct:ExampleAppConsole	typeref:typename:bool	file:
ScrollToBringRectIntoView	includes/imgui_internal.h	/^    inline void             ScrollToBringRectIntoView(ImGuiWindow* window, const ImRect& rect) {/;"	f	namespace:ImGui	typeref:typename:void
ScrollToItem	imgui.cpp	/^void ImGui::ScrollToItem(ImGuiScrollFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ScrollToRect	imgui.cpp	/^void ImGui::ScrollToRect(ImGuiWindow* window, const ImRect& item_rect, ImGuiScrollFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ScrollToRectEx	imgui.cpp	/^ImVec2 ImGui::ScrollToRectEx(ImGuiWindow* window, const ImRect& item_rect, ImGuiScrollFlags flag/;"	f	class:ImGui	typeref:typename:ImVec2
ScrollVal	includes/imgui_internal.h	/^    ImVec2                      ScrollVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
Scrollbar	imgui_widgets.cpp	/^void ImGui::Scrollbar(ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:void
ScrollbarClickDeltaToGrabCenter	includes/imgui_internal.h	/^    float                   ScrollbarClickDeltaToGrabCenter;    \/\/ When scrolling to mouse loc/;"	m	struct:ImGuiContext	typeref:typename:float
ScrollbarEx	imgui_widgets.cpp	/^bool ImGui::ScrollbarEx(const ImRect& bb_frame, ImGuiID id, ImGuiAxis axis, ImS64* p_scroll_v, I/;"	f	class:ImGui	typeref:typename:bool
ScrollbarRounding	includes/imgui.h	/^    float       ScrollbarRounding;          \/\/ Radius of grab corners for scrollbar.$/;"	m	struct:ImGuiStyle	typeref:typename:float
ScrollbarSeekMode	includes/imgui_internal.h	/^    short                   ScrollbarSeekMode;                  \/\/ 0: scroll to clicked locati/;"	m	struct:ImGuiContext	typeref:typename:short
ScrollbarSize	includes/imgui.h	/^    float       ScrollbarSize;              \/\/ Width of the vertical scrollbar, Height of the /;"	m	struct:ImGuiStyle	typeref:typename:float
ScrollbarSizes	includes/imgui_internal.h	/^    ImVec2                  ScrollbarSizes;                     \/\/ Size taken by each scrollba/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollbarX	includes/imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;             \/\/ Are scrollbars visible?$/;"	m	struct:ImGuiWindow	typeref:typename:bool
ScrollbarY	includes/imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;             \/\/ Are scrollbars visible?$/;"	m	struct:ImGuiWindow	typeref:typename:bool
ScrollingAnim	includes/imgui_internal.h	/^    float               ScrollingAnim;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingRectMaxX	includes/imgui_internal.h	/^    float               ScrollingRectMaxX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingRectMinX	includes/imgui_internal.h	/^    float               ScrollingRectMinX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingSpeed	includes/imgui_internal.h	/^    float               ScrollingSpeed;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingTarget	includes/imgui_internal.h	/^    float               ScrollingTarget;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingTargetDistToVisibility	includes/imgui_internal.h	/^    float               ScrollingTargetDistToVisibility;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
SearchBuffer	includes/imgui_internal.h	/^    char            SearchBuffer[64];           \/\/ Search buffer: no need to make dynamic as t/;"	m	struct:ImGuiTypingSelectState	typeref:typename:char[64]
SearchBuffer	includes/imgui_internal.h	/^    const char*             SearchBuffer;       \/\/ Search buffer contents (use full string. un/;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:const char *
SearchBufferLen	includes/imgui_internal.h	/^    int                     SearchBufferLen;$/;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:int
SeekCursorForItem	imgui.cpp	/^void ImGuiListClipper::SeekCursorForItem(int item_n)$/;"	f	class:ImGuiListClipper	typeref:typename:void
SegmentN1	imgui.cpp	/^    ImVec2  SegmentN1, SegmentN2;   \/\/ End positions, normalized (0,0: upper left)$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
SegmentN2	imgui.cpp	/^    ImVec2  SegmentN1, SegmentN2;   \/\/ End positions, normalized (0,0: upper left)$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
SelectAll	imgui_widgets.cpp	/^void ImGuiInputTextState::SelectAll()                       { Stb->select_start = 0; Stb->cursor/;"	f	class:ImGuiInputTextState	typeref:typename:void
SelectAll	includes/imgui.h	/^    void                SelectAll()             { SelectionStart = 0; SelectionEnd = BufTextLen;/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:void
SelectRequest	includes/imgui_internal.h	/^    bool                    SelectRequest;      \/\/ Set when buffer was modified this frame, re/;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:bool
Selectable	imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec/;"	f	class:ImGui	typeref:typename:bool
Selectable	imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags, const Im/;"	f	class:ImGui	typeref:typename:bool
SelectableTextAlign	includes/imgui.h	/^    ImVec2      SelectableTextAlign;        \/\/ Alignment of selectable text. Defaults to (0.0f/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
Selected	includes/imgui.h	/^    bool                        Selected;       \/\/  ms:w, app:r     \/  ms:w, app:r   \/\/ Par/;"	m	struct:ImGuiSelectionRequest	typeref:typename:bool
SelectedAllMouseLock	includes/imgui_internal.h	/^    bool                    SelectedAllMouseLock;   \/\/ after a double-click to select all, we /;"	m	struct:ImGuiInputTextState	typeref:typename:bool
SelectedTabId	includes/imgui_internal.h	/^    ImGuiID             SelectedTabId;          \/\/ Selected tab\/window$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
Selection	imgui_demo.cpp	/^    ExampleSelectionWithDeletion Selection;     \/\/ Our selection (ImGuiSelectionBasicStorage +/;"	m	struct:ExampleAssetsBrowser	typeref:typename:ExampleSelectionWithDeletion	file:
SelectionEnd	includes/imgui.h	/^    int                 SelectionEnd;   \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
SelectionStart	includes/imgui.h	/^    int                 SelectionStart; \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
SelectionUserData	includes/imgui_internal.h	/^    ImGuiSelectionUserData      SelectionUserData;  \/\/ Set by SetNextItemSelectionUserData() (/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiSelectionUserData
SelectionUserData	includes/imgui_internal.h	/^    ImGuiSelectionUserData SelectionUserData;\/\/I+Mov    \/\/ Best candidate SetNextItemSelecti/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiSelectionUserData
Selections	imgui_demo.cpp	/^    ImGuiSelectionBasicStorage  Selections[2];          \/\/ Store ExampleItemId into selection$/;"	m	struct:ExampleDualListBox	typeref:typename:ImGuiSelectionBasicStorage[2]	file:
Separator	imgui_widgets.cpp	/^void ImGui::Separator()$/;"	f	class:ImGui	typeref:typename:void
SeparatorEx	imgui_widgets.cpp	/^void ImGui::SeparatorEx(ImGuiSeparatorFlags flags, float thickness)$/;"	f	class:ImGui	typeref:typename:void
SeparatorMaxX	includes/imgui_internal.h	/^    float               SeparatorMaxX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
SeparatorMinX	includes/imgui_internal.h	/^    float               SeparatorMinX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
SeparatorText	imgui_widgets.cpp	/^void ImGui::SeparatorText(const char* label)$/;"	f	class:ImGui	typeref:typename:void
SeparatorTextAlign	includes/imgui.h	/^    ImVec2      SeparatorTextAlign;         \/\/ Alignment of text within the separator. Default/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
SeparatorTextBorderSize	includes/imgui.h	/^    float       SeparatorTextBorderSize;    \/\/ Thickness of border in SeparatorText()$/;"	m	struct:ImGuiStyle	typeref:typename:float
SeparatorTextEx	imgui_widgets.cpp	/^void ImGui::SeparatorTextEx(ImGuiID id, const char* label, const char* label_end, float extra_w)$/;"	f	class:ImGui	typeref:typename:void
SeparatorTextPadding	includes/imgui.h	/^    ImVec2      SeparatorTextPadding;       \/\/ Horizontal offset of text from each edge of the/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
SetActiveID	imgui.cpp	/^void ImGui::SetActiveID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetActiveIdUsingAllKeyboardKeys	imgui.cpp	/^void ImGui::SetActiveIdUsingAllKeyboardKeys()$/;"	f	class:ImGui	typeref:typename:void
SetAllBits	includes/imgui_internal.h	/^    void            SetAllBits()                { memset(Storage, 255, sizeof(Storage)); }$/;"	f	struct:ImBitArray	typeref:typename:void
SetAllInt	imgui.cpp	/^void ImGuiStorage::SetAllInt(int v)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetAllocatorFunctions	imgui.cpp	/^void ImGui::SetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, void/;"	f	class:ImGui	typeref:typename:void
SetAppAcceptingEvents	imgui.cpp	/^void ImGuiIO::SetAppAcceptingEvents(bool accepting_events)$/;"	f	class:ImGuiIO	typeref:typename:void
SetArenaBasePtr	includes/imgui_internal.h	/^    inline void  SetArenaBasePtr(void* base_ptr)    { BasePtr = (char*)base_ptr; }$/;"	f	struct:ImSpanAllocator	typeref:typename:void
SetBit	includes/imgui.h	/^    inline void     SetBit(size_t n)        { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 3/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
SetBit	includes/imgui_internal.h	/^    void            SetBit(int n)               { IM_ASSERT(n < (Storage.Size << 5)); ImBitArray/;"	f	struct:ImBitVector	typeref:typename:void
SetBit	includes/imgui_internal.h	/^    void            SetBit(int n)               { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:void
SetBitRange	includes/imgui_internal.h	/^    void            SetBitRange(int n, int n2)  { n += OFFSET; n2 += OFFSET; IM_ASSERT(n >= 0 &&/;"	f	struct:ImBitArray	typeref:typename:void
SetBool	imgui.cpp	/^void ImGuiStorage::SetBool(ImGuiID key, bool val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetCircleTessellationMaxError	imgui_draw.cpp	/^void ImDrawListSharedData::SetCircleTessellationMaxError(float max_error)$/;"	f	class:ImDrawListSharedData	typeref:typename:void
SetClipTextCallback	rlImGui.cpp	/^static void SetClipTextCallback(ImGuiContext*, const char* text)$/;"	f	typeref:typename:void	file:
SetClipboardText	imgui.cpp	/^void ImGui::SetClipboardText(const char* text)$/;"	f	class:ImGui	typeref:typename:void
SetClipboardTextFn	includes/imgui.h	/^    void        (*SetClipboardTextFn)(void* user_data, const char* text);$/;"	m	struct:ImGuiIO	typeref:typename:void (*)(void * user_data,const char * text)
SetColorEditOptions	imgui_widgets.cpp	/^void ImGui::SetColorEditOptions(ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetColumnOffset	imgui_tables.cpp	/^void ImGui::SetColumnOffset(int column_index, float offset)$/;"	f	class:ImGui	typeref:typename:void
SetColumnWidth	imgui_tables.cpp	/^void ImGui::SetColumnWidth(int column_index, float width)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentChannel	imgui_draw.cpp	/^void ImDrawListSplitter::SetCurrentChannel(ImDrawList* draw_list, int idx)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
SetCurrentContext	imgui.cpp	/^void ImGui::SetCurrentContext(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentFont	imgui.cpp	/^void ImGui::SetCurrentFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentWindow	imgui.cpp	/^static void SetCurrentWindow(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
SetCursorPos	imgui.cpp	/^void ImGui::SetCursorPos(const ImVec2& local_pos)$/;"	f	class:ImGui	typeref:typename:void
SetCursorPosX	imgui.cpp	/^void ImGui::SetCursorPosX(float x)$/;"	f	class:ImGui	typeref:typename:void
SetCursorPosY	imgui.cpp	/^void ImGui::SetCursorPosY(float y)$/;"	f	class:ImGui	typeref:typename:void
SetCursorScreenPos	imgui.cpp	/^void ImGui::SetCursorScreenPos(const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:void
SetDragDropPayload	imgui.cpp	/^bool ImGui::SetDragDropPayload(const char* type, const void* data, size_t data_size, ImGuiCond c/;"	f	class:ImGui	typeref:typename:bool
SetFloat	imgui.cpp	/^void ImGuiStorage::SetFloat(ImGuiID key, float val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetFocusID	imgui.cpp	/^void ImGui::SetFocusID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetGlyphVisible	imgui_draw.cpp	/^void ImFont::SetGlyphVisible(ImWchar c, bool visible)$/;"	f	class:ImFont	typeref:typename:void
SetHSV	includes/imgui.h	/^    inline void    SetHSV(float h, float s, float v, float a = 1.0f){ ImGui::ColorConvertHSVtoRG/;"	f	struct:ImColor	typeref:typename:void
SetHoveredID	imgui.cpp	/^void ImGui::SetHoveredID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
SetInt	imgui.cpp	/^void ImGuiStorage::SetInt(ImGuiID key, int val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetItemAllowOverlap	imgui.cpp	/^void ImGui::SetItemAllowOverlap()$/;"	f	class:ImGui	typeref:typename:void
SetItemDefaultFocus	imgui.cpp	/^void ImGui::SetItemDefaultFocus()$/;"	f	class:ImGui	typeref:typename:void
SetItemKeyOwner	imgui.cpp	/^void ImGui::SetItemKeyOwner(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:void
SetItemKeyOwner	imgui.cpp	/^void ImGui::SetItemKeyOwner(ImGuiKey key, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetItemSelected	imgui_widgets.cpp	/^void ImGuiSelectionBasicStorage::SetItemSelected(ImGuiID id, bool selected)$/;"	f	class:ImGuiSelectionBasicStorage	typeref:typename:void
SetItemTooltip	imgui.cpp	/^void ImGui::SetItemTooltip(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
SetItemTooltipV	imgui.cpp	/^void ImGui::SetItemTooltipV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
SetKeyEventNativeData	imgui.cpp	/^void ImGuiIO::SetKeyEventNativeData(ImGuiKey key, int native_keycode, int native_scancode, int n/;"	f	class:ImGuiIO	typeref:typename:void
SetKeyOwner	imgui.cpp	/^void ImGui::SetKeyOwner(ImGuiKey key, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetKeyOwnersForKeyChord	imgui.cpp	/^void ImGui::SetKeyOwnersForKeyChord(ImGuiKeyChord key_chord, ImGuiID owner_id, ImGuiInputFlags f/;"	f	class:ImGui	typeref:typename:void
SetKeyboardFocusHere	imgui.cpp	/^void ImGui::SetKeyboardFocusHere(int offset)$/;"	f	class:ImGui	typeref:typename:void
SetLastItemData	imgui.cpp	/^void ImGui::SetLastItemData(ImGuiID item_id, ImGuiItemFlags in_flags, ImGuiItemStatusFlags item_/;"	f	class:ImGui	typeref:typename:void
SetLastItemDataForWindow	imgui.cpp	/^static void ImGui::SetLastItemDataForWindow(ImGuiWindow* window, const ImRect& rect)$/;"	f	class:ImGui	typeref:typename:void	file:
SetMouseCursor	imgui.cpp	/^void ImGui::SetMouseCursor(ImGuiMouseCursor cursor_type)$/;"	f	class:ImGui	typeref:typename:void
SetNavCursorVisible	imgui.cpp	/^void ImGui::SetNavCursorVisible(bool visible)$/;"	f	class:ImGui	typeref:typename:void
SetNavCursorVisibleAfterMove	imgui.cpp	/^void ImGui::SetNavCursorVisibleAfterMove()$/;"	f	class:ImGui	typeref:typename:void
SetNavFocusScope	imgui.cpp	/^void ImGui::SetNavFocusScope(ImGuiID focus_scope_id)$/;"	f	class:ImGui	typeref:typename:void
SetNavID	imgui.cpp	/^void ImGui::SetNavID(ImGuiID id, ImGuiNavLayer nav_layer, ImGuiID focus_scope_id, const ImRect& /;"	f	class:ImGui	typeref:typename:void
SetNavWindow	imgui.cpp	/^void ImGui::SetNavWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetNextFrameWantCaptureKeyboard	imgui.cpp	/^void ImGui::SetNextFrameWantCaptureKeyboard(bool want_capture_keyboard)$/;"	f	class:ImGui	typeref:typename:void
SetNextFrameWantCaptureMouse	imgui.cpp	/^void ImGui::SetNextFrameWantCaptureMouse(bool want_capture_mouse)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemAllowOverlap	imgui.cpp	/^void ImGui::SetNextItemAllowOverlap()$/;"	f	class:ImGui	typeref:typename:void
SetNextItemOpen	imgui_widgets.cpp	/^void ImGui::SetNextItemOpen(bool is_open, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemRefVal	imgui_widgets.cpp	/^void ImGui::SetNextItemRefVal(ImGuiDataType data_type, void* p_data)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemSelectionUserData	imgui_widgets.cpp	/^void ImGui::SetNextItemSelectionUserData(ImGuiSelectionUserData selection_user_data)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemShortcut	imgui.cpp	/^void ImGui::SetNextItemShortcut(ImGuiKeyChord key_chord, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemStorageID	imgui_widgets.cpp	/^void ImGui::SetNextItemStorageID(ImGuiID storage_id)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemWidth	imgui.cpp	/^void ImGui::SetNextItemWidth(float item_width)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowBgAlpha	imgui.cpp	/^void ImGui::SetNextWindowBgAlpha(float alpha)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowCollapsed	imgui.cpp	/^void ImGui::SetNextWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowContentSize	imgui.cpp	/^void ImGui::SetNextWindowContentSize(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowFocus	imgui.cpp	/^void ImGui::SetNextWindowFocus()$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowPos	imgui.cpp	/^void ImGui::SetNextWindowPos(const ImVec2& pos, ImGuiCond cond, const ImVec2& pivot)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowRefreshPolicy	imgui.cpp	/^void ImGui::SetNextWindowRefreshPolicy(ImGuiWindowRefreshFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowScroll	imgui.cpp	/^void ImGui::SetNextWindowScroll(const ImVec2& scroll)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowSize	imgui.cpp	/^void ImGui::SetNextWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowSizeConstraints	imgui.cpp	/^void ImGui::SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSi/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosX	imgui.cpp	/^void ImGui::SetScrollFromPosX(ImGuiWindow* window, float local_x, float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosX	imgui.cpp	/^void ImGui::SetScrollFromPosX(float local_x, float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosY	imgui.cpp	/^void ImGui::SetScrollFromPosY(ImGuiWindow* window, float local_y, float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosY	imgui.cpp	/^void ImGui::SetScrollFromPosY(float local_y, float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollHereX	imgui.cpp	/^void ImGui::SetScrollHereX(float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollHereY	imgui.cpp	/^void ImGui::SetScrollHereY(float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollX	imgui.cpp	/^void ImGui::SetScrollX(ImGuiWindow* window, float scroll_x)$/;"	f	class:ImGui	typeref:typename:void
SetScrollX	imgui.cpp	/^void ImGui::SetScrollX(float scroll_x)$/;"	f	class:ImGui	typeref:typename:void
SetScrollY	imgui.cpp	/^void ImGui::SetScrollY(ImGuiWindow* window, float scroll_y)$/;"	f	class:ImGui	typeref:typename:void
SetScrollY	imgui.cpp	/^void ImGui::SetScrollY(float scroll_y)$/;"	f	class:ImGui	typeref:typename:void
SetShortcutRouting	imgui.cpp	/^bool ImGui::SetShortcutRouting(ImGuiKeyChord key_chord, ImGuiInputFlags flags, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
SetStateStorage	imgui.cpp	/^void ImGui::SetStateStorage(ImGuiStorage* tree)$/;"	f	class:ImGui	typeref:typename:void
SetTabItemClosed	imgui_widgets.cpp	/^void    ImGui::SetTabItemClosed(const char* label)$/;"	f	class:ImGui	typeref:typename:void
SetTexID	includes/imgui.h	/^    void                        SetTexID(ImTextureID id)    { TexID = id; }$/;"	f	struct:ImFontAtlas	typeref:typename:void
SetTooltip	imgui.cpp	/^void ImGui::SetTooltip(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
SetTooltipV	imgui.cpp	/^void ImGui::SetTooltipV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
SetVoidPtr	imgui.cpp	/^void ImGuiStorage::SetVoidPtr(ImGuiID key, void* val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetWindowActiveForSkipRefresh	imgui.cpp	/^static void SetWindowActiveForSkipRefresh(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
SetWindowClipRectBeforeSetChannel	imgui_tables.cpp	/^void ImGui::SetWindowClipRectBeforeSetChannel(ImGuiWindow* window, const ImRect& clip_rect)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	imgui.cpp	/^void ImGui::SetWindowCollapsed(ImGuiWindow* window, bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	imgui.cpp	/^void ImGui::SetWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	imgui.cpp	/^void ImGui::SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsedAllowFlags	includes/imgui_internal.h	/^    ImGuiCond               SetWindowCollapsedAllowFlags : 8;   \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond:8
SetWindowConditionAllowFlags	imgui.cpp	/^static void SetWindowConditionAllowFlags(ImGuiWindow* window, ImGuiCond flags, bool enabled)$/;"	f	typeref:typename:void	file:
SetWindowFocus	imgui.cpp	/^void ImGui::SetWindowFocus()$/;"	f	class:ImGui	typeref:typename:void
SetWindowFocus	imgui.cpp	/^void ImGui::SetWindowFocus(const char* name)$/;"	f	class:ImGui	typeref:typename:void
SetWindowFontScale	imgui.cpp	/^void ImGui::SetWindowFontScale(float scale)$/;"	f	class:ImGui	typeref:typename:void
SetWindowHiddenAndSkipItemsForCurrentFrame	imgui.cpp	/^void ImGui::SetWindowHiddenAndSkipItemsForCurrentFrame(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetWindowHitTestHole	imgui.cpp	/^void ImGui::SetWindowHitTestHole(ImGuiWindow* window, const ImVec2& pos, const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
SetWindowParentWindowForFocusRoute	includes/imgui_internal.h	/^    inline void             SetWindowParentWindowForFocusRoute(ImGuiWindow* window, ImGuiWindow*/;"	f	namespace:ImGui	typeref:typename:void
SetWindowPos	imgui.cpp	/^void ImGui::SetWindowPos(ImGuiWindow* window, const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	imgui.cpp	/^void ImGui::SetWindowPos(const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	imgui.cpp	/^void ImGui::SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPosAllowFlags	includes/imgui_internal.h	/^    ImGuiCond               SetWindowPosAllowFlags : 8;         \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond:8
SetWindowPosPivot	includes/imgui_internal.h	/^    ImVec2                  SetWindowPosPivot;                  \/\/ store window pivot for posi/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SetWindowPosVal	includes/imgui_internal.h	/^    ImVec2                  SetWindowPosVal;                    \/\/ store window position when /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SetWindowSize	imgui.cpp	/^void ImGui::SetWindowSize(ImGuiWindow* window, const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSize	imgui.cpp	/^void ImGui::SetWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSize	imgui.cpp	/^void ImGui::SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSizeAllowFlags	includes/imgui_internal.h	/^    ImGuiCond               SetWindowSizeAllowFlags : 8;        \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond:8
SetWindowViewport	imgui.cpp	/^void ImGui::SetWindowViewport(ImGuiWindow* window, ImGuiViewportP* viewport)$/;"	f	class:ImGui	typeref:typename:void
SettingsDirtyTimer	includes/imgui_internal.h	/^    float                   SettingsDirtyTimer;                 \/\/ Save .ini Settings to memor/;"	m	struct:ImGuiContext	typeref:typename:float
SettingsHandlers	includes/imgui_internal.h	/^    ImVector<ImGuiSettingsHandler>      SettingsHandlers;       \/\/ List of .ini settings handl/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiSettingsHandler>
SettingsIniData	includes/imgui_internal.h	/^    ImGuiTextBuffer         SettingsIniData;                    \/\/ In memory .ini settings$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
SettingsLoaded	includes/imgui_internal.h	/^    bool                    SettingsLoaded;$/;"	m	struct:ImGuiContext	typeref:typename:bool
SettingsLoadedFlags	includes/imgui_internal.h	/^    ImGuiTableFlags             SettingsLoadedFlags;        \/\/ Which data were loaded from the/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableFlags
SettingsOffset	includes/imgui_internal.h	/^    int                         SettingsOffset;             \/\/ Offset in g.SettingsTables$/;"	m	struct:ImGuiTable	typeref:typename:int
SettingsOffset	includes/imgui_internal.h	/^    int                     SettingsOffset;                     \/\/ Offset into SettingsWindows/;"	m	struct:ImGuiWindow	typeref:typename:int
SettingsTables	includes/imgui_internal.h	/^    ImChunkStream<ImGuiTableSettings>   SettingsTables;         \/\/ ImGuiTable .ini settings en/;"	m	struct:ImGuiContext	typeref:typename:ImChunkStream<ImGuiTableSettings>
SettingsWindows	includes/imgui_internal.h	/^    ImChunkStream<ImGuiWindowSettings>  SettingsWindows;        \/\/ ImGuiWindow .ini settings e/;"	m	struct:ImGuiContext	typeref:typename:ImChunkStream<ImGuiWindowSettings>
SetupBackend	rlImGui.cpp	/^void SetupBackend(void)$/;"	f	typeref:typename:void
SetupDrawListSharedData	imgui.cpp	/^static void SetupDrawListSharedData()$/;"	f	typeref:typename:void	file:
SetupFontAwesome	rlImGui.cpp	/^void SetupFontAwesome(void)$/;"	f	typeref:typename:void
SetupGlobals	rlImGui.cpp	/^static void SetupGlobals(void)$/;"	f	typeref:typename:void	file:
SetupKeymap	rlImGui.cpp	/^static void SetupKeymap(void)$/;"	f	typeref:typename:void	file:
SetupMouseCursors	rlImGui.cpp	/^static void SetupMouseCursors(void)$/;"	f	typeref:typename:void	file:
ShadeVertsLinearColorGradientKeepAlpha	imgui_draw.cpp	/^void ImGui::ShadeVertsLinearColorGradientKeepAlpha(ImDrawList* draw_list, int vert_start_idx, in/;"	f	class:ImGui	typeref:typename:void
ShadeVertsLinearUV	imgui_draw.cpp	/^void ImGui::ShadeVertsLinearUV(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, cons/;"	f	class:ImGui	typeref:typename:void
ShadeVertsTransformPos	imgui_draw.cpp	/^void ImGui::ShadeVertsTransformPos(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, /;"	f	class:ImGui	typeref:typename:void
Shader	includes/raylib.h	/^typedef struct Shader {$/;"	s
Shader	includes/raylib.h	/^} Shader;$/;"	t	typeref:struct:Shader
ShaderAttributeDataType	includes/raylib.h	/^} ShaderAttributeDataType;$/;"	t	typeref:enum:__anonce11f6a40c03
ShaderLocationIndex	includes/raylib.h	/^} ShaderLocationIndex;$/;"	t	typeref:enum:__anonce11f6a40a03
ShaderUniformDataType	includes/raylib.h	/^} ShaderUniformDataType;$/;"	t	typeref:enum:__anonce11f6a40b03
Shortcut	imgui.cpp	/^bool ImGui::Shortcut(ImGuiKeyChord key_chord, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Shortcut	imgui.cpp	/^bool ImGui::Shortcut(ImGuiKeyChord key_chord, ImGuiInputFlags flags, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
Shortcut	includes/imgui_internal.h	/^    ImGuiKeyChord               Shortcut;           \/\/ Set by SetNextItemShortcut()$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiKeyChord
Shortcut	includes/imgui_internal.h	/^    ImGuiKeyChord           Shortcut;           \/\/ Shortcut at the time of submitting item. ON/;"	m	struct:ImGuiLastItemData	typeref:typename:ImGuiKeyChord
ShortcutFlags	includes/imgui_internal.h	/^    ImGuiInputFlags             ShortcutFlags;      \/\/ Set by SetNextItemShortcut()$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiInputFlags
Show	imgui_demo.cpp	/^    void Show()$/;"	f	struct:ExampleDualListBox	typeref:typename:void	file:
ShowAbout	imgui_demo.cpp	/^    bool ShowAbout = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAboutWindow	imgui_demo.cpp	/^void ImGui::ShowAboutWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowAboutWindow	imgui_demo.cpp	/^void ImGui::ShowAboutWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowAppAssetsBrowser	imgui_demo.cpp	/^    bool ShowAppAssetsBrowser = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppAutoResize	imgui_demo.cpp	/^    bool ShowAppAutoResize = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppConsole	imgui_demo.cpp	/^    bool ShowAppConsole = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppConstrainedResize	imgui_demo.cpp	/^    bool ShowAppConstrainedResize = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppCustomRendering	imgui_demo.cpp	/^    bool ShowAppCustomRendering = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppDocuments	imgui_demo.cpp	/^    bool ShowAppDocuments = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppFullscreen	imgui_demo.cpp	/^    bool ShowAppFullscreen = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppLayout	imgui_demo.cpp	/^    bool ShowAppLayout = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppLog	imgui_demo.cpp	/^    bool ShowAppLog = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppLongText	imgui_demo.cpp	/^    bool ShowAppLongText = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppPropertyEditor	imgui_demo.cpp	/^    bool ShowAppPropertyEditor = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppSimpleOverlay	imgui_demo.cpp	/^    bool ShowAppSimpleOverlay = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppWindowTitles	imgui_demo.cpp	/^    bool ShowAppWindowTitles = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAtlasTintedWithTextColor	includes/imgui_internal.h	/^    bool        ShowAtlasTintedWithTextColor = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowDebugLog	imgui_demo.cpp	/^    bool ShowDebugLog = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowDebugLog	includes/imgui_internal.h	/^    bool        ShowDebugLog = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowDebugLogFlag	imgui.cpp	/^static void ShowDebugLogFlag(const char* name, ImGuiDebugLogFlags flags)$/;"	f	typeref:typename:void	file:
ShowDebugLogWindow	imgui.cpp	/^void ImGui::ShowDebugLogWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowDebugLogWindow	imgui.cpp	/^void ImGui::ShowDebugLogWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindow	imgui_demo.cpp	/^void ImGui::ShowDemoWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindow	imgui_demo.cpp	/^void ImGui::ShowDemoWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindowColumns	imgui_demo.cpp	/^static void ShowDemoWindowColumns()$/;"	f	typeref:typename:void	file:
ShowDemoWindowInputs	imgui_demo.cpp	/^static void ShowDemoWindowInputs()$/;"	f	typeref:typename:void	file:
ShowDemoWindowLayout	imgui_demo.cpp	/^static void ShowDemoWindowLayout()$/;"	f	typeref:typename:void	file:
ShowDemoWindowMenuBar	imgui_demo.cpp	/^static void ShowDemoWindowMenuBar(ImGuiDemoWindowData* demo_data)$/;"	f	typeref:typename:void	file:
ShowDemoWindowMultiSelect	imgui_demo.cpp	/^static void ShowDemoWindowMultiSelect(ImGuiDemoWindowData* demo_data)$/;"	f	typeref:typename:void	file:
ShowDemoWindowPopups	imgui_demo.cpp	/^static void ShowDemoWindowPopups()$/;"	f	typeref:typename:void	file:
ShowDemoWindowTables	imgui_demo.cpp	/^static void ShowDemoWindowTables()$/;"	f	typeref:typename:void	file:
ShowDemoWindowWidgets	imgui_demo.cpp	/^static void ShowDemoWindowWidgets(ImGuiDemoWindowData* demo_data)$/;"	f	typeref:typename:void	file:
ShowDrawCmdBoundingBoxes	includes/imgui_internal.h	/^    bool        ShowDrawCmdBoundingBoxes = true;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowDrawCmdMesh	includes/imgui_internal.h	/^    bool        ShowDrawCmdMesh = true;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowExampleAppAssetsBrowser	imgui_demo.cpp	/^void ShowExampleAppAssetsBrowser(bool* p_open)$/;"	f	typeref:typename:void
ShowExampleAppAutoResize	imgui_demo.cpp	/^static void ShowExampleAppAutoResize(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppConsole	imgui_demo.cpp	/^static void ShowExampleAppConsole(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppConstrainedResize	imgui_demo.cpp	/^static void ShowExampleAppConstrainedResize(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppCustomRendering	imgui_demo.cpp	/^static void ShowExampleAppCustomRendering(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppDocuments	imgui_demo.cpp	/^void ShowExampleAppDocuments(bool* p_open)$/;"	f	typeref:typename:void
ShowExampleAppFullscreen	imgui_demo.cpp	/^static void ShowExampleAppFullscreen(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLayout	imgui_demo.cpp	/^static void ShowExampleAppLayout(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLog	imgui_demo.cpp	/^static void ShowExampleAppLog(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLongText	imgui_demo.cpp	/^static void ShowExampleAppLongText(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppMainMenuBar	imgui_demo.cpp	/^static void ShowExampleAppMainMenuBar()$/;"	f	typeref:typename:void	file:
ShowExampleAppPropertyEditor	imgui_demo.cpp	/^static void ShowExampleAppPropertyEditor(bool* p_open, ImGuiDemoWindowData* demo_data)$/;"	f	typeref:typename:void	file:
ShowExampleAppSimpleOverlay	imgui_demo.cpp	/^static void ShowExampleAppSimpleOverlay(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppWindowTitles	imgui_demo.cpp	/^static void ShowExampleAppWindowTitles(bool*)$/;"	f	typeref:typename:void	file:
ShowExampleMenuFile	imgui_demo.cpp	/^static void ShowExampleMenuFile()$/;"	f	typeref:typename:void	file:
ShowFontAtlas	imgui.cpp	/^void ImGui::ShowFontAtlas(ImFontAtlas* atlas)$/;"	f	class:ImGui	typeref:typename:void
ShowFontAtlas	imgui.cpp	/^void ImGui::ShowFontAtlas(ImFontAtlas*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowFontSelector	imgui_demo.cpp	/^void ImGui::ShowFontSelector(const char* label) {}$/;"	f	class:ImGui	typeref:typename:void
ShowFontSelector	imgui_demo.cpp	/^void ImGui::ShowFontSelector(const char* label)$/;"	f	class:ImGui	typeref:typename:void
ShowIDStackTool	imgui_demo.cpp	/^    bool ShowIDStackTool = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowIDStackTool	includes/imgui_internal.h	/^    bool        ShowIDStackTool = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowIDStackToolWindow	imgui.cpp	/^void ImGui::ShowIDStackToolWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowIDStackToolWindow	imgui.cpp	/^void ImGui::ShowIDStackToolWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowMainMenuBar	imgui_demo.cpp	/^    bool ShowMainMenuBar = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowMetrics	imgui_demo.cpp	/^    bool ShowMetrics = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowMetricsWindow	imgui.cpp	/^void ImGui::ShowMetricsWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowMetricsWindow	imgui.cpp	/^void ImGui::ShowMetricsWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowStackToolWindow	includes/imgui.h	/^    static inline void  ShowStackToolWindow(bool* p_open = NULL)                { ShowIDStackToo/;"	f	namespace:ImGui	typeref:typename:void
ShowStyleEditor	imgui_demo.cpp	/^    bool ShowStyleEditor = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowStyleEditor	imgui_demo.cpp	/^void ImGui::ShowStyleEditor(ImGuiStyle* ref)$/;"	f	class:ImGui	typeref:typename:void
ShowStyleEditor	imgui_demo.cpp	/^void ImGui::ShowStyleEditor(ImGuiStyle*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowStyleSelector	imgui_demo.cpp	/^bool ImGui::ShowStyleSelector(const char* label) { return false; }$/;"	f	class:ImGui	typeref:typename:bool
ShowStyleSelector	imgui_demo.cpp	/^bool ImGui::ShowStyleSelector(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
ShowTableColumnsStatusFlags	imgui_demo.cpp	/^static void ShowTableColumnsStatusFlags(ImGuiTableColumnFlags flags)$/;"	f	typeref:typename:void	file:
ShowTablesRects	includes/imgui_internal.h	/^    bool        ShowTablesRects = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowTablesRectsType	includes/imgui_internal.h	/^    int         ShowTablesRectsType = -1;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:int
ShowTextEncodingViewer	includes/imgui_internal.h	/^    bool        ShowTextEncodingViewer = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowTypeOverlay	imgui_demo.cpp	/^    bool            ShowTypeOverlay = true;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:bool	file:
ShowUserGuide	imgui_demo.cpp	/^void ImGui::ShowUserGuide() {}$/;"	f	class:ImGui	typeref:typename:void
ShowUserGuide	imgui_demo.cpp	/^void ImGui::ShowUserGuide()$/;"	f	class:ImGui	typeref:typename:void
ShowWindowsBeginOrder	includes/imgui_internal.h	/^    bool        ShowWindowsBeginOrder = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowWindowsRects	includes/imgui_internal.h	/^    bool        ShowWindowsRects = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowWindowsRectsType	includes/imgui_internal.h	/^    int         ShowWindowsRectsType = -1;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:int
ShrinkWidthBuffer	includes/imgui_internal.h	/^    ImVector<ImGuiShrinkWidthItem>  ShrinkWidthBuffer;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiShrinkWidthItem>
ShrinkWidthItemComparer	imgui_widgets.cpp	/^static int IMGUI_CDECL ShrinkWidthItemComparer(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
ShrinkWidths	imgui_widgets.cpp	/^void ImGui::ShrinkWidths(ImGuiShrinkWidthItem* items, int count, float width_excess)$/;"	f	class:ImGui	typeref:typename:void
Shutdown	imgui.cpp	/^void ImGui::Shutdown()$/;"	f	class:ImGui	typeref:typename:void
Sin	imgui_demo.cpp	/^            static float Sin(void*, int i) { return sinf(i * 0.1f); }$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:float	file:
SingleCharMode	includes/imgui_internal.h	/^    bool                    SingleCharMode;     \/\/ Notify when buffer contains same character /;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:bool
SingleCharModeLock	includes/imgui_internal.h	/^    bool            SingleCharModeLock = false; \/\/ After a certain single char repeat count we/;"	m	struct:ImGuiTypingSelectState	typeref:typename:bool
SingleCharSize	includes/imgui_internal.h	/^    ImS8                    SingleCharSize;     \/\/ Length in bytes of first letter codepoint (/;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:ImS8
Size	imgui.ini	/^Size=150,386$/;"	k	section:Window
Size	imgui.ini	/^Size=200,100$/;"	k	section:Window
Size	imgui.ini	/^Size=240,48$/;"	k	section:Window
Size	imgui.ini	/^Size=247,48$/;"	k	section:Window
Size	imgui.ini	/^Size=332,130$/;"	k	section:Window
Size	imgui.ini	/^Size=400,400$/;"	k	section:Window
Size	imgui.ini	/^Size=451,61$/;"	k	section:Window
Size	imgui.ini	/^Size=500,400$/;"	k	section:Window
Size	imgui.ini	/^Size=500,440$/;"	k	section:Window
Size	imgui.ini	/^Size=503,136$/;"	k	section:Window
Size	imgui.ini	/^Size=520,600$/;"	k	section:Window
Size	imgui.ini	/^Size=530,525$/;"	k	section:Window
Size	imgui.ini	/^Size=621,894$/;"	k	section:Window
Size	imgui.ini	/^Size=623,414$/;"	k	section:Window
Size	imgui.ini	/^Size=700,400$/;"	k	section:Window
Size	imgui.ini	/^Size=746,814$/;"	k	section:Window
Size	imgui.ini	/^Size=800,480$/;"	k	section:Window
Size	imgui_demo.cpp	/^                int             Size;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:int	file:
Size	imgui_draw.cpp	/^    int                     Size = 0;$/;"	m	struct:ImTriangulatorNodeSpan	typeref:typename:int	file:
Size	includes/imgui.h	/^    ImVec2              Size;                   \/\/ Main Area: Size of the viewport.$/;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
Size	includes/imgui.h	/^    int                 Size;$/;"	m	struct:ImVector	typeref:typename:int
Size	includes/imgui.h	/^    int             Size;           \/\/          \/\/ Number of selected items, maintained by t/;"	m	struct:ImGuiSelectionBasicStorage	typeref:typename:int
Size	includes/imgui_internal.h	/^    ImVec2                  Size;                               \/\/ Current size (==SizeFull or/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
Size	includes/imgui_internal.h	/^    ImVec2ih    Size;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImVec2ih
Size	includes/imgui_internal.h	/^    size_t      Size;           \/\/ Size in bytes$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:size_t
SizeCallback	includes/imgui_internal.h	/^    ImGuiSizeCallback           SizeCallback;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiSizeCallback
SizeCallbackUserData	includes/imgui_internal.h	/^    void*                       SizeCallbackUserData;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:void *
SizeCond	includes/imgui_internal.h	/^    ImGuiCond                   SizeCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
SizeConstraintRect	includes/imgui_internal.h	/^    ImRect                      SizeConstraintRect;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImRect
SizeFull	includes/imgui_internal.h	/^    ImVec2                  SizeFull;                           \/\/ Size when non collapsed$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SizeOfBeginPopupStack	includes/imgui_internal.h	/^    short   SizeOfBeginPopupStack;$/;"	m	struct:ImGuiErrorRecoveryState	typeref:typename:short
SizeOfColorStack	includes/imgui_internal.h	/^    short   SizeOfColorStack;$/;"	m	struct:ImGuiErrorRecoveryState	typeref:typename:short
SizeOfDisabledStack	includes/imgui_internal.h	/^    short   SizeOfDisabledStack;$/;"	m	struct:ImGuiErrorRecoveryState	typeref:typename:short
SizeOfFocusScopeStack	includes/imgui_internal.h	/^    short   SizeOfFocusScopeStack;$/;"	m	struct:ImGuiErrorRecoveryState	typeref:typename:short
SizeOfFontStack	includes/imgui_internal.h	/^    short   SizeOfFontStack;$/;"	m	struct:ImGuiErrorRecoveryState	typeref:typename:short
SizeOfGroupStack	includes/imgui_internal.h	/^    short   SizeOfGroupStack;$/;"	m	struct:ImGuiErrorRecoveryState	typeref:typename:short
SizeOfIDStack	includes/imgui_internal.h	/^    short   SizeOfIDStack;$/;"	m	struct:ImGuiErrorRecoveryState	typeref:typename:short
SizeOfItemFlagsStack	includes/imgui_internal.h	/^    short   SizeOfItemFlagsStack;$/;"	m	struct:ImGuiErrorRecoveryState	typeref:typename:short
SizeOfStyleVarStack	includes/imgui_internal.h	/^    short   SizeOfStyleVarStack;$/;"	m	struct:ImGuiErrorRecoveryState	typeref:typename:short
SizeOfTreeStack	includes/imgui_internal.h	/^    short   SizeOfTreeStack;$/;"	m	struct:ImGuiErrorRecoveryState	typeref:typename:short
SizeOfWindowStack	includes/imgui_internal.h	/^    short   SizeOfWindowStack;$/;"	m	struct:ImGuiErrorRecoveryState	typeref:typename:short
SizePixels	includes/imgui.h	/^    float           SizePixels;             \/\/          \/\/ Size in pixels for rasterizer (mo/;"	m	struct:ImFontConfig	typeref:typename:float
SizeVal	includes/imgui_internal.h	/^    ImVec2                      SizeVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
Sizes	includes/imgui_internal.h	/^    int     Sizes[CHUNKS];$/;"	m	struct:ImSpanAllocator	typeref:typename:int[]
SkipItems	includes/imgui_internal.h	/^    bool                    SkipItems;                          \/\/ Set when items can safely b/;"	m	struct:ImGuiWindow	typeref:typename:bool
SkipRefresh	includes/imgui_internal.h	/^    bool                    SkipRefresh;                        \/\/ [EXPERIMENTAL] Reuse previo/;"	m	struct:ImGuiWindow	typeref:typename:bool
SliderAngle	imgui_widgets.cpp	/^bool ImGui::SliderAngle(const char* label, float* v_rad, float v_degrees_min, float v_degrees_ma/;"	f	class:ImGui	typeref:typename:bool
SliderBehavior	imgui_widgets.cpp	/^bool ImGui::SliderBehavior(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, void* p_v, con/;"	f	class:ImGui	typeref:typename:bool
SliderBehaviorT	imgui_widgets.cpp	/^bool ImGui::SliderBehaviorT(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, TYPE* v, cons/;"	f	class:ImGui	typeref:typename:bool
SliderCurrentAccum	includes/imgui_internal.h	/^    float                   SliderCurrentAccum;                 \/\/ Accumulated slider delta wh/;"	m	struct:ImGuiContext	typeref:typename:float
SliderCurrentAccumDirty	includes/imgui_internal.h	/^    bool                    SliderCurrentAccumDirty;            \/\/ Has the accumulated slider /;"	m	struct:ImGuiContext	typeref:typename:bool
SliderFloat	imgui_widgets.cpp	/^bool ImGui::SliderFloat(const char* label, float* v, float v_min, float v_max, const char* forma/;"	f	class:ImGui	typeref:typename:bool
SliderFloat2	imgui_widgets.cpp	/^bool ImGui::SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderFloat3	imgui_widgets.cpp	/^bool ImGui::SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderFloat4	imgui_widgets.cpp	/^bool ImGui::SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderGrabClickOffset	includes/imgui_internal.h	/^    float                   SliderGrabClickOffset;$/;"	m	struct:ImGuiContext	typeref:typename:float
SliderInt	imgui_widgets.cpp	/^bool ImGui::SliderInt(const char* label, int* v, int v_min, int v_max, const char* format, ImGui/;"	f	class:ImGui	typeref:typename:bool
SliderInt2	imgui_widgets.cpp	/^bool ImGui::SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format, Im/;"	f	class:ImGui	typeref:typename:bool
SliderInt3	imgui_widgets.cpp	/^bool ImGui::SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format, Im/;"	f	class:ImGui	typeref:typename:bool
SliderInt4	imgui_widgets.cpp	/^bool ImGui::SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format, Im/;"	f	class:ImGui	typeref:typename:bool
SliderScalar	imgui_widgets.cpp	/^bool ImGui::SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p/;"	f	class:ImGui	typeref:typename:bool
SliderScalarN	imgui_widgets.cpp	/^bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, c/;"	f	class:ImGui	typeref:typename:bool
SmallButton	imgui_widgets.cpp	/^bool ImGui::SmallButton(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
SortDirection	includes/imgui.h	/^    ImGuiSortDirection          SortDirection;      \/\/ ImGuiSortDirection_Ascending or ImGuiSo/;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImGuiSortDirection
SortDirection	includes/imgui_internal.h	/^    ImU8                    SortDirection : 2;              \/\/ ImGuiSortDirection_Ascending or/;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8:2
SortDirection	includes/imgui_internal.h	/^    ImU8                    SortDirection : 2;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImU8:2
SortDirectionsAvailCount	includes/imgui_internal.h	/^    ImU8                    SortDirectionsAvailCount : 2;   \/\/ Number of available sort direct/;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8:2
SortDirectionsAvailList	includes/imgui_internal.h	/^    ImU8                    SortDirectionsAvailList;        \/\/ Ordered list of available sort /;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8
SortDirectionsAvailMask	includes/imgui_internal.h	/^    ImU8                    SortDirectionsAvailMask : 4;    \/\/ Mask of available sort directio/;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8:4
SortItems	imgui_demo.cpp	/^    void SortItems(int n)$/;"	f	struct:ExampleDualListBox	typeref:typename:void	file:
SortOrder	includes/imgui.h	/^    ImS16                       SortOrder;          \/\/ Index within parent ImGuiTableSortSpecs/;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImS16
SortOrder	includes/imgui_internal.h	/^    ImGuiTableColumnIdx     SortOrder;                      \/\/ Index of this column within sor/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
SortOrder	includes/imgui_internal.h	/^    ImGuiTableColumnIdx     SortOrder;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiTableColumnIdx
SortSpecs	includes/imgui_internal.h	/^    ImGuiTableSortSpecs         SortSpecs;                  \/\/ Public facing sorts specs, this/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableSortSpecs
SortSpecsCount	includes/imgui_internal.h	/^    ImGuiTableColumnIdx         SortSpecsCount;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
SortSpecsMulti	includes/imgui_internal.h	/^    ImVector<ImGuiTableColumnSortSpecs> SortSpecsMulti;     \/\/ FIXME-OPT: Using a small-vector/;"	m	struct:ImGuiTable	typeref:typename:ImVector<ImGuiTableColumnSortSpecs>
SortSpecsSingle	includes/imgui_internal.h	/^    ImGuiTableColumnSortSpecs   SortSpecsSingle;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnSortSpecs
SortWithSortSpecs	imgui_demo.cpp	/^    static void SortWithSortSpecs(ImGuiTableSortSpecs* sort_specs, ExampleAsset* items, int item/;"	f	struct:ExampleAsset	typeref:typename:void	file:
SortWithSortSpecs	imgui_demo.cpp	/^    static void SortWithSortSpecs(ImGuiTableSortSpecs* sort_specs, MyItem* items, int items_coun/;"	f	struct:__anon5ba881550511::MyItem	typeref:typename:void	file:
Sound	includes/raylib.h	/^typedef struct Sound {$/;"	s
Sound	includes/raylib.h	/^} Sound;$/;"	t	typeref:struct:Sound
Source	includes/imgui_internal.h	/^    ImGuiInputSource                Source;$/;"	m	struct:ImGuiInputEvent	typeref:typename:ImGuiInputSource
SourceId	includes/imgui.h	/^    ImGuiID         SourceId;           \/\/ Source item id$/;"	m	struct:ImGuiPayload	typeref:typename:ImGuiID
SourceParentId	includes/imgui.h	/^    ImGuiID         SourceParentId;     \/\/ Source parent id (if available)$/;"	m	struct:ImGuiPayload	typeref:typename:ImGuiID
Spacing	imgui_widgets.cpp	/^    float               Spacing;                \/\/ Horizontal spacing at the end of the sectio/;"	m	struct:ImGuiTabBarSection	typeref:typename:float	file:
Spacing	imgui_widgets.cpp	/^void ImGui::Spacing()$/;"	f	class:ImGui	typeref:typename:void
Spacing	includes/imgui_internal.h	/^    ImU16       Spacing;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
SpatialHashing	includes/classes/SpatialHashing.hpp	/^class SpatialHashing$/;"	c
SpatialHashing	srcs/classes/SpatialHashing.cpp	/^SpatialHashing::SpatialHashing(void)$/;"	f	class:SpatialHashing
Specs	includes/imgui.h	/^    const ImGuiTableColumnSortSpecs* Specs;     \/\/ Pointer to sort spec array.$/;"	m	struct:ImGuiTableSortSpecs	typeref:typename:const ImGuiTableColumnSortSpecs *
SpecsCount	includes/imgui.h	/^    int                         SpecsCount;     \/\/ Sort spec count. Most often 1. May be > 1 w/;"	m	struct:ImGuiTableSortSpecs	typeref:typename:int
SpecsDirty	includes/imgui.h	/^    bool                        SpecsDirty;     \/\/ Set to true when specs have changed since l/;"	m	struct:ImGuiTableSortSpecs	typeref:typename:bool
Split	imgui_draw.cpp	/^void ImDrawListSplitter::Split(ImDrawList* draw_list, int channels_count)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
Splitter	includes/imgui_internal.h	/^    ImDrawListSplitter  Splitter;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImDrawListSplitter
SplitterBehavior	imgui_widgets.cpp	/^bool ImGui::SplitterBehavior(const ImRect& bb, ImGuiID id, ImGuiAxis axis, float* size1, float* /;"	f	class:ImGui	typeref:typename:bool
Square	imgui_demo.cpp	/^        static void Square(ImGuiSizeCallbackData* data)$/;"	f	struct:ShowExampleAppConstrainedResize::CustomConstraints	typeref:typename:void	file:
SrcCount	imgui_draw.cpp	/^    int                 SrcCount;           \/\/ Number of source fonts targeting this destinati/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
SrcRanges	imgui_draw.cpp	/^    const ImWchar*      SrcRanges;          \/\/ Ranges as requested by user (user is allowed to/;"	m	struct:ImFontBuildSrcData	typeref:typename:const ImWchar *	file:
StackLevel	includes/imgui_internal.h	/^    int                     StackLevel;                 \/\/ -1: query stack and resize Results,/;"	m	struct:ImGuiIDStackTool	typeref:typename:int
StackSizesInBegin	includes/imgui_internal.h	/^    ImGuiErrorRecoveryState StackSizesInBegin;          \/\/ Store size of various stacks for as/;"	m	struct:ImGuiWindowStackData	typeref:typename:ImGuiErrorRecoveryState
StackSizesInBeginForCurrentWindow	includes/imgui_internal.h	/^    ImGuiErrorRecoveryState*StackSizesInBeginForCurrentWindow;  \/\/ [Internal]$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiErrorRecoveryState *
StackSizesInNewFrame	includes/imgui_internal.h	/^    ImGuiErrorRecoveryState StackSizesInNewFrame;               \/\/ [Internal]$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiErrorRecoveryState
StackToolFormatLevelInfo	imgui.cpp	/^static int StackToolFormatLevelInfo(ImGuiIDStackTool* tool, int n, bool format_for_ui, char* buf/;"	f	typeref:typename:int	file:
StartMouseMovingWindow	imgui.cpp	/^void ImGui::StartMouseMovingWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
StartPosRel	includes/imgui_internal.h	/^    ImVec2                  StartPosRel;        \/\/ Start position in window-contents relative /;"	m	struct:ImGuiBoxSelectState	typeref:typename:ImVec2
StartPosY	includes/imgui.h	/^    float           StartPosY;          \/\/ [Internal] Cursor position at the time of Begin() o/;"	m	struct:ImGuiListClipper	typeref:typename:float
StartSeekOffsetY	includes/imgui.h	/^    double          StartSeekOffsetY;   \/\/ [Internal] Account for frozen rows in a table and i/;"	m	struct:ImGuiListClipper	typeref:typename:double
State	includes/rlgl.h	/^    } State;            \/\/ Renderer state$/;"	m	struct:rlglData	typeref:struct:rlglData::__anon315aabf20d08
StateStorage	includes/imgui_internal.h	/^    ImGuiStorage            StateStorage;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiStorage
StateStorage	includes/imgui_internal.h	/^    ImGuiStorage*           StateStorage;           \/\/ Current persistent per-window storage (/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiStorage *
StatusFlags	includes/imgui_internal.h	/^    ImGuiItemStatusFlags    StatusFlags;        \/\/ See ImGuiItemStatusFlags_$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImGuiItemStatusFlags
Stb	includes/imgui_internal.h	/^    ImStbTexteditState*     Stb;                    \/\/ State for stb_textedit.h$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImStbTexteditState *
StbFindState	includes/imstb_textedit.h	/^} StbFindState;$/;"	t	typeref:struct:__anon3e283e0a0408
StbTexteditRow	includes/imstb_textedit.h	/^} StbTexteditRow;$/;"	t	typeref:struct:__anon3e283e0a0308
StbUndoRecord	includes/imstb_textedit.h	/^} StbUndoRecord;$/;"	t	typeref:struct:__anon3e283e0a0108
StbUndoState	includes/imstb_textedit.h	/^} StbUndoState;$/;"	t	typeref:struct:__anon3e283e0a0208
Step	imgui.cpp	/^bool ImGuiListClipper::Step()$/;"	f	class:ImGuiListClipper	typeref:typename:bool
Step	imgui_demo.cpp	/^        static void Step(ImGuiSizeCallbackData* data)$/;"	f	struct:ShowExampleAppConstrainedResize::CustomConstraints	typeref:typename:void	file:
StepNo	includes/imgui_internal.h	/^    int                             StepNo;$/;"	m	struct:ImGuiListClipperData	typeref:typename:int
Storage	includes/imgui_internal.h	/^    ImGuiMultiSelectState*  Storage;$/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:ImGuiMultiSelectState *
Storage	includes/imgui_internal.h	/^    ImU32           Storage[(BITCOUNT + 31) >> 5];$/;"	m	struct:ImBitArray	typeref:typename:ImU32[]
Storage	includes/imgui_internal.h	/^    ImVector<ImU32> Storage;$/;"	m	struct:ImBitVector	typeref:typename:ImVector<ImU32>
StorageId	includes/imgui_internal.h	/^    ImGuiID                     StorageId;          \/\/ Set by SetNextItemStorageID()$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiID
Strdup	imgui_demo.cpp	/^    static char* Strdup(const char* s)                           { IM_ASSERT(s); size_t len = st/;"	f	struct:ExampleAppConsole	typeref:typename:char *	file:
StretchSpacing	imgui_demo.cpp	/^    bool            StretchSpacing = true;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:bool	file:
StretchWeight	includes/imgui_internal.h	/^    float                   StretchWeight;                  \/\/ Master width weight when (Flags/;"	m	struct:ImGuiTableColumn	typeref:typename:float
Stricmp	imgui_demo.cpp	/^    static int   Stricmp(const char* s1, const char* s2)         { int d; while ((d = toupper(*s/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
Stride	imgui_widgets.cpp	/^    int Stride;$/;"	m	struct:ImGuiPlotArrayGetterData	typeref:typename:int	file:
Strnicmp	imgui_demo.cpp	/^    static int   Strnicmp(const char* s1, const char* s2, int n) { int d = 0; while (n > 0 && (d/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
Strtrim	imgui_demo.cpp	/^    static void  Strtrim(char* s)                                { char* str_end = s + strlen(s)/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
Style	includes/imgui_internal.h	/^    ImGuiStyle              Style;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiStyle
StyleColorsClassic	imgui_draw.cpp	/^void ImGui::StyleColorsClassic(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleColorsDark	imgui_draw.cpp	/^void ImGui::StyleColorsDark(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleColorsLight	imgui_draw.cpp	/^void ImGui::StyleColorsLight(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleVarStack	includes/imgui_internal.h	/^    ImVector<ImGuiStyleMod>         StyleVarStack;              \/\/ Stack for PushStyleVar()\/P/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiStyleMod>
Swap	imgui_widgets.cpp	/^void ImGuiSelectionBasicStorage::Swap(ImGuiSelectionBasicStorage& r)$/;"	f	class:ImGuiSelectionBasicStorage	typeref:typename:void
TABLE_BORDER_SIZE	imgui_tables.cpp	/^static const float TABLE_BORDER_SIZE                     = 1.0f;    \/\/ FIXME-TABLE: Currently /;"	v	typeref:typename:const float	file:
TABLE_DRAW_CHANNEL_BG0	imgui_tables.cpp	/^static const int TABLE_DRAW_CHANNEL_BG0 = 0;$/;"	v	typeref:typename:const int	file:
TABLE_DRAW_CHANNEL_BG2_FROZEN	imgui_tables.cpp	/^static const int TABLE_DRAW_CHANNEL_BG2_FROZEN = 1;$/;"	v	typeref:typename:const int	file:
TABLE_DRAW_CHANNEL_NOCLIP	imgui_tables.cpp	/^static const int TABLE_DRAW_CHANNEL_NOCLIP = 2;                     \/\/ When using ImGuiTableFl/;"	v	typeref:typename:const int	file:
TABLE_RESIZE_SEPARATOR_FEEDBACK_TIMER	imgui_tables.cpp	/^static const float TABLE_RESIZE_SEPARATOR_FEEDBACK_TIMER = 0.06f;   \/\/ Delay\/timer before mak/;"	v	typeref:typename:const float	file:
TABLE_RESIZE_SEPARATOR_HALF_THICKNESS	imgui_tables.cpp	/^static const float TABLE_RESIZE_SEPARATOR_HALF_THICKNESS = 4.0f;    \/\/ Extend outside inner bo/;"	v	typeref:typename:const float	file:
TEXTURE_FILTER_ANISOTROPIC_16X	includes/raylib.h	/^    TEXTURE_FILTER_ANISOTROPIC_16X,         \/\/ Anisotropic filtering 16x$/;"	e	enum:__anonce11f6a40e03
TEXTURE_FILTER_ANISOTROPIC_4X	includes/raylib.h	/^    TEXTURE_FILTER_ANISOTROPIC_4X,          \/\/ Anisotropic filtering 4x$/;"	e	enum:__anonce11f6a40e03
TEXTURE_FILTER_ANISOTROPIC_8X	includes/raylib.h	/^    TEXTURE_FILTER_ANISOTROPIC_8X,          \/\/ Anisotropic filtering 8x$/;"	e	enum:__anonce11f6a40e03
TEXTURE_FILTER_BILINEAR	includes/raylib.h	/^    TEXTURE_FILTER_BILINEAR,                \/\/ Linear filtering$/;"	e	enum:__anonce11f6a40e03
TEXTURE_FILTER_POINT	includes/raylib.h	/^    TEXTURE_FILTER_POINT = 0,               \/\/ No filter, just pixel approximation$/;"	e	enum:__anonce11f6a40e03
TEXTURE_FILTER_TRILINEAR	includes/raylib.h	/^    TEXTURE_FILTER_TRILINEAR,               \/\/ Trilinear filtering (linear with mipmaps)$/;"	e	enum:__anonce11f6a40e03
TEXTURE_WRAP_CLAMP	includes/raylib.h	/^    TEXTURE_WRAP_CLAMP,                     \/\/ Clamps texture to edge pixel in tiled mode$/;"	e	enum:__anonce11f6a40f03
TEXTURE_WRAP_MIRROR_CLAMP	includes/raylib.h	/^    TEXTURE_WRAP_MIRROR_CLAMP               \/\/ Mirrors and clamps to border the texture in til/;"	e	enum:__anonce11f6a40f03
TEXTURE_WRAP_MIRROR_REPEAT	includes/raylib.h	/^    TEXTURE_WRAP_MIRROR_REPEAT,             \/\/ Mirrors and repeats the texture in tiled mode$/;"	e	enum:__anonce11f6a40f03
TEXTURE_WRAP_REPEAT	includes/raylib.h	/^    TEXTURE_WRAP_REPEAT = 0,                \/\/ Repeats texture in tiled mode$/;"	e	enum:__anonce11f6a40f03
TOOLTIP_DEFAULT_OFFSET_MOUSE	imgui.cpp	/^static const ImVec2 TOOLTIP_DEFAULT_OFFSET_MOUSE = ImVec2(16, 10);      \/\/ Multiplied by g.Sty/;"	v	typeref:typename:const ImVec2	file:
TOOLTIP_DEFAULT_OFFSET_TOUCH	imgui.cpp	/^static const ImVec2 TOOLTIP_DEFAULT_OFFSET_TOUCH = ImVec2(0, -20);      \/\/ Multiplied by g.Sty/;"	v	typeref:typename:const ImVec2	file:
TOOLTIP_DEFAULT_PIVOT_TOUCH	imgui.cpp	/^static const ImVec2 TOOLTIP_DEFAULT_PIVOT_TOUCH = ImVec2(0.5f, 1.0f);   \/\/ Multiplied by g.Sty/;"	v	typeref:typename:const ImVec2	file:
TRACELOG	includes/rlgl.h	/^    #define TRACELOG(/;"	d
TRACELOGD	includes/rlgl.h	/^    #define TRACELOGD(/;"	d
TRT_BackgroundClipRect	imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710503	file:
TRT_ColumnsClipRect	imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710503	file:
TRT_ColumnsContentFrozen	imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710503	file:
TRT_ColumnsContentHeadersIdeal	imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710503	file:
TRT_ColumnsContentHeadersUsed	imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710503	file:
TRT_ColumnsContentUnfrozen	imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710503	file:
TRT_ColumnsRect	imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710503	file:
TRT_ColumnsWorkRect	imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710503	file:
TRT_Count	imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710503	file:
TRT_HostClipRect	imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710503	file:
TRT_InnerClipRect	imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710503	file:
TRT_InnerRect	imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710503	file:
TRT_OuterRect	imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710503	file:
TRT_WorkRect	imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710503	file:
TabBarBorderSize	includes/imgui.h	/^    float       TabBarBorderSize;           \/\/ Thickness of tab-bar separator, which takes on /;"	m	struct:ImGuiStyle	typeref:typename:float
TabBarCalcMaxTabWidth	imgui_widgets.cpp	/^static float ImGui::TabBarCalcMaxTabWidth()$/;"	f	class:ImGui	typeref:typename:float	file:
TabBarCalcScrollableWidth	imgui_widgets.cpp	/^static float TabBarCalcScrollableWidth(ImGuiTabBar* tab_bar, ImGuiTabBarSection* sections)$/;"	f	typeref:typename:float	file:
TabBarCalcTabID	imgui_widgets.cpp	/^static ImU32   ImGui::TabBarCalcTabID(ImGuiTabBar* tab_bar, const char* label, ImGuiWindow* dock/;"	f	class:ImGui	typeref:typename:ImU32	file:
TabBarCloseTab	imgui_widgets.cpp	/^void ImGui::TabBarCloseTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui	typeref:typename:void
TabBarFindTabByID	imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarFindTabByID(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *
TabBarFindTabByOrder	imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarFindTabByOrder(ImGuiTabBar* tab_bar, int order)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *
TabBarGetCurrentTab	imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarGetCurrentTab(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *
TabBarGetTabName	imgui_widgets.cpp	/^const char* ImGui::TabBarGetTabName(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui	typeref:typename:const char *
TabBarGetTabOrder	includes/imgui_internal.h	/^    inline int              TabBarGetTabOrder(ImGuiTabBar* tab_bar, ImGuiTabItem* tab) { return /;"	f	namespace:ImGui	typeref:typename:int
TabBarLayout	imgui_widgets.cpp	/^static void ImGui::TabBarLayout(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:void	file:
TabBarOverlineSize	includes/imgui.h	/^    float       TabBarOverlineSize;         \/\/ Thickness of tab-bar overline, which highlights/;"	m	struct:ImGuiStyle	typeref:typename:float
TabBarProcessReorder	imgui_widgets.cpp	/^bool ImGui::TabBarProcessReorder(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:bool
TabBarQueueFocus	imgui_widgets.cpp	/^void ImGui::TabBarQueueFocus(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui	typeref:typename:void
TabBarQueueFocus	imgui_widgets.cpp	/^void ImGui::TabBarQueueFocus(ImGuiTabBar* tab_bar, const char* tab_name)$/;"	f	class:ImGui	typeref:typename:void
TabBarQueueReorder	imgui_widgets.cpp	/^void ImGui::TabBarQueueReorder(ImGuiTabBar* tab_bar, ImGuiTabItem* tab, int offset)$/;"	f	class:ImGui	typeref:typename:void
TabBarQueueReorderFromMousePos	imgui_widgets.cpp	/^void ImGui::TabBarQueueReorderFromMousePos(ImGuiTabBar* tab_bar, ImGuiTabItem* src_tab, ImVec2 m/;"	f	class:ImGui	typeref:typename:void
TabBarRemoveTab	imgui_widgets.cpp	/^void ImGui::TabBarRemoveTab(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui	typeref:typename:void
TabBarScrollClamp	imgui_widgets.cpp	/^static float ImGui::TabBarScrollClamp(ImGuiTabBar* tab_bar, float scrolling)$/;"	f	class:ImGui	typeref:typename:float	file:
TabBarScrollToTab	imgui_widgets.cpp	/^static void ImGui::TabBarScrollToTab(ImGuiTabBar* tab_bar, ImGuiID tab_id, ImGuiTabBarSection* s/;"	f	class:ImGui	typeref:typename:void	file:
TabBarScrollingButtons	imgui_widgets.cpp	/^static ImGuiTabItem* ImGui::TabBarScrollingButtons(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *	file:
TabBarTabListPopupButton	imgui_widgets.cpp	/^static ImGuiTabItem* ImGui::TabBarTabListPopupButton(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *	file:
TabBars	includes/imgui_internal.h	/^    ImPool<ImGuiTabBar>             TabBars;$/;"	m	struct:ImGuiContext	typeref:typename:ImPool<ImGuiTabBar>
TabBorderSize	includes/imgui.h	/^    float       TabBorderSize;              \/\/ Thickness of border around tabs.$/;"	m	struct:ImGuiStyle	typeref:typename:float
TabCount	imgui_widgets.cpp	/^    int                 TabCount;               \/\/ Number of tabs in this section.$/;"	m	struct:ImGuiTabBarSection	typeref:typename:int	file:
TabItemBackground	imgui_widgets.cpp	/^void ImGui::TabItemBackground(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlags flags, /;"	f	class:ImGui	typeref:typename:void
TabItemButton	imgui_widgets.cpp	/^bool    ImGui::TabItemButton(const char* label, ImGuiTabItemFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TabItemCalcSize	imgui_widgets.cpp	/^ImVec2 ImGui::TabItemCalcSize(ImGuiWindow*)$/;"	f	class:ImGui	typeref:typename:ImVec2
TabItemCalcSize	imgui_widgets.cpp	/^ImVec2 ImGui::TabItemCalcSize(const char* label, bool has_close_button_or_unsaved_marker)$/;"	f	class:ImGui	typeref:typename:ImVec2
TabItemComparerByBeginOrder	imgui_widgets.cpp	/^static int IMGUI_CDECL TabItemComparerByBeginOrder(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
TabItemComparerBySection	imgui_widgets.cpp	/^static int IMGUI_CDECL TabItemComparerBySection(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
TabItemEx	imgui_widgets.cpp	/^bool    ImGui::TabItemEx(ImGuiTabBar* tab_bar, const char* label, bool* p_open, ImGuiTabItemFlag/;"	f	class:ImGui	typeref:typename:bool
TabItemGetSectionIdx	imgui_widgets.cpp	/^static inline int TabItemGetSectionIdx(const ImGuiTabItem* tab)$/;"	f	typeref:typename:int	file:
TabItemLabelAndCloseButton	imgui_widgets.cpp	/^void ImGui::TabItemLabelAndCloseButton(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlag/;"	f	class:ImGui	typeref:typename:void
TabMinWidthForCloseButton	includes/imgui.h	/^    float       TabMinWidthForCloseButton;  \/\/ Minimum width for close button to appear on an /;"	m	struct:ImGuiStyle	typeref:typename:float
TabRounding	includes/imgui.h	/^    float       TabRounding;                \/\/ Radius of upper corners of a tab. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
Table	imgui.ini	/^[Table][0xB6880529,2]$/;"	s
TableAngledHeadersAngle	includes/imgui.h	/^    float       TableAngledHeadersAngle;    \/\/ Angle of angled headers (supported values range/;"	m	struct:ImGuiStyle	typeref:typename:float
TableAngledHeadersRow	imgui_tables.cpp	/^void ImGui::TableAngledHeadersRow()$/;"	f	class:ImGui	typeref:typename:void
TableAngledHeadersRowEx	imgui_tables.cpp	/^void ImGui::TableAngledHeadersRowEx(ImGuiID row_id, float angle, float max_label_width, const Im/;"	f	class:ImGui	typeref:typename:void
TableAngledHeadersTextAlign	includes/imgui.h	/^    ImVec2      TableAngledHeadersTextAlign;\/\/ Alignment of angled headers within the cell$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
TableBeginApplyRequests	imgui_tables.cpp	/^void ImGui::TableBeginApplyRequests(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableBeginCell	imgui_tables.cpp	/^void ImGui::TableBeginCell(ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:void
TableBeginContextMenuPopup	imgui_tables.cpp	/^bool ImGui::TableBeginContextMenuPopup(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:bool
TableBeginInitMemory	imgui_tables.cpp	/^void ImGui::TableBeginInitMemory(ImGuiTable* table, int columns_count)$/;"	f	class:ImGui	typeref:typename:void
TableBeginRow	imgui_tables.cpp	/^void ImGui::TableBeginRow(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableCalcMaxColumnWidth	imgui_tables.cpp	/^float ImGui::TableCalcMaxColumnWidth(const ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:float
TableDrawBorders	imgui_tables.cpp	/^void ImGui::TableDrawBorders(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableDrawDefaultContextMenu	imgui_tables.cpp	/^void ImGui::TableDrawDefaultContextMenu(ImGuiTable* table, ImGuiTableFlags flags_for_section_to_/;"	f	class:ImGui	typeref:typename:void
TableEndCell	imgui_tables.cpp	/^void ImGui::TableEndCell(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableEndRow	imgui_tables.cpp	/^void ImGui::TableEndRow(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableFindByID	imgui_tables.cpp	/^ImGuiTable* ImGui::TableFindByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiTable *
TableFixColumnSortDirection	imgui_tables.cpp	/^void ImGui::TableFixColumnSortDirection(ImGuiTable* table, ImGuiTableColumn* column)$/;"	f	class:ImGui	typeref:typename:void
TableFixFlags	imgui_tables.cpp	/^inline ImGuiTableFlags TableFixFlags(ImGuiTableFlags flags, ImGuiWindow* outer_window)$/;"	f	typeref:typename:ImGuiTableFlags
TableGcCompactSettings	imgui_tables.cpp	/^void ImGui::TableGcCompactSettings()$/;"	f	class:ImGui	typeref:typename:void
TableGcCompactTransientBuffers	imgui_tables.cpp	/^void ImGui::TableGcCompactTransientBuffers(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableGcCompactTransientBuffers	imgui_tables.cpp	/^void ImGui::TableGcCompactTransientBuffers(ImGuiTableTempData* temp_data)$/;"	f	class:ImGui	typeref:typename:void
TableGetBoundSettings	imgui_tables.cpp	/^ImGuiTableSettings* ImGui::TableGetBoundSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:ImGuiTableSettings *
TableGetCellBgRect	imgui_tables.cpp	/^ImRect ImGui::TableGetCellBgRect(const ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:ImRect
TableGetColumnAvailSortDirection	imgui_tables.cpp	/^static inline ImGuiSortDirection TableGetColumnAvailSortDirection(ImGuiTableColumn* column, int /;"	f	typeref:typename:ImGuiSortDirection	file:
TableGetColumnBorderCol	imgui_tables.cpp	/^static ImU32 TableGetColumnBorderCol(ImGuiTable* table, int order_n, int column_n)$/;"	f	typeref:typename:ImU32	file:
TableGetColumnCount	imgui_tables.cpp	/^int ImGui::TableGetColumnCount()$/;"	f	class:ImGui	typeref:typename:int
TableGetColumnFlags	imgui_tables.cpp	/^ImGuiTableColumnFlags ImGui::TableGetColumnFlags(int column_n)$/;"	f	class:ImGui	typeref:typename:ImGuiTableColumnFlags
TableGetColumnIndex	imgui_tables.cpp	/^int ImGui::TableGetColumnIndex()$/;"	f	class:ImGui	typeref:typename:int
TableGetColumnName	imgui_tables.cpp	/^const char* ImGui::TableGetColumnName(const ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:const char *
TableGetColumnName	imgui_tables.cpp	/^const char* ImGui::TableGetColumnName(int column_n)$/;"	f	class:ImGui	typeref:typename:const char *
TableGetColumnNextSortDirection	imgui_tables.cpp	/^ImGuiSortDirection ImGui::TableGetColumnNextSortDirection(ImGuiTableColumn* column)$/;"	f	class:ImGui	typeref:typename:ImGuiSortDirection
TableGetColumnResizeID	imgui_tables.cpp	/^ImGuiID ImGui::TableGetColumnResizeID(ImGuiTable* table, int column_n, int instance_no)$/;"	f	class:ImGui	typeref:typename:ImGuiID
TableGetColumnWidthAuto	imgui_tables.cpp	/^float ImGui::TableGetColumnWidthAuto(ImGuiTable* table, ImGuiTableColumn* column)$/;"	f	class:ImGui	typeref:typename:float
TableGetHeaderAngledMaxLabelWidth	imgui_tables.cpp	/^float ImGui::TableGetHeaderAngledMaxLabelWidth()$/;"	f	class:ImGui	typeref:typename:float
TableGetHeaderRowHeight	imgui_tables.cpp	/^float ImGui::TableGetHeaderRowHeight()$/;"	f	class:ImGui	typeref:typename:float
TableGetHoveredColumn	imgui_tables.cpp	/^int ImGui::TableGetHoveredColumn()$/;"	f	class:ImGui	typeref:typename:int
TableGetHoveredRow	imgui_tables.cpp	/^int ImGui::TableGetHoveredRow()$/;"	f	class:ImGui	typeref:typename:int
TableGetInstanceData	includes/imgui_internal.h	/^    inline ImGuiTableInstanceData*  TableGetInstanceData(ImGuiTable* table, int instance_no) { i/;"	f	namespace:ImGui	typeref:typename:ImGuiTableInstanceData *
TableGetInstanceID	includes/imgui_internal.h	/^    inline ImGuiID                  TableGetInstanceID(ImGuiTable* table, int instance_no)   { r/;"	f	namespace:ImGui	typeref:typename:ImGuiID
TableGetRowIndex	imgui_tables.cpp	/^int ImGui::TableGetRowIndex()$/;"	f	class:ImGui	typeref:typename:int
TableGetSortSpecs	imgui_tables.cpp	/^ImGuiTableSortSpecs* ImGui::TableGetSortSpecs()$/;"	f	class:ImGui	typeref:typename:ImGuiTableSortSpecs *
TableHeader	imgui_tables.cpp	/^void ImGui::TableHeader(const char* label)$/;"	f	class:ImGui	typeref:typename:void
TableHeadersRow	imgui_tables.cpp	/^void ImGui::TableHeadersRow()$/;"	f	class:ImGui	typeref:typename:void
TableIndex	includes/imgui_internal.h	/^    int                         TableIndex;                 \/\/ Index in g.Tables.Buf[] pool$/;"	m	struct:ImGuiTableTempData	typeref:typename:int
TableInstanceID	includes/imgui_internal.h	/^    ImGuiID                     TableInstanceID;$/;"	m	struct:ImGuiTableInstanceData	typeref:typename:ImGuiID
TableLoadSettings	imgui_tables.cpp	/^void ImGui::TableLoadSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableMergeDrawChannels	imgui_tables.cpp	/^void ImGui::TableMergeDrawChannels(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableNextColumn	imgui_tables.cpp	/^bool ImGui::TableNextColumn()$/;"	f	class:ImGui	typeref:typename:bool
TableNextRow	imgui_tables.cpp	/^void ImGui::TableNextRow(ImGuiTableRowFlags row_flags, float row_min_height)$/;"	f	class:ImGui	typeref:typename:void
TableOpenContextMenu	imgui_tables.cpp	/^void ImGui::TableOpenContextMenu(int column_n)$/;"	f	class:ImGui	typeref:typename:void
TablePopBackgroundChannel	imgui_tables.cpp	/^void ImGui::TablePopBackgroundChannel()$/;"	f	class:ImGui	typeref:typename:void
TablePushBackgroundChannel	imgui_tables.cpp	/^void ImGui::TablePushBackgroundChannel()$/;"	f	class:ImGui	typeref:typename:void
TableRemove	imgui_tables.cpp	/^void ImGui::TableRemove(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableResetSettings	imgui_tables.cpp	/^void ImGui::TableResetSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSaveSettings	imgui_tables.cpp	/^void ImGui::TableSaveSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSetBgColor	imgui_tables.cpp	/^void ImGui::TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnEnabled	imgui_tables.cpp	/^void ImGui::TableSetColumnEnabled(int column_n, bool enabled)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnIndex	imgui_tables.cpp	/^bool ImGui::TableSetColumnIndex(int column_n)$/;"	f	class:ImGui	typeref:typename:bool
TableSetColumnSortDirection	imgui_tables.cpp	/^void ImGui::TableSetColumnSortDirection(int column_n, ImGuiSortDirection sort_direction, bool ap/;"	f	class:ImGui	typeref:typename:void
TableSetColumnWidth	imgui_tables.cpp	/^void ImGui::TableSetColumnWidth(int column_n, float width)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnWidthAutoAll	imgui_tables.cpp	/^void ImGui::TableSetColumnWidthAutoAll(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnWidthAutoSingle	imgui_tables.cpp	/^void ImGui::TableSetColumnWidthAutoSingle(ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:void
TableSettingsAddSettingsHandler	imgui_tables.cpp	/^void ImGui::TableSettingsAddSettingsHandler()$/;"	f	class:ImGui	typeref:typename:void
TableSettingsCalcChunkSize	imgui_tables.cpp	/^static size_t TableSettingsCalcChunkSize(int columns_count)$/;"	f	typeref:typename:size_t	file:
TableSettingsCreate	imgui_tables.cpp	/^ImGuiTableSettings* ImGui::TableSettingsCreate(ImGuiID id, int columns_count)$/;"	f	class:ImGui	typeref:typename:ImGuiTableSettings *
TableSettingsFindByID	imgui_tables.cpp	/^ImGuiTableSettings* ImGui::TableSettingsFindByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiTableSettings *
TableSettingsHandler_ApplyAll	imgui_tables.cpp	/^static void TableSettingsHandler_ApplyAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
TableSettingsHandler_ClearAll	imgui_tables.cpp	/^static void TableSettingsHandler_ClearAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
TableSettingsHandler_ReadLine	imgui_tables.cpp	/^static void TableSettingsHandler_ReadLine(ImGuiContext*, ImGuiSettingsHandler*, void* entry, con/;"	f	typeref:typename:void	file:
TableSettingsHandler_ReadOpen	imgui_tables.cpp	/^static void* TableSettingsHandler_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const char* nam/;"	f	typeref:typename:void *	file:
TableSettingsHandler_WriteAll	imgui_tables.cpp	/^static void TableSettingsHandler_WriteAll(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGu/;"	f	typeref:typename:void	file:
TableSettingsInit	imgui_tables.cpp	/^static void TableSettingsInit(ImGuiTableSettings* settings, ImGuiID id, int columns_count, int c/;"	f	typeref:typename:void	file:
TableSetupColumn	imgui_tables.cpp	/^void ImGui::TableSetupColumn(const char* label, ImGuiTableColumnFlags flags, float init_width_or/;"	f	class:ImGui	typeref:typename:void
TableSetupColumnFlags	imgui_tables.cpp	/^static void TableSetupColumnFlags(ImGuiTable* table, ImGuiTableColumn* column, ImGuiTableColumnF/;"	f	typeref:typename:void	file:
TableSetupDrawChannels	imgui_tables.cpp	/^void ImGui::TableSetupDrawChannels(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSetupScrollFreeze	imgui_tables.cpp	/^void ImGui::TableSetupScrollFreeze(int columns, int rows)$/;"	f	class:ImGui	typeref:typename:void
TableSortSpecsBuild	imgui_tables.cpp	/^void ImGui::TableSortSpecsBuild(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSortSpecsSanitize	imgui_tables.cpp	/^void ImGui::TableSortSpecsSanitize(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableUpdateBorders	imgui_tables.cpp	/^void ImGui::TableUpdateBorders(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableUpdateColumnsWeightFromWidth	imgui_tables.cpp	/^void ImGui::TableUpdateColumnsWeightFromWidth(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableUpdateLayout	imgui_tables.cpp	/^void ImGui::TableUpdateLayout(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
Tables	includes/imgui_internal.h	/^    ImPool<ImGuiTable>              Tables;                     \/\/ Persistent table data$/;"	m	struct:ImGuiContext	typeref:typename:ImPool<ImGuiTable>
TablesLastTimeActive	includes/imgui_internal.h	/^    ImVector<float>                 TablesLastTimeActive;       \/\/ Last used timestamp of each/;"	m	struct:ImGuiContext	typeref:typename:ImVector<float>
TablesTempData	includes/imgui_internal.h	/^    ImVector<ImGuiTableTempData>    TablesTempData;             \/\/ Temporary table data (buffe/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiTableTempData>
TablesTempDataStacked	includes/imgui_internal.h	/^    int                             TablesTempDataStacked;      \/\/ Temporary table data size (/;"	m	struct:ImGuiContext	typeref:typename:int
Tabs	includes/imgui_internal.h	/^    ImVector<ImGuiTabItem> Tabs;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImVector<ImGuiTabItem>
TabsActiveCount	includes/imgui_internal.h	/^    ImS16               TabsActiveCount;        \/\/ Number of tabs submitted this frame.$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS16
TabsAddedNew	includes/imgui_internal.h	/^    bool                TabsAddedNew;           \/\/ Set to true when a new tab item or button h/;"	m	struct:ImGuiTabBar	typeref:typename:bool
TabsNames	includes/imgui_internal.h	/^    ImGuiTextBuffer     TabsNames;              \/\/ For non-docking tab bar we re-append names /;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiTextBuffer
TeleportMousePos	imgui.cpp	/^void ImGui::TeleportMousePos(const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:void
TempBuffer	includes/imgui_internal.h	/^    ImVector<ImVec2> TempBuffer;                \/\/ Temporary write buffer$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVector<ImVec2>
TempBuffer	includes/imgui_internal.h	/^    ImVector<char>          TempBuffer;                         \/\/ Temporary text buffer$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<char>
TempData	includes/imgui.h	/^    void*           TempData;           \/\/ [Internal] Internal data$/;"	m	struct:ImGuiListClipper	typeref:typename:void *
TempData	includes/imgui_internal.h	/^    ImGuiTableTempData*         TempData;                   \/\/ Transient data while table is a/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableTempData *
TempInputId	includes/imgui_internal.h	/^    ImGuiID                 TempInputId;                        \/\/ Temporary text input when C/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
TempInputIsActive	includes/imgui_internal.h	/^    inline bool             TempInputIsActive(ImGuiID id)       { ImGuiContext& g = *GImGui; ret/;"	f	namespace:ImGui	typeref:typename:bool
TempInputScalar	imgui_widgets.cpp	/^bool ImGui::TempInputScalar(const ImRect& bb, ImGuiID id, const char* label, ImGuiDataType data_/;"	f	class:ImGui	typeref:typename:bool
TempInputText	imgui_widgets.cpp	/^bool ImGui::TempInputText(const ImRect& bb, ImGuiID id, const char* label, char* buf, int buf_si/;"	f	class:ImGui	typeref:typename:bool
TempKeychordName	includes/imgui_internal.h	/^    char                    TempKeychordName[64];$/;"	m	struct:ImGuiContext	typeref:typename:char[64]
TestBit	includes/imgui_internal.h	/^    bool            TestBit(int n) const        { IM_ASSERT(n < (Storage.Size << 5)); return IM_/;"	f	struct:ImBitVector	typeref:typename:bool
TestBit	includes/imgui_internal.h	/^    bool            TestBit(int n) const        { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:bool
TestEngine	includes/imgui_internal.h	/^    void*                   TestEngine;                         \/\/ Test engine user data$/;"	m	struct:ImGuiContext	typeref:typename:void *
TestEngineHookItems	includes/imgui_internal.h	/^    bool                    TestEngineHookItems;                \/\/ Will call test engine hooks/;"	m	struct:ImGuiContext	typeref:typename:bool
TestKeyOwner	imgui.cpp	/^bool ImGui::TestKeyOwner(ImGuiKey key, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
TestShortcutRouting	imgui.cpp	/^bool ImGui::TestShortcutRouting(ImGuiKeyChord key_chord, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
TexDesiredWidth	includes/imgui.h	/^    int                         TexDesiredWidth;    \/\/ Texture width desired by user before Bu/;"	m	struct:ImFontAtlas	typeref:typename:int
TexGlyphPadding	includes/imgui.h	/^    int                         TexGlyphPadding;    \/\/ FIXME: Should be called "TexPackPadding/;"	m	struct:ImFontAtlas	typeref:typename:int
TexHeight	includes/imgui.h	/^    int                         TexHeight;          \/\/ Texture height calculated during Build(/;"	m	struct:ImFontAtlas	typeref:typename:int
TexID	includes/imgui.h	/^    ImTextureID                 TexID;              \/\/ User data to refer to the texture once /;"	m	struct:ImFontAtlas	typeref:typename:ImTextureID
TexPixelsAlpha8	includes/imgui.h	/^    unsigned char*              TexPixelsAlpha8;    \/\/ 1 component per pixel, each component i/;"	m	struct:ImFontAtlas	typeref:typename:unsigned char *
TexPixelsRGBA32	includes/imgui.h	/^    unsigned int*               TexPixelsRGBA32;    \/\/ 4 component per pixel, each component i/;"	m	struct:ImFontAtlas	typeref:typename:unsigned int *
TexPixelsUseColors	includes/imgui.h	/^    bool                        TexPixelsUseColors; \/\/ Tell whether our texture data is known /;"	m	struct:ImFontAtlas	typeref:typename:bool
TexReady	includes/imgui.h	/^    bool                        TexReady;           \/\/ Set when texture was built matching cur/;"	m	struct:ImFontAtlas	typeref:typename:bool
TexUvLines	includes/imgui.h	/^    ImVec4                      TexUvLines[IM_DRAWLIST_TEX_LINES_WIDTH_MAX + 1];  \/\/ UVs for b/;"	m	struct:ImFontAtlas	typeref:typename:ImVec4[]
TexUvLines	includes/imgui_internal.h	/^    const ImVec4*   TexUvLines;                 \/\/ UV of anti-aliased lines in the atlas$/;"	m	struct:ImDrawListSharedData	typeref:typename:const ImVec4 *
TexUvScale	includes/imgui.h	/^    ImVec2                      TexUvScale;         \/\/ = (1.0f\/TexWidth, 1.0f\/TexHeight)$/;"	m	struct:ImFontAtlas	typeref:typename:ImVec2
TexUvWhitePixel	includes/imgui.h	/^    ImVec2                      TexUvWhitePixel;    \/\/ Texture coordinates to a white pixel$/;"	m	struct:ImFontAtlas	typeref:typename:ImVec2
TexUvWhitePixel	includes/imgui_internal.h	/^    ImVec2          TexUvWhitePixel;            \/\/ UV of white pixel in the atlas$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec2
TexWidth	includes/imgui.h	/^    int                         TexWidth;           \/\/ Texture width calculated during Build()/;"	m	struct:ImFontAtlas	typeref:typename:int
Text	imgui_widgets.cpp	/^void ImGui::Text(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
Text	includes/imgui_internal.h	/^        ImGuiInputEventText         Text;           \/\/ if Type == ImGuiInputEventType_Text$/;"	m	union:ImGuiInputEvent::__anonf46a7b98020a	typeref:typename:ImGuiInputEventText
Text	includes/imgui_internal.h	/^    const char*     Text;$/;"	m	struct:ImGuiLocEntry	typeref:typename:const char *
TextA	includes/imgui_internal.h	/^    ImVector<char>          TextA;                  \/\/ main UTF8 buffer. TextA.Size is a buffe/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<char>
TextA	includes/imgui_internal.h	/^    ImVector<char>     TextA;           \/\/ text buffer$/;"	m	struct:ImGuiInputTextDeactivatedState	typeref:typename:ImVector<char>
TextColor	includes/imgui_internal.h	/^    ImU32                       TextColor;$/;"	m	struct:ImGuiTableHeaderData	typeref:typename:ImU32
TextColored	imgui_widgets.cpp	/^void ImGui::TextColored(const ImVec4& col, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextColoredV	imgui_widgets.cpp	/^void ImGui::TextColoredV(const ImVec4& col, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextDisabled	imgui_widgets.cpp	/^void ImGui::TextDisabled(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextDisabledV	imgui_widgets.cpp	/^void ImGui::TextDisabledV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextEditCallback	imgui_demo.cpp	/^    int     TextEditCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
TextEditCallbackStub	imgui_demo.cpp	/^    static int TextEditCallbackStub(ImGuiInputTextCallbackData* data)$/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
TextEx	imgui_widgets.cpp	/^void ImGui::TextEx(const char* text, const char* text_end, ImGuiTextFlags flags)$/;"	f	class:ImGui	typeref:typename:void
TextFilters	imgui_demo.cpp	/^            struct TextFilters$/;"	s	function:ShowDemoWindowWidgets	file:
TextLen	includes/imgui_internal.h	/^    int                     TextLen;                \/\/ UTF-8 length of the string in TextA (in/;"	m	struct:ImGuiInputTextState	typeref:typename:int
TextLink	imgui_widgets.cpp	/^bool ImGui::TextLink(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
TextLinkOpenURL	imgui_widgets.cpp	/^void ImGui::TextLinkOpenURL(const char* label, const char* url)$/;"	f	class:ImGui	typeref:typename:void
TextSrc	includes/imgui_internal.h	/^    const char*             TextSrc;                \/\/ == TextA.Data unless read-only, in whic/;"	m	struct:ImGuiInputTextState	typeref:typename:const char *
TextToRevertTo	includes/imgui_internal.h	/^    ImVector<char>          TextToRevertTo;         \/\/ value to revert to when pressing Escape/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<char>
TextUnformatted	imgui_widgets.cpp	/^void ImGui::TextUnformatted(const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:void
TextV	imgui_widgets.cpp	/^void ImGui::TextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextWrapPos	includes/imgui_internal.h	/^    float                   TextWrapPos;            \/\/ Current text wrap pos.$/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
TextWrapPosStack	includes/imgui_internal.h	/^    ImVector<float>         TextWrapPosStack;       \/\/ Store text wrap pos to restore (attenti/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<float>
TextWrapped	imgui_widgets.cpp	/^void ImGui::TextWrapped(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextWrappedV	imgui_widgets.cpp	/^void ImGui::TextWrappedV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
Texture	includes/raylib.h	/^typedef struct Texture {$/;"	s
Texture	includes/raylib.h	/^} Texture;$/;"	t	typeref:struct:Texture
Texture2D	includes/raylib.h	/^typedef Texture Texture2D;$/;"	t	typeref:typename:Texture
TextureCubemap	includes/raylib.h	/^typedef Texture TextureCubemap;$/;"	t	typeref:typename:Texture
TextureFilter	includes/raylib.h	/^} TextureFilter;$/;"	t	typeref:enum:__anonce11f6a40e03
TextureId	includes/imgui.h	/^    ImTextureID     TextureId;          \/\/ 4-8  \/\/ User-provided texture ID. Set by user in /;"	m	struct:ImDrawCmd	typeref:typename:ImTextureID
TextureId	includes/imgui.h	/^    ImTextureID     TextureId;$/;"	m	struct:ImDrawCmdHeader	typeref:typename:ImTextureID
TextureWrap	includes/raylib.h	/^} TextureWrap;$/;"	t	typeref:enum:__anonce11f6a40f03
Time	includes/imgui_internal.h	/^    double                  Time;$/;"	m	struct:ImGuiContext	typeref:typename:double
TitleBarHeight	includes/imgui_internal.h	/^    float                   TitleBarHeight, MenuBarHeight;      \/\/ Note that those used to be /;"	m	struct:ImGuiWindow	typeref:typename:float
TitleBarRect	includes/imgui_internal.h	/^    ImRect      TitleBarRect() const    { return ImRect(Pos, ImVec2(Pos.x + SizeFull.x, Pos.y + /;"	f	struct:ImGuiWindow	typeref:typename:ImRect
ToVec4	includes/imgui_internal.h	/^    ImVec4      ToVec4() const                      { return ImVec4(Min.x, Min.y, Max.x, Max.y);/;"	f	struct:ImRect	typeref:typename:ImVec4
Tooltip	imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	m	struct:EditTableSizingFlags::EnumDesc	typeref:typename:const char *	file:
TooltipOverrideCount	includes/imgui_internal.h	/^    short                   TooltipOverrideCount;$/;"	m	struct:ImGuiContext	typeref:typename:short
TooltipPreviousWindow	includes/imgui_internal.h	/^    ImGuiWindow*            TooltipPreviousWindow;              \/\/ Window of last tooltip subm/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
TotalAllocCount	includes/imgui_internal.h	/^    int         TotalAllocCount;            \/\/ Number of call to MemAlloc().$/;"	m	struct:ImGuiDebugAllocInfo	typeref:typename:int
TotalFreeCount	includes/imgui_internal.h	/^    int         TotalFreeCount;$/;"	m	struct:ImGuiDebugAllocInfo	typeref:typename:int
TotalIdxCount	includes/imgui.h	/^    int                 TotalIdxCount;      \/\/ For convenience, sum of all ImDrawList's IdxBuf/;"	m	struct:ImDrawData	typeref:typename:int
TotalVtxCount	includes/imgui.h	/^    int                 TotalVtxCount;      \/\/ For convenience, sum of all ImDrawList's VtxBuf/;"	m	struct:ImDrawData	typeref:typename:int
TotalWidth	includes/imgui_internal.h	/^    ImU32       TotalWidth;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU32
TouchExtraPadding	includes/imgui.h	/^    ImVec2      TouchExtraPadding;          \/\/ Expand reactive bounding box for touch-based sy/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
TraceLogCallback	includes/raylib.h	/^typedef void (*TraceLogCallback)(int logLevel, const char *text, va_list args);  \/\/ Logging: R/;"	t	typeref:typename:void (*)(int logLevel,const char * text,va_list args)
TraceLogLevel	includes/raylib.h	/^} TraceLogLevel;$/;"	t	typeref:enum:__anonce11f6a40303
Transform	includes/raylib.h	/^typedef struct Transform {$/;"	s
Transform	includes/raylib.h	/^} Transform;$/;"	t	typeref:struct:Transform
Translate	includes/imgui_internal.h	/^    void        Translate(const ImVec2& d)          { Min.x += d.x; Min.y += d.y; Max.x += d.x; /;"	f	struct:ImRect	typeref:typename:void
TranslateX	includes/imgui_internal.h	/^    void        TranslateX(float dx)                { Min.x += dx; Max.x += dx; }$/;"	f	struct:ImRect	typeref:typename:void
TranslateY	includes/imgui_internal.h	/^    void        TranslateY(float dy)                { Min.y += dy; Max.y += dy; }$/;"	f	struct:ImRect	typeref:typename:void
TreeCloseAndUnselectChildNodes	imgui_demo.cpp	/^                static int TreeCloseAndUnselectChildNodes(ExampleTreeNode* node, ImGuiSelectionB/;"	f	struct:ShowDemoWindowMultiSelect::ExampleTreeFuncs	typeref:typename:int	file:
TreeDepth	includes/imgui_internal.h	/^    int                     TreeDepth;              \/\/ Current tree depth.$/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
TreeFlags	includes/imgui_internal.h	/^    ImGuiTreeNodeFlags      TreeFlags;$/;"	m	struct:ImGuiTreeNodeStackData	typeref:typename:ImGuiTreeNodeFlags
TreeGetNextNodeInVisibleOrder	imgui_demo.cpp	/^                static ExampleTreeNode* TreeGetNextNodeInVisibleOrder(ExampleTreeNode* curr_node/;"	f	struct:ShowDemoWindowMultiSelect::ExampleTreeFuncs	typeref:typename:ExampleTreeNode *	file:
TreeHasStackDataDepthMask	includes/imgui_internal.h	/^    ImU32                   TreeHasStackDataDepthMask; \/\/ Store whether given depth has ImGuiT/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImU32
TreeNode	imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
TreeNode	imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* str_id, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNode	imgui_widgets.cpp	/^bool ImGui::TreeNode(const void* ptr_id, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeBehavior	imgui_widgets.cpp	/^bool ImGui::TreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char* label, const char/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeExV	imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list a/;"	f	class:ImGui	typeref:typename:bool
TreeNodeExV	imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list a/;"	f	class:ImGui	typeref:typename:bool
TreeNodeGetOpen	imgui_demo.cpp	/^                static bool TreeNodeGetOpen(ExampleTreeNode* node)$/;"	f	struct:ShowDemoWindowMultiSelect::ExampleTreeFuncs	typeref:typename:bool	file:
TreeNodeGetOpen	imgui_widgets.cpp	/^bool ImGui::TreeNodeGetOpen(ImGuiID storage_id)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeSetOpen	imgui_demo.cpp	/^                static void TreeNodeSetOpen(ExampleTreeNode* node, bool open)$/;"	f	struct:ShowDemoWindowMultiSelect::ExampleTreeFuncs	typeref:typename:void	file:
TreeNodeSetOpen	imgui_widgets.cpp	/^void ImGui::TreeNodeSetOpen(ImGuiID storage_id, bool open)$/;"	f	class:ImGui	typeref:typename:void
TreeNodeStack	includes/imgui_internal.h	/^    ImVector<ImGuiTreeNodeStackData>TreeNodeStack;              \/\/ Stack for TreeNode()$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiTreeNodeStackData>
TreeNodeStoreStackData	imgui_widgets.cpp	/^static void TreeNodeStoreStackData(ImGuiTreeNodeFlags flags)$/;"	f	typeref:typename:void	file:
TreeNodeUpdateNextOpen	imgui_widgets.cpp	/^bool ImGui::TreeNodeUpdateNextOpen(ImGuiID storage_id, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeV	imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const char* str_id, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeV	imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const void* ptr_id, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:bool
TreePop	imgui_widgets.cpp	/^void ImGui::TreePop()$/;"	f	class:ImGui	typeref:typename:void
TreePush	imgui_widgets.cpp	/^void ImGui::TreePush(const char* str_id)$/;"	f	class:ImGui	typeref:typename:void
TreePush	imgui_widgets.cpp	/^void ImGui::TreePush(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:void
TreePushOverrideID	imgui_widgets.cpp	/^void ImGui::TreePushOverrideID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
TreeSetAllInOpenNodes	imgui_demo.cpp	/^                static void TreeSetAllInOpenNodes(ExampleTreeNode* node, ImGuiSelectionBasicStor/;"	f	struct:ShowDemoWindowMultiSelect::ExampleTreeFuncs	typeref:typename:void	file:
TryGetMapData	includes/imgui_internal.h	/^    T*          TryGetMapData(ImPoolIdx n)          { int idx = Map.Data[n].val_i; if (idx == -1/;"	f	struct:ImPool	typeref:typename:T *
Type	imgui_demo.cpp	/^                const char*     Type;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:const char *	file:
Type	imgui_demo.cpp	/^    int     Type;$/;"	m	struct:ExampleAsset	typeref:typename:int	file:
Type	imgui_draw.cpp	/^    ImTriangulatorNodeType  Type;$/;"	m	struct:ImTriangulatorNode	typeref:typename:ImTriangulatorNodeType	file:
Type	includes/imgui.h	/^    ImGuiSelectionRequestType   Type;           \/\/  ms:w, app:r     \/  ms:w, app:r   \/\/ Req/;"	m	struct:ImGuiSelectionRequest	typeref:typename:ImGuiSelectionRequestType
Type	includes/imgui_internal.h	/^    ImGuiContextHookType        Type;$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiContextHookType
Type	includes/imgui_internal.h	/^    ImGuiDataType   Type;$/;"	m	struct:ImGuiDataVarInfo	typeref:typename:ImGuiDataType
Type	includes/imgui_internal.h	/^    ImGuiInputEventType             Type;$/;"	m	struct:ImGuiInputEvent	typeref:typename:ImGuiInputEventType
TypeHash	includes/imgui_internal.h	/^    ImGuiID     TypeHash;       \/\/ == ImHashStr(TypeName)$/;"	m	struct:ImGuiSettingsHandler	typeref:typename:ImGuiID
TypeName	includes/imgui_internal.h	/^    const char* TypeName;       \/\/ Short description stored in .ini file. Disallowed character/;"	m	struct:ImGuiSettingsHandler	typeref:typename:const char *
TypingSelectFindBestLeadingMatch	imgui_widgets.cpp	/^int ImGui::TypingSelectFindBestLeadingMatch(ImGuiTypingSelectRequest* req, int items_count, cons/;"	f	class:ImGui	typeref:typename:int
TypingSelectFindMatch	imgui_widgets.cpp	/^int ImGui::TypingSelectFindMatch(ImGuiTypingSelectRequest* req, int items_count, const char* (*g/;"	f	class:ImGui	typeref:typename:int
TypingSelectFindNextSingleCharMatch	imgui_widgets.cpp	/^int ImGui::TypingSelectFindNextSingleCharMatch(ImGuiTypingSelectRequest* req, int items_count, c/;"	f	class:ImGui	typeref:typename:int
TypingSelectState	includes/imgui_internal.h	/^    ImGuiTypingSelectState  TypingSelectState;                  \/\/ State for GetTypingSelectRe/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTypingSelectState
U0	includes/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
U1	includes/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
UID	imgui_demo.cpp	/^    int                         UID = 0;$/;"	m	struct:ExampleTreeNode	typeref:typename:int	file:
UID	imgui_demo.cpp	/^    int         UID;        \/\/ Unique ID (necessary as we can change title)$/;"	m	struct:MyDocument	typeref:typename:int	file:
UnclipMode	includes/imgui_internal.h	/^    bool                    UnclipMode;         \/\/ (Temp\/Transient, here in hot area). Set\/c/;"	m	struct:ImGuiBoxSelectState	typeref:typename:bool
UnclipRect	includes/imgui_internal.h	/^    ImRect                  UnclipRect;         \/\/ Rectangle where ItemAdd() clipping may be t/;"	m	struct:ImGuiBoxSelectState	typeref:typename:ImRect
Unindent	imgui.cpp	/^void ImGui::Unindent(float indent_w)$/;"	f	class:ImGui	typeref:typename:void
Unlink	imgui_draw.cpp	/^    void    Unlink()        { Next->Prev = Prev; Prev->Next = Next; }$/;"	f	struct:ImTriangulatorNode	typeref:typename:void	file:
UnpackAccumulativeOffsetsIntoRanges	imgui_draw.cpp	/^static void UnpackAccumulativeOffsetsIntoRanges(int base_codepoint, const short* accumulative_of/;"	f	typeref:typename:void	file:
UnpackBitVectorToFlatIndexList	imgui_draw.cpp	/^static void UnpackBitVectorToFlatIndexList(const ImBitVector* in, ImVector<int>* out)$/;"	f	typeref:typename:void	file:
Update	imgui_widgets.cpp	/^void ImGuiMenuColumns::Update(float spacing, bool window_reappearing)$/;"	f	class:ImGuiMenuColumns	typeref:typename:void
UpdateAliasKey	imgui.cpp	/^static void UpdateAliasKey(ImGuiKey key, bool v, float analog_value)$/;"	f	typeref:typename:void	file:
UpdateDebugToolFlashStyleColor	imgui.cpp	/^void ImGui::UpdateDebugToolFlashStyleColor()$/;"	f	class:ImGui	typeref:typename:void
UpdateDebugToolItemPicker	imgui.cpp	/^void ImGui::UpdateDebugToolItemPicker()$/;"	f	class:ImGui	typeref:typename:void
UpdateDebugToolStackQueries	imgui.cpp	/^void ImGui::UpdateDebugToolStackQueries()$/;"	f	class:ImGui	typeref:typename:void
UpdateHoveredWindowAndCaptureFlags	imgui.cpp	/^void ImGui::UpdateHoveredWindowAndCaptureFlags()$/;"	f	class:ImGui	typeref:typename:void
UpdateInputEvents	imgui.cpp	/^void ImGui::UpdateInputEvents(bool trickle_fast_inputs)$/;"	f	class:ImGui	typeref:typename:void
UpdateKeyRoutingTable	imgui.cpp	/^static void ImGui::UpdateKeyRoutingTable(ImGuiKeyRoutingTable* rt)$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateKeyboardInputs	imgui.cpp	/^static void ImGui::UpdateKeyboardInputs()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateLayoutSizes	imgui_demo.cpp	/^    void UpdateLayoutSizes(float avail_width)$/;"	f	struct:ExampleAssetsBrowser	typeref:typename:void	file:
UpdateMouseInputs	imgui.cpp	/^static void ImGui::UpdateMouseInputs()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateMouseMovingWindowEndFrame	imgui.cpp	/^void ImGui::UpdateMouseMovingWindowEndFrame()$/;"	f	class:ImGui	typeref:typename:void
UpdateMouseMovingWindowNewFrame	imgui.cpp	/^void ImGui::UpdateMouseMovingWindowNewFrame()$/;"	f	class:ImGui	typeref:typename:void
UpdateMouseWheel	imgui.cpp	/^void ImGui::UpdateMouseWheel()$/;"	f	class:ImGui	typeref:typename:void
UpdateSettings	imgui.cpp	/^void ImGui::UpdateSettings()$/;"	f	class:ImGui	typeref:typename:void
UpdateViewportsNewFrame	imgui.cpp	/^static void ImGui::UpdateViewportsNewFrame()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateWindowInFocusOrderList	imgui.cpp	/^static void ImGui::UpdateWindowInFocusOrderList(ImGuiWindow* window, bool just_created, ImGuiWin/;"	f	class:ImGui	typeref:typename:void	file:
UpdateWindowManualResize	imgui.cpp	/^static int ImGui::UpdateWindowManualResize(ImGuiWindow* window, const ImVec2& size_auto_fit, int/;"	f	class:ImGui	typeref:typename:int	file:
UpdateWindowParentAndRootLinks	imgui.cpp	/^void ImGui::UpdateWindowParentAndRootLinks(ImGuiWindow* window, ImGuiWindowFlags flags, ImGuiWin/;"	f	class:ImGui	typeref:typename:void
UpdateWindowSkipRefresh	imgui.cpp	/^void ImGui::UpdateWindowSkipRefresh(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
UpdateWorkRect	includes/imgui_internal.h	/^    void    UpdateWorkRect()            { WorkPos = CalcWorkRectPos(WorkInsetMin); WorkSize = Ca/;"	f	struct:ImGuiViewportP	typeref:typename:void
Used8kPagesMap	includes/imgui.h	/^    ImU8                        Used8kPagesMap[(IM_UNICODE_CODEPOINT_MAX+1)\/8192\/8]; \/\/ 1 by/;"	m	struct:ImFont	typeref:typename:ImU8[]
UsedChars	includes/imgui.h	/^    ImVector<ImU32> UsedChars;            \/\/ Store 1-bit per Unicode code point (0=unused, 1=u/;"	m	struct:ImFontGlyphRangesBuilder	typeref:typename:ImVector<ImU32>
UserCallback	includes/imgui.h	/^    ImDrawCallback  UserCallback;       \/\/ 4-8  \/\/ If != NULL, call the function instead of /;"	m	struct:ImDrawCmd	typeref:typename:ImDrawCallback
UserCallbackData	includes/imgui.h	/^    void*           UserCallbackData;   \/\/ 4-8  \/\/ Callback user data (when UserCallback != /;"	m	struct:ImDrawCmd	typeref:typename:void *
UserCallbackDataOffset	includes/imgui.h	/^    int             UserCallbackDataOffset;\/\/ 4 \/\/ [Internal] Offset of callback user data w/;"	m	struct:ImDrawCmd	typeref:typename:int
UserCallbackDataSize	includes/imgui.h	/^    int             UserCallbackDataSize;  \/\/ 4 \/\/ Size of callback user data when using sto/;"	m	struct:ImDrawCmd	typeref:typename:int
UserData	imgui_widgets.cpp	/^struct ImGuiGetNameFromIndexOldToNewCallbackData { void* UserData; bool (*OldCallback)(void*, in/;"	m	struct:ImGuiGetNameFromIndexOldToNewCallbackData	typeref:typename:void *	file:
UserData	includes/imgui.h	/^    void*                       UserData;           \/\/ Store your own atlas related user-data /;"	m	struct:ImFontAtlas	typeref:typename:void *
UserData	includes/imgui.h	/^    void*               UserData;       \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:void *
UserData	includes/imgui.h	/^    void*           UserData;       \/\/ = NULL   \/\/ User data for use by adapter function    /;"	m	struct:ImGuiSelectionBasicStorage	typeref:typename:void *
UserData	includes/imgui.h	/^    void*           UserData;       \/\/ User data for use by adapter function                  /;"	m	struct:ImGuiSelectionExternalStorage	typeref:typename:void *
UserData	includes/imgui.h	/^    void*       UserData;                       \/\/ = NULL           \/\/ Store your own data.$/;"	m	struct:ImGuiIO	typeref:typename:void *
UserData	includes/imgui.h	/^    void*   UserData;       \/\/ Read-only.   What user passed to SetNextWindowSizeConstraints()/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:void *
UserData	includes/imgui_internal.h	/^    void*                       UserData;$/;"	m	struct:ImGuiContextHook	typeref:typename:void *
UserData	includes/imgui_internal.h	/^    void*       UserData;$/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void *
UserID	includes/imgui_internal.h	/^    ImGuiID                 UserID;                         \/\/ Optional, value passed to Table/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiID
UserID	includes/imgui_internal.h	/^    ImGuiID                 UserID;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiID
UserOuterSize	includes/imgui_internal.h	/^    ImVec2                      UserOuterSize;              \/\/ outer_size.x passed to BeginTab/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
V0	includes/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
V1	includes/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
VIOLET	includes/raylib.h	/^#define VIOLET /;"	d
VSliderFloat	imgui_widgets.cpp	/^bool ImGui::VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_m/;"	f	class:ImGui	typeref:typename:bool
VSliderInt	imgui_widgets.cpp	/^bool ImGui::VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, cons/;"	f	class:ImGui	typeref:typename:bool
VSliderScalar	imgui_widgets.cpp	/^bool ImGui::VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* /;"	f	class:ImGui	typeref:typename:bool
Valid	includes/imgui.h	/^    bool                Valid;              \/\/ Only valid after Render() is called and before /;"	m	struct:ImDrawData	typeref:typename:bool
Value	imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	m	struct:EditTableSizingFlags::EnumDesc	typeref:typename:ImGuiTableFlags	file:
Value	imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, bool b)$/;"	f	class:ImGui	typeref:typename:void
Value	imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, float v, const char* float_format)$/;"	f	class:ImGui	typeref:typename:void
Value	imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, int v)$/;"	f	class:ImGui	typeref:typename:void
Value	imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, unsigned int v)$/;"	f	class:ImGui	typeref:typename:void
Value	includes/imgui.h	/^    ImVec4          Value;$/;"	m	struct:ImColor	typeref:typename:ImVec4
Values	imgui_widgets.cpp	/^    const float* Values;$/;"	m	struct:ImGuiPlotArrayGetterData	typeref:typename:const float *	file:
VarIdx	includes/imgui_internal.h	/^    ImGuiStyleVar   VarIdx;$/;"	m	struct:ImGuiStyleMod	typeref:typename:ImGuiStyleVar
Vector2	includes/raylib.h	/^typedef struct Vector2 {$/;"	s
Vector2	includes/raylib.h	/^} Vector2;$/;"	t	typeref:struct:Vector2
Vector2	includes/raymath.h	/^typedef struct Vector2 {$/;"	s
Vector2	includes/raymath.h	/^} Vector2;$/;"	t	typeref:struct:Vector2
Vector2Add	includes/raymath.h	/^RMAPI Vector2 Vector2Add(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2
Vector2AddValue	includes/raymath.h	/^RMAPI Vector2 Vector2AddValue(Vector2 v, float add)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Angle	includes/raymath.h	/^RMAPI float Vector2Angle(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI float
Vector2Clamp	includes/raymath.h	/^RMAPI Vector2 Vector2Clamp(Vector2 v, Vector2 min, Vector2 max)$/;"	f	typeref:typename:RMAPI Vector2
Vector2ClampValue	includes/raymath.h	/^RMAPI Vector2 Vector2ClampValue(Vector2 v, float min, float max)$/;"	f	typeref:typename:RMAPI Vector2
Vector2CrossProduct	includes/raymath.h	/^RMAPI float Vector2CrossProduct(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI float
Vector2Distance	includes/raymath.h	/^RMAPI float Vector2Distance(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI float
Vector2DistanceSqr	includes/raymath.h	/^RMAPI float Vector2DistanceSqr(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI float
Vector2Divide	includes/raymath.h	/^RMAPI Vector2 Vector2Divide(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2
Vector2DotProduct	includes/raymath.h	/^RMAPI float Vector2DotProduct(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI float
Vector2Equals	includes/raymath.h	/^RMAPI int Vector2Equals(Vector2 p, Vector2 q)$/;"	f	typeref:typename:RMAPI int
Vector2Invert	includes/raymath.h	/^RMAPI Vector2 Vector2Invert(Vector2 v)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Length	includes/raymath.h	/^RMAPI float Vector2Length(Vector2 v)$/;"	f	typeref:typename:RMAPI float
Vector2LengthSqr	includes/raymath.h	/^RMAPI float Vector2LengthSqr(Vector2 v)$/;"	f	typeref:typename:RMAPI float
Vector2Lerp	includes/raymath.h	/^RMAPI Vector2 Vector2Lerp(Vector2 v1, Vector2 v2, float amount)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Limit	includes/raymath.h	/^RMAPI Vector2 Vector2Limit(Vector2 v, float max)$/;"	f	typeref:typename:RMAPI Vector2
Vector2LineAngle	includes/raymath.h	/^RMAPI float Vector2LineAngle(Vector2 start, Vector2 end)$/;"	f	typeref:typename:RMAPI float
Vector2Max	includes/raymath.h	/^RMAPI Vector2 Vector2Max(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Min	includes/raymath.h	/^RMAPI Vector2 Vector2Min(Vector2 v, float min)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Min	includes/raymath.h	/^RMAPI Vector2 Vector2Min(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2
Vector2MoveTowards	includes/raymath.h	/^RMAPI Vector2 Vector2MoveTowards(Vector2 v, Vector2 target, float maxDistance)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Multiply	includes/raymath.h	/^RMAPI Vector2 Vector2Multiply(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Negate	includes/raymath.h	/^RMAPI Vector2 Vector2Negate(Vector2 v)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Normalize	includes/raymath.h	/^RMAPI Vector2 Vector2Normalize(Vector2 v)$/;"	f	typeref:typename:RMAPI Vector2
Vector2One	includes/raymath.h	/^RMAPI Vector2 Vector2One(void)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Ones	includes/raymath.h	/^static constexpr Vector2 Vector2Ones = { 1, 1 };$/;"	v	typeref:typename:Vector2
Vector2Reflect	includes/raymath.h	/^RMAPI Vector2 Vector2Reflect(Vector2 v, Vector2 normal)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Refract	includes/raymath.h	/^RMAPI Vector2 Vector2Refract(Vector2 v, Vector2 n, float r)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Rotate	includes/raymath.h	/^RMAPI Vector2 Vector2Rotate(Vector2 v, float angle)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Scale	includes/raymath.h	/^RMAPI Vector2 Vector2Scale(Vector2 v, float scale)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Subtract	includes/raymath.h	/^RMAPI Vector2 Vector2Subtract(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2
Vector2SubtractValue	includes/raymath.h	/^RMAPI Vector2 Vector2SubtractValue(Vector2 v, float sub)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Transform	includes/raymath.h	/^RMAPI Vector2 Vector2Transform(Vector2 v, Matrix mat)$/;"	f	typeref:typename:RMAPI Vector2
Vector2UnitX	includes/raymath.h	/^static constexpr Vector2 Vector2UnitX = { 1, 0 };$/;"	v	typeref:typename:Vector2
Vector2UnitY	includes/raymath.h	/^static constexpr Vector2 Vector2UnitY = { 0, 1 };$/;"	v	typeref:typename:Vector2
Vector2Zero	includes/raymath.h	/^RMAPI Vector2 Vector2Zero(void)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Zeros	includes/raymath.h	/^static constexpr Vector2 Vector2Zeros = { 0, 0 };$/;"	v	typeref:typename:Vector2
Vector3	includes/raylib.h	/^typedef struct Vector3 {$/;"	s
Vector3	includes/raylib.h	/^} Vector3;$/;"	t	typeref:struct:Vector3
Vector3	includes/raymath.h	/^typedef struct Vector3 {$/;"	s
Vector3	includes/raymath.h	/^} Vector3;$/;"	t	typeref:struct:Vector3
Vector3Add	includes/raymath.h	/^RMAPI Vector3 Vector3Add(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3AddValue	includes/raymath.h	/^RMAPI Vector3 Vector3AddValue(Vector3 v, float add)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Angle	includes/raymath.h	/^RMAPI float Vector3Angle(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI float
Vector3Barycenter	includes/raymath.h	/^RMAPI Vector3 Vector3Barycenter(Vector3 p, Vector3 a, Vector3 b, Vector3 c)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Clamp	includes/raymath.h	/^RMAPI Vector3 Vector3Clamp(Vector3 v, Vector3 min, Vector3 max)$/;"	f	typeref:typename:RMAPI Vector3
Vector3ClampValue	includes/raymath.h	/^RMAPI Vector3 Vector3ClampValue(Vector3 v, float min, float max)$/;"	f	typeref:typename:RMAPI Vector3
Vector3CrossProduct	includes/raymath.h	/^RMAPI Vector3 Vector3CrossProduct(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3CubicHermite	includes/raymath.h	/^RMAPI Vector3 Vector3CubicHermite(Vector3 v1, Vector3 tangent1, Vector3 v2, Vector3 tangent2, fl/;"	f	typeref:typename:RMAPI Vector3
Vector3Distance	includes/raymath.h	/^RMAPI float Vector3Distance(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI float
Vector3DistanceSqr	includes/raymath.h	/^RMAPI float Vector3DistanceSqr(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI float
Vector3Divide	includes/raymath.h	/^RMAPI Vector3 Vector3Divide(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3DotProduct	includes/raymath.h	/^RMAPI float Vector3DotProduct(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI float
Vector3Equals	includes/raymath.h	/^RMAPI int Vector3Equals(Vector3 p, Vector3 q)$/;"	f	typeref:typename:RMAPI int
Vector3Invert	includes/raymath.h	/^RMAPI Vector3 Vector3Invert(Vector3 v)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Length	includes/raymath.h	/^RMAPI float Vector3Length(const Vector3 v)$/;"	f	typeref:typename:RMAPI float
Vector3LengthSqr	includes/raymath.h	/^RMAPI float Vector3LengthSqr(const Vector3 v)$/;"	f	typeref:typename:RMAPI float
Vector3Lerp	includes/raymath.h	/^RMAPI Vector3 Vector3Lerp(Vector3 v1, Vector3 v2, float amount)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Max	includes/raymath.h	/^RMAPI Vector3 Vector3Max(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Min	includes/raymath.h	/^RMAPI Vector3 Vector3Min(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3MoveTowards	includes/raymath.h	/^RMAPI Vector3 Vector3MoveTowards(Vector3 v, Vector3 target, float maxDistance)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Multiply	includes/raymath.h	/^RMAPI Vector3 Vector3Multiply(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Negate	includes/raymath.h	/^RMAPI Vector3 Vector3Negate(Vector3 v)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Normalize	includes/raymath.h	/^RMAPI Vector3 Vector3Normalize(Vector3 v)$/;"	f	typeref:typename:RMAPI Vector3
Vector3One	includes/raymath.h	/^RMAPI Vector3 Vector3One(void)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Ones	includes/raymath.h	/^static constexpr Vector3 Vector3Ones = { 1, 1, 1 };$/;"	v	typeref:typename:Vector3
Vector3OrthoNormalize	includes/raymath.h	/^RMAPI void Vector3OrthoNormalize(Vector3 *v1, Vector3 *v2)$/;"	f	typeref:typename:RMAPI void
Vector3Perpendicular	includes/raymath.h	/^RMAPI Vector3 Vector3Perpendicular(Vector3 v)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Project	includes/raymath.h	/^RMAPI Vector3 Vector3Project(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Reflect	includes/raymath.h	/^RMAPI Vector3 Vector3Reflect(Vector3 v, Vector3 normal)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Refract	includes/raymath.h	/^RMAPI Vector3 Vector3Refract(Vector3 v, Vector3 n, float r)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Reject	includes/raymath.h	/^RMAPI Vector3 Vector3Reject(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3RotateByAxisAngle	includes/raymath.h	/^RMAPI Vector3 Vector3RotateByAxisAngle(Vector3 v, Vector3 axis, float angle)$/;"	f	typeref:typename:RMAPI Vector3
Vector3RotateByQuaternion	includes/raymath.h	/^RMAPI Vector3 Vector3RotateByQuaternion(Vector3 v, Quaternion q)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Scale	includes/raymath.h	/^RMAPI Vector3 Vector3Scale(Vector3 v, float scalar)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Subtract	includes/raymath.h	/^RMAPI Vector3 Vector3Subtract(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3SubtractValue	includes/raymath.h	/^RMAPI Vector3 Vector3SubtractValue(Vector3 v, float sub)$/;"	f	typeref:typename:RMAPI Vector3
Vector3ToFloat	includes/raymath.h	/^    #define Vector3ToFloat(/;"	d
Vector3ToFloatV	includes/raymath.h	/^RMAPI float3 Vector3ToFloatV(Vector3 v)$/;"	f	typeref:typename:RMAPI float3
Vector3Transform	includes/raymath.h	/^RMAPI Vector3 Vector3Transform(Vector3 v, Matrix mat)$/;"	f	typeref:typename:RMAPI Vector3
Vector3UnitX	includes/raymath.h	/^static constexpr Vector3 Vector3UnitX = { 1, 0, 0 };$/;"	v	typeref:typename:Vector3
Vector3UnitY	includes/raymath.h	/^static constexpr Vector3 Vector3UnitY = { 0, 1, 0 };$/;"	v	typeref:typename:Vector3
Vector3UnitZ	includes/raymath.h	/^static constexpr Vector3 Vector3UnitZ = { 0, 0, 1 };$/;"	v	typeref:typename:Vector3
Vector3Unproject	includes/raymath.h	/^RMAPI Vector3 Vector3Unproject(Vector3 source, Matrix projection, Matrix view)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Zero	includes/raymath.h	/^RMAPI Vector3 Vector3Zero(void)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Zeros	includes/raymath.h	/^static constexpr Vector3 Vector3Zeros = { 0, 0, 0 };$/;"	v	typeref:typename:Vector3
Vector4	includes/raylib.h	/^typedef struct Vector4 {$/;"	s
Vector4	includes/raylib.h	/^} Vector4;$/;"	t	typeref:struct:Vector4
Vector4	includes/raymath.h	/^typedef struct Vector4 {$/;"	s
Vector4	includes/raymath.h	/^} Vector4;$/;"	t	typeref:struct:Vector4
Vector4Add	includes/raymath.h	/^RMAPI Vector4 Vector4Add(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI Vector4
Vector4AddValue	includes/raymath.h	/^RMAPI Vector4 Vector4AddValue(Vector4 v, float add)$/;"	f	typeref:typename:RMAPI Vector4
Vector4Distance	includes/raymath.h	/^RMAPI float Vector4Distance(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI float
Vector4DistanceSqr	includes/raymath.h	/^RMAPI float Vector4DistanceSqr(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI float
Vector4Divide	includes/raymath.h	/^RMAPI Vector4 Vector4Divide(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI Vector4
Vector4DotProduct	includes/raymath.h	/^RMAPI float Vector4DotProduct(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI float
Vector4Equals	includes/raymath.h	/^RMAPI int Vector4Equals(Vector4 p, Vector4 q)$/;"	f	typeref:typename:RMAPI int
Vector4Invert	includes/raymath.h	/^RMAPI Vector4 Vector4Invert(Vector4 v)$/;"	f	typeref:typename:RMAPI Vector4
Vector4Length	includes/raymath.h	/^RMAPI float Vector4Length(Vector4 v)$/;"	f	typeref:typename:RMAPI float
Vector4LengthSqr	includes/raymath.h	/^RMAPI float Vector4LengthSqr(Vector4 v)$/;"	f	typeref:typename:RMAPI float
Vector4Lerp	includes/raymath.h	/^RMAPI Vector4 Vector4Lerp(Vector4 v1, Vector4 v2, float amount)$/;"	f	typeref:typename:RMAPI Vector4
Vector4Max	includes/raymath.h	/^RMAPI Vector4 Vector4Max(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI Vector4
Vector4Min	includes/raymath.h	/^RMAPI Vector4 Vector4Min(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI Vector4
Vector4MoveTowards	includes/raymath.h	/^RMAPI Vector4 Vector4MoveTowards(Vector4 v, Vector4 target, float maxDistance)$/;"	f	typeref:typename:RMAPI Vector4
Vector4Multiply	includes/raymath.h	/^RMAPI Vector4 Vector4Multiply(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI Vector4
Vector4Negate	includes/raymath.h	/^RMAPI Vector4 Vector4Negate(Vector4 v)$/;"	f	typeref:typename:RMAPI Vector4
Vector4Normalize	includes/raymath.h	/^RMAPI Vector4 Vector4Normalize(Vector4 v)$/;"	f	typeref:typename:RMAPI Vector4
Vector4One	includes/raymath.h	/^RMAPI Vector4 Vector4One(void)$/;"	f	typeref:typename:RMAPI Vector4
Vector4Ones	includes/raymath.h	/^static constexpr Vector4 Vector4Ones = { 1, 1, 1, 1 };$/;"	v	typeref:typename:Vector4
Vector4Scale	includes/raymath.h	/^RMAPI Vector4 Vector4Scale(Vector4 v, float scale)$/;"	f	typeref:typename:RMAPI Vector4
Vector4Subtract	includes/raymath.h	/^RMAPI Vector4 Vector4Subtract(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI Vector4
Vector4SubtractValue	includes/raymath.h	/^RMAPI Vector4 Vector4SubtractValue(Vector4 v, float add)$/;"	f	typeref:typename:RMAPI Vector4
Vector4UnitW	includes/raymath.h	/^static constexpr Vector4 Vector4UnitW = { 0, 0, 0, 1 };$/;"	v	typeref:typename:Vector4
Vector4UnitX	includes/raymath.h	/^static constexpr Vector4 Vector4UnitX = { 1, 0, 0, 0 };$/;"	v	typeref:typename:Vector4
Vector4UnitY	includes/raymath.h	/^static constexpr Vector4 Vector4UnitY = { 0, 1, 0, 0 };$/;"	v	typeref:typename:Vector4
Vector4UnitZ	includes/raymath.h	/^static constexpr Vector4 Vector4UnitZ = { 0, 0, 1, 0 };$/;"	v	typeref:typename:Vector4
Vector4Zero	includes/raymath.h	/^RMAPI Vector4 Vector4Zero(void)$/;"	f	typeref:typename:RMAPI Vector4
Vector4Zeros	includes/raymath.h	/^static constexpr Vector4 Vector4Zeros = { 0, 0, 0, 0 };$/;"	v	typeref:typename:Vector4
Viewport	includes/imgui_internal.h	/^    ImGuiViewportP*         Viewport;                           \/\/ Always set in Begin(). Inac/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiViewportP *
Viewports	includes/imgui_internal.h	/^    ImVector<ImGuiViewportP*> Viewports;                        \/\/ Active viewports (Size==1 i/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiViewportP * >
Visible	includes/imgui.h	/^    unsigned int    Visible : 1;        \/\/ Flag to indicate glyph has no visible pixels (e.g. /;"	m	struct:ImFontGlyph	typeref:typename:unsigned int:1
VisibleMaskByIndex	includes/imgui_internal.h	/^    ImBitArrayPtr               VisibleMaskByIndex;         \/\/ Column Index -> IsVisibleX|IsVi/;"	m	struct:ImGuiTable	typeref:typename:ImBitArrayPtr
VisibleNode	imgui_demo.cpp	/^    ExampleTreeNode*    VisibleNode = NULL;$/;"	m	struct:ExampleAppPropertyEditor	typeref:typename:ExampleTreeNode *	file:
VisibleTabId	includes/imgui_internal.h	/^    ImGuiID             VisibleTabId;           \/\/ Can occasionally be != SelectedTabId (e.g. /;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
VisibleTabWasSubmitted	includes/imgui_internal.h	/^    bool                VisibleTabWasSubmitted;$/;"	m	struct:ImGuiTabBar	typeref:typename:bool
VrDeviceInfo	includes/raylib.h	/^typedef struct VrDeviceInfo {$/;"	s
VrDeviceInfo	includes/raylib.h	/^} VrDeviceInfo;$/;"	t	typeref:struct:VrDeviceInfo
VrStereoConfig	includes/raylib.h	/^typedef struct VrStereoConfig {$/;"	s
VrStereoConfig	includes/raylib.h	/^} VrStereoConfig;$/;"	t	typeref:struct:VrStereoConfig
VtxBuffer	includes/imgui.h	/^    ImVector<ImDrawVert>    VtxBuffer;          \/\/ Vertex buffer.$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawVert>
VtxOffset	includes/imgui.h	/^    unsigned int    VtxOffset;          \/\/ 4    \/\/ Start offset in vertex buffer. ImGuiBacke/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
VtxOffset	includes/imgui.h	/^    unsigned int    VtxOffset;$/;"	m	struct:ImDrawCmdHeader	typeref:typename:unsigned int
WHITE	includes/raylib.h	/^#define WHITE /;"	d
WIDTH	includes/classes/Boid.hpp	/^# define WIDTH /;"	d
WIN32_LEAN_AND_MEAN	imgui.cpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WINDOWS_HOVER_PADDING	imgui.cpp	/^static const float WINDOWS_HOVER_PADDING                    = 4.0f;     \/\/ Extend outside wind/;"	v	typeref:typename:const float	file:
WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER	imgui.cpp	/^static const float WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER    = 0.70f;    \/\/ Lock scrolled windo/;"	v	typeref:typename:const float	file:
WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER	imgui.cpp	/^static const float WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER = 0.04f;    \/\/ Reduce visual noise/;"	v	typeref:typename:const float	file:
WINDOW_HEIGHT	includes/game.hpp	/^# define WINDOW_HEIGHT /;"	d
WINDOW_WIDTH	includes/game.hpp	/^# define WINDOW_WIDTH /;"	d
WINGDIAPI	includes/rlgl.h	/^            #define WINGDIAPI /;"	d
WRT_Content	imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710403	file:
WRT_ContentIdeal	imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710403	file:
WRT_ContentRegionRect	imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710403	file:
WRT_Count	imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710403	file:
WRT_InnerClipRect	imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710403	file:
WRT_InnerRect	imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710403	file:
WRT_OuterRect	imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710403	file:
WRT_OuterRectClipped	imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710403	file:
WRT_WorkRect	imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon624f85710403	file:
WantApply	includes/imgui_internal.h	/^    bool                        WantApply;              \/\/ Set when loaded from .ini data (to /;"	m	struct:ImGuiTableSettings	typeref:typename:bool
WantApply	includes/imgui_internal.h	/^    bool        WantApply;      \/\/ Set when loaded from .ini data (to enable merging\/loading /;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
WantCaptureKeyboard	includes/imgui.h	/^    bool        WantCaptureKeyboard;                \/\/ Set when Dear ImGui will use keyboard i/;"	m	struct:ImGuiIO	typeref:typename:bool
WantCaptureKeyboardNextFrame	includes/imgui_internal.h	/^    int                     WantCaptureKeyboardNextFrame;       \/\/ "$/;"	m	struct:ImGuiContext	typeref:typename:int
WantCaptureMouse	includes/imgui.h	/^    bool        WantCaptureMouse;                   \/\/ Set when Dear ImGui will use mouse inpu/;"	m	struct:ImGuiIO	typeref:typename:bool
WantCaptureMouseNextFrame	includes/imgui_internal.h	/^    int                     WantCaptureMouseNextFrame;          \/\/ Explicit capture override v/;"	m	struct:ImGuiContext	typeref:typename:int
WantCaptureMouseUnlessPopupClose	includes/imgui.h	/^    bool        WantCaptureMouseUnlessPopupClose;   \/\/ Alternative to WantCaptureMouse: (WantC/;"	m	struct:ImGuiIO	typeref:typename:bool
WantClose	includes/imgui_internal.h	/^    bool                WantClose;              \/\/ Marked as closed by SetTabItemClosed()$/;"	m	struct:ImGuiTabItem	typeref:typename:bool
WantCollapseToggle	includes/imgui_internal.h	/^    bool                    WantCollapseToggle;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
WantDelete	includes/imgui_internal.h	/^    bool        WantDelete;     \/\/ Set to invalidate\/delete the settings entry$/;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
WantLayout	includes/imgui_internal.h	/^    bool                WantLayout;$/;"	m	struct:ImGuiTabBar	typeref:typename:bool
WantReloadUserBuf	includes/imgui_internal.h	/^    bool                    WantReloadUserBuf;      \/\/ force a reload of user buf so it may be/;"	m	struct:ImGuiInputTextState	typeref:typename:bool
WantSaveIniSettings	includes/imgui.h	/^    bool        WantSaveIniSettings;                \/\/ When manual .ini load\/save is active (/;"	m	struct:ImGuiIO	typeref:typename:bool
WantSetMousePos	includes/imgui.h	/^    bool        WantSetMousePos;                    \/\/ MousePos has been altered, backend shou/;"	m	struct:ImGuiIO	typeref:typename:bool
WantTextInput	includes/imgui.h	/^    bool        WantTextInput;                      \/\/ Mobile\/console: when set, you may disp/;"	m	struct:ImGuiIO	typeref:typename:bool
WantTextInputNextFrame	includes/imgui_internal.h	/^    int                     WantTextInputNextFrame;$/;"	m	struct:ImGuiContext	typeref:typename:int
WantVisible	includes/imgui.h	/^    bool    WantVisible;        \/\/ A widget wants the IME to be visible$/;"	m	struct:ImGuiPlatformImeData	typeref:typename:bool
WasActive	includes/imgui_internal.h	/^    bool                    WasActive;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
Wave	includes/raylib.h	/^typedef struct Wave {$/;"	s
Wave	includes/raylib.h	/^} Wave;$/;"	t	typeref:struct:Wave
WheelX	includes/imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseWheel	typeref:typename:float
WheelY	includes/imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseWheel	typeref:typename:float
WheelingAxisAvg	includes/imgui_internal.h	/^    ImVec2                  WheelingAxisAvg;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WheelingWindow	includes/imgui_internal.h	/^    ImGuiWindow*            WheelingWindow;                     \/\/ Track the window we started/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
WheelingWindowRefMousePos	includes/imgui_internal.h	/^    ImVec2                  WheelingWindowRefMousePos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WheelingWindowReleaseTimer	includes/imgui_internal.h	/^    float                   WheelingWindowReleaseTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
WheelingWindowScrolledFrame	includes/imgui_internal.h	/^    int                     WheelingWindowScrolledFrame;$/;"	m	struct:ImGuiContext	typeref:typename:int
WheelingWindowStartFrame	includes/imgui_internal.h	/^    int                     WheelingWindowStartFrame;           \/\/ This may be set one frame b/;"	m	struct:ImGuiContext	typeref:typename:int
WheelingWindowWheelRemainder	includes/imgui_internal.h	/^    ImVec2                  WheelingWindowWheelRemainder;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WidgetType	imgui_demo.cpp	/^            enum WidgetType { WidgetType_Selectable, WidgetType_TreeNode };$/;"	g	function:ShowDemoWindowMultiSelect	file:
WidgetType_Selectable	imgui_demo.cpp	/^            enum WidgetType { WidgetType_Selectable, WidgetType_TreeNode };$/;"	e	enum:ShowDemoWindowMultiSelect::WidgetType	file:
WidgetType_TreeNode	imgui_demo.cpp	/^            enum WidgetType { WidgetType_Selectable, WidgetType_TreeNode };$/;"	e	enum:ShowDemoWindowMultiSelect::WidgetType	file:
Width	imgui_widgets.cpp	/^    float               Width;                  \/\/ Sum of width of tabs in this section (after/;"	m	struct:ImGuiTabBarSection	typeref:typename:float	file:
Width	includes/imgui.h	/^    unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
Width	includes/imgui_internal.h	/^    float                       Width;              \/\/ Set by SetNextItemWidth()$/;"	m	struct:ImGuiNextItemData	typeref:typename:float
Width	includes/imgui_internal.h	/^    float               Width;                  \/\/ Width currently displayed$/;"	m	struct:ImGuiTabItem	typeref:typename:float
Width	includes/imgui_internal.h	/^    float       Width;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:float
WidthAllTabs	includes/imgui_internal.h	/^    float               WidthAllTabs;           \/\/ Actual width of all tabs (locked during lay/;"	m	struct:ImGuiTabBar	typeref:typename:float
WidthAllTabsIdeal	includes/imgui_internal.h	/^    float               WidthAllTabsIdeal;      \/\/ Ideal width if all tabs were visible and no/;"	m	struct:ImGuiTabBar	typeref:typename:float
WidthAuto	includes/imgui_internal.h	/^    float                   WidthAuto;                      \/\/ Automatic width$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
WidthGiven	includes/imgui_internal.h	/^    float                   WidthGiven;                     \/\/ Final\/actual width visible == /;"	m	struct:ImGuiTableColumn	typeref:typename:float
WidthMax	includes/imgui_internal.h	/^    float                   WidthMax;                       \/\/ Maximum width (FIXME: overwritt/;"	m	struct:ImGuiTableColumn	typeref:typename:float
WidthOrWeight	includes/imgui_internal.h	/^    float                   WidthOrWeight;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:float
WidthRequest	includes/imgui_internal.h	/^    float                   WidthRequest;                   \/\/ Master width absolute value whe/;"	m	struct:ImGuiTableColumn	typeref:typename:float
Widths	includes/imgui_internal.h	/^    ImU16       Widths[4];          \/\/ Width of:   Icon, Label, Shortcut, Mark  (accumulators /;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16[4]
Window	imgui.ini	/^[Window][###AnimatedTitle]$/;"	s
Window	imgui.ini	/^[Window][Dear ImGui Demo\/Red_BEEF922B]$/;"	s
Window	imgui.ini	/^[Window][Dear ImGui Demo\/ResizableChild_478B81A3]$/;"	s
Window	imgui.ini	/^[Window][Dear ImGui Demo]$/;"	s
Window	imgui.ini	/^[Window][Debug##Default]$/;"	s
Window	imgui.ini	/^[Window][Example: Assets Browser]$/;"	s
Window	imgui.ini	/^[Window][Example: Console]$/;"	s
Window	imgui.ini	/^[Window][Example: Constrained Resize]$/;"	s
Window	imgui.ini	/^[Window][Example: Custom rendering]$/;"	s
Window	imgui.ini	/^[Window][Example: Documents]$/;"	s
Window	imgui.ini	/^[Window][Example: Log]$/;"	s
Window	imgui.ini	/^[Window][Example: Long text display]$/;"	s
Window	imgui.ini	/^[Window][Example: Simple layout\/left pane_244A9CDE]$/;"	s
Window	imgui.ini	/^[Window][Example: Simple layout]$/;"	s
Window	imgui.ini	/^[Window][Flock Settings]$/;"	s
Window	imgui.ini	/^[Window][Flock]$/;"	s
Window	imgui.ini	/^[Window][Same title as another window##1]$/;"	s
Window	imgui.ini	/^[Window][Same title as another window##2]$/;"	s
Window	imgui.ini	/^[Window][Warning]$/;"	s
Window	includes/imgui_internal.h	/^    ImGuiWindow*            Window;$/;"	m	struct:ImGuiBoxSelectState	typeref:typename:ImGuiWindow *
Window	includes/imgui_internal.h	/^    ImGuiWindow*            Window;$/;"	m	struct:ImGuiMultiSelectState	typeref:typename:ImGuiWindow *
Window	includes/imgui_internal.h	/^    ImGuiWindow*            Window;$/;"	m	struct:ImGuiWindowStackData	typeref:typename:ImGuiWindow *
Window	includes/imgui_internal.h	/^    ImGuiWindow*        Window;         \/\/ Init,Move    \/\/ Best candidate window (result->It/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiWindow *
Window	includes/imgui_internal.h	/^    ImGuiWindow*        Window;         \/\/ Resolved on BeginPopup() - may stay unresolved if u/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiWindow *
Window	includes/imgui_internal.h	/^    ImGuiWindow*        Window;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiWindow *
WindowBorderSize	includes/imgui.h	/^    float       WindowBorderSize;           \/\/ Thickness of border around windows. Generally s/;"	m	struct:ImGuiStyle	typeref:typename:float
WindowBorderSize	includes/imgui_internal.h	/^    float                   WindowBorderSize;                   \/\/ Window border size at the t/;"	m	struct:ImGuiWindow	typeref:typename:float
WindowComparerByBeginOrder	imgui.cpp	/^            struct Func { static int IMGUI_CDECL WindowComparerByBeginOrder(const void* lhs, con/;"	f	struct:ImGui::ShowMetricsWindow::Func	typeref:typename:int IMGUI_CDECL	file:
WindowID	includes/imgui_internal.h	/^    ImGuiID             WindowID;$/;"	m	struct:ImGuiFocusScopeData	typeref:typename:ImGuiID
WindowID	includes/imgui_internal.h	/^    ImGuiID     WindowID;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImGuiID
WindowMenuButtonPosition	includes/imgui.h	/^    ImGuiDir    WindowMenuButtonPosition;   \/\/ Side of the collapsing\/docking button in the t/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiDir
WindowMinSize	includes/imgui.h	/^    ImVec2      WindowMinSize;              \/\/ Minimum window size. This is a global setting. /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
WindowPadding	includes/imgui.h	/^    ImVec2      WindowPadding;              \/\/ Padding within a window.$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
WindowPadding	includes/imgui_internal.h	/^    ImVec2                  WindowPadding;                      \/\/ Window padding at the time /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
WindowPosAbsToRel	includes/imgui_internal.h	/^    inline ImVec2           WindowPosAbsToRel(ImGuiWindow* window, const ImVec2& p)  { ImVec2 of/;"	f	namespace:ImGui	typeref:typename:ImVec2
WindowPosRelToAbs	includes/imgui_internal.h	/^    inline ImVec2           WindowPosRelToAbs(ImGuiWindow* window, const ImVec2& p)  { ImVec2 of/;"	f	namespace:ImGui	typeref:typename:ImVec2
WindowRectAbsToRel	includes/imgui_internal.h	/^    inline ImRect           WindowRectAbsToRel(ImGuiWindow* window, const ImRect& r) { ImVec2 of/;"	f	namespace:ImGui	typeref:typename:ImRect
WindowRectRelToAbs	includes/imgui_internal.h	/^    inline ImRect           WindowRectRelToAbs(ImGuiWindow* window, const ImRect& r) { ImVec2 of/;"	f	namespace:ImGui	typeref:typename:ImRect
WindowResizeBorderExpectedRect	includes/imgui_internal.h	/^    ImRect                  WindowResizeBorderExpectedRect;     \/\/ Expected border rect, switc/;"	m	struct:ImGuiContext	typeref:typename:ImRect
WindowResizeRelativeMode	includes/imgui_internal.h	/^    bool                    WindowResizeRelativeMode;$/;"	m	struct:ImGuiContext	typeref:typename:bool
WindowRounding	includes/imgui.h	/^    float       WindowRounding;             \/\/ Radius of window corners rounding. Set to 0.0f /;"	m	struct:ImGuiStyle	typeref:typename:float
WindowRounding	includes/imgui_internal.h	/^    float                   WindowRounding;                     \/\/ Window rounding at the time/;"	m	struct:ImGuiWindow	typeref:typename:float
WindowSettingsHandler_ApplyAll	imgui.cpp	/^static void WindowSettingsHandler_ApplyAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ClearAll	imgui.cpp	/^static void WindowSettingsHandler_ClearAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ReadLine	imgui.cpp	/^static void WindowSettingsHandler_ReadLine(ImGuiContext*, ImGuiSettingsHandler*, void* entry, co/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ReadOpen	imgui.cpp	/^static void* WindowSettingsHandler_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const char* na/;"	f	typeref:typename:void *	file:
WindowSettingsHandler_WriteAll	imgui.cpp	/^static void WindowSettingsHandler_WriteAll(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImG/;"	f	typeref:typename:void	file:
WindowTitleAlign	includes/imgui.h	/^    ImVec2      WindowTitleAlign;           \/\/ Alignment for title bar text. Defaults to (0.0f/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
Windows	includes/imgui_internal.h	/^    ImVector<ImGuiWindow*>  Windows;                            \/\/ Windows, sorted in display /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WindowsActiveCount	includes/imgui_internal.h	/^    int                     WindowsActiveCount;                 \/\/ Number of unique windows su/;"	m	struct:ImGuiContext	typeref:typename:int
WindowsById	includes/imgui_internal.h	/^    ImGuiStorage            WindowsById;                        \/\/ Map window's ImGuiID to ImG/;"	m	struct:ImGuiContext	typeref:typename:ImGuiStorage
WindowsFocusOrder	includes/imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsFocusOrder;                  \/\/ Root windows, sorted in foc/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WindowsHoverPadding	includes/imgui_internal.h	/^    ImVec2                  WindowsHoverPadding;                \/\/ Padding around resizable wi/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WindowsTempSortBuffer	includes/imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsTempSortBuffer;              \/\/ Temporary buffer used in En/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WithinEndChildID	includes/imgui_internal.h	/^    ImGuiID                 WithinEndChildID;                   \/\/ Set within EndChild()$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
WithinFrameScope	includes/imgui_internal.h	/^    bool                    WithinFrameScope;                   \/\/ Set by NewFrame(), cleared /;"	m	struct:ImGuiContext	typeref:typename:bool
WithinFrameScopeWithImplicitWindow	includes/imgui_internal.h	/^    bool                    WithinFrameScopeWithImplicitWindow; \/\/ Set by NewFrame(), cleared /;"	m	struct:ImGuiContext	typeref:typename:bool
WorkInsetMax	includes/imgui_internal.h	/^    ImVec2              WorkInsetMax;           \/\/ "$/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
WorkInsetMin	includes/imgui_internal.h	/^    ImVec2              WorkInsetMin;           \/\/ Work Area inset locked for the frame. GetWo/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
WorkMaxX	includes/imgui_internal.h	/^    float                   WorkMaxX;                       \/\/ Contents region max ~(MaxX - Ce/;"	m	struct:ImGuiTableColumn	typeref:typename:float
WorkMinX	includes/imgui_internal.h	/^    float                   WorkMinX;                       \/\/ Contents region min ~(MinX + Ce/;"	m	struct:ImGuiTableColumn	typeref:typename:float
WorkPos	includes/imgui.h	/^    ImVec2              WorkPos;                \/\/ Work Area: Position of the viewport minus t/;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
WorkRect	includes/imgui_internal.h	/^    ImRect                      WorkRect;$/;"	m	struct:ImGuiTable	typeref:typename:ImRect
WorkRect	includes/imgui_internal.h	/^    ImRect                  WorkRect;                           \/\/ Initially covers the whole /;"	m	struct:ImGuiWindow	typeref:typename:ImRect
WorkSize	includes/imgui.h	/^    ImVec2              WorkSize;               \/\/ Work Area: Size of the viewport minus task /;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
Wrap	includes/raymath.h	/^RMAPI float Wrap(float value, float min, float max)$/;"	f	typeref:typename:RMAPI float
WriteAccessed	includes/imgui_internal.h	/^    bool                    WriteAccessed;                      \/\/ Set to true when any widget/;"	m	struct:ImGuiWindow	typeref:typename:bool
WriteAllFn	includes/imgui_internal.h	/^    void        (*WriteAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGuiTextBuffer*/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,ImGuiTextBuffer * out_buf)
X	includes/imgui.h	/^    unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
X0	includes/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
X1	includes/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
Y	includes/imgui.h	/^    unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
Y0	includes/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
Y1	includes/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
YELLOW	includes/raylib.h	/^#define YELLOW /;"	d
ZoomWheelAccum	imgui_demo.cpp	/^    float           ZoomWheelAccum = 0.0f;      \/\/ Mouse wheel accumulator to handle smooth wh/;"	m	struct:ExampleAssetsBrowser	typeref:typename:float	file:
_CRT_SECURE_NO_WARNINGS	imgui.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	imgui_demo.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	imgui_draw.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	imgui_tables.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	imgui_widgets.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CalcCircleAutoSegmentCount	imgui_draw.cpp	/^int ImDrawList::_CalcCircleAutoSegmentCount(float radius) const$/;"	f	class:ImDrawList	typeref:typename:int
_CallbacksDataBuf	includes/imgui.h	/^    ImVector<ImU8>          _CallbacksDataBuf;  \/\/ [Internal]$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImU8>
_Channels	includes/imgui.h	/^    ImVector<ImDrawChannel>     _Channels;   \/\/ Draw channels (not resized down so _Count migh/;"	m	struct:ImDrawListSplitter	typeref:typename:ImVector<ImDrawChannel>
_ClearFreeMemory	imgui_draw.cpp	/^void ImDrawList::_ClearFreeMemory()$/;"	f	class:ImDrawList	typeref:typename:void
_ClipRectStack	includes/imgui.h	/^    ImVector<ImVec4>        _ClipRectStack;     \/\/ [Internal]$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImVec4>
_CmdBuffer	includes/imgui.h	/^    ImVector<ImDrawCmd>         _CmdBuffer;$/;"	m	struct:ImDrawChannel	typeref:typename:ImVector<ImDrawCmd>
_CmdHeader	includes/imgui.h	/^    ImDrawCmdHeader         _CmdHeader;         \/\/ [Internal] template of active commands. Fie/;"	m	struct:ImDrawList	typeref:typename:ImDrawCmdHeader
_Count	includes/imgui.h	/^    int                         _Count;      \/\/ Number of active channels (1+)$/;"	m	struct:ImDrawListSplitter	typeref:typename:int
_Current	includes/imgui.h	/^    int                         _Current;    \/\/ Current channel number (0)$/;"	m	struct:ImDrawListSplitter	typeref:typename:int
_Data	includes/imgui.h	/^    ImDrawListSharedData*   _Data;              \/\/ Pointer to shared draw data (you can use Im/;"	m	struct:ImDrawList	typeref:typename:ImDrawListSharedData *
_Ears	imgui_draw.cpp	/^    ImTriangulatorNodeSpan  _Ears;$/;"	m	struct:ImTriangulator	typeref:typename:ImTriangulatorNodeSpan	file:
_FringeScale	includes/imgui.h	/^    float                   _FringeScale;       \/\/ [Internal] anti-alias fringe is scaled by t/;"	m	struct:ImDrawList	typeref:typename:float
_IdxBuffer	includes/imgui.h	/^    ImVector<ImDrawIdx>         _IdxBuffer;$/;"	m	struct:ImDrawChannel	typeref:typename:ImVector<ImDrawIdx>
_IdxWritePtr	includes/imgui.h	/^    ImDrawIdx*              _IdxWritePtr;       \/\/ [Internal] point within IdxBuffer.Data afte/;"	m	struct:ImDrawList	typeref:typename:ImDrawIdx *
_Nodes	imgui_draw.cpp	/^    ImTriangulatorNode*     _Nodes = NULL;$/;"	m	struct:ImTriangulator	typeref:typename:ImTriangulatorNode *	file:
_OnChangedClipRect	imgui_draw.cpp	/^void ImDrawList::_OnChangedClipRect()$/;"	f	class:ImDrawList	typeref:typename:void
_OnChangedTextureID	imgui_draw.cpp	/^void ImDrawList::_OnChangedTextureID()$/;"	f	class:ImDrawList	typeref:typename:void
_OnChangedVtxOffset	imgui_draw.cpp	/^void ImDrawList::_OnChangedVtxOffset()$/;"	f	class:ImDrawList	typeref:typename:void
_OwnerName	includes/imgui.h	/^    const char*             _OwnerName;         \/\/ Pointer to owner window's name for debuggin/;"	m	struct:ImDrawList	typeref:typename:const char *
_Path	includes/imgui.h	/^    ImVector<ImVec2>        _Path;              \/\/ [Internal] current path building$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImVec2>
_PathArcToFastEx	imgui_draw.cpp	/^void ImDrawList::_PathArcToFastEx(const ImVec2& center, float radius, int a_min_sample, int a_ma/;"	f	class:ImDrawList	typeref:typename:void
_PathArcToN	imgui_draw.cpp	/^void ImDrawList::_PathArcToN(const ImVec2& center, float radius, float a_min, float a_max, int n/;"	f	class:ImDrawList	typeref:typename:void
_PopUnusedDrawCmd	imgui_draw.cpp	/^void ImDrawList::_PopUnusedDrawCmd()$/;"	f	class:ImDrawList	typeref:typename:void
_Reflexes	imgui_draw.cpp	/^    ImTriangulatorNodeSpan  _Reflexes;$/;"	m	struct:ImTriangulator	typeref:typename:ImTriangulatorNodeSpan	file:
_ResetForNewFrame	imgui_draw.cpp	/^void ImDrawList::_ResetForNewFrame()$/;"	f	class:ImDrawList	typeref:typename:void
_SelectionOrder	includes/imgui.h	/^    int             _SelectionOrder;\/\/ [Internal] Increasing counter to store selection order$/;"	m	struct:ImGuiSelectionBasicStorage	typeref:typename:int
_SetTextureID	imgui_draw.cpp	/^void ImDrawList::_SetTextureID(ImTextureID texture_id)$/;"	f	class:ImDrawList	typeref:typename:void
_Splitter	includes/imgui.h	/^    ImDrawListSplitter      _Splitter;          \/\/ [Internal] for channels api (note: prefer u/;"	m	struct:ImDrawList	typeref:typename:ImDrawListSplitter
_Storage	includes/imgui.h	/^    ImGuiStorage    _Storage;       \/\/ [Internal] Selection set. Think of this as similar to e/;"	m	struct:ImGuiSelectionBasicStorage	typeref:typename:ImGuiStorage
_TextureIdStack	includes/imgui.h	/^    ImVector<ImTextureID>   _TextureIdStack;    \/\/ [Internal]$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImTextureID>
_TrianglesLeft	imgui_draw.cpp	/^    int                     _TrianglesLeft = 0;$/;"	m	struct:ImTriangulator	typeref:typename:int	file:
_TryMergeDrawCmds	imgui_draw.cpp	/^void ImDrawList::_TryMergeDrawCmds()$/;"	f	class:ImDrawList	typeref:typename:void
_VtxCurrentIdx	includes/imgui.h	/^    unsigned int            _VtxCurrentIdx;     \/\/ [Internal] generally == VtxBuffer.Size unle/;"	m	struct:ImDrawList	typeref:typename:unsigned int
_VtxWritePtr	includes/imgui.h	/^    ImDrawVert*             _VtxWritePtr;       \/\/ [Internal] point within VtxBuffer.Data afte/;"	m	struct:ImDrawList	typeref:typename:ImDrawVert *
__STB_INCLUDE_STB_TRUETYPE_H__	includes/imstb_truetype.h	/^#define __STB_INCLUDE_STB_TRUETYPE_H__$/;"	d
__anon0587e8010108	includes/imstb_truetype.h	/^{$/;"	s
__anon0587e8010208	includes/imstb_truetype.h	/^{$/;"	s
__anon0587e8010308	includes/imstb_truetype.h	/^{$/;"	s
__anon0587e8010408	includes/imstb_truetype.h	/^{$/;"	s
__anon0587e8010508	includes/imstb_truetype.h	/^{$/;"	s
__anon0587e8010603	includes/imstb_truetype.h	/^   enum {$/;"	g
__anon0587e8010708	includes/imstb_truetype.h	/^   {$/;"	s
__anon0587e8010808	includes/imstb_truetype.h	/^{$/;"	s
__anon0587e8010903	includes/imstb_truetype.h	/^enum { \/\/ platformID$/;"	g
__anon0587e8010a03	includes/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_UNICODE$/;"	g
__anon0587e8010b03	includes/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_MICROSOFT$/;"	g
__anon0587e8010c03	includes/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_MAC; same as Script Manager codes$/;"	g
__anon0587e8010d03	includes/imstb_truetype.h	/^enum { \/\/ languageID for STBTT_PLATFORM_ID_MICROSOFT; same as LCID...$/;"	g
__anon0587e8010e03	includes/imstb_truetype.h	/^enum { \/\/ languageID for STBTT_PLATFORM_ID_MAC$/;"	g
__anon0587e8010f08	includes/imstb_truetype.h	/^{$/;"	s
__anon0587e8011008	includes/imstb_truetype.h	/^{$/;"	s
__anon0587e8011108	includes/imstb_truetype.h	/^{$/;"	s
__anon0587e8011208	includes/imstb_truetype.h	/^{$/;"	s
__anon0eaf22270102	imgui_widgets.cpp	/^    AdapterIndexToStorageId = [](ImGuiSelectionBasicStorage*, int idx) { return (ImGuiID)idx; };$/;"	f	function:ImGuiSelectionBasicStorage::ImGuiSelectionBasicStorage	file:
__anon315aabf20103	includes/rlgl.h	/^typedef enum bool { false = 0, true = !false } bool;$/;"	g
__anon315aabf20103	includes/rlgl.h	/^typedef enum bool { false = 0, true = !false } bool;$/;"	t	typeref:enum:bool
__anon315aabf20203	includes/rlgl.h	/^typedef enum {$/;"	g
__anon315aabf20303	includes/rlgl.h	/^typedef enum {$/;"	g
__anon315aabf20403	includes/rlgl.h	/^typedef enum {$/;"	g
__anon315aabf20503	includes/rlgl.h	/^typedef enum {$/;"	g
__anon315aabf20603	includes/rlgl.h	/^typedef enum {$/;"	g
__anon315aabf20703	includes/rlgl.h	/^typedef enum {$/;"	g
__anon315aabf20803	includes/rlgl.h	/^typedef enum {$/;"	g
__anon315aabf20903	includes/rlgl.h	/^typedef enum {$/;"	g
__anon315aabf20a03	includes/rlgl.h	/^typedef enum {$/;"	g
__anon315aabf20b03	includes/rlgl.h	/^typedef enum {$/;"	g
__anon315aabf20c03	includes/rlgl.h	/^typedef enum {$/;"	g
__anon315aabf20d08	includes/rlgl.h	/^    struct {$/;"	s	struct:rlglData
__anon315aabf20e08	includes/rlgl.h	/^    struct {$/;"	s	struct:rlglData
__anon3e283e0a0108	includes/imstb_textedit.h	/^{$/;"	s
__anon3e283e0a0208	includes/imstb_textedit.h	/^{$/;"	s
__anon3e283e0a0308	includes/imstb_textedit.h	/^{$/;"	s
__anon3e283e0a0408	includes/imstb_textedit.h	/^{$/;"	s
__anon4484fb4f0102	rlImGui.cpp	/^        {$/;"	f	function:ImGui_ImplRaylib_ProcessEvents	file:
__anon5ba881550102	imgui_demo.cpp	/^        ImGui::Combo("combo 4 (function)", &item_current_4, [](void* data, int n) { return ((con/;"	f	function:ShowDemoWindowWidgets	file:
__anon5ba881550202	imgui_demo.cpp	/^        Selections[side].AdapterIndexToStorageId = [](ImGuiSelectionBasicStorage* self, int idx)/;"	f	function:ExampleDualListBox::ApplySelectionRequests	file:
__anon5ba881550302	imgui_demo.cpp	/^            selection.AdapterIndexToStorageId = [](ImGuiSelectionBasicStorage* self, int idx) { /;"	f	function:ShowDemoWindowMultiSelect	file:
__anon5ba881550402	imgui_demo.cpp	/^                storage_wrapper.AdapterSetItemSelected = [](ImGuiSelectionExternalStorage* self,/;"	f	function:ShowDemoWindowMultiSelect	file:
__anon5ba881550511	imgui_demo.cpp	/^{$/;"	n	file:
__anon5ba881550602	imgui_demo.cpp	/^            Selection.AdapterIndexToStorageId = [](ImGuiSelectionBasicStorage* self_, int idx) {/;"	f	function:ExampleAssetsBrowser::Draw	file:
__anon624f85710102	imgui.cpp	/^        g.PlatformIO.Platform_GetClipboardTextFn = [](ImGuiContext* ctx) { return ctx->IO.GetCli/;"	f	function:ImGui::ErrorCheckNewFrameSanityChecks	file:
__anon624f85710202	imgui.cpp	/^        g.PlatformIO.Platform_SetClipboardTextFn = [](ImGuiContext* ctx, const char* text) { ret/;"	f	function:ImGui::ErrorCheckNewFrameSanityChecks	file:
__anon624f8571030a	imgui.cpp	/^    union { void* ptr; int integer; } tex_id_opaque;$/;"	u	function:FormatTextureIDForDebugDisplay	file:
__anon624f85710403	imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	g	function:ImGui::ShowMetricsWindow	file:
__anon624f85710503	imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	g	function:ImGui::ShowMetricsWindow	file:
__anonaa3f135c010a	includes/imgui.h	/^    union       { int val_i; float val_f; void* val_p; };$/;"	u	struct:ImGuiStoragePair
__anonce11f6a40103	includes/raylib.h	/^    typedef enum bool { false = 0, true = !false } bool;$/;"	g
__anonce11f6a40103	includes/raylib.h	/^    typedef enum bool { false = 0, true = !false } bool;$/;"	t	typeref:enum:bool
__anonce11f6a40203	includes/raylib.h	/^typedef enum {$/;"	g
__anonce11f6a40303	includes/raylib.h	/^typedef enum {$/;"	g
__anonce11f6a40403	includes/raylib.h	/^typedef enum {$/;"	g
__anonce11f6a40503	includes/raylib.h	/^typedef enum {$/;"	g
__anonce11f6a40603	includes/raylib.h	/^typedef enum {$/;"	g
__anonce11f6a40703	includes/raylib.h	/^typedef enum {$/;"	g
__anonce11f6a40803	includes/raylib.h	/^typedef enum {$/;"	g
__anonce11f6a40903	includes/raylib.h	/^typedef enum {$/;"	g
__anonce11f6a40a03	includes/raylib.h	/^typedef enum {$/;"	g
__anonce11f6a40b03	includes/raylib.h	/^typedef enum {$/;"	g
__anonce11f6a40c03	includes/raylib.h	/^typedef enum {$/;"	g
__anonce11f6a40d03	includes/raylib.h	/^typedef enum {$/;"	g
__anonce11f6a40e03	includes/raylib.h	/^typedef enum {$/;"	g
__anonce11f6a40f03	includes/raylib.h	/^typedef enum {$/;"	g
__anonce11f6a41003	includes/raylib.h	/^typedef enum {$/;"	g
__anonce11f6a41103	includes/raylib.h	/^typedef enum {$/;"	g
__anonce11f6a41203	includes/raylib.h	/^typedef enum {$/;"	g
__anonce11f6a41303	includes/raylib.h	/^typedef enum {$/;"	g
__anonce11f6a41403	includes/raylib.h	/^typedef enum {$/;"	g
__anonce11f6a41503	includes/raylib.h	/^typedef enum {$/;"	g
__anonce11f6a41603	includes/raylib.h	/^typedef enum {$/;"	g
__anonee1baa2c0103	includes/imstb_rectpack.h	/^{$/;"	g
__anonee1baa2c0203	includes/imstb_rectpack.h	/^{$/;"	g
__anonee1baa2c0308	includes/imstb_rectpack.h	/^{$/;"	s
__anonf46a7b98010a	includes/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	u	struct:ImGuiStyleMod
__anonf46a7b98020a	includes/imgui_internal.h	/^    {$/;"	u	struct:ImGuiInputEvent
__declspec	includes/raylib.h	/^        #define __declspec(/;"	d
__declspec	includes/rlImGui.h	/^#define __declspec(/;"	d
_grow_capacity	includes/imgui.h	/^    inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Cap/;"	f	struct:ImVector	typeref:typename:int
a	includes/raylib.h	/^    unsigned char a;        \/\/ Color alpha value$/;"	m	struct:Color	typeref:typename:unsigned char
acc	includes/classes/Boid.hpp	/^		Vector2	acc;$/;"	m	class:Boid	typeref:typename:Vector2
activeTextureId	includes/rlgl.h	/^        unsigned int activeTextureId[RL_DEFAULT_BATCH_MAX_TEXTURE_UNITS];    \/\/ Active texture/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:unsigned int[]
active_head	includes/imstb_rectpack.h	/^   stbrp_node *active_head;$/;"	m	struct:stbrp_context	typeref:typename:stbrp_node *
advance	includes/imstb_truetype.h	/^   int advance;$/;"	m	struct:stbtt_kerningentry	typeref:typename:int
advanceX	includes/raylib.h	/^    int advanceX;           \/\/ Character advance position X$/;"	m	struct:GlyphInfo	typeref:typename:int
align	includes/classes/Flock.hpp	/^	bool	align;$/;"	m	struct:s_globaloptions	typeref:typename:bool
align	includes/imstb_rectpack.h	/^   int align;$/;"	m	struct:stbrp_context	typeref:typename:int
align	srcs/classes/Boid.cpp	/^void Boid::align(void)$/;"	f	class:Boid	typeref:typename:void
align	srcs/classes/Flock.cpp	/^void Flock::align(void)$/;"	f	class:Flock	typeref:typename:void
alignAlgorithm	includes/classes/Flock.hpp	/^	int		alignAlgorithm;$/;"	m	struct:s_globaloptions	typeref:typename:int
all	Makefile	/^all: $(NAME)$/;"	t
alloc_chunk	includes/imgui_internal.h	/^    T*      alloc_chunk(size_t sz)      { size_t HDR_SZ = 4; sz = IM_MEMALIGN(HDR_SZ + sz, 4u); /;"	f	struct:ImChunkStream	typeref:typename:T *
animNormals	includes/raylib.h	/^    float *animNormals;     \/\/ Animated normals (after bones transformations)$/;"	m	struct:Mesh	typeref:typename:float *
animVertices	includes/raylib.h	/^    float *animVertices;    \/\/ Animated vertex positions (after bones transformations)$/;"	m	struct:Mesh	typeref:typename:float *
append	imgui.cpp	/^void ImGuiTextBuffer::append(const char* str, const char* str_end)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
append	imgui.cpp	/^void ImGuiTextIndex::append(const char* base, int old_size, int new_size)$/;"	f	class:ImGuiTextIndex	typeref:typename:void
appendf	imgui.cpp	/^void ImGuiTextBuffer::appendf(const char* fmt, ...)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
appendfv	imgui.cpp	/^void ImGuiTextBuffer::appendfv(const char* fmt, va_list args)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
array_of_unicode_codepoints	includes/imstb_truetype.h	/^   int *array_of_unicode_codepoints;       \/\/ if non-zero, then this is an array of unicode co/;"	m	struct:__anon0587e8010508	typeref:typename:int *
average	includes/classes/Boid.hpp	/^		t_average average;$/;"	m	class:Boid	typeref:typename:t_average
average	srcs/classes/Flock.cpp	/^void Flock::average(void)$/;"	f	class:Flock	typeref:typename:void
avoidborder	includes/classes/Flock.hpp	/^	bool	avoidborder;$/;"	m	struct:s_globaloptions	typeref:typename:bool
avoidborder	srcs/classes/Boid.cpp	/^void Boid::avoidborder(float gamespeed)$/;"	f	class:Boid	typeref:typename:void
avoidborder	srcs/classes/Flock.cpp	/^void Flock::avoidborder(void)$/;"	f	class:Flock	typeref:typename:void
b	includes/imgui.h	/^        const char*     b;$/;"	m	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:const char *
b	includes/raylib.h	/^    unsigned char b;        \/\/ Color blue value$/;"	m	struct:Color	typeref:typename:unsigned char
back	includes/imgui.h	/^    inline T&           back()                              { IM_ASSERT(Size > 0); return Data[S/;"	f	struct:ImVector	typeref:typename:T &
back	includes/imgui.h	/^    inline const T&     back() const                        { IM_ASSERT(Size > 0); return Data[S/;"	f	struct:ImVector	typeref:typename:const T &
baseSize	includes/raylib.h	/^    int baseSize;           \/\/ Base size (default chars height)$/;"	m	struct:Font	typeref:typename:int
baseline_y_delta	includes/imstb_textedit.h	/^   float baseline_y_delta;  \/\/ position of baseline relative to previous row's baseline$/;"	m	struct:__anon3e283e0a0308	typeref:typename:float
begin	includes/imgui.h	/^    const char*         begin() const           { return Buf.Data ? &Buf.front() : EmptyString; /;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
begin	includes/imgui.h	/^    inline T*           begin()                             { return Data; }$/;"	f	struct:ImVector	typeref:typename:T *
begin	includes/imgui.h	/^    inline const T*     begin() const                       { return Data; }$/;"	f	struct:ImVector	typeref:typename:const T *
begin	includes/imgui_internal.h	/^    T*      begin()                     { size_t HDR_SZ = 4; if (!Buf.Data) return NULL; return /;"	f	struct:ImChunkStream	typeref:typename:T *
begin	includes/imgui_internal.h	/^    inline T*           begin()                     { return Data; }$/;"	f	struct:ImSpan	typeref:typename:T *
begin	includes/imgui_internal.h	/^    inline const T*     begin() const               { return Data; }$/;"	f	struct:ImSpan	typeref:typename:const T *
bindPose	includes/raylib.h	/^    Transform *bindPose;    \/\/ Bones base transformation (pose)$/;"	m	struct:Model	typeref:typename:Transform *
boid	includes/classes/SpatialHashing.hpp	/^	Boid		*boid;$/;"	m	struct:t_boid_list	typeref:typename:Boid *
boids	includes/classes/Flock.hpp	/^        Boid boids[NB_BOIDS];$/;"	m	class:Flock	typeref:typename:Boid[]
boids	includes/classes/SpatialHashing.hpp	/^	t_boid_list *boids;$/;"	m	struct:s_hash_table	typeref:typename:t_boid_list *
boneCount	includes/raylib.h	/^    int boneCount;          \/\/ Number of bones$/;"	m	struct:Mesh	typeref:typename:int
boneCount	includes/raylib.h	/^    int boneCount;          \/\/ Number of bones$/;"	m	struct:Model	typeref:typename:int
boneCount	includes/raylib.h	/^    int boneCount;          \/\/ Number of bones$/;"	m	struct:ModelAnimation	typeref:typename:int
boneIds	includes/raylib.h	/^    unsigned char *boneIds; \/\/ Vertex bone ids, max 255 bone ids, up to 4 bones influence by v/;"	m	struct:Mesh	typeref:typename:unsigned char *
boneMatrices	includes/raylib.h	/^    Matrix *boneMatrices;   \/\/ Bones animated transformation matrices$/;"	m	struct:Mesh	typeref:typename:Matrix *
boneWeights	includes/raylib.h	/^    float *boneWeights;     \/\/ Vertex bone weight, up to 4 bones influence by vertex (skinning/;"	m	struct:Mesh	typeref:typename:float *
bones	includes/raylib.h	/^    BoneInfo *bones;        \/\/ Bones information (skeleton)$/;"	m	struct:Model	typeref:typename:BoneInfo *
bones	includes/raylib.h	/^    BoneInfo *bones;        \/\/ Bones information (skeleton)$/;"	m	struct:ModelAnimation	typeref:typename:BoneInfo *
bottom	includes/raylib.h	/^    int bottom;             \/\/ Bottom border offset$/;"	m	struct:NPatchInfo	typeref:typename:int
bottom_y	includes/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon0587e8011108	typeref:typename:int
bounds	includes/imstb_truetype.h	/^   int bounds;$/;"	m	struct:__anon0587e8010f08	typeref:typename:int
buffer	includes/raylib.h	/^    rAudioBuffer *buffer;       \/\/ Pointer to internal data used by the audio system$/;"	m	struct:AudioStream	typeref:typename:rAudioBuffer *
bufferCount	includes/rlgl.h	/^    int bufferCount;            \/\/ Number of vertex buffers (multi-buffering support)$/;"	m	struct:rlRenderBatch	typeref:typename:int
cStandard	.vscode/c_cpp_properties.json	/^            "cStandard": "c17",$/;"	s	object:configurations.0
c_str	includes/imgui.h	/^    const char*         c_str() const           { return Buf.Data ? Buf.Data : EmptyString; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
camera	includes/game.hpp	/^	Camera2D	camera;$/;"	m	struct:s_player	typeref:typename:Camera2D
capacity	includes/imgui.h	/^    inline int          capacity() const                    { return Capacity; }$/;"	f	struct:ImVector	typeref:typename:int
capacity	includes/raylib.h	/^    unsigned int capacity;          \/\/ Events max entries (MAX_AUTOMATION_EVENTS)$/;"	m	struct:AutomationEventList	typeref:typename:unsigned int
capacity	includes/raylib.h	/^    unsigned int capacity;          \/\/ Filepaths max entries$/;"	m	struct:FilePathList	typeref:typename:unsigned int
center	includes/classes/SpatialHashing.hpp	/^	Vector2		center;$/;"	m	struct:s_hash_table	typeref:typename:Vector2
cff	includes/imstb_truetype.h	/^   stbtt__buf cff;                    \/\/ cff font data$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
channels	includes/raylib.h	/^    unsigned int channels;      \/\/ Number of channels (1-mono, 2-stereo, ...)$/;"	m	struct:AudioStream	typeref:typename:unsigned int
channels	includes/raylib.h	/^    unsigned int channels;      \/\/ Number of channels (1-mono, 2-stereo, ...)$/;"	m	struct:Wave	typeref:typename:unsigned int
char_storage	includes/imstb_textedit.h	/^   int                        char_storage;$/;"	m	struct:__anon3e283e0a0108	typeref:typename:int
chardata_for_range	includes/imstb_truetype.h	/^   stbtt_packedchar *chardata_for_range; \/\/ output$/;"	m	struct:__anon0587e8010508	typeref:typename:stbtt_packedchar *
charstrings	includes/imstb_truetype.h	/^   stbtt__buf charstrings;            \/\/ the charstring index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
check	includes/classes/Flock.hpp	/^		t_check_box		check;$/;"	m	class:Flock	typeref:typename:t_check_box
chromaAbCorrection	includes/raylib.h	/^    float chromaAbCorrection[4];    \/\/ Chromatic aberration correction parameters$/;"	m	struct:VrDeviceInfo	typeref:typename:float[4]
chunk_size	includes/imgui_internal.h	/^    int     chunk_size(const T* p)      { return ((const int*)p)[-1]; }$/;"	f	struct:ImChunkStream	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
clear	includes/imgui.h	/^    inline void         clear()                             { if (Data) { Size = Capacity = 0; I/;"	f	struct:ImVector	typeref:typename:void
clear	includes/imgui.h	/^    void                clear()                 { Buf.clear(); }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:void
clear	includes/imgui_internal.h	/^    void            clear()                                 { LineOffsets.clear(); EndOffset = 0/;"	f	struct:ImGuiTextIndex	typeref:typename:void
clear	includes/imgui_internal.h	/^    void    clear()                     { Buf.clear(); }$/;"	f	struct:ImChunkStream	typeref:typename:void
clear	srcs/classes/SpatialHashing.cpp	/^void	SpatialHashing::clear(void)$/;"	f	class:SpatialHashing	typeref:typename:void
clear_delete	includes/imgui.h	/^    inline void         clear_delete()                      { for (int n = 0; n < Size; n++) IM_/;"	f	struct:ImVector	typeref:typename:void
clear_destruct	includes/imgui.h	/^    inline void         clear_destruct()                    { for (int n = 0; n < Size; n++) Dat/;"	f	struct:ImVector	typeref:typename:void
cohese	includes/classes/Flock.hpp	/^	bool	cohese;$/;"	m	struct:s_globaloptions	typeref:typename:bool
cohese	srcs/classes/Boid.cpp	/^void Boid::cohese(void)$/;"	f	class:Boid	typeref:typename:void
cohese	srcs/classes/Flock.cpp	/^void Flock::cohese(void)$/;"	f	class:Flock	typeref:typename:void
col	includes/imgui.h	/^    ImU32   col;$/;"	m	struct:ImDrawVert	typeref:typename:ImU32
color	includes/classes/Boid.hpp	/^	Color		color;$/;"	m	struct:s_boid	typeref:typename:Color
color	includes/raylib.h	/^    Color color;            \/\/ Material map color$/;"	m	struct:MaterialMap	typeref:typename:Color
colora	includes/rlgl.h	/^        unsigned char colorr, colorg, colorb, colora;   \/\/ Current active color (added on glVe/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:unsigned char
colorb	includes/rlgl.h	/^        unsigned char colorr, colorg, colorb, colora;   \/\/ Current active color (added on glVe/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:unsigned char
colorg	includes/rlgl.h	/^        unsigned char colorr, colorg, colorb, colora;   \/\/ Current active color (added on glVe/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:unsigned char
colorr	includes/rlgl.h	/^        unsigned char colorr, colorg, colorb, colora;   \/\/ Current active color (added on glVe/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:unsigned char
colors	includes/raylib.h	/^    unsigned char *colors;      \/\/ Vertex colors (RGBA - 4 components per vertex) (shader-loca/;"	m	struct:Mesh	typeref:typename:unsigned char *
colors	includes/rlgl.h	/^    unsigned char *colors;      \/\/ Vertex colors (RGBA - 4 components per vertex) (shader-loca/;"	m	struct:rlVertexBuffer	typeref:typename:unsigned char *
compilerPath	.vscode/c_cpp_properties.json	/^            "compilerPath": "\/usr\/bin\/clang",$/;"	s	object:configurations.0
computeShader	includes/rlgl.h	/^        bool computeShader;                 \/\/ Compute shaders support (GL_ARB_compute_shader)$/;"	m	struct:rlglData::__anon315aabf20e08	typeref:typename:bool
configurationProvider	.vscode/c_cpp_properties.json	/^            "configurationProvider": "ms-vscode.makefile-tools"$/;"	s	object:configurations.0
configurations	.vscode/c_cpp_properties.json	/^    "configurations": [$/;"	a
const_iterator	includes/imgui.h	/^    typedef const value_type*   const_iterator;$/;"	t	struct:ImVector	typeref:typename:const value_type *
contains	includes/imgui.h	/^    inline bool         contains(const T& v) const          { const T* data = Data;  const T* da/;"	f	struct:ImVector	typeref:typename:bool
count	includes/raylib.h	/^    unsigned int count;             \/\/ Events entries count$/;"	m	struct:AutomationEventList	typeref:typename:unsigned int
count	includes/raylib.h	/^    unsigned int count;             \/\/ Filepaths entries count$/;"	m	struct:FilePathList	typeref:typename:unsigned int
cppStandard	.vscode/c_cpp_properties.json	/^            "cppStandard": "c++14",$/;"	s	object:configurations.0
ctxData	includes/raylib.h	/^    void *ctxData;              \/\/ Audio context data, depends on type$/;"	m	struct:Music	typeref:typename:void *
ctxType	includes/raylib.h	/^    int ctxType;                \/\/ Type of music context (audio filetype)$/;"	m	struct:Music	typeref:typename:int
currentBatch	includes/rlgl.h	/^    rlRenderBatch *currentBatch;            \/\/ Current render batch$/;"	m	struct:rlglData	typeref:typename:rlRenderBatch *
currentBlendMode	includes/rlgl.h	/^        int currentBlendMode;               \/\/ Blending mode active$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:int
currentBuffer	includes/rlgl.h	/^    int currentBuffer;          \/\/ Current buffer tracking in case of multi-buffering$/;"	m	struct:rlRenderBatch	typeref:typename:int
currentDepth	includes/rlgl.h	/^    float currentDepth;         \/\/ Current depth value for next draw$/;"	m	struct:rlRenderBatch	typeref:typename:float
currentMatrix	includes/rlgl.h	/^        Matrix *currentMatrix;              \/\/ Current matrix pointer$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:Matrix *
currentMatrixMode	includes/rlgl.h	/^        int currentMatrixMode;              \/\/ Current matrix mode$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:int
currentShaderId	includes/rlgl.h	/^        unsigned int currentShaderId;       \/\/ Current shader id to be used on rendering (by d/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:unsigned int
currentShaderLocs	includes/rlgl.h	/^        int *currentShaderLocs;             \/\/ Current shader locations pointer to be used on /;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:int *
cursor	includes/imstb_textedit.h	/^   int cursor;$/;"	m	struct:STB_TexteditState	typeref:typename:int
cursor	includes/imstb_truetype.h	/^   int cursor;$/;"	m	struct:__anon0587e8010108	typeref:typename:int
cursor_at_end_of_line	includes/imstb_textedit.h	/^   unsigned char cursor_at_end_of_line; \/\/ not implemented yet$/;"	m	struct:STB_TexteditState	typeref:typename:unsigned char
cx	includes/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon0587e8010708	typeref:typename:stbtt_vertex_type
cx1	includes/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon0587e8010708	typeref:typename:stbtt_vertex_type
cy	includes/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon0587e8010708	typeref:typename:stbtt_vertex_type
cy1	includes/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon0587e8010708	typeref:typename:stbtt_vertex_type
data	includes/imstb_truetype.h	/^   unsigned char  * data;              \/\/ pointer to .ttf file$/;"	m	struct:stbtt_fontinfo	typeref:typename:unsigned char *
data	includes/imstb_truetype.h	/^   unsigned char *data;$/;"	m	struct:__anon0587e8010108	typeref:typename:unsigned char *
data	includes/raylib.h	/^    void *data;                 \/\/ Buffer data pointer$/;"	m	struct:Wave	typeref:typename:void *
data	includes/raylib.h	/^    void *data;             \/\/ Image raw data$/;"	m	struct:Image	typeref:typename:void *
debug	Makefile	/^debug:$/;"	t
defaultBatch	includes/rlgl.h	/^    rlRenderBatch defaultBatch;             \/\/ Default internal render batch$/;"	m	struct:rlglData	typeref:typename:rlRenderBatch
defaultFShaderId	includes/rlgl.h	/^        unsigned int defaultFShaderId;      \/\/ Default fragment shader id (used by default sha/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:unsigned int
defaultShaderId	includes/rlgl.h	/^        unsigned int defaultShaderId;       \/\/ Default shader program id, supports vertex colo/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:unsigned int
defaultShaderLocs	includes/rlgl.h	/^        int *defaultShaderLocs;             \/\/ Default shader locations pointer to be used on /;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:int *
defaultTextureId	includes/rlgl.h	/^        unsigned int defaultTextureId;      \/\/ Default texture used on shapes\/poly drawing (r/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:unsigned int
defaultVShaderId	includes/rlgl.h	/^        unsigned int defaultVShaderId;      \/\/ Default vertex shader id (used by default shade/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:unsigned int
defines	.vscode/c_cpp_properties.json	/^            "defines": [],$/;"	a	object:configurations.0
delete_length	includes/imstb_textedit.h	/^   IMSTB_TEXTEDIT_POSITIONTYPE  delete_length;$/;"	m	struct:__anon3e283e0a0108	typeref:typename:IMSTB_TEXTEDIT_POSITIONTYPE
depth	includes/raylib.h	/^    Texture depth;          \/\/ Depth buffer attachment texture$/;"	m	struct:RenderTexture	typeref:typename:Texture
direction	includes/imstb_truetype.h	/^   float direction;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
direction	includes/imstb_truetype.h	/^   int direction;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
direction	includes/raylib.h	/^    Vector3 direction;      \/\/ Ray direction (normalized)$/;"	m	struct:Ray	typeref:typename:Vector3
distance	includes/raylib.h	/^    float distance;         \/\/ Distance to the nearest hit$/;"	m	struct:RayCollision	typeref:typename:float
draw	includes/classes/Flock.hpp	/^	bool	draw;$/;"	m	struct:s_check_box	typeref:typename:bool
draw	srcs/classes/Flock.cpp	/^void Flock::draw(Camera2D camera)$/;"	f	class:Flock	typeref:typename:void
draw	srcs/classes/SpatialHashing.cpp	/^void	SpatialHashing::draw(Camera2D camera)$/;"	f	class:SpatialHashing	typeref:typename:void
drawCounter	includes/rlgl.h	/^    int drawCounter;            \/\/ Draw calls counter$/;"	m	struct:rlRenderBatch	typeref:typename:int
draw_align	srcs/classes/Boid.cpp	/^void Boid::draw_align(void)$/;"	f	class:Boid	typeref:typename:void
draw_avoid	srcs/classes/Boid.cpp	/^void Boid::draw_avoid(void)$/;"	f	class:Boid	typeref:typename:void
draw_boid	srcs/classes/Boid.cpp	/^void Boid::draw_boid(void)$/;"	f	class:Boid	typeref:typename:void
draw_cohese	srcs/classes/Boid.cpp	/^void Boid::draw_cohese(void)$/;"	f	class:Boid	typeref:typename:void
draw_hash	includes/classes/Flock.hpp	/^	bool	draw_hash;$/;"	m	struct:s_check_box	typeref:typename:bool
draw_perception	includes/classes/Flock.hpp	/^	bool	draw_perception;$/;"	m	struct:s_check_box	typeref:typename:bool
draw_perception	srcs/classes/Boid.cpp	/^void Boid::draw_perception(void)$/;"	f	class:Boid	typeref:typename:void
draw_rect	srcs/classes/SpatialHashing.cpp	/^void	SpatialHashing::draw_rect(Rectangle rect, Color color)$/;"	f	class:SpatialHashing	typeref:typename:void
draw_velocity	includes/classes/Flock.hpp	/^	bool	draw_velocity;$/;"	m	struct:s_check_box	typeref:typename:bool
draw_velocity	srcs/classes/Boid.cpp	/^void Boid::draw_velocity(void)$/;"	f	class:Boid	typeref:typename:void
draws	includes/rlgl.h	/^    rlDrawCall *draws;          \/\/ Draw calls array, depends on textureId$/;"	m	struct:rlRenderBatch	typeref:typename:rlDrawCall *
dx	includes/imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
e	includes/imgui.h	/^        const char*     e;$/;"	m	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:const char *
elementCount	includes/rlgl.h	/^    int elementCount;           \/\/ Number of elements in the buffer (QUADS)$/;"	m	struct:rlVertexBuffer	typeref:typename:int
empty	includes/imgui.h	/^        bool            empty() const                   { return b == e; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:bool
empty	includes/imgui.h	/^    bool                empty() const           { return Buf.Size <= 1; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:bool
empty	includes/imgui.h	/^    inline bool         empty() const                       { return Size == 0; }$/;"	f	struct:ImVector	typeref:typename:bool
empty	includes/imgui_internal.h	/^    bool    empty() const               { return Buf.Size == 0; }$/;"	f	struct:ImChunkStream	typeref:typename:bool
end	includes/imgui.h	/^    const char*         end() const             { return Buf.Data ? &Buf.back() : EmptyString; }/;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
end	includes/imgui.h	/^    inline T*           end()                               { return Data + Size; }$/;"	f	struct:ImVector	typeref:typename:T *
end	includes/imgui.h	/^    inline const T*     end() const                         { return Data + Size; }$/;"	f	struct:ImVector	typeref:typename:const T *
end	includes/imgui_internal.h	/^    T*      end()                       { return (T*)(void*)(Buf.Data + Buf.Size); }$/;"	f	struct:ImChunkStream	typeref:typename:T *
end	includes/imgui_internal.h	/^    inline T*           end()                       { return DataEnd; }$/;"	f	struct:ImSpan	typeref:typename:T *
end	includes/imgui_internal.h	/^    inline const T*     end() const                 { return DataEnd; }$/;"	f	struct:ImSpan	typeref:typename:const T *
end_engine	srcs/main.cpp	/^void	end_engine(t_game *game)$/;"	f	typeref:typename:void
engine_input	srcs/main.cpp	/^void	engine_input(t_game *game)$/;"	f	typeref:typename:void
equal	includes/imstb_truetype.h	/^static int equal(float *a, float *b)$/;"	f	typeref:typename:int
erase	includes/imgui.h	/^    inline T*           erase(const T* it)                  { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:T *
erase	includes/imgui.h	/^    inline T*           erase(const T* it, const T* it_last){ IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:T *
erase_unsorted	includes/imgui.h	/^    inline T*           erase_unsorted(const T* it)         { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:T *
events	includes/raylib.h	/^    AutomationEvent *events;        \/\/ Events entries$/;"	m	struct:AutomationEventList	typeref:typename:AutomationEvent *
extra	includes/imstb_rectpack.h	/^   stbrp_node extra[2]; \/\/ we allocate two extra nodes so optimal user-node-count is 'width' n/;"	m	struct:stbrp_context	typeref:typename:stbrp_node[2]
ey	includes/imstb_truetype.h	/^   float ey;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
eyeToScreenDistance	includes/raylib.h	/^    float eyeToScreenDistance;      \/\/ Distance between eye and display in meters$/;"	m	struct:VrDeviceInfo	typeref:typename:float
fa_solid_900_compressed_data	includes/extras/FA6FreeSolidFontData.h	/^static const unsigned int fa_solid_900_compressed_data[238368 \/ 4] =$/;"	v	typeref:typename:const unsigned int[]
fa_solid_900_compressed_size	includes/extras/FA6FreeSolidFontData.h	/^static const unsigned int fa_solid_900_compressed_size = 238367;$/;"	v	typeref:typename:const unsigned int
fclean	Makefile	/^fclean: clean$/;"	t
fdselect	includes/imstb_truetype.h	/^   stbtt__buf fdselect;               \/\/ map from glyph to fontdict$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
fdx	includes/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
fdy	includes/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
find	includes/imgui.h	/^    inline T*           find(const T& v)                    { T* data = Data;  const T* data_end/;"	f	struct:ImVector	typeref:typename:T *
find	includes/imgui.h	/^    inline const T*     find(const T& v) const              { const T* data = Data;  const T* da/;"	f	struct:ImVector	typeref:typename:const T *
find_erase	includes/imgui.h	/^    inline bool         find_erase(const T& v)              { const T* it = find(v); if (it < Da/;"	f	struct:ImVector	typeref:typename:bool
find_erase_unsorted	imgui_draw.cpp	/^    void    find_erase_unsorted(int idx)        { for (int i = Size - 1; i >= 0; i--) if (Data[i/;"	f	struct:ImTriangulatorNodeSpan	typeref:typename:void	file:
find_erase_unsorted	includes/imgui.h	/^    inline bool         find_erase_unsorted(const T& v)     { const T* it = find(v); if (it < Da/;"	f	struct:ImVector	typeref:typename:bool
find_index	includes/imgui.h	/^    inline int          find_index(const T& v) const        { const T* data_end = Data + Size; c/;"	f	struct:ImVector	typeref:typename:int
first_char	includes/imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anon3e283e0a0408	typeref:typename:int
first_free	includes/imstb_truetype.h	/^   void   *first_free;$/;"	m	struct:stbtt__hheap	typeref:typename:void *
first_unicode_codepoint_in_range	includes/imstb_truetype.h	/^   int first_unicode_codepoint_in_range;  \/\/ if non-zero, then the chars are continuous, and t/;"	m	struct:__anon0587e8010508	typeref:typename:int
first_x	includes/imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anon0587e8010f08	typeref:typename:float
first_y	includes/imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anon0587e8010f08	typeref:typename:float
float16	includes/raymath.h	/^typedef struct float16 {$/;"	s
float16	includes/raymath.h	/^} float16;$/;"	t	typeref:struct:float16
float3	includes/raymath.h	/^typedef struct float3 {$/;"	s
float3	includes/raymath.h	/^} float3;$/;"	t	typeref:struct:float3
flock	includes/game.hpp	/^	Flock		flock;$/;"	m	struct:s_game	typeref:typename:Flock
font_size	includes/imstb_truetype.h	/^   float font_size;$/;"	m	struct:__anon0587e8010508	typeref:typename:float
fontdicts	includes/imstb_truetype.h	/^   stbtt__buf fontdicts;              \/\/ array of font dicts$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
fontstart	includes/imstb_truetype.h	/^   int              fontstart;         \/\/ offset of start of font$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
format	includes/raylib.h	/^    int format;             \/\/ Data format (PixelFormat type)$/;"	m	struct:Image	typeref:typename:int
format	includes/raylib.h	/^    int format;             \/\/ Data format (PixelFormat type)$/;"	m	struct:Texture	typeref:typename:int
fovy	includes/raylib.h	/^    float fovy;             \/\/ Camera field-of-view aperture in Y (degrees) in perspective, us/;"	m	struct:Camera3D	typeref:typename:float
frame	includes/raylib.h	/^    unsigned int frame;             \/\/ Event frame$/;"	m	struct:AutomationEvent	typeref:typename:unsigned int
frameCount	includes/raylib.h	/^    int frameCount;         \/\/ Number of animation frames$/;"	m	struct:ModelAnimation	typeref:typename:int
frameCount	includes/raylib.h	/^    unsigned int frameCount;    \/\/ Total number of frames (considering channels)$/;"	m	struct:Music	typeref:typename:unsigned int
frameCount	includes/raylib.h	/^    unsigned int frameCount;    \/\/ Total number of frames (considering channels)$/;"	m	struct:Sound	typeref:typename:unsigned int
frameCount	includes/raylib.h	/^    unsigned int frameCount;    \/\/ Total number of frames (considering channels)$/;"	m	struct:Wave	typeref:typename:unsigned int
framePoses	includes/raylib.h	/^    Transform **framePoses; \/\/ Poses array by frame$/;"	m	struct:ModelAnimation	typeref:typename:Transform **
frame_limit	includes/game.hpp	/^	int			frame_limit;$/;"	m	struct:s_game	typeref:typename:int
frame_time_counter	includes/classes/Boid.hpp	/^		float	frame_time_counter;$/;"	m	class:Boid	typeref:typename:float
framebufferHeight	includes/rlgl.h	/^        int framebufferHeight;              \/\/ Current framebuffer height$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:int
framebufferWidth	includes/rlgl.h	/^        int framebufferWidth;               \/\/ Current framebuffer width$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:int
free_head	includes/imstb_rectpack.h	/^   stbrp_node *free_head;$/;"	m	struct:stbrp_context	typeref:typename:stbrp_node *
front	includes/imgui.h	/^    inline T&           front()                             { IM_ASSERT(Size > 0); return Data[0/;"	f	struct:ImVector	typeref:typename:T &
front	includes/imgui.h	/^    inline const T&     front() const                       { IM_ASSERT(Size > 0); return Data[0/;"	f	struct:ImVector	typeref:typename:const T &
funcs	imgui_demo.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };$/;"	s	function:ShowDemoWindowInputs	file:
fx	includes/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
g	includes/raylib.h	/^    unsigned char g;        \/\/ Color green value$/;"	m	struct:Color	typeref:typename:unsigned char
gamespeed	includes/classes/Flock.hpp	/^	float	gamespeed;$/;"	m	struct:s_globaloptions	typeref:typename:float
get_line_begin	includes/imgui_internal.h	/^    const char*     get_line_begin(const char* base, int n) { return base + LineOffsets[n]; }$/;"	f	struct:ImGuiTextIndex	typeref:typename:const char *
get_line_end	includes/imgui_internal.h	/^    const char*     get_line_end(const char* base, int n)   { return base + (n + 1 < LineOffsets/;"	f	struct:ImGuiTextIndex	typeref:typename:const char *
getaverage	srcs/classes/Boid.cpp	/^void Boid::getaverage(Boid *flock)$/;"	f	class:Boid	typeref:typename:void
gethash	srcs/classes/Flock.cpp	/^void Flock::gethash(void)$/;"	f	class:Flock	typeref:typename:void
glBindVertexArray	includes/rlgl.h	/^static PFNGLBINDVERTEXARRAYOESPROC glBindVertexArray = NULL;$/;"	v	typeref:typename:PFNGLBINDVERTEXARRAYOESPROC
glBlendDestFactorAlpha	includes/rlgl.h	/^        int glBlendDestFactorAlpha;         \/\/ Blending destination alpha factor$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:int
glBlendDestFactorRGB	includes/rlgl.h	/^        int glBlendDestFactorRGB;           \/\/ Blending destination RGB factor$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:int
glBlendDstFactor	includes/rlgl.h	/^        int glBlendDstFactor;               \/\/ Blending destination factor$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:int
glBlendEquation	includes/rlgl.h	/^        int glBlendEquation;                \/\/ Blending equation$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:int
glBlendEquationAlpha	includes/rlgl.h	/^        int glBlendEquationAlpha;           \/\/ Blending equation for alpha$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:int
glBlendEquationRGB	includes/rlgl.h	/^        int glBlendEquationRGB;             \/\/ Blending equation for RGB$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:int
glBlendSrcFactor	includes/rlgl.h	/^        int glBlendSrcFactor;               \/\/ Blending source factor$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:int
glBlendSrcFactorAlpha	includes/rlgl.h	/^        int glBlendSrcFactorAlpha;          \/\/ Blending source alpha factor$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:int
glBlendSrcFactorRGB	includes/rlgl.h	/^        int glBlendSrcFactorRGB;            \/\/ Blending source RGB factor$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:int
glClearDepth	includes/rlgl.h	/^    #define glClearDepth /;"	d
glCustomBlendModeModified	includes/rlgl.h	/^        bool glCustomBlendModeModified;     \/\/ Custom blending factor and equation modificatio/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:bool
glDeleteVertexArrays	includes/rlgl.h	/^static PFNGLDELETEVERTEXARRAYSOESPROC glDeleteVertexArrays = NULL;$/;"	v	typeref:typename:PFNGLDELETEVERTEXARRAYSOESPROC
glDrawArraysInstanced	includes/rlgl.h	/^static PFNGLDRAWARRAYSINSTANCEDEXTPROC glDrawArraysInstanced = NULL;$/;"	v	typeref:typename:PFNGLDRAWARRAYSINSTANCEDEXTPROC
glDrawElementsInstanced	includes/rlgl.h	/^static PFNGLDRAWELEMENTSINSTANCEDEXTPROC glDrawElementsInstanced = NULL;$/;"	v	typeref:typename:PFNGLDRAWELEMENTSINSTANCEDEXTPROC
glGenVertexArrays	includes/rlgl.h	/^static PFNGLGENVERTEXARRAYSOESPROC glGenVertexArrays = NULL;$/;"	v	typeref:typename:PFNGLGENVERTEXARRAYSOESPROC
glVertexAttribDivisor	includes/rlgl.h	/^static PFNGLVERTEXATTRIBDIVISOREXTPROC glVertexAttribDivisor = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBDIVISOREXTPROC
glyf	includes/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
glyph1	includes/imstb_truetype.h	/^   int glyph1; \/\/ use stbtt_FindGlyphIndex$/;"	m	struct:stbtt_kerningentry	typeref:typename:int
glyph2	includes/imstb_truetype.h	/^   int glyph2;$/;"	m	struct:stbtt_kerningentry	typeref:typename:int
glyphCount	includes/raylib.h	/^    int glyphCount;         \/\/ Number of glyph characters$/;"	m	struct:Font	typeref:typename:int
glyphPadding	includes/raylib.h	/^    int glyphPadding;       \/\/ Padding around the glyph characters$/;"	m	struct:Font	typeref:typename:int
glyphs	includes/raylib.h	/^    GlyphInfo *glyphs;      \/\/ Glyphs info data$/;"	m	struct:Font	typeref:typename:GlyphInfo *
gpos	includes/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
gsubrs	includes/imstb_truetype.h	/^   stbtt__buf gsubrs;                 \/\/ global charstring subroutines index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
h	includes/imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
h	includes/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
h	includes/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon0587e8010808	typeref:typename:int
hResolution	includes/raylib.h	/^    int hResolution;                \/\/ Horizontal resolution in pixels$/;"	m	struct:VrDeviceInfo	typeref:typename:int
hScreenSize	includes/raylib.h	/^    float hScreenSize;              \/\/ Horizontal size in meters$/;"	m	struct:VrDeviceInfo	typeref:typename:float
h_oversample	includes/imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anon0587e8010508	typeref:typename:unsigned char
h_oversample	includes/imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned int
has_preferred_x	includes/imstb_textedit.h	/^   unsigned char has_preferred_x;$/;"	m	struct:STB_TexteditState	typeref:typename:unsigned char
hash	includes/classes/Flock.hpp	/^		SpatialHashing hash;$/;"	m	class:Flock	typeref:typename:SpatialHashing
hash	srcs/classes/SpatialHashing.cpp	/^int		SpatialHashing::hash(Vector2 center)$/;"	f	class:SpatialHashing	typeref:typename:int
hashaverage	srcs/classes/Flock.cpp	/^void Flock::hashaverage(void)$/;"	f	class:Flock	typeref:typename:void
head	includes/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
head	includes/imstb_truetype.h	/^   struct stbtt__hheap_chunk *head;$/;"	m	struct:stbtt__hheap	typeref:struct:stbtt__hheap_chunk *
height	includes/imstb_rectpack.h	/^   int height;$/;"	m	struct:stbrp_context	typeref:typename:int
height	includes/imstb_textedit.h	/^   float height; \/\/ height of line$/;"	m	struct:__anon3e283e0a0408	typeref:typename:float
height	includes/imstb_truetype.h	/^   int   height;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
height	includes/imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anon0587e8011108	typeref:typename:int
height	includes/raylib.h	/^    float height;           \/\/ Rectangle height$/;"	m	struct:Rectangle	typeref:typename:float
height	includes/raylib.h	/^    int height;             \/\/ Image base height$/;"	m	struct:Image	typeref:typename:int
height	includes/raylib.h	/^    int height;             \/\/ Texture base height$/;"	m	struct:Texture	typeref:typename:int
heuristic	includes/imstb_rectpack.h	/^   int heuristic;$/;"	m	struct:stbrp_context	typeref:typename:int
hhea	includes/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
hit	includes/raylib.h	/^    bool hit;               \/\/ Did the ray hit something?$/;"	m	struct:RayCollision	typeref:typename:bool
hmtx	includes/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
id	includes/imstb_rectpack.h	/^   int            id;$/;"	m	struct:stbrp_rect	typeref:typename:int
id	includes/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
id	includes/raylib.h	/^    unsigned int id;        \/\/ OpenGL framebuffer object id$/;"	m	struct:RenderTexture	typeref:typename:unsigned int
id	includes/raylib.h	/^    unsigned int id;        \/\/ OpenGL texture id$/;"	m	struct:Texture	typeref:typename:unsigned int
id	includes/raylib.h	/^    unsigned int id;        \/\/ Shader program id$/;"	m	struct:Shader	typeref:typename:unsigned int
image	includes/raylib.h	/^    Image image;            \/\/ Character image data$/;"	m	struct:GlyphInfo	typeref:typename:Image
includePath	.vscode/c_cpp_properties.json	/^            "includePath": [$/;"	a	object:configurations.0
indexToLocFormat	includes/imstb_truetype.h	/^   int indexToLocFormat;              \/\/ format needed to map from glyph index to glyph$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
index_from_ptr	includes/imgui.h	/^    inline int          index_from_ptr(const T* it) const   { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:int
index_from_ptr	includes/imgui_internal.h	/^    inline int  index_from_ptr(const T* it) const   { IM_ASSERT(it >= Data && it < DataEnd); con/;"	f	struct:ImSpan	typeref:typename:int
index_map	includes/imstb_truetype.h	/^   int index_map;                     \/\/ a cmap mapping for our chosen character encoding$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
indices	includes/raylib.h	/^    unsigned short *indices;    \/\/ Vertex indices (in case vertex data comes indexed)$/;"	m	struct:Mesh	typeref:typename:unsigned short *
indices	includes/rlgl.h	/^    unsigned int *indices;      \/\/ Vertex indices (in case vertex data comes indexed) (6 indic/;"	m	struct:rlVertexBuffer	typeref:typename:unsigned int *
indices	includes/rlgl.h	/^    unsigned short *indices;    \/\/ Vertex indices (in case vertex data comes indexed) (6 indic/;"	m	struct:rlVertexBuffer	typeref:typename:unsigned short *
init_engine	srcs/main.cpp	/^void	init_engine(t_game *game)$/;"	f	typeref:typename:void
init_mode	includes/imstb_rectpack.h	/^   int init_mode;$/;"	m	struct:stbrp_context	typeref:typename:int
initialized	includes/imstb_textedit.h	/^   unsigned char initialized;$/;"	m	struct:STB_TexteditState	typeref:typename:unsigned char
insert	includes/imgui.h	/^    inline T*           insert(const T* it, const T& v)     { IM_ASSERT(it >= Data && it <= Data/;"	f	struct:ImVector	typeref:typename:T *
insert	srcs/classes/SpatialHashing.cpp	/^void	SpatialHashing::insert(Boid *boid)$/;"	f	class:SpatialHashing	typeref:typename:void
insert_length	includes/imstb_textedit.h	/^   IMSTB_TEXTEDIT_POSITIONTYPE  insert_length;$/;"	m	struct:__anon3e283e0a0108	typeref:typename:IMSTB_TEXTEDIT_POSITIONTYPE
insert_mode	includes/imstb_textedit.h	/^   unsigned char insert_mode;$/;"	m	struct:STB_TexteditState	typeref:typename:unsigned char
instancing	includes/rlgl.h	/^        bool instancing;                    \/\/ Instancing supported (GL_ANGLE_instanced_arrays/;"	m	struct:rlglData::__anon315aabf20e08	typeref:typename:bool
integer	imgui.cpp	/^    union { void* ptr; int integer; } tex_id_opaque;$/;"	m	union:FormatTextureIDForDebugDisplay::__anon624f8571030a	typeref:typename:int	file:
intelliSenseMode	.vscode/c_cpp_properties.json	/^            "intelliSenseMode": "linux-clang-x64",$/;"	s	object:configurations.0
interpupillaryDistance	includes/raylib.h	/^    float interpupillaryDistance;   \/\/ IPD (distance between pupils) in meters$/;"	m	struct:VrDeviceInfo	typeref:typename:float
invert	includes/imstb_truetype.h	/^   int invert;$/;"	m	struct:stbtt__edge	typeref:typename:int
is_word_boundary	includes/imstb_textedit.h	/^static int is_word_boundary( IMSTB_TEXTEDIT_STRING *str, int idx )$/;"	f	typeref:typename:int
is_word_boundary_from_left	imgui_widgets.cpp	/^static int is_word_boundary_from_left(ImGuiInputTextState* obj, int idx)$/;"	f	namespace:ImStb	typeref:typename:int	file:
is_word_boundary_from_right	imgui_widgets.cpp	/^static int is_word_boundary_from_right(ImGuiInputTextState* obj, int idx)$/;"	f	namespace:ImStb	typeref:typename:int	file:
iterator	includes/imgui.h	/^    typedef value_type*         iterator;$/;"	t	struct:ImVector	typeref:typename:value_type *
kern	includes/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
key	includes/imgui.h	/^    ImGuiID     key;$/;"	m	struct:ImGuiStoragePair	typeref:typename:ImGuiID
layout	includes/raylib.h	/^    int layout;             \/\/ Layout of the n-patch: 3x3, 1x3 or 3x1$/;"	m	struct:NPatchInfo	typeref:typename:int
left	includes/raylib.h	/^    int left;               \/\/ Left border offset$/;"	m	struct:NPatchInfo	typeref:typename:int
leftLensCenter	includes/raylib.h	/^    float leftLensCenter[2];        \/\/ VR left lens center$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
leftScreenCenter	includes/raylib.h	/^    float leftScreenCenter[2];      \/\/ VR left screen center$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
length	includes/imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anon3e283e0a0408	typeref:typename:int
lensDistortionValues	includes/raylib.h	/^    float lensDistortionValues[4];  \/\/ Lens distortion constant parameters$/;"	m	struct:VrDeviceInfo	typeref:typename:float[4]
lensSeparationDistance	includes/raylib.h	/^    float lensSeparationDistance;   \/\/ Lens separation distance in meters$/;"	m	struct:VrDeviceInfo	typeref:typename:float
loca	includes/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
locs	includes/raylib.h	/^    int *locs;              \/\/ Shader locations array (RL_MAX_SHADER_LOCATIONS)$/;"	m	struct:Shader	typeref:typename:int *
looping	includes/raylib.h	/^    bool looping;               \/\/ Music looping enable$/;"	m	struct:Music	typeref:typename:bool
m0	includes/raylib.h	/^    float m0, m4, m8, m12;  \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m0	includes/raymath.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m0	includes/rlgl.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m1	includes/raylib.h	/^    float m1, m5, m9, m13;  \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m1	includes/raymath.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m1	includes/rlgl.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m10	includes/raylib.h	/^    float m2, m6, m10, m14; \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m10	includes/raymath.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m10	includes/rlgl.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m11	includes/raylib.h	/^    float m3, m7, m11, m15; \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m11	includes/raymath.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m11	includes/rlgl.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m12	includes/raylib.h	/^    float m0, m4, m8, m12;  \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m12	includes/raymath.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m12	includes/rlgl.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m13	includes/raylib.h	/^    float m1, m5, m9, m13;  \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m13	includes/raymath.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m13	includes/rlgl.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m14	includes/raylib.h	/^    float m2, m6, m10, m14; \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m14	includes/raymath.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m14	includes/rlgl.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m15	includes/raylib.h	/^    float m3, m7, m11, m15; \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m15	includes/raymath.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m15	includes/rlgl.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m2	includes/raylib.h	/^    float m2, m6, m10, m14; \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m2	includes/raymath.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m2	includes/rlgl.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m3	includes/raylib.h	/^    float m3, m7, m11, m15; \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m3	includes/raymath.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m3	includes/rlgl.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m4	includes/raylib.h	/^    float m0, m4, m8, m12;  \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m4	includes/raymath.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m4	includes/rlgl.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m5	includes/raylib.h	/^    float m1, m5, m9, m13;  \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m5	includes/raymath.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m5	includes/rlgl.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m6	includes/raylib.h	/^    float m2, m6, m10, m14; \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m6	includes/raymath.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m6	includes/rlgl.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m7	includes/raylib.h	/^    float m3, m7, m11, m15; \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m7	includes/raymath.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m7	includes/rlgl.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m8	includes/raylib.h	/^    float m0, m4, m8, m12;  \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m8	includes/raymath.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m8	includes/rlgl.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m9	includes/raylib.h	/^    float m1, m5, m9, m13;  \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m9	includes/raymath.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m9	includes/rlgl.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
main	srcs/main.cpp	/^int	main(void)$/;"	f	typeref:typename:int
main_clipboard	imgui.cpp	/^static PasteboardRef main_clipboard = 0;$/;"	v	typeref:typename:PasteboardRef	file:
maps	includes/raylib.h	/^    MaterialMap *maps;      \/\/ Material maps array (MAX_MATERIAL_MAPS)$/;"	m	struct:Material	typeref:typename:MaterialMap *
materialCount	includes/raylib.h	/^    int materialCount;      \/\/ Number of materials$/;"	m	struct:Model	typeref:typename:int
materials	includes/raylib.h	/^    Material *materials;    \/\/ Materials array$/;"	m	struct:Model	typeref:typename:Material *
max	includes/raylib.h	/^    Vector3 max;            \/\/ Maximum vertex box-corner$/;"	m	struct:BoundingBox	typeref:typename:Vector3
maxAnisotropyLevel	includes/rlgl.h	/^        float maxAnisotropyLevel;           \/\/ Maximum anisotropy level supported (minimum is /;"	m	struct:rlglData::__anon315aabf20e08	typeref:typename:float
maxDepthBits	includes/rlgl.h	/^        int maxDepthBits;                   \/\/ Maximum bits for depth component$/;"	m	struct:rlglData::__anon315aabf20e08	typeref:typename:int
max_alignment	includes/classes/Boid.hpp	/^	float		max_alignment;$/;"	m	struct:s_boid	typeref:typename:float
max_cohesion	includes/classes/Boid.hpp	/^	float		max_cohesion;$/;"	m	struct:s_boid	typeref:typename:float
max_separation	includes/classes/Boid.hpp	/^	float		max_separation;$/;"	m	struct:s_boid	typeref:typename:float
max_size	includes/imgui.h	/^    inline int          max_size() const                    { return 0x7FFFFFFF \/ (int)sizeof(T/;"	f	struct:ImVector	typeref:typename:int
max_speed	includes/classes/Boid.hpp	/^	float		max_speed;$/;"	m	struct:s_boid	typeref:typename:float
max_steer	includes/classes/Boid.hpp	/^	float		max_steer;$/;"	m	struct:s_boid	typeref:typename:float
max_x	includes/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon0587e8010f08	typeref:typename:stbtt_int32
max_y	includes/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon0587e8010f08	typeref:typename:stbtt_int32
meshCount	includes/raylib.h	/^    int meshCount;          \/\/ Number of meshes$/;"	m	struct:Model	typeref:typename:int
meshMaterial	includes/raylib.h	/^    int *meshMaterial;      \/\/ Mesh material number$/;"	m	struct:Model	typeref:typename:int *
meshes	includes/raylib.h	/^    Mesh *meshes;           \/\/ Meshes array$/;"	m	struct:Model	typeref:typename:Mesh *
min	includes/raylib.h	/^    Vector3 min;            \/\/ Minimum vertex box-corner$/;"	m	struct:BoundingBox	typeref:typename:Vector3
min_speed	includes/classes/Boid.hpp	/^	float		min_speed;$/;"	m	struct:s_boid	typeref:typename:float
min_x	includes/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon0587e8010f08	typeref:typename:stbtt_int32
min_y	includes/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon0587e8010f08	typeref:typename:stbtt_int32
mipmaps	includes/raylib.h	/^    int mipmaps;            \/\/ Mipmap levels, 1 by default$/;"	m	struct:Image	typeref:typename:int
mipmaps	includes/raylib.h	/^    int mipmaps;            \/\/ Mipmap levels, 1 by default$/;"	m	struct:Texture	typeref:typename:int
mirror	includes/classes/Flock.hpp	/^	bool	mirror;$/;"	m	struct:s_globaloptions	typeref:typename:bool
mirror	srcs/classes/Boid.cpp	/^void Boid::mirror(void)$/;"	f	class:Boid	typeref:typename:void
mirror	srcs/classes/Flock.cpp	/^void Flock::mirror(void)$/;"	f	class:Flock	typeref:typename:void
mode	includes/rlgl.h	/^    int mode;                   \/\/ Drawing mode: LINES, TRIANGLES, QUADS$/;"	m	struct:rlDrawCall	typeref:typename:int
modelview	includes/rlgl.h	/^        Matrix modelview;                   \/\/ Default modelview matrix$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:Matrix
name	.vscode/c_cpp_properties.json	/^            "name": "Linux",$/;"	s	object:configurations.0
name	includes/raylib.h	/^    char name[32];          \/\/ Animation name$/;"	m	struct:ModelAnimation	typeref:typename:char[32]
name	includes/raylib.h	/^    char name[32];          \/\/ Bone name$/;"	m	struct:BoneInfo	typeref:typename:char[32]
next	includes/classes/SpatialHashing.hpp	/^	struct t_boid_list	*next;$/;"	m	struct:t_boid_list	typeref:struct:t_boid_list *
next	includes/imstb_rectpack.h	/^   stbrp_node  *next;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_node *
next	includes/imstb_truetype.h	/^   struct stbtt__active_edge *next;$/;"	m	struct:stbtt__active_edge	typeref:struct:stbtt__active_edge *
next	includes/imstb_truetype.h	/^   struct stbtt__hheap_chunk *next;$/;"	m	struct:stbtt__hheap_chunk	typeref:struct:stbtt__hheap_chunk *
next_chunk	includes/imgui_internal.h	/^    T*      next_chunk(T* p)            { size_t HDR_SZ = 4; IM_ASSERT(p >= begin() && p < end()/;"	f	struct:ImChunkStream	typeref:typename:T *
nodes	includes/imstb_truetype.h	/^   void  *nodes;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
normal	includes/raylib.h	/^    Vector3 normal;         \/\/ Surface normal of hit$/;"	m	struct:RayCollision	typeref:typename:Vector3
normals	includes/raylib.h	/^    float *normals;         \/\/ Vertex normals (XYZ - 3 components per vertex) (shader-location/;"	m	struct:Mesh	typeref:typename:float *
normals	includes/rlgl.h	/^    float *normals;             \/\/ Vertex normal (XYZ - 3 components per vertex) (shader-locat/;"	m	struct:rlVertexBuffer	typeref:typename:float *
normalx	includes/rlgl.h	/^        float normalx, normaly, normalz;    \/\/ Current active normal (added on glVertex*())$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:float
normaly	includes/rlgl.h	/^        float normalx, normaly, normalz;    \/\/ Current active normal (added on glVertex*())$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:float
normalz	includes/rlgl.h	/^        float normalx, normaly, normalz;    \/\/ Current active normal (added on glVertex*())$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:float
numGlyphs	includes/imstb_truetype.h	/^   int numGlyphs;                     \/\/ number of glyphs, needed for range checking$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
num_chars	includes/imstb_textedit.h	/^   int num_chars;$/;"	m	struct:__anon3e283e0a0308	typeref:typename:int
num_chars	includes/imstb_truetype.h	/^   int num_chars;$/;"	m	struct:__anon0587e8010508	typeref:typename:int
num_nodes	includes/imstb_rectpack.h	/^   int num_nodes;$/;"	m	struct:stbrp_context	typeref:typename:int
num_remaining_in_head_chunk	includes/imstb_truetype.h	/^   int    num_remaining_in_head_chunk;$/;"	m	struct:stbtt__hheap	typeref:typename:int
num_vertices	includes/imstb_truetype.h	/^   int num_vertices;$/;"	m	struct:__anon0587e8010f08	typeref:typename:int
obstacle_avoidance	includes/classes/Boid.hpp	/^	float		obstacle_avoidance;$/;"	m	struct:s_boid	typeref:typename:float
offset	includes/raylib.h	/^    Vector2 offset;         \/\/ Camera offset (displacement from target)$/;"	m	struct:Camera2D	typeref:typename:Vector2
offsetX	includes/raylib.h	/^    int offsetX;            \/\/ Character offset X when drawing$/;"	m	struct:GlyphInfo	typeref:typename:int
offsetY	includes/raylib.h	/^    int offsetY;            \/\/ Character offset Y when drawing$/;"	m	struct:GlyphInfo	typeref:typename:int
offset_from_ptr	includes/imgui_internal.h	/^    int     offset_from_ptr(const T* p) { IM_ASSERT(p >= begin() && p < end()); const ptrdiff_t /;"	f	struct:ImChunkStream	typeref:typename:int
operator !=	includes/imgui.h	/^static inline bool    operator!=(const ImVec2& lhs, const ImVec2& rhs)  { return lhs.x != rhs.x /;"	f	typeref:typename:bool
operator !=	includes/imgui.h	/^static inline bool    operator!=(const ImVec4& lhs, const ImVec4& rhs)  { return lhs.x != rhs.x /;"	f	typeref:typename:bool
operator !=	includes/raymath.h	/^inline bool operator != (const Vector2& lhs, const Vector2& rhs)$/;"	f	typeref:typename:bool
operator !=	includes/raymath.h	/^inline bool operator != (const Vector3& lhs, const Vector3& rhs)$/;"	f	typeref:typename:bool
operator !=	includes/raymath.h	/^inline bool operator != (const Vector4& lhs, const Vector4& rhs)$/;"	f	typeref:typename:bool
operator *	includes/imgui.h	/^static inline ImVec2  operator*(const ImVec2& lhs, const ImVec2& rhs)   { return ImVec2(lhs.x * /;"	f	typeref:typename:ImVec2
operator *	includes/imgui.h	/^static inline ImVec2  operator*(const ImVec2& lhs, const float rhs)     { return ImVec2(lhs.x * /;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF ImVec2
operator *	includes/imgui.h	/^static inline ImVec4  operator*(const ImVec4& lhs, const ImVec4& rhs)   { return ImVec4(lhs.x * /;"	f	typeref:typename:ImVec4
operator *	includes/raymath.h	/^inline Matrix operator * (const Matrix& lhs, const Matrix& rhs)$/;"	f	typeref:typename:Matrix
operator *	includes/raymath.h	/^inline Quaternion operator * (const Quaternion& lhs, const Matrix& rhs)$/;"	f	typeref:typename:Quaternion
operator *	includes/raymath.h	/^inline Vector2 operator * (const Vector2& lhs, const Matrix& rhs)$/;"	f	typeref:typename:Vector2
operator *	includes/raymath.h	/^inline Vector2 operator * (const Vector2& lhs, const Vector2& rhs)$/;"	f	typeref:typename:Vector2
operator *	includes/raymath.h	/^inline Vector2 operator * (const Vector2& lhs, const float& rhs)$/;"	f	typeref:typename:Vector2
operator *	includes/raymath.h	/^inline Vector3 operator * (const Vector3& lhs, const Matrix& rhs)$/;"	f	typeref:typename:Vector3
operator *	includes/raymath.h	/^inline Vector3 operator * (const Vector3& lhs, const Vector3& rhs)$/;"	f	typeref:typename:Vector3
operator *	includes/raymath.h	/^inline Vector3 operator * (const Vector3& lhs, const float& rhs)$/;"	f	typeref:typename:Vector3
operator *	includes/raymath.h	/^inline Vector4 operator * (const Vector4& lhs, const Vector4& rhs)$/;"	f	typeref:typename:Vector4
operator *	includes/raymath.h	/^inline Vector4 operator * (const Vector4& lhs, const float& rhs)$/;"	f	typeref:typename:Vector4
operator *=	includes/imgui.h	/^static inline ImVec2& operator*=(ImVec2& lhs, const ImVec2& rhs)        { lhs.x *= rhs.x; lhs.y /;"	f	typeref:typename:ImVec2 &
operator *=	includes/imgui.h	/^static inline ImVec2& operator*=(ImVec2& lhs, const float rhs)          { lhs.x *= rhs; lhs.y *=/;"	f	typeref:typename:ImVec2 &
operator *=	includes/raymath.h	/^inline const Matrix& operator *= (Matrix& lhs, const Matrix& rhs)$/;"	f	typeref:typename:const Matrix &
operator *=	includes/raymath.h	/^inline const Quaternion& operator *= (Quaternion& lhs, const Matrix& rhs)$/;"	f	typeref:typename:const Quaternion &
operator *=	includes/raymath.h	/^inline const Vector2& operator *= (Vector2& lhs, const Matrix& rhs)$/;"	f	typeref:typename:const Vector2 &
operator *=	includes/raymath.h	/^inline const Vector2& operator *= (Vector2& lhs, const Vector2& rhs)$/;"	f	typeref:typename:const Vector2 &
operator *=	includes/raymath.h	/^inline const Vector2& operator *= (Vector2& lhs, const float& rhs)$/;"	f	typeref:typename:const Vector2 &
operator *=	includes/raymath.h	/^inline const Vector3& operator *= (Vector3& lhs, const Matrix& rhs)$/;"	f	typeref:typename:const Vector3 &
operator *=	includes/raymath.h	/^inline const Vector3& operator *= (Vector3& lhs, const Vector3& rhs)$/;"	f	typeref:typename:const Vector3 &
operator *=	includes/raymath.h	/^inline const Vector3& operator *= (Vector3& lhs, const float& rhs)$/;"	f	typeref:typename:const Vector3 &
operator *=	includes/raymath.h	/^inline const Vector4& operator *= (Vector4& lhs, const Vector4& rhs)$/;"	f	typeref:typename:const Vector4 &
operator *=	includes/raymath.h	/^inline const Vector4& operator *= (Vector4& lhs, const float& rhs)$/;"	f	typeref:typename:const Vector4 &
operator +	includes/imgui.h	/^static inline ImVec2  operator+(const ImVec2& lhs, const ImVec2& rhs)   { return ImVec2(lhs.x + /;"	f	typeref:typename:ImVec2
operator +	includes/imgui.h	/^static inline ImVec4  operator+(const ImVec4& lhs, const ImVec4& rhs)   { return ImVec4(lhs.x + /;"	f	typeref:typename:ImVec4
operator +	includes/raymath.h	/^inline Matrix operator + (const Matrix& lhs, const Matrix& rhs)$/;"	f	typeref:typename:Matrix
operator +	includes/raymath.h	/^inline Quaternion operator + (const Quaternion& lhs, const float& rhs)$/;"	f	typeref:typename:Quaternion
operator +	includes/raymath.h	/^inline Vector2 operator + (const Vector2& lhs, const Vector2& rhs)$/;"	f	typeref:typename:Vector2
operator +	includes/raymath.h	/^inline Vector3 operator + (const Vector3& lhs, const Vector3& rhs)$/;"	f	typeref:typename:Vector3
operator +	includes/raymath.h	/^inline Vector4 operator + (const Vector4& lhs, const Vector4& rhs)$/;"	f	typeref:typename:Vector4
operator +=	includes/imgui.h	/^static inline ImVec2& operator+=(ImVec2& lhs, const ImVec2& rhs)        { lhs.x += rhs.x; lhs.y /;"	f	typeref:typename:ImVec2 &
operator +=	includes/raymath.h	/^inline const Matrix& operator += (Matrix& lhs, const Matrix& rhs)$/;"	f	typeref:typename:const Matrix &
operator +=	includes/raymath.h	/^inline const Quaternion& operator += (Quaternion& lhs, const float& rhs)$/;"	f	typeref:typename:const Quaternion &
operator +=	includes/raymath.h	/^inline const Vector2& operator += (Vector2& lhs, const Vector2& rhs)$/;"	f	typeref:typename:const Vector2 &
operator +=	includes/raymath.h	/^inline const Vector3& operator += (Vector3& lhs, const Vector3& rhs)$/;"	f	typeref:typename:const Vector3 &
operator +=	includes/raymath.h	/^inline const Vector4& operator += (Vector4& lhs, const Vector4& rhs)$/;"	f	typeref:typename:const Vector4 &
operator -	includes/imgui.h	/^static inline ImVec2  operator-(const ImVec2& lhs)                      { return ImVec2(-lhs.x, /;"	f	typeref:typename:ImVec2
operator -	includes/imgui.h	/^static inline ImVec2  operator-(const ImVec2& lhs, const ImVec2& rhs)   { return ImVec2(lhs.x - /;"	f	typeref:typename:ImVec2
operator -	includes/imgui.h	/^static inline ImVec4  operator-(const ImVec4& lhs, const ImVec4& rhs)   { return ImVec4(lhs.x - /;"	f	typeref:typename:ImVec4
operator -	includes/raymath.h	/^inline Matrix operator - (const Matrix& lhs, const Matrix& rhs)$/;"	f	typeref:typename:Matrix
operator -	includes/raymath.h	/^inline Quaternion operator - (const Quaternion& lhs, const float& rhs)$/;"	f	typeref:typename:Quaternion
operator -	includes/raymath.h	/^inline Vector2 operator - (const Vector2& lhs, const Vector2& rhs)$/;"	f	typeref:typename:Vector2
operator -	includes/raymath.h	/^inline Vector3 operator - (const Vector3& lhs, const Vector3& rhs)$/;"	f	typeref:typename:Vector3
operator -	includes/raymath.h	/^inline Vector4 operator - (const Vector4& lhs, const Vector4& rhs)$/;"	f	typeref:typename:Vector4
operator -=	includes/imgui.h	/^static inline ImVec2& operator-=(ImVec2& lhs, const ImVec2& rhs)        { lhs.x -= rhs.x; lhs.y /;"	f	typeref:typename:ImVec2 &
operator -=	includes/raymath.h	/^inline const Matrix& operator -= (Matrix& lhs, const Matrix& rhs)$/;"	f	typeref:typename:const Matrix &
operator -=	includes/raymath.h	/^inline const Quaternion& operator -= (Quaternion& lhs, const float& rhs)$/;"	f	typeref:typename:const Quaternion &
operator -=	includes/raymath.h	/^inline const Vector2& operator -= (Vector2& lhs, const Vector2& rhs)$/;"	f	typeref:typename:const Vector2 &
operator -=	includes/raymath.h	/^inline const Vector3& operator -= (Vector3& lhs, const Vector3& rhs)$/;"	f	typeref:typename:const Vector3 &
operator -=	includes/raymath.h	/^inline const Vector4& operator -= (Vector4& lhs, const Vector4& rhs)$/;"	f	typeref:typename:const Vector4 &
operator /	includes/imgui.h	/^static inline ImVec2  operator\/(const ImVec2& lhs, const ImVec2& rhs)   { return ImVec2(lhs.x \//;"	f	typeref:typename:ImVec2
operator /	includes/imgui.h	/^static inline ImVec2  operator\/(const ImVec2& lhs, const float rhs)     { return ImVec2(lhs.x \//;"	f	typeref:typename:ImVec2
operator /	includes/raymath.h	/^inline Vector2 operator \/ (const Vector2& lhs, const Vector2& rhs)$/;"	f	typeref:typename:Vector2
operator /	includes/raymath.h	/^inline Vector2 operator \/ (const Vector2& lhs, const float& rhs)$/;"	f	typeref:typename:Vector2
operator /	includes/raymath.h	/^inline Vector3 operator \/ (const Vector3& lhs, const Vector3& rhs)$/;"	f	typeref:typename:Vector3
operator /	includes/raymath.h	/^inline Vector3 operator \/ (const Vector3& lhs, const float& rhs)$/;"	f	typeref:typename:Vector3
operator /	includes/raymath.h	/^inline Vector4 operator \/ (const Vector4& lhs, const Vector4& rhs)$/;"	f	typeref:typename:Vector4
operator /	includes/raymath.h	/^inline Vector4 operator \/ (const Vector4& lhs, const float& rhs)$/;"	f	typeref:typename:Vector4
operator /=	includes/imgui.h	/^static inline ImVec2& operator\/=(ImVec2& lhs, const ImVec2& rhs)        { lhs.x \/= rhs.x; lhs./;"	f	typeref:typename:ImVec2 &
operator /=	includes/imgui.h	/^static inline ImVec2& operator\/=(ImVec2& lhs, const float rhs)          { lhs.x \/= rhs; lhs.y /;"	f	typeref:typename:ImVec2 &
operator /=	includes/raymath.h	/^inline const Vector2& operator \/= (Vector2& lhs, const Vector2& rhs)$/;"	f	typeref:typename:const Vector2 &
operator /=	includes/raymath.h	/^inline const Vector2& operator \/= (Vector2& lhs, const float& rhs)$/;"	f	typeref:typename:const Vector2 &
operator /=	includes/raymath.h	/^inline const Vector3& operator \/= (Vector3& lhs, const Vector3& rhs)$/;"	f	typeref:typename:const Vector3 &
operator /=	includes/raymath.h	/^inline const Vector3& operator \/= (Vector3& lhs, const float& rhs)$/;"	f	typeref:typename:const Vector3 &
operator /=	includes/raymath.h	/^inline const Vector4& operator \/= (Vector4& lhs, const Vector4& rhs)$/;"	f	typeref:typename:const Vector4 &
operator /=	includes/raymath.h	/^inline const Vector4& operator \/= (Vector4& lhs, const float& rhs)$/;"	f	typeref:typename:const Vector4 &
operator =	includes/imgui.h	/^    inline ImVector<T>& operator=(const ImVector<T>& src)   { clear(); resize(src.Size); if (src/;"	f	struct:ImVector	typeref:typename:ImVector<T> &
operator ==	includes/imgui.h	/^static inline bool    operator==(const ImVec2& lhs, const ImVec2& rhs)  { return lhs.x == rhs.x /;"	f	typeref:typename:bool
operator ==	includes/imgui.h	/^static inline bool    operator==(const ImVec4& lhs, const ImVec4& rhs)  { return lhs.x == rhs.x /;"	f	typeref:typename:bool
operator ==	includes/raymath.h	/^inline bool operator == (const Vector2& lhs, const Vector2& rhs)$/;"	f	typeref:typename:bool
operator ==	includes/raymath.h	/^inline bool operator == (const Vector3& lhs, const Vector3& rhs)$/;"	f	typeref:typename:bool
operator ==	includes/raymath.h	/^inline bool operator == (const Vector4& lhs, const Vector4& rhs)$/;"	f	typeref:typename:bool
operator ImU32	includes/imgui.h	/^    inline operator ImU32() const                                   { return ImGui::ColorConvert/;"	f	struct:ImColor
operator ImVec4	includes/imgui.h	/^    inline operator ImVec4() const                                  { return Value; }$/;"	f	struct:ImColor
operator []	includes/imgui.h	/^    inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); ret/;"	f	struct:ImVector	typeref:typename:T &
operator []	includes/imgui.h	/^    inline char         operator[](int i) const { IM_ASSERT(Buf.Data != NULL); return Buf.Data[i/;"	f	struct:ImGuiTextBuffer	typeref:typename:char
operator []	includes/imgui.h	/^    inline const T&     operator[](int i) const             { IM_ASSERT(i >= 0 && i < Size); ret/;"	f	struct:ImVector	typeref:typename:const T &
operator []	includes/imgui_internal.h	/^    bool            operator[](int n) const     { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:bool
operator []	includes/imgui_internal.h	/^    inline T&           operator[](int i)           { T* p = Data + i; IM_ASSERT(p >= Data && p /;"	f	struct:ImSpan	typeref:typename:T &
operator []	includes/imgui_internal.h	/^    inline const T&     operator[](int i) const     { const T* p = Data + i; IM_ASSERT(p >= Data/;"	f	struct:ImSpan	typeref:typename:const T &
operator [] 	includes/imgui.h	/^    float  operator[] (size_t idx) const    { IM_ASSERT(idx == 0 || idx == 1); return ((const fl/;"	f	struct:ImVec2	typeref:typename:float
operator [] 	includes/imgui.h	/^    float& operator[] (size_t idx)          { IM_ASSERT(idx == 0 || idx == 1); return ((float*)(/;"	f	struct:ImVec2	typeref:typename:float &
operator bool	includes/imgui.h	/^    operator bool() const { int current_frame = ImGui::GetFrameCount(); if (RefFrame == current_/;"	f	struct:ImGuiOnceUponAFrame
operator delete	includes/imgui.h	/^inline void  operator delete(void*, ImNewWrapper, void*)   {} \/\/ This is only required so we c/;"	f	typeref:typename:void
operator new	includes/imgui.h	/^inline void* operator new(size_t, ImNewWrapper, void* ptr) { return ptr; }$/;"	f	typeref:typename:void *
options	includes/classes/Flock.hpp	/^		t_globaloptions	options;$/;"	m	class:Flock	typeref:typename:t_globaloptions
pack_info	includes/imstb_truetype.h	/^   void *pack_info;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
padding	includes/imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon0587e8010708	typeref:typename:unsigned char
padding	includes/imstb_truetype.h	/^   int   padding;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
padding1	includes/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:STB_TexteditState	typeref:typename:unsigned char
padding2	includes/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:STB_TexteditState	typeref:typename:unsigned char
padding3	includes/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:STB_TexteditState	typeref:typename:unsigned char
params	includes/raylib.h	/^    float params[4];        \/\/ Material generic parameters (if required)$/;"	m	struct:Material	typeref:typename:float[4]
params	includes/raylib.h	/^    int params[4];                  \/\/ Event parameters (if required)$/;"	m	struct:AutomationEvent	typeref:typename:int[4]
parent	includes/raylib.h	/^    int parent;             \/\/ Bone parent$/;"	m	struct:BoneInfo	typeref:typename:int
paths	includes/raylib.h	/^    char **paths;                   \/\/ Filepaths entries$/;"	m	struct:FilePathList	typeref:typename:char **
pause	includes/game.hpp	/^	bool		pause;$/;"	m	struct:s_game	typeref:typename:bool
perception	includes/classes/Boid.hpp	/^	float		perception;$/;"	m	struct:s_boid	typeref:typename:float
pixels	includes/imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:__anon0587e8010808	typeref:typename:unsigned char *
pixels	includes/imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned char *
player	includes/game.hpp	/^	t_player	player;$/;"	m	struct:s_game	typeref:typename:t_player
point	includes/raylib.h	/^    Vector3 point;          \/\/ Point of the nearest hit$/;"	m	struct:RayCollision	typeref:typename:Vector3
pop_back	includes/imgui.h	/^    inline void         pop_back()                          { IM_ASSERT(Size > 0); Size--; }$/;"	f	struct:ImVector	typeref:typename:void
pos	includes/classes/Boid.hpp	/^	Vector2		pos;$/;"	m	struct:s_average	typeref:typename:Vector2
pos	includes/classes/Boid.hpp	/^	Vector2		pos;$/;"	m	struct:s_boid	typeref:typename:Vector2
pos	includes/classes/Flock.hpp	/^	Vector2 pos;$/;"	m	struct:Circle	typeref:typename:Vector2
pos	includes/imgui.h	/^    ImVec2  pos;$/;"	m	struct:ImDrawVert	typeref:typename:ImVec2
position	includes/raylib.h	/^    Vector3 position;       \/\/ Camera position$/;"	m	struct:Camera3D	typeref:typename:Vector3
position	includes/raylib.h	/^    Vector3 position;       \/\/ Ray position (origin)$/;"	m	struct:Ray	typeref:typename:Vector3
preferred_x	includes/imstb_textedit.h	/^   float preferred_x; \/\/ this determines where the cursor up\/down tries to seek to along x$/;"	m	struct:STB_TexteditState	typeref:typename:float
prev_first	includes/imstb_textedit.h	/^   int prev_first;  \/\/ first char of previous row$/;"	m	struct:__anon3e283e0a0408	typeref:typename:int
prev_link	includes/imstb_rectpack.h	/^   stbrp_node **prev_link;$/;"	m	struct:__anonee1baa2c0308	typeref:typename:stbrp_node **
processor	includes/raylib.h	/^    rAudioProcessor *processor; \/\/ Pointer to internal data processor, useful for audio effect/;"	m	struct:AudioStream	typeref:typename:rAudioProcessor *
proggy_clean_ttf_compressed_data	imgui_draw.cpp	/^static const unsigned char proggy_clean_ttf_compressed_data[9583] =$/;"	v	typeref:typename:const unsigned char[9583]	file:
proggy_clean_ttf_compressed_size	imgui_draw.cpp	/^static const unsigned int proggy_clean_ttf_compressed_size = 9583;$/;"	v	typeref:typename:const unsigned int	file:
projection	includes/raylib.h	/^    Matrix projection[2];           \/\/ VR projection matrices (per eye)$/;"	m	struct:VrStereoConfig	typeref:typename:Matrix[2]
projection	includes/raylib.h	/^    int projection;         \/\/ Camera projection: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC$/;"	m	struct:Camera3D	typeref:typename:int
projection	includes/rlgl.h	/^        Matrix projection;                  \/\/ Default projection matrix$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:Matrix
projectionStereo	includes/rlgl.h	/^        Matrix projectionStereo[2];         \/\/ VR stereo rendering eyes projection matrices$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:Matrix[2]
properties	includes/classes/Boid.hpp	/^		t_boid  properties;$/;"	m	class:Boid	typeref:typename:t_boid
ptr	imgui.cpp	/^    union { void* ptr; int integer; } tex_id_opaque;$/;"	m	union:FormatTextureIDForDebugDisplay::__anon624f8571030a	typeref:typename:void *	file:
ptr_from_offset	includes/imgui_internal.h	/^    T*      ptr_from_offset(int off)    { IM_ASSERT(off >= 4 && off < Buf.Size); return (T*)(voi/;"	f	struct:ImChunkStream	typeref:typename:T *
push_back	imgui_draw.cpp	/^    void    push_back(ImTriangulatorNode* node) { Data[Size++] = node; }$/;"	f	struct:ImTriangulatorNodeSpan	typeref:typename:void	file:
push_back	includes/imgui.h	/^    inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_gro/;"	f	struct:ImVector	typeref:typename:void
push_front	includes/imgui.h	/^    inline void         push_front(const T& v)              { if (Size == 0) push_back(v); else /;"	f	struct:ImVector	typeref:typename:void
pvertices	includes/imstb_truetype.h	/^   stbtt_vertex *pvertices;$/;"	m	struct:__anon0587e8010f08	typeref:typename:stbtt_vertex *
r	includes/raylib.h	/^    unsigned char r;        \/\/ Color red value$/;"	m	struct:Color	typeref:typename:unsigned char
rAudioBuffer	includes/raylib.h	/^typedef struct rAudioBuffer rAudioBuffer;$/;"	t	typeref:struct:rAudioBuffer
rAudioProcessor	includes/raylib.h	/^typedef struct rAudioProcessor rAudioProcessor;$/;"	t	typeref:struct:rAudioProcessor
radius	includes/classes/Boid.hpp	/^		float	radius;$/;"	m	class:Boid	typeref:typename:float
radius	includes/classes/Flock.hpp	/^	float radius;$/;"	m	struct:Circle	typeref:typename:float
re	Makefile	/^re: fclean all$/;"	t
recs	includes/raylib.h	/^    Rectangle *recs;        \/\/ Rectangles in texture for the glyphs$/;"	m	struct:Font	typeref:typename:Rectangle *
rect	includes/classes/SpatialHashing.hpp	/^	Rectangle	rect;$/;"	m	struct:s_hash_table	typeref:typename:Rectangle
rect_height_compare	includes/imstb_rectpack.h	/^static int STBRP__CDECL rect_height_compare(const void *a, const void *b)$/;"	f	typeref:typename:int STBRP__CDECL
rect_original_order	includes/imstb_rectpack.h	/^static int STBRP__CDECL rect_original_order(const void *a, const void *b)$/;"	f	typeref:typename:int STBRP__CDECL
redo_char_point	includes/imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anon3e283e0a0208	typeref:typename:int
redo_point	includes/imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anon3e283e0a0208	typeref:typename:short
render_imgui	srcs/main.cpp	/^void	render_imgui(t_game *game)$/;"	f	typeref:typename:void
reserve	includes/imgui.h	/^    inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) retu/;"	f	struct:ImVector	typeref:typename:void
reserve	includes/imgui.h	/^    void                reserve(int capacity)   { Buf.reserve(capacity); }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:void
reserve_discard	includes/imgui.h	/^    inline void         reserve_discard(int new_capacity)   { if (new_capacity <= Capacity) retu/;"	f	struct:ImVector	typeref:typename:void
resize	includes/imgui.h	/^    inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_/;"	f	struct:ImVector	typeref:typename:void
resize	includes/imgui.h	/^    inline void         resize(int new_size, const T& v)    { if (new_size > Capacity) reserve(_/;"	f	struct:ImVector	typeref:typename:void
resize_border_def	imgui.cpp	/^static const ImGuiResizeBorderDef resize_border_def[4] =$/;"	v	typeref:typename:const ImGuiResizeBorderDef[4]	file:
resize_grip_def	imgui.cpp	/^static const ImGuiResizeGripDef resize_grip_def[4] =$/;"	v	typeref:typename:const ImGuiResizeGripDef[4]	file:
right	includes/raylib.h	/^    int right;              \/\/ Right border offset$/;"	m	struct:NPatchInfo	typeref:typename:int
rightLensCenter	includes/raylib.h	/^    float rightLensCenter[2];       \/\/ VR right lens center$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
rightScreenCenter	includes/raylib.h	/^    float rightScreenCenter[2];     \/\/ VR right screen center$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
rlActiveDrawBuffers	includes/rlgl.h	/^void rlActiveDrawBuffers(int count)$/;"	f	typeref:typename:void
rlActiveTextureSlot	includes/rlgl.h	/^void rlActiveTextureSlot(int slot)$/;"	f	typeref:typename:void
rlBegin	includes/rlgl.h	/^void rlBegin(int mode)$/;"	f	typeref:typename:void
rlBindFramebuffer	includes/rlgl.h	/^void rlBindFramebuffer(unsigned int target, unsigned int framebuffer)$/;"	f	typeref:typename:void
rlBindImageTexture	includes/rlgl.h	/^void rlBindImageTexture(unsigned int id, unsigned int index, int format, bool readonly)$/;"	f	typeref:typename:void
rlBindShaderBuffer	includes/rlgl.h	/^void rlBindShaderBuffer(unsigned int id, unsigned int index)$/;"	f	typeref:typename:void
rlBlendMode	includes/rlgl.h	/^} rlBlendMode;$/;"	t	typeref:enum:__anon315aabf20603
rlBlitFramebuffer	includes/rlgl.h	/^void rlBlitFramebuffer(int srcX, int srcY, int srcWidth, int srcHeight, int dstX, int dstY, int /;"	f	typeref:typename:void
rlCheckErrors	includes/rlgl.h	/^void rlCheckErrors(void)$/;"	f	typeref:typename:void
rlCheckRenderBatchLimit	includes/rlgl.h	/^bool rlCheckRenderBatchLimit(int vCount)$/;"	f	typeref:typename:bool
rlClearColor	includes/rlgl.h	/^void rlClearColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)$/;"	f	typeref:typename:void
rlClearScreenBuffers	includes/rlgl.h	/^void rlClearScreenBuffers(void)$/;"	f	typeref:typename:void
rlColor3f	includes/rlgl.h	/^void rlColor3f(float x, float y, float z) { glColor3f(x, y, z); }$/;"	f	typeref:typename:void
rlColor3f	includes/rlgl.h	/^void rlColor3f(float x, float y, float z)$/;"	f	typeref:typename:void
rlColor4f	includes/rlgl.h	/^void rlColor4f(float r, float g, float b, float a)$/;"	f	typeref:typename:void
rlColor4f	includes/rlgl.h	/^void rlColor4f(float x, float y, float z, float w) { glColor4f(x, y, z, w); }$/;"	f	typeref:typename:void
rlColor4ub	includes/rlgl.h	/^void rlColor4ub(unsigned char r, unsigned char g, unsigned char b, unsigned char a) { glColor4ub/;"	f	typeref:typename:void
rlColor4ub	includes/rlgl.h	/^void rlColor4ub(unsigned char x, unsigned char y, unsigned char z, unsigned char w)$/;"	f	typeref:typename:void
rlColorMask	includes/rlgl.h	/^void rlColorMask(bool r, bool g, bool b, bool a) { glColorMask(r, g, b, a); }$/;"	f	typeref:typename:void
rlCompileShader	includes/rlgl.h	/^unsigned int rlCompileShader(const char *shaderCode, int type)$/;"	f	typeref:typename:unsigned int
rlComputeShaderDispatch	includes/rlgl.h	/^void rlComputeShaderDispatch(unsigned int groupX, unsigned int groupY, unsigned int groupZ)$/;"	f	typeref:typename:void
rlCopyShaderBuffer	includes/rlgl.h	/^void rlCopyShaderBuffer(unsigned int destId, unsigned int srcId, unsigned int destOffset, unsign/;"	f	typeref:typename:void
rlCubemapParameters	includes/rlgl.h	/^void rlCubemapParameters(unsigned int id, int param, int value)$/;"	f	typeref:typename:void
rlCullDistanceFar	includes/rlgl.h	/^static double rlCullDistanceFar = RL_CULL_DISTANCE_FAR;$/;"	v	typeref:typename:double
rlCullDistanceNear	includes/rlgl.h	/^static double rlCullDistanceNear = RL_CULL_DISTANCE_NEAR;$/;"	v	typeref:typename:double
rlCullMode	includes/rlgl.h	/^} rlCullMode;$/;"	t	typeref:enum:__anon315aabf20c03
rlDebugMessageCallback	includes/rlgl.h	/^static void GLAPIENTRY rlDebugMessageCallback(GLenum source, GLenum type, GLuint id, GLenum seve/;"	f	typeref:typename:void GLAPIENTRY
rlDisableBackfaceCulling	includes/rlgl.h	/^void rlDisableBackfaceCulling(void) { glDisable(GL_CULL_FACE); }$/;"	f	typeref:typename:void
rlDisableColorBlend	includes/rlgl.h	/^void rlDisableColorBlend(void) { glDisable(GL_BLEND); }$/;"	f	typeref:typename:void
rlDisableDepthMask	includes/rlgl.h	/^void rlDisableDepthMask(void) { glDepthMask(GL_FALSE); }$/;"	f	typeref:typename:void
rlDisableDepthTest	includes/rlgl.h	/^void rlDisableDepthTest(void) { glDisable(GL_DEPTH_TEST); }$/;"	f	typeref:typename:void
rlDisableFramebuffer	includes/rlgl.h	/^void rlDisableFramebuffer(void)$/;"	f	typeref:typename:void
rlDisableScissorTest	includes/rlgl.h	/^void rlDisableScissorTest(void) { glDisable(GL_SCISSOR_TEST); }$/;"	f	typeref:typename:void
rlDisableShader	includes/rlgl.h	/^void rlDisableShader(void)$/;"	f	typeref:typename:void
rlDisableSmoothLines	includes/rlgl.h	/^void rlDisableSmoothLines(void)$/;"	f	typeref:typename:void
rlDisableStatePointer	includes/rlgl.h	/^void rlDisableStatePointer(int vertexAttribType)$/;"	f	typeref:typename:void
rlDisableStereoRender	includes/rlgl.h	/^void rlDisableStereoRender(void)$/;"	f	typeref:typename:void
rlDisableTexture	includes/rlgl.h	/^void rlDisableTexture(void)$/;"	f	typeref:typename:void
rlDisableTextureCubemap	includes/rlgl.h	/^void rlDisableTextureCubemap(void)$/;"	f	typeref:typename:void
rlDisableVertexArray	includes/rlgl.h	/^void rlDisableVertexArray(void)$/;"	f	typeref:typename:void
rlDisableVertexAttribute	includes/rlgl.h	/^void rlDisableVertexAttribute(unsigned int index)$/;"	f	typeref:typename:void
rlDisableVertexBuffer	includes/rlgl.h	/^void rlDisableVertexBuffer(void)$/;"	f	typeref:typename:void
rlDisableVertexBufferElement	includes/rlgl.h	/^void rlDisableVertexBufferElement(void)$/;"	f	typeref:typename:void
rlDisableWireMode	includes/rlgl.h	/^void rlDisableWireMode(void)$/;"	f	typeref:typename:void
rlDrawCall	includes/rlgl.h	/^typedef struct rlDrawCall {$/;"	s
rlDrawCall	includes/rlgl.h	/^} rlDrawCall;$/;"	t	typeref:struct:rlDrawCall
rlDrawRenderBatch	includes/rlgl.h	/^void rlDrawRenderBatch(rlRenderBatch *batch)$/;"	f	typeref:typename:void
rlDrawRenderBatchActive	includes/rlgl.h	/^void rlDrawRenderBatchActive(void)$/;"	f	typeref:typename:void
rlDrawVertexArray	includes/rlgl.h	/^void rlDrawVertexArray(int offset, int count)$/;"	f	typeref:typename:void
rlDrawVertexArrayElements	includes/rlgl.h	/^void rlDrawVertexArrayElements(int offset, int count, const void *buffer)$/;"	f	typeref:typename:void
rlDrawVertexArrayElementsInstanced	includes/rlgl.h	/^void rlDrawVertexArrayElementsInstanced(int offset, int count, const void *buffer, int instances/;"	f	typeref:typename:void
rlDrawVertexArrayInstanced	includes/rlgl.h	/^void rlDrawVertexArrayInstanced(int offset, int count, int instances)$/;"	f	typeref:typename:void
rlEnableBackfaceCulling	includes/rlgl.h	/^void rlEnableBackfaceCulling(void) { glEnable(GL_CULL_FACE); }$/;"	f	typeref:typename:void
rlEnableColorBlend	includes/rlgl.h	/^void rlEnableColorBlend(void) { glEnable(GL_BLEND); }$/;"	f	typeref:typename:void
rlEnableDepthMask	includes/rlgl.h	/^void rlEnableDepthMask(void) { glDepthMask(GL_TRUE); }$/;"	f	typeref:typename:void
rlEnableDepthTest	includes/rlgl.h	/^void rlEnableDepthTest(void) { glEnable(GL_DEPTH_TEST); }$/;"	f	typeref:typename:void
rlEnableFramebuffer	includes/rlgl.h	/^void rlEnableFramebuffer(unsigned int id)$/;"	f	typeref:typename:void
rlEnablePointMode	includes/rlgl.h	/^void rlEnablePointMode(void)$/;"	f	typeref:typename:void
rlEnableScissorTest	includes/rlgl.h	/^void rlEnableScissorTest(void) { glEnable(GL_SCISSOR_TEST); }$/;"	f	typeref:typename:void
rlEnableShader	includes/rlgl.h	/^void rlEnableShader(unsigned int id)$/;"	f	typeref:typename:void
rlEnableSmoothLines	includes/rlgl.h	/^void rlEnableSmoothLines(void)$/;"	f	typeref:typename:void
rlEnableStatePointer	includes/rlgl.h	/^void rlEnableStatePointer(int vertexAttribType, void *buffer)$/;"	f	typeref:typename:void
rlEnableStereoRender	includes/rlgl.h	/^void rlEnableStereoRender(void)$/;"	f	typeref:typename:void
rlEnableTexture	includes/rlgl.h	/^void rlEnableTexture(unsigned int id)$/;"	f	typeref:typename:void
rlEnableTextureCubemap	includes/rlgl.h	/^void rlEnableTextureCubemap(unsigned int id)$/;"	f	typeref:typename:void
rlEnableVertexArray	includes/rlgl.h	/^bool rlEnableVertexArray(unsigned int vaoId)$/;"	f	typeref:typename:bool
rlEnableVertexAttribute	includes/rlgl.h	/^void rlEnableVertexAttribute(unsigned int index)$/;"	f	typeref:typename:void
rlEnableVertexBuffer	includes/rlgl.h	/^void rlEnableVertexBuffer(unsigned int id)$/;"	f	typeref:typename:void
rlEnableVertexBufferElement	includes/rlgl.h	/^void rlEnableVertexBufferElement(unsigned int id)$/;"	f	typeref:typename:void
rlEnableWireMode	includes/rlgl.h	/^void rlEnableWireMode(void)$/;"	f	typeref:typename:void
rlEnd	includes/rlgl.h	/^void rlEnd(void) { glEnd(); }$/;"	f	typeref:typename:void
rlEnd	includes/rlgl.h	/^void rlEnd(void)$/;"	f	typeref:typename:void
rlFramebufferAttach	includes/rlgl.h	/^void rlFramebufferAttach(unsigned int fboId, unsigned int texId, int attachType, int texType, in/;"	f	typeref:typename:void
rlFramebufferAttachTextureType	includes/rlgl.h	/^} rlFramebufferAttachTextureType;$/;"	t	typeref:enum:__anon315aabf20b03
rlFramebufferAttachType	includes/rlgl.h	/^} rlFramebufferAttachType;$/;"	t	typeref:enum:__anon315aabf20a03
rlFramebufferComplete	includes/rlgl.h	/^bool rlFramebufferComplete(unsigned int id)$/;"	f	typeref:typename:bool
rlFrustum	includes/rlgl.h	/^void rlFrustum(double left, double right, double bottom, double top, double znear, double zfar)$/;"	f	typeref:typename:void
rlGenTextureMipmaps	includes/rlgl.h	/^void rlGenTextureMipmaps(unsigned int id, int width, int height, int format, int *mipmaps)$/;"	f	typeref:typename:void
rlGetActiveFramebuffer	includes/rlgl.h	/^unsigned int rlGetActiveFramebuffer(void)$/;"	f	typeref:typename:unsigned int
rlGetCompressedFormatName	includes/rlgl.h	/^static const char *rlGetCompressedFormatName(int format)$/;"	f	typeref:typename:const char *
rlGetCullDistanceFar	includes/rlgl.h	/^double rlGetCullDistanceFar(void)$/;"	f	typeref:typename:double
rlGetCullDistanceNear	includes/rlgl.h	/^double rlGetCullDistanceNear(void)$/;"	f	typeref:typename:double
rlGetFramebufferHeight	includes/rlgl.h	/^int rlGetFramebufferHeight(void)$/;"	f	typeref:typename:int
rlGetFramebufferWidth	includes/rlgl.h	/^int rlGetFramebufferWidth(void)$/;"	f	typeref:typename:int
rlGetGlTextureFormats	includes/rlgl.h	/^void rlGetGlTextureFormats(int format, unsigned int *glInternalFormat, unsigned int *glFormat, u/;"	f	typeref:typename:void
rlGetLineWidth	includes/rlgl.h	/^float rlGetLineWidth(void)$/;"	f	typeref:typename:float
rlGetLocationAttrib	includes/rlgl.h	/^int rlGetLocationAttrib(unsigned int shaderId, const char *attribName)$/;"	f	typeref:typename:int
rlGetLocationUniform	includes/rlgl.h	/^int rlGetLocationUniform(unsigned int shaderId, const char *uniformName)$/;"	f	typeref:typename:int
rlGetMatrixModelview	includes/rlgl.h	/^Matrix rlGetMatrixModelview(void)$/;"	f	typeref:typename:Matrix
rlGetMatrixProjection	includes/rlgl.h	/^Matrix rlGetMatrixProjection(void)$/;"	f	typeref:typename:Matrix
rlGetMatrixProjectionStereo	includes/rlgl.h	/^Matrix rlGetMatrixProjectionStereo(int eye)$/;"	f	typeref:typename:Matrix
rlGetMatrixTransform	includes/rlgl.h	/^Matrix rlGetMatrixTransform(void)$/;"	f	typeref:typename:Matrix
rlGetMatrixViewOffsetStereo	includes/rlgl.h	/^Matrix rlGetMatrixViewOffsetStereo(int eye)$/;"	f	typeref:typename:Matrix
rlGetPixelDataSize	includes/rlgl.h	/^static int rlGetPixelDataSize(int width, int height, int format)$/;"	f	typeref:typename:int
rlGetPixelFormatName	includes/rlgl.h	/^const char *rlGetPixelFormatName(unsigned int format)$/;"	f	typeref:typename:const char *
rlGetShaderBufferSize	includes/rlgl.h	/^unsigned int rlGetShaderBufferSize(unsigned int id)$/;"	f	typeref:typename:unsigned int
rlGetShaderIdDefault	includes/rlgl.h	/^unsigned int rlGetShaderIdDefault(void)$/;"	f	typeref:typename:unsigned int
rlGetShaderLocsDefault	includes/rlgl.h	/^int *rlGetShaderLocsDefault(void)$/;"	f	typeref:typename:int *
rlGetTextureIdDefault	includes/rlgl.h	/^unsigned int rlGetTextureIdDefault(void)$/;"	f	typeref:typename:unsigned int
rlGetVersion	includes/rlgl.h	/^int rlGetVersion(void)$/;"	f	typeref:typename:int
rlGlVersion	includes/rlgl.h	/^} rlGlVersion;$/;"	t	typeref:enum:__anon315aabf20203
rlImGuiBegin	rlImGui.cpp	/^void rlImGuiBegin(void)$/;"	f	typeref:typename:void
rlImGuiBeginDelta	rlImGui.cpp	/^void rlImGuiBeginDelta(float deltaTime)$/;"	f	typeref:typename:void
rlImGuiBeginInitImGui	rlImGui.cpp	/^void rlImGuiBeginInitImGui(void)$/;"	f	typeref:typename:void
rlImGuiColors	includes/rlImGuiColors.h	/^namespace rlImGuiColors$/;"	n
rlImGuiEnd	rlImGui.cpp	/^void rlImGuiEnd(void)$/;"	f	typeref:typename:void
rlImGuiEndInitImGui	rlImGui.cpp	/^void rlImGuiEndInitImGui(void)$/;"	f	typeref:typename:void
rlImGuiImage	rlImGui.cpp	/^void rlImGuiImage(const Texture* image)$/;"	f	typeref:typename:void
rlImGuiImageButton	rlImGui.cpp	/^bool rlImGuiImageButton(const char* name, const Texture* image)$/;"	f	typeref:typename:bool
rlImGuiImageButtonSize	rlImGui.cpp	/^bool rlImGuiImageButtonSize(const char* name, const Texture* image, ImVec2 size)$/;"	f	typeref:typename:bool
rlImGuiImageRect	rlImGui.cpp	/^void rlImGuiImageRect(const Texture* image, int destWidth, int destHeight, Rectangle sourceRect)$/;"	f	typeref:typename:void
rlImGuiImageRenderTexture	rlImGui.cpp	/^void rlImGuiImageRenderTexture(const RenderTexture* image)$/;"	f	typeref:typename:void
rlImGuiImageRenderTextureFit	rlImGui.cpp	/^void rlImGuiImageRenderTextureFit(const RenderTexture* image, bool center)$/;"	f	typeref:typename:void
rlImGuiImageSize	rlImGui.cpp	/^void rlImGuiImageSize(const Texture* image, int width, int height)$/;"	f	typeref:typename:void
rlImGuiImageSizeV	rlImGui.cpp	/^void rlImGuiImageSizeV(const Texture* image, Vector2 size)$/;"	f	typeref:typename:void
rlImGuiIsAltDown	rlImGui.cpp	/^bool rlImGuiIsAltDown() { return IsKeyDown(KEY_RIGHT_ALT) || IsKeyDown(KEY_LEFT_ALT); }$/;"	f	typeref:typename:bool
rlImGuiIsControlDown	rlImGui.cpp	/^bool rlImGuiIsControlDown() { return IsKeyDown(KEY_RIGHT_CONTROL) || IsKeyDown(KEY_LEFT_CONTROL)/;"	f	typeref:typename:bool
rlImGuiIsShiftDown	rlImGui.cpp	/^bool rlImGuiIsShiftDown() { return IsKeyDown(KEY_RIGHT_SHIFT) || IsKeyDown(KEY_LEFT_SHIFT); }$/;"	f	typeref:typename:bool
rlImGuiIsSuperDown	rlImGui.cpp	/^bool rlImGuiIsSuperDown() { return IsKeyDown(KEY_RIGHT_SUPER) || IsKeyDown(KEY_LEFT_SUPER); }$/;"	f	typeref:typename:bool
rlImGuiReloadFonts	rlImGui.cpp	/^void rlImGuiReloadFonts(void)$/;"	f	typeref:typename:void
rlImGuiSetup	rlImGui.cpp	/^void rlImGuiSetup(bool dark)$/;"	f	typeref:typename:void
rlImGuiShutdown	rlImGui.cpp	/^void rlImGuiShutdown(void)$/;"	f	typeref:typename:void
rlIsStereoRenderEnabled	includes/rlgl.h	/^bool rlIsStereoRenderEnabled(void)$/;"	f	typeref:typename:bool
rlLoadComputeShaderProgram	includes/rlgl.h	/^unsigned int rlLoadComputeShaderProgram(unsigned int shaderId)$/;"	f	typeref:typename:unsigned int
rlLoadDrawCube	includes/rlgl.h	/^void rlLoadDrawCube(void)$/;"	f	typeref:typename:void
rlLoadDrawQuad	includes/rlgl.h	/^void rlLoadDrawQuad(void)$/;"	f	typeref:typename:void
rlLoadExtensions	includes/rlgl.h	/^void rlLoadExtensions(void *loader)$/;"	f	typeref:typename:void
rlLoadFramebuffer	includes/rlgl.h	/^unsigned int rlLoadFramebuffer(void)$/;"	f	typeref:typename:unsigned int
rlLoadIdentity	includes/rlgl.h	/^void rlLoadIdentity(void) { glLoadIdentity(); }$/;"	f	typeref:typename:void
rlLoadIdentity	includes/rlgl.h	/^void rlLoadIdentity(void)$/;"	f	typeref:typename:void
rlLoadRenderBatch	includes/rlgl.h	/^rlRenderBatch rlLoadRenderBatch(int numBuffers, int bufferElements)$/;"	f	typeref:typename:rlRenderBatch
rlLoadShaderBuffer	includes/rlgl.h	/^unsigned int rlLoadShaderBuffer(unsigned int size, const void *data, int usageHint)$/;"	f	typeref:typename:unsigned int
rlLoadShaderCode	includes/rlgl.h	/^unsigned int rlLoadShaderCode(const char *vsCode, const char *fsCode)$/;"	f	typeref:typename:unsigned int
rlLoadShaderDefault	includes/rlgl.h	/^static void rlLoadShaderDefault(void)$/;"	f	typeref:typename:void
rlLoadShaderProgram	includes/rlgl.h	/^unsigned int rlLoadShaderProgram(unsigned int vShaderId, unsigned int fShaderId)$/;"	f	typeref:typename:unsigned int
rlLoadTexture	includes/rlgl.h	/^unsigned int rlLoadTexture(const void *data, int width, int height, int format, int mipmapCount)$/;"	f	typeref:typename:unsigned int
rlLoadTextureCubemap	includes/rlgl.h	/^unsigned int rlLoadTextureCubemap(const void *data, int size, int format, int mipmapCount)$/;"	f	typeref:typename:unsigned int
rlLoadTextureDepth	includes/rlgl.h	/^unsigned int rlLoadTextureDepth(int width, int height, bool useRenderBuffer)$/;"	f	typeref:typename:unsigned int
rlLoadVertexArray	includes/rlgl.h	/^unsigned int rlLoadVertexArray(void)$/;"	f	typeref:typename:unsigned int
rlLoadVertexBuffer	includes/rlgl.h	/^unsigned int rlLoadVertexBuffer(const void *buffer, int size, bool dynamic)$/;"	f	typeref:typename:unsigned int
rlLoadVertexBufferElement	includes/rlgl.h	/^unsigned int rlLoadVertexBufferElement(const void *buffer, int size, bool dynamic)$/;"	f	typeref:typename:unsigned int
rlMatrixIdentity	includes/rlgl.h	/^static Matrix rlMatrixIdentity(void)$/;"	f	typeref:typename:Matrix
rlMatrixInvert	includes/rlgl.h	/^static Matrix rlMatrixInvert(Matrix mat)$/;"	f	typeref:typename:Matrix
rlMatrixMode	includes/rlgl.h	/^void rlMatrixMode(int mode)$/;"	f	typeref:typename:void
rlMatrixMultiply	includes/rlgl.h	/^static Matrix rlMatrixMultiply(Matrix left, Matrix right)$/;"	f	typeref:typename:Matrix
rlMatrixToFloat	includes/rlgl.h	/^#define rlMatrixToFloat(/;"	d
rlMatrixToFloatV	includes/rlgl.h	/^static rl_float16 rlMatrixToFloatV(Matrix mat)$/;"	f	typeref:typename:rl_float16
rlMatrixTranspose	includes/rlgl.h	/^static Matrix rlMatrixTranspose(Matrix mat)$/;"	f	typeref:typename:Matrix
rlMultMatrixf	includes/rlgl.h	/^void rlMultMatrixf(const float *matf) { glMultMatrixf(matf); }$/;"	f	typeref:typename:void
rlMultMatrixf	includes/rlgl.h	/^void rlMultMatrixf(const float *matf)$/;"	f	typeref:typename:void
rlNormal3f	includes/rlgl.h	/^void rlNormal3f(float x, float y, float z) { glNormal3f(x, y, z); }$/;"	f	typeref:typename:void
rlNormal3f	includes/rlgl.h	/^void rlNormal3f(float x, float y, float z)$/;"	f	typeref:typename:void
rlOrtho	includes/rlgl.h	/^void rlOrtho(double left, double right, double bottom, double top, double znear, double zfar)$/;"	f	typeref:typename:void
rlPixelFormat	includes/rlgl.h	/^} rlPixelFormat;$/;"	t	typeref:enum:__anon315aabf20403
rlPopMatrix	includes/rlgl.h	/^void rlPopMatrix(void) { glPopMatrix(); }$/;"	f	typeref:typename:void
rlPopMatrix	includes/rlgl.h	/^void rlPopMatrix(void)$/;"	f	typeref:typename:void
rlPushMatrix	includes/rlgl.h	/^void rlPushMatrix(void) { glPushMatrix(); }$/;"	f	typeref:typename:void
rlPushMatrix	includes/rlgl.h	/^void rlPushMatrix(void)$/;"	f	typeref:typename:void
rlReadScreenPixels	includes/rlgl.h	/^unsigned char *rlReadScreenPixels(int width, int height)$/;"	f	typeref:typename:unsigned char *
rlReadShaderBuffer	includes/rlgl.h	/^void rlReadShaderBuffer(unsigned int id, void *dest, unsigned int count, unsigned int offset)$/;"	f	typeref:typename:void
rlReadTexturePixels	includes/rlgl.h	/^void *rlReadTexturePixels(unsigned int id, int width, int height, int format)$/;"	f	typeref:typename:void *
rlRenderBatch	includes/rlgl.h	/^typedef struct rlRenderBatch {$/;"	s
rlRenderBatch	includes/rlgl.h	/^} rlRenderBatch;$/;"	t	typeref:struct:rlRenderBatch
rlRotatef	includes/rlgl.h	/^void rlRotatef(float angle, float x, float y, float z) { glRotatef(angle, x, y, z); }$/;"	f	typeref:typename:void
rlRotatef	includes/rlgl.h	/^void rlRotatef(float angle, float x, float y, float z)$/;"	f	typeref:typename:void
rlScalef	includes/rlgl.h	/^void rlScalef(float x, float y, float z) { glScalef(x, y, z); }$/;"	f	typeref:typename:void
rlScalef	includes/rlgl.h	/^void rlScalef(float x, float y, float z)$/;"	f	typeref:typename:void
rlScissor	includes/rlgl.h	/^void rlScissor(int x, int y, int width, int height) { glScissor(x, y, width, height); }$/;"	f	typeref:typename:void
rlSetBlendFactors	includes/rlgl.h	/^void rlSetBlendFactors(int glSrcFactor, int glDstFactor, int glEquation)$/;"	f	typeref:typename:void
rlSetBlendFactorsSeparate	includes/rlgl.h	/^void rlSetBlendFactorsSeparate(int glSrcRGB, int glDstRGB, int glSrcAlpha, int glDstAlpha, int g/;"	f	typeref:typename:void
rlSetBlendMode	includes/rlgl.h	/^void rlSetBlendMode(int mode)$/;"	f	typeref:typename:void
rlSetClipPlanes	includes/rlgl.h	/^void rlSetClipPlanes(double nearPlane, double farPlane)$/;"	f	typeref:typename:void
rlSetCullFace	includes/rlgl.h	/^void rlSetCullFace(int mode)$/;"	f	typeref:typename:void
rlSetFramebufferHeight	includes/rlgl.h	/^void rlSetFramebufferHeight(int height)$/;"	f	typeref:typename:void
rlSetFramebufferWidth	includes/rlgl.h	/^void rlSetFramebufferWidth(int width)$/;"	f	typeref:typename:void
rlSetLineWidth	includes/rlgl.h	/^void rlSetLineWidth(float width) { glLineWidth(width); }$/;"	f	typeref:typename:void
rlSetMatrixModelview	includes/rlgl.h	/^void rlSetMatrixModelview(Matrix view)$/;"	f	typeref:typename:void
rlSetMatrixProjection	includes/rlgl.h	/^void rlSetMatrixProjection(Matrix projection)$/;"	f	typeref:typename:void
rlSetMatrixProjectionStereo	includes/rlgl.h	/^void rlSetMatrixProjectionStereo(Matrix right, Matrix left)$/;"	f	typeref:typename:void
rlSetMatrixViewOffsetStereo	includes/rlgl.h	/^void rlSetMatrixViewOffsetStereo(Matrix right, Matrix left)$/;"	f	typeref:typename:void
rlSetRenderBatchActive	includes/rlgl.h	/^void rlSetRenderBatchActive(rlRenderBatch *batch)$/;"	f	typeref:typename:void
rlSetShader	includes/rlgl.h	/^void rlSetShader(unsigned int id, int *locs)$/;"	f	typeref:typename:void
rlSetTexture	includes/rlgl.h	/^void rlSetTexture(unsigned int id)$/;"	f	typeref:typename:void
rlSetUniform	includes/rlgl.h	/^void rlSetUniform(int locIndex, const void *value, int uniformType, int count)$/;"	f	typeref:typename:void
rlSetUniformMatrices	includes/rlgl.h	/^void rlSetUniformMatrices(int locIndex, const Matrix *matrices, int count)$/;"	f	typeref:typename:void
rlSetUniformMatrix	includes/rlgl.h	/^void rlSetUniformMatrix(int locIndex, Matrix mat)$/;"	f	typeref:typename:void
rlSetUniformSampler	includes/rlgl.h	/^void rlSetUniformSampler(int locIndex, unsigned int textureId)$/;"	f	typeref:typename:void
rlSetVertexAttribute	includes/rlgl.h	/^void rlSetVertexAttribute(unsigned int index, int compSize, int type, bool normalized, int strid/;"	f	typeref:typename:void
rlSetVertexAttributeDefault	includes/rlgl.h	/^void rlSetVertexAttributeDefault(int locIndex, const void *value, int attribType, int count)$/;"	f	typeref:typename:void
rlSetVertexAttributeDivisor	includes/rlgl.h	/^void rlSetVertexAttributeDivisor(unsigned int index, int divisor)$/;"	f	typeref:typename:void
rlShaderAttributeDataType	includes/rlgl.h	/^} rlShaderAttributeDataType;$/;"	t	typeref:enum:__anon315aabf20903
rlShaderLocationIndex	includes/rlgl.h	/^} rlShaderLocationIndex;$/;"	t	typeref:enum:__anon315aabf20703
rlShaderUniformDataType	includes/rlgl.h	/^} rlShaderUniformDataType;$/;"	t	typeref:enum:__anon315aabf20803
rlTexCoord2f	includes/rlgl.h	/^void rlTexCoord2f(float x, float y) { glTexCoord2f(x, y); }$/;"	f	typeref:typename:void
rlTexCoord2f	includes/rlgl.h	/^void rlTexCoord2f(float x, float y)$/;"	f	typeref:typename:void
rlTextureFilter	includes/rlgl.h	/^} rlTextureFilter;$/;"	t	typeref:enum:__anon315aabf20503
rlTextureParameters	includes/rlgl.h	/^void rlTextureParameters(unsigned int id, int param, int value)$/;"	f	typeref:typename:void
rlTraceLogLevel	includes/rlgl.h	/^} rlTraceLogLevel;$/;"	t	typeref:enum:__anon315aabf20303
rlTranslatef	includes/rlgl.h	/^void rlTranslatef(float x, float y, float z) { glTranslatef(x, y, z); }$/;"	f	typeref:typename:void
rlTranslatef	includes/rlgl.h	/^void rlTranslatef(float x, float y, float z)$/;"	f	typeref:typename:void
rlUnloadFramebuffer	includes/rlgl.h	/^void rlUnloadFramebuffer(unsigned int id)$/;"	f	typeref:typename:void
rlUnloadRenderBatch	includes/rlgl.h	/^void rlUnloadRenderBatch(rlRenderBatch batch)$/;"	f	typeref:typename:void
rlUnloadShaderBuffer	includes/rlgl.h	/^void rlUnloadShaderBuffer(unsigned int ssboId)$/;"	f	typeref:typename:void
rlUnloadShaderDefault	includes/rlgl.h	/^static void rlUnloadShaderDefault(void)$/;"	f	typeref:typename:void
rlUnloadShaderProgram	includes/rlgl.h	/^void rlUnloadShaderProgram(unsigned int id)$/;"	f	typeref:typename:void
rlUnloadTexture	includes/rlgl.h	/^void rlUnloadTexture(unsigned int id)$/;"	f	typeref:typename:void
rlUnloadVertexArray	includes/rlgl.h	/^void rlUnloadVertexArray(unsigned int vaoId)$/;"	f	typeref:typename:void
rlUnloadVertexBuffer	includes/rlgl.h	/^void rlUnloadVertexBuffer(unsigned int vboId)$/;"	f	typeref:typename:void
rlUpdateShaderBuffer	includes/rlgl.h	/^void rlUpdateShaderBuffer(unsigned int id, const void *data, unsigned int dataSize, unsigned int/;"	f	typeref:typename:void
rlUpdateTexture	includes/rlgl.h	/^void rlUpdateTexture(unsigned int id, int offsetX, int offsetY, int width, int height, int forma/;"	f	typeref:typename:void
rlUpdateVertexBuffer	includes/rlgl.h	/^void rlUpdateVertexBuffer(unsigned int id, const void *data, int dataSize, int offset)$/;"	f	typeref:typename:void
rlUpdateVertexBufferElements	includes/rlgl.h	/^void rlUpdateVertexBufferElements(unsigned int id, const void *data, int dataSize, int offset)$/;"	f	typeref:typename:void
rlVertex2f	includes/rlgl.h	/^void rlVertex2f(float x, float y) { glVertex2f(x, y); }$/;"	f	typeref:typename:void
rlVertex2f	includes/rlgl.h	/^void rlVertex2f(float x, float y)$/;"	f	typeref:typename:void
rlVertex2i	includes/rlgl.h	/^void rlVertex2i(int x, int y) { glVertex2i(x, y); }$/;"	f	typeref:typename:void
rlVertex2i	includes/rlgl.h	/^void rlVertex2i(int x, int y)$/;"	f	typeref:typename:void
rlVertex3f	includes/rlgl.h	/^void rlVertex3f(float x, float y, float z) { glVertex3f(x, y, z); }$/;"	f	typeref:typename:void
rlVertex3f	includes/rlgl.h	/^void rlVertex3f(float x, float y, float z)$/;"	f	typeref:typename:void
rlVertexBuffer	includes/rlgl.h	/^typedef struct rlVertexBuffer {$/;"	s
rlVertexBuffer	includes/rlgl.h	/^} rlVertexBuffer;$/;"	t	typeref:struct:rlVertexBuffer
rlViewport	includes/rlgl.h	/^void rlViewport(int x, int y, int width, int height)$/;"	f	typeref:typename:void
rl_float16	includes/rlgl.h	/^typedef struct rl_float16 {$/;"	s
rl_float16	includes/rlgl.h	/^} rl_float16;$/;"	t	typeref:struct:rl_float16
rlglClose	includes/rlgl.h	/^void rlglClose(void)$/;"	f	typeref:typename:void
rlglData	includes/rlgl.h	/^typedef struct rlglData {$/;"	s
rlglData	includes/rlgl.h	/^} rlglData;$/;"	t	typeref:struct:rlglData
rlglInit	includes/rlgl.h	/^void rlglInit(int width, int height)$/;"	f	typeref:typename:void
rlglLoadProc	includes/rlgl.h	/^typedef void *(*rlglLoadProc)(const char *name);   \/\/ OpenGL extension functions loader signat/;"	t	typeref:typename:void * (*)(const char * name)
rotation	includes/classes/Boid.hpp	/^		float	rotation;$/;"	m	class:Boid	typeref:typename:float
rotation	includes/raylib.h	/^    Quaternion rotation;    \/\/ Rotation$/;"	m	struct:Transform	typeref:typename:Quaternion
rotation	includes/raylib.h	/^    float rotation;         \/\/ Camera rotation in degrees$/;"	m	struct:Camera2D	typeref:typename:float
row_count_per_page	includes/imstb_textedit.h	/^   int row_count_per_page;$/;"	m	struct:STB_TexteditState	typeref:typename:int
run	Makefile	/^run: all$/;"	t
s0	includes/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon0587e8010308	typeref:typename:float
s1	includes/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon0587e8010308	typeref:typename:float
s_average	includes/classes/Boid.hpp	/^typedef struct s_average$/;"	s
s_boid	includes/classes/Boid.hpp	/^typedef struct s_boid$/;"	s
s_check_box	includes/classes/Flock.hpp	/^typedef struct s_check_box$/;"	s
s_current_sort_specs	imgui_demo.cpp	/^    static const ImGuiTableSortSpecs* s_current_sort_specs;$/;"	m	struct:ExampleAsset	typeref:typename:const ImGuiTableSortSpecs *	file:
s_current_sort_specs	imgui_demo.cpp	/^    static const ImGuiTableSortSpecs* s_current_sort_specs;$/;"	m	struct:__anon5ba881550511::MyItem	typeref:typename:const ImGuiTableSortSpecs *	file:
s_current_sort_specs	imgui_demo.cpp	/^const ImGuiTableSortSpecs* ExampleAsset::s_current_sort_specs = NULL;$/;"	m	class:ExampleAsset	typeref:typename:const ImGuiTableSortSpecs *
s_current_sort_specs	imgui_demo.cpp	/^const ImGuiTableSortSpecs* MyItem::s_current_sort_specs = NULL;$/;"	m	class:__anon5ba881550511::MyItem	typeref:typename:const ImGuiTableSortSpecs *
s_game	includes/game.hpp	/^typedef struct s_game$/;"	s
s_globaloptions	includes/classes/Flock.hpp	/^typedef struct s_globaloptions$/;"	s
s_hash_table	includes/classes/SpatialHashing.hpp	/^typedef struct s_hash_table$/;"	s
s_player	includes/game.hpp	/^typedef struct s_player {$/;"	s
sampleRate	includes/raylib.h	/^    unsigned int sampleRate;    \/\/ Frequency (samples per second)$/;"	m	struct:AudioStream	typeref:typename:unsigned int
sampleRate	includes/raylib.h	/^    unsigned int sampleRate;    \/\/ Frequency (samples per second)$/;"	m	struct:Wave	typeref:typename:unsigned int
sampleSize	includes/raylib.h	/^    unsigned int sampleSize;    \/\/ Bit depth (bits per sample): 8, 16, 32 (24 not supported)$/;"	m	struct:AudioStream	typeref:typename:unsigned int
sampleSize	includes/raylib.h	/^    unsigned int sampleSize;    \/\/ Bit depth (bits per sample): 8, 16, 32 (24 not supported)$/;"	m	struct:Wave	typeref:typename:unsigned int
scale	includes/raylib.h	/^    Vector3 scale;          \/\/ Scale$/;"	m	struct:Transform	typeref:typename:Vector3
scale	includes/raylib.h	/^    float scale[2];                 \/\/ VR distortion scale$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
scaleIn	includes/raylib.h	/^    float scaleIn[2];               \/\/ VR distortion scale in$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
select_end	includes/imstb_textedit.h	/^   int select_end;$/;"	m	struct:STB_TexteditState	typeref:typename:int
select_start	includes/imstb_textedit.h	/^   int select_start;          \/\/ selection start point$/;"	m	struct:STB_TexteditState	typeref:typename:int
sep	includes/classes/Boid.hpp	/^	Vector2		sep;$/;"	m	struct:s_average	typeref:typename:Vector2
separate	includes/classes/Flock.hpp	/^	bool	separate;$/;"	m	struct:s_globaloptions	typeref:typename:bool
separate	srcs/classes/Boid.cpp	/^void Boid::separate(void)$/;"	f	class:Boid	typeref:typename:void
separate	srcs/classes/Flock.cpp	/^void Flock::separate(void)$/;"	f	class:Flock	typeref:typename:void
separation_ratio	includes/classes/Boid.hpp	/^	float		separation_ratio;$/;"	m	struct:s_boid	typeref:typename:float
set	includes/imgui_internal.h	/^    inline void         set(T* data, T* data_end)   { Data = data; DataEnd = data_end; }$/;"	f	struct:ImSpan	typeref:typename:void
set	includes/imgui_internal.h	/^    inline void         set(T* data, int size)      { Data = data; DataEnd = data + size; }$/;"	f	struct:ImSpan	typeref:typename:void
set_random_values	srcs/main.cpp	/^void	set_random_values(Flock *flock)$/;"	f	typeref:typename:void
set_values	srcs/main.cpp	/^void	set_values(Flock *flock, t_boid properties, t_check_box check)$/;"	f	typeref:typename:void
shader	includes/raylib.h	/^    Shader shader;          \/\/ Material shader$/;"	m	struct:Material	typeref:typename:Shader
show_fps	includes/classes/Flock.hpp	/^	bool	show_fps;$/;"	m	struct:s_globaloptions	typeref:typename:bool
shrink	includes/imgui.h	/^    inline void         shrink(int new_size)                { IM_ASSERT(new_size <= Size); Size /;"	f	struct:ImVector	typeref:typename:void
sides	includes/classes/Boid.hpp	/^		int		sides;$/;"	m	class:Boid	typeref:typename:int
single_line	includes/imstb_textedit.h	/^   unsigned char single_line;$/;"	m	struct:STB_TexteditState	typeref:typename:unsigned char
size	includes/imgui.h	/^    inline int          size() const                        { return Size; }$/;"	f	struct:ImVector	typeref:typename:int
size	includes/imgui.h	/^    int                 size() const            { return Buf.Size ? Buf.Size - 1 : 0; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:int
size	includes/imgui_internal.h	/^    inline int          size() const                { return (int)(ptrdiff_t)(DataEnd - Data); }$/;"	f	struct:ImSpan	typeref:typename:int
size	includes/imgui_internal.h	/^    int             size()                                  { return LineOffsets.Size; }$/;"	f	struct:ImGuiTextIndex	typeref:typename:int
size	includes/imgui_internal.h	/^    int     size() const                { return Buf.Size; }$/;"	f	struct:ImChunkStream	typeref:typename:int
size	includes/imstb_truetype.h	/^   int size;$/;"	m	struct:__anon0587e8010108	typeref:typename:int
size_in_bytes	includes/imgui.h	/^    inline int          size_in_bytes() const               { return Size * (int)sizeof(T); }$/;"	f	struct:ImVector	typeref:typename:int
size_in_bytes	includes/imgui_internal.h	/^    inline int          size_in_bytes() const       { return (int)(ptrdiff_t)(DataEnd - Data) * /;"	f	struct:ImSpan	typeref:typename:int
skip_missing	includes/imstb_truetype.h	/^   int   skip_missing;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
snprintf	imgui_demo.cpp	/^#define snprintf /;"	d	file:
source	includes/raylib.h	/^    Rectangle source;       \/\/ Texture source rectangle$/;"	m	struct:NPatchInfo	typeref:typename:Rectangle
split	imgui.cpp	/^void ImGuiTextFilter::ImGuiTextRange::split(char separator, ImVector<ImGuiTextRange>* out) const$/;"	f	class:ImGuiTextFilter::ImGuiTextRange	typeref:typename:void
ssbo	includes/rlgl.h	/^        bool ssbo;                          \/\/ Shader storage buffer object support (GL_ARB_sh/;"	m	struct:rlglData::__anon315aabf20e08	typeref:typename:bool
stack	includes/rlgl.h	/^        Matrix stack[RL_MAX_MATRIX_STACK_SIZE];\/\/ Matrix stack for push\/pop$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:Matrix[]
stackCounter	includes/rlgl.h	/^        int stackCounter;                   \/\/ Matrix stack counter$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:int
started	includes/imstb_truetype.h	/^   int started;$/;"	m	struct:__anon0587e8010f08	typeref:typename:int
stb__barrier_in_b	imgui_draw.cpp	/^static const unsigned char *stb__barrier_in_b;$/;"	v	typeref:typename:const unsigned char *	file:
stb__barrier_out_b	imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	typeref:typename:unsigned char *	file:
stb__barrier_out_e	imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	typeref:typename:unsigned char *	file:
stb__dout	imgui_draw.cpp	/^static unsigned char *stb__dout;$/;"	v	typeref:typename:unsigned char *	file:
stb__in2	imgui_draw.cpp	/^#define stb__in2(/;"	d	file:
stb__in3	imgui_draw.cpp	/^#define stb__in3(/;"	d	file:
stb__in4	imgui_draw.cpp	/^#define stb__in4(/;"	d	file:
stb__lit	imgui_draw.cpp	/^static void stb__lit(const unsigned char *data, unsigned int length)$/;"	f	typeref:typename:void	file:
stb__match	imgui_draw.cpp	/^static void stb__match(const unsigned char *data, unsigned int length)$/;"	f	typeref:typename:void	file:
stb_adler32	imgui_draw.cpp	/^static unsigned int stb_adler32(unsigned int adler32, unsigned char *buffer, unsigned int buflen/;"	f	typeref:typename:unsigned int	file:
stb_decompress	imgui_draw.cpp	/^static unsigned int stb_decompress(unsigned char *output, const unsigned char *i, unsigned int \//;"	f	typeref:typename:unsigned int	file:
stb_decompress_length	imgui_draw.cpp	/^static unsigned int stb_decompress_length(const unsigned char *input)$/;"	f	typeref:typename:unsigned int	file:
stb_decompress_token	imgui_draw.cpp	/^static const unsigned char *stb_decompress_token(const unsigned char *i)$/;"	f	typeref:typename:const unsigned char *	file:
stb_text_create_undo_record	includes/imstb_textedit.h	/^static StbUndoRecord *stb_text_create_undo_record(StbUndoState *state, int numchars)$/;"	f	typeref:typename:StbUndoRecord *
stb_text_createundo	includes/imstb_textedit.h	/^static IMSTB_TEXTEDIT_CHARTYPE *stb_text_createundo(StbUndoState *state, int pos, int insert_len/;"	f	typeref:typename:IMSTB_TEXTEDIT_CHARTYPE *
stb_text_locate_coord	includes/imstb_textedit.h	/^static int stb_text_locate_coord(IMSTB_TEXTEDIT_STRING *str, float x, float y)$/;"	f	typeref:typename:int
stb_text_makeundo_delete	includes/imstb_textedit.h	/^static void stb_text_makeundo_delete(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, int w/;"	f	typeref:typename:void
stb_text_makeundo_insert	includes/imstb_textedit.h	/^static void stb_text_makeundo_insert(STB_TexteditState *state, int where, int length)$/;"	f	typeref:typename:void
stb_text_makeundo_replace	includes/imstb_textedit.h	/^static void stb_text_makeundo_replace(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, int /;"	f	typeref:typename:void
stb_text_redo	includes/imstb_textedit.h	/^static void stb_text_redo(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_text_undo	includes/imstb_textedit.h	/^static void stb_text_undo(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_clamp	includes/imstb_textedit.h	/^static void stb_textedit_clamp(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_clear_state	includes/imstb_textedit.h	/^static void stb_textedit_clear_state(STB_TexteditState *state, int is_single_line)$/;"	f	typeref:typename:void
stb_textedit_click	includes/imstb_textedit.h	/^static void stb_textedit_click(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, fl/;"	f	typeref:typename:void
stb_textedit_cut	includes/imstb_textedit.h	/^static int stb_textedit_cut(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:int
stb_textedit_delete	includes/imstb_textedit.h	/^static void stb_textedit_delete(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, int where,/;"	f	typeref:typename:void
stb_textedit_delete_selection	includes/imstb_textedit.h	/^static void stb_textedit_delete_selection(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_discard_redo	includes/imstb_textedit.h	/^static void stb_textedit_discard_redo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_discard_undo	includes/imstb_textedit.h	/^static void stb_textedit_discard_undo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_drag	includes/imstb_textedit.h	/^static void stb_textedit_drag(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, flo/;"	f	typeref:typename:void
stb_textedit_find_charpos	includes/imstb_textedit.h	/^static void stb_textedit_find_charpos(StbFindState *find, IMSTB_TEXTEDIT_STRING *str, int n, int/;"	f	typeref:typename:void
stb_textedit_flush_redo	includes/imstb_textedit.h	/^static void stb_textedit_flush_redo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_initialize_state	includes/imstb_textedit.h	/^static void stb_textedit_initialize_state(STB_TexteditState *state, int is_single_line)$/;"	f	typeref:typename:void
stb_textedit_key	includes/imstb_textedit.h	/^static void stb_textedit_key(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_TEXTEDIT_/;"	f	typeref:typename:void
stb_textedit_move_to_first	includes/imstb_textedit.h	/^static void stb_textedit_move_to_first(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_move_to_last	includes/imstb_textedit.h	/^static void stb_textedit_move_to_last(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_move_to_word_next	includes/imstb_textedit.h	/^static int stb_textedit_move_to_word_next( IMSTB_TEXTEDIT_STRING *str, int c )$/;"	f	typeref:typename:int
stb_textedit_move_to_word_previous	includes/imstb_textedit.h	/^static int stb_textedit_move_to_word_previous( IMSTB_TEXTEDIT_STRING *str, int c )$/;"	f	typeref:typename:int
stb_textedit_paste	includes/imstb_textedit.h	/^static int stb_textedit_paste(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, IMSTB_TEXTED/;"	f	typeref:typename:int
stb_textedit_paste_internal	includes/imstb_textedit.h	/^static int stb_textedit_paste_internal(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, IMS/;"	f	typeref:typename:int
stb_textedit_prep_selection_at_cursor	includes/imstb_textedit.h	/^static void stb_textedit_prep_selection_at_cursor(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_replace	imgui_widgets.cpp	/^static void stb_textedit_replace(ImGuiInputTextState* str, STB_TexteditState* state, const IMSTB/;"	f	namespace:ImStb	typeref:typename:void	file:
stb_textedit_sortselection	includes/imstb_textedit.h	/^static void stb_textedit_sortselection(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_text	includes/imstb_textedit.h	/^static void stb_textedit_text(IMSTB_TEXTEDIT_STRING* str, STB_TexteditState* state, const IMSTB_/;"	f	typeref:typename:void
stbrp__findresult	includes/imstb_rectpack.h	/^} stbrp__findresult;$/;"	t	typeref:struct:__anonee1baa2c0308
stbrp__skyline_find_best_pos	includes/imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_find_best_pos(stbrp_context *c, int width, int height)$/;"	f	typeref:typename:stbrp__findresult
stbrp__skyline_find_min_y	includes/imstb_rectpack.h	/^static int stbrp__skyline_find_min_y(stbrp_context *c, stbrp_node *first, int x0, int width, int/;"	f	typeref:typename:int
stbrp__skyline_pack_rectangle	includes/imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_pack_rectangle(stbrp_context *context, int width, int he/;"	f	typeref:typename:stbrp__findresult
stbrp_context	includes/imstb_rectpack.h	/^struct stbrp_context$/;"	s
stbrp_context	includes/imstb_rectpack.h	/^typedef struct stbrp_context stbrp_context;$/;"	t	typeref:struct:stbrp_context
stbrp_context	includes/imstb_truetype.h	/^} stbrp_context;$/;"	t	typeref:struct:__anon0587e8011108
stbrp_coord	includes/imstb_rectpack.h	/^typedef int            stbrp_coord;$/;"	t	typeref:typename:int
stbrp_coord	includes/imstb_truetype.h	/^typedef int stbrp_coord;$/;"	t	typeref:typename:int
stbrp_init_target	includes/imstb_rectpack.h	/^STBRP_DEF void stbrp_init_target(stbrp_context *context, int width, int height, stbrp_node *node/;"	f	typeref:typename:STBRP_DEF void
stbrp_init_target	includes/imstb_truetype.h	/^static void stbrp_init_target(stbrp_context *con, int pw, int ph, stbrp_node *nodes, int num_nod/;"	f	typeref:typename:void
stbrp_node	includes/imstb_rectpack.h	/^struct stbrp_node$/;"	s
stbrp_node	includes/imstb_rectpack.h	/^typedef struct stbrp_node    stbrp_node;$/;"	t	typeref:struct:stbrp_node
stbrp_node	includes/imstb_truetype.h	/^} stbrp_node;$/;"	t	typeref:struct:__anon0587e8011208
stbrp_pack_rects	includes/imstb_rectpack.h	/^STBRP_DEF int stbrp_pack_rects(stbrp_context *context, stbrp_rect *rects, int num_rects)$/;"	f	typeref:typename:STBRP_DEF int
stbrp_pack_rects	includes/imstb_truetype.h	/^static void stbrp_pack_rects(stbrp_context *con, stbrp_rect *rects, int num_rects)$/;"	f	typeref:typename:void
stbrp_rect	includes/imstb_rectpack.h	/^struct stbrp_rect$/;"	s
stbrp_rect	includes/imstb_rectpack.h	/^typedef struct stbrp_rect    stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_rect	includes/imstb_truetype.h	/^struct stbrp_rect$/;"	s
stbrp_rect	includes/imstb_truetype.h	/^typedef struct stbrp_rect stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_setup_allow_out_of_mem	includes/imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_allow_out_of_mem(stbrp_context *context, int allow_out_of_mem)$/;"	f	typeref:typename:STBRP_DEF void
stbrp_setup_heuristic	includes/imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_heuristic(stbrp_context *context, int heuristic)$/;"	f	typeref:typename:STBRP_DEF void
stbtt_BakeFontBitmap	includes/imstb_truetype.h	/^STBTT_DEF int stbtt_BakeFontBitmap(const unsigned char *data, int offset,$/;"	f	typeref:typename:STBTT_DEF int
stbtt_BakeFontBitmap_internal	includes/imstb_truetype.h	/^static int stbtt_BakeFontBitmap_internal(unsigned char *data, int offset,  \/\/ font location (u/;"	f	typeref:typename:int
stbtt_CompareUTF8toUTF16_bigendian	includes/imstb_truetype.h	/^STBTT_DEF int stbtt_CompareUTF8toUTF16_bigendian(const char *s1, int len1, const char *s2, int l/;"	f	typeref:typename:STBTT_DEF int
stbtt_CompareUTF8toUTF16_bigendian_internal	includes/imstb_truetype.h	/^static int stbtt_CompareUTF8toUTF16_bigendian_internal(char *s1, int len1, char *s2, int len2)$/;"	f	typeref:typename:int
stbtt_FindGlyphIndex	includes/imstb_truetype.h	/^STBTT_DEF int stbtt_FindGlyphIndex(const stbtt_fontinfo *info, int unicode_codepoint)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_FindMatchingFont	includes/imstb_truetype.h	/^STBTT_DEF int stbtt_FindMatchingFont(const unsigned char *fontdata, const char *name, int flags)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_FindMatchingFont_internal	includes/imstb_truetype.h	/^static int stbtt_FindMatchingFont_internal(unsigned char *font_collection, char *name_utf8, stbt/;"	f	typeref:typename:int
stbtt_FindSVGDoc	includes/imstb_truetype.h	/^STBTT_DEF stbtt_uint8 *stbtt_FindSVGDoc(const stbtt_fontinfo *info, int gl)$/;"	f	typeref:typename:STBTT_DEF stbtt_uint8 *
stbtt_FlattenCurves	includes/imstb_truetype.h	/^static stbtt__point *stbtt_FlattenCurves(stbtt_vertex *vertices, int num_verts, float objspace_f/;"	f	typeref:typename:stbtt__point *
stbtt_FreeBitmap	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeBitmap(unsigned char *bitmap, void *userdata)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_FreeSDF	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeSDF(unsigned char *bitmap, void *userdata)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_FreeShape	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeShape(const stbtt_fontinfo *info, stbtt_vertex *v)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetBakedQuad	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_GetBakedQuad(const stbtt_bakedchar *chardata, int pw, int ph, int char_inde/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmap	includes/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmap(const stbtt_fontinfo *info, float scale_x, flo/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointBitmapBox	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo *font, int codepoint, float scal/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmapBoxSubpixel	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo *font, int codepoint, fl/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmapSubpixel	includes/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmapSubpixel(const stbtt_fontinfo *info, float scal/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointBox	includes/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointBox(const stbtt_fontinfo *info, int codepoint, int *x0, int *y0,/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointHMetrics	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointHMetrics(const stbtt_fontinfo *info, int codepoint, int *advanc/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointKernAdvance	includes/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetCodepointKernAdvance(const stbtt_fontinfo *info, int ch1, int ch2)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointSDF	includes/imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetCodepointSDF(const stbtt_fontinfo *info, float scale, int cod/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointSVG	includes/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointSVG(const stbtt_fontinfo *info, int unicode_codepoint, const cha/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointShape	includes/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointShape(const stbtt_fontinfo *info, int unicode_codepoint, stbtt_v/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetFontBoundingBox	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontBoundingBox(const stbtt_fontinfo *info, int *x0, int *y0, int *x1, i/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetFontNameString	includes/imstb_truetype.h	/^STBTT_DEF const char *stbtt_GetFontNameString(const stbtt_fontinfo *font, int *length, int platf/;"	f	typeref:typename:STBTT_DEF const char *
stbtt_GetFontOffsetForIndex	includes/imstb_truetype.h	/^STBTT_DEF int stbtt_GetFontOffsetForIndex(const unsigned char *data, int index)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetFontOffsetForIndex_internal	includes/imstb_truetype.h	/^static int stbtt_GetFontOffsetForIndex_internal(unsigned char *font_collection, int index)$/;"	f	typeref:typename:int
stbtt_GetFontVMetrics	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontVMetrics(const stbtt_fontinfo *info, int *ascent, int *descent, int /;"	f	typeref:typename:STBTT_DEF void
stbtt_GetFontVMetricsOS2	includes/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetFontVMetricsOS2(const stbtt_fontinfo *info, int *typoAscent, int *typoDe/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphBitmap	includes/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmap(const stbtt_fontinfo *info, float scale_x, float s/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphBitmapBox	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBox(const stbtt_fontinfo *font, int glyph, float scale_x, flo/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphBitmapBoxSubpixel	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo *font, int glyph, float scal/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphBitmapSubpixel	includes/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmapSubpixel(const stbtt_fontinfo *info, float scale_x,/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphBox	includes/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphBox(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, i/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphHMetrics	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphHMetrics(const stbtt_fontinfo *info, int glyph_index, int *advanceW/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphKernAdvance	includes/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int g1, int g2)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphSDF	includes/imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetGlyphSDF(const stbtt_fontinfo *info, float scale, int glyph, /;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphSVG	includes/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphSVG(const stbtt_fontinfo *info, int gl, const char **svg)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphShape	includes/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphShape(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetKerningTable	includes/imstb_truetype.h	/^STBTT_DEF int stbtt_GetKerningTable(const stbtt_fontinfo *info, stbtt_kerningentry* table, int t/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetKerningTableLength	includes/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetKerningTableLength(const stbtt_fontinfo *info)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetNumberOfFonts	includes/imstb_truetype.h	/^STBTT_DEF int stbtt_GetNumberOfFonts(const unsigned char *data)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetNumberOfFonts_internal	includes/imstb_truetype.h	/^static int stbtt_GetNumberOfFonts_internal(unsigned char *font_collection)$/;"	f	typeref:typename:int
stbtt_GetPackedQuad	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_GetPackedQuad(const stbtt_packedchar *chardata, int pw, int ph, int char_in/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetScaledFontVMetrics	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_GetScaledFontVMetrics(const unsigned char *fontdata, int index, float size,/;"	f	typeref:typename:STBTT_DEF void
stbtt_InitFont	includes/imstb_truetype.h	/^STBTT_DEF int stbtt_InitFont(stbtt_fontinfo *info, const unsigned char *data, int offset)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_InitFont_internal	includes/imstb_truetype.h	/^static int stbtt_InitFont_internal(stbtt_fontinfo *info, unsigned char *data, int fontstart)$/;"	f	typeref:typename:int
stbtt_IsGlyphEmpty	includes/imstb_truetype.h	/^STBTT_DEF int stbtt_IsGlyphEmpty(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_MakeCodepointBitmap	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmap(const stbtt_fontinfo *info, unsigned char *output, int /;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeCodepointBitmapSubpixel	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *outp/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeCodepointBitmapSubpixelPrefilter	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned c/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmap	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmapSubpixel	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, /;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmapSubpixelPrefilter	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char /;"	f	typeref:typename:STBTT_DEF void
stbtt_PackBegin	includes/imstb_truetype.h	/^STBTT_DEF int stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int pw, int ph, in/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackEnd	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_PackEnd  (stbtt_pack_context *spc)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackFontRange	includes/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRange(stbtt_pack_context *spc, const unsigned char *fontdata, int fo/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRanges	includes/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRanges(stbtt_pack_context *spc, const unsigned char *fontdata, int f/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRangesGatherRects	includes/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesGatherRects(stbtt_pack_context *spc, const stbtt_fontinfo *inf/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRangesPackRects	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_PackFontRangesPackRects(stbtt_pack_context *spc, stbrp_rect *rects, int num/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackFontRangesRenderIntoRects	includes/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesRenderIntoRects(stbtt_pack_context *spc, const stbtt_fontinfo /;"	f	typeref:typename:STBTT_DEF int
stbtt_PackSetOversampling	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_PackSetOversampling(stbtt_pack_context *spc, unsigned int h_oversample, uns/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackSetSkipMissingCodepoints	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_PackSetSkipMissingCodepoints(stbtt_pack_context *spc, int skip)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_Rasterize	includes/imstb_truetype.h	/^STBTT_DEF void stbtt_Rasterize(stbtt__bitmap *result, float flatness_in_pixels, stbtt_vertex *ve/;"	f	typeref:typename:STBTT_DEF void
stbtt_ScaleForMappingEmToPixels	includes/imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForMappingEmToPixels(const stbtt_fontinfo *info, float pixels)$/;"	f	typeref:typename:STBTT_DEF float
stbtt_ScaleForPixelHeight	includes/imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, float height)$/;"	f	typeref:typename:STBTT_DEF float
stbtt__CompareUTF8toUTF16_bigendian_prefix	includes/imstb_truetype.h	/^static stbtt_int32 stbtt__CompareUTF8toUTF16_bigendian_prefix(stbtt_uint8 *s1, stbtt_int32 len1,/;"	f	typeref:typename:stbtt_int32
stbtt__GetCoverageIndex	includes/imstb_truetype.h	/^static stbtt_int32 stbtt__GetCoverageIndex(stbtt_uint8 *coverageTable, int glyph)$/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyfOffset	includes/imstb_truetype.h	/^static int stbtt__GetGlyfOffset(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:int
stbtt__GetGlyphClass	includes/imstb_truetype.h	/^static stbtt_int32  stbtt__GetGlyphClass(stbtt_uint8 *classDefTable, int glyph)$/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyphGPOSInfoAdvance	includes/imstb_truetype.h	/^static stbtt_int32 stbtt__GetGlyphGPOSInfoAdvance(const stbtt_fontinfo *info, int glyph1, int gl/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyphInfoT2	includes/imstb_truetype.h	/^static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, /;"	f	typeref:typename:int
stbtt__GetGlyphKernInfoAdvance	includes/imstb_truetype.h	/^static int stbtt__GetGlyphKernInfoAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2)$/;"	f	typeref:typename:int
stbtt__GetGlyphShapeT2	includes/imstb_truetype.h	/^static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:int
stbtt__GetGlyphShapeTT	includes/imstb_truetype.h	/^static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:int
stbtt__active_edge	includes/imstb_truetype.h	/^typedef struct stbtt__active_edge$/;"	s
stbtt__active_edge	includes/imstb_truetype.h	/^} stbtt__active_edge;$/;"	t	typeref:struct:stbtt__active_edge
stbtt__add_point	includes/imstb_truetype.h	/^static void stbtt__add_point(stbtt__point *points, int n, float x, float y)$/;"	f	typeref:typename:void
stbtt__bitmap	includes/imstb_truetype.h	/^} stbtt__bitmap;$/;"	t	typeref:struct:__anon0587e8010808
stbtt__buf	includes/imstb_truetype.h	/^} stbtt__buf;$/;"	t	typeref:struct:__anon0587e8010108
stbtt__buf_get	includes/imstb_truetype.h	/^static stbtt_uint32 stbtt__buf_get(stbtt__buf *b, int n)$/;"	f	typeref:typename:stbtt_uint32
stbtt__buf_get16	includes/imstb_truetype.h	/^#define stbtt__buf_get16(/;"	d
stbtt__buf_get32	includes/imstb_truetype.h	/^#define stbtt__buf_get32(/;"	d
stbtt__buf_get8	includes/imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_get8(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint8
stbtt__buf_peek8	includes/imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_peek8(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint8
stbtt__buf_range	includes/imstb_truetype.h	/^static stbtt__buf stbtt__buf_range(const stbtt__buf *b, int o, int s)$/;"	f	typeref:typename:stbtt__buf
stbtt__buf_seek	includes/imstb_truetype.h	/^static void stbtt__buf_seek(stbtt__buf *b, int o)$/;"	f	typeref:typename:void
stbtt__buf_skip	includes/imstb_truetype.h	/^static void stbtt__buf_skip(stbtt__buf *b, int o)$/;"	f	typeref:typename:void
stbtt__cff_get_index	includes/imstb_truetype.h	/^static stbtt__buf stbtt__cff_get_index(stbtt__buf *b)$/;"	f	typeref:typename:stbtt__buf
stbtt__cff_index_count	includes/imstb_truetype.h	/^static int stbtt__cff_index_count(stbtt__buf *b)$/;"	f	typeref:typename:int
stbtt__cff_index_get	includes/imstb_truetype.h	/^static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)$/;"	f	typeref:typename:stbtt__buf
stbtt__cff_int	includes/imstb_truetype.h	/^static stbtt_uint32 stbtt__cff_int(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint32
stbtt__cff_skip_operand	includes/imstb_truetype.h	/^static void stbtt__cff_skip_operand(stbtt__buf *b) {$/;"	f	typeref:typename:void
stbtt__check_size16	includes/imstb_truetype.h	/^   typedef char stbtt__check_size16[sizeof(stbtt_int16)==2 ? 1 : -1];$/;"	t	typeref:typename:char[sizeof (stbtt_int16)==2?1:-1]
stbtt__check_size32	includes/imstb_truetype.h	/^   typedef char stbtt__check_size32[sizeof(stbtt_int32)==4 ? 1 : -1];$/;"	t	typeref:typename:char[sizeof (stbtt_int32)==4?1:-1]
stbtt__cid_get_glyph_subrs	includes/imstb_truetype.h	/^static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:stbtt__buf
stbtt__close_shape	includes/imstb_truetype.h	/^static int stbtt__close_shape(stbtt_vertex *vertices, int num_vertices, int was_off, int start_o/;"	f	typeref:typename:int
stbtt__compute_crossings_x	includes/imstb_truetype.h	/^static int stbtt__compute_crossings_x(float x, float y, int nverts, stbtt_vertex *verts)$/;"	f	typeref:typename:int
stbtt__csctx	includes/imstb_truetype.h	/^} stbtt__csctx;$/;"	t	typeref:struct:__anon0587e8010f08
stbtt__csctx_close_shape	includes/imstb_truetype.h	/^static void stbtt__csctx_close_shape(stbtt__csctx *ctx)$/;"	f	typeref:typename:void
stbtt__csctx_rccurve_to	includes/imstb_truetype.h	/^static void stbtt__csctx_rccurve_to(stbtt__csctx *ctx, float dx1, float dy1, float dx2, float dy/;"	f	typeref:typename:void
stbtt__csctx_rline_to	includes/imstb_truetype.h	/^static void stbtt__csctx_rline_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f	typeref:typename:void
stbtt__csctx_rmove_to	includes/imstb_truetype.h	/^static void stbtt__csctx_rmove_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f	typeref:typename:void
stbtt__csctx_v	includes/imstb_truetype.h	/^static void stbtt__csctx_v(stbtt__csctx *c, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stbt/;"	f	typeref:typename:void
stbtt__cuberoot	includes/imstb_truetype.h	/^static float stbtt__cuberoot( float x )$/;"	f	typeref:typename:float
stbtt__dict_get	includes/imstb_truetype.h	/^static stbtt__buf stbtt__dict_get(stbtt__buf *b, int key)$/;"	f	typeref:typename:stbtt__buf
stbtt__dict_get_ints	includes/imstb_truetype.h	/^static void stbtt__dict_get_ints(stbtt__buf *b, int key, int outcount, stbtt_uint32 *out)$/;"	f	typeref:typename:void
stbtt__edge	includes/imstb_truetype.h	/^typedef struct stbtt__edge {$/;"	s
stbtt__edge	includes/imstb_truetype.h	/^} stbtt__edge;$/;"	t	typeref:struct:stbtt__edge
stbtt__fill_active_edges	includes/imstb_truetype.h	/^static void stbtt__fill_active_edges(unsigned char *scanline, int len, stbtt__active_edge *e, in/;"	f	typeref:typename:void
stbtt__fill_active_edges_new	includes/imstb_truetype.h	/^static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len, stbtt__/;"	f	typeref:typename:void
stbtt__find_table	includes/imstb_truetype.h	/^static stbtt_uint32 stbtt__find_table(stbtt_uint8 *data, stbtt_uint32 fontstart, const char *tag/;"	f	typeref:typename:stbtt_uint32
stbtt__get_subr	includes/imstb_truetype.h	/^static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)$/;"	f	typeref:typename:stbtt__buf
stbtt__get_subrs	includes/imstb_truetype.h	/^static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)$/;"	f	typeref:typename:stbtt__buf
stbtt__get_svg	includes/imstb_truetype.h	/^static int stbtt__get_svg(stbtt_fontinfo *info)$/;"	f	typeref:typename:int
stbtt__h_prefilter	includes/imstb_truetype.h	/^static void stbtt__h_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigne/;"	f	typeref:typename:void
stbtt__handle_clipped_edge	includes/imstb_truetype.h	/^static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge *e, float x0, /;"	f	typeref:typename:void
stbtt__hheap	includes/imstb_truetype.h	/^typedef struct stbtt__hheap$/;"	s
stbtt__hheap	includes/imstb_truetype.h	/^} stbtt__hheap;$/;"	t	typeref:struct:stbtt__hheap
stbtt__hheap_alloc	includes/imstb_truetype.h	/^static void *stbtt__hheap_alloc(stbtt__hheap *hh, size_t size, void *userdata)$/;"	f	typeref:typename:void *
stbtt__hheap_chunk	includes/imstb_truetype.h	/^typedef struct stbtt__hheap_chunk$/;"	s
stbtt__hheap_chunk	includes/imstb_truetype.h	/^} stbtt__hheap_chunk;$/;"	t	typeref:struct:stbtt__hheap_chunk
stbtt__hheap_cleanup	includes/imstb_truetype.h	/^static void stbtt__hheap_cleanup(stbtt__hheap *hh, void *userdata)$/;"	f	typeref:typename:void
stbtt__hheap_free	includes/imstb_truetype.h	/^static void stbtt__hheap_free(stbtt__hheap *hh, void *p)$/;"	f	typeref:typename:void
stbtt__isfont	includes/imstb_truetype.h	/^static int stbtt__isfont(stbtt_uint8 *font)$/;"	f	typeref:typename:int
stbtt__matches	includes/imstb_truetype.h	/^static int stbtt__matches(stbtt_uint8 *fc, stbtt_uint32 offset, stbtt_uint8 *name, stbtt_int32 f/;"	f	typeref:typename:int
stbtt__matchpair	includes/imstb_truetype.h	/^static int stbtt__matchpair(stbtt_uint8 *fc, stbtt_uint32 nm, stbtt_uint8 *name, stbtt_int32 nle/;"	f	typeref:typename:int
stbtt__new_active	includes/imstb_truetype.h	/^static stbtt__active_edge *stbtt__new_active(stbtt__hheap *hh, stbtt__edge *e, int off_x, float /;"	f	typeref:typename:stbtt__active_edge *
stbtt__new_buf	includes/imstb_truetype.h	/^static stbtt__buf stbtt__new_buf(const void *p, size_t size)$/;"	f	typeref:typename:stbtt__buf
stbtt__oversample_shift	includes/imstb_truetype.h	/^static float stbtt__oversample_shift(int oversample)$/;"	f	typeref:typename:float
stbtt__point	includes/imstb_truetype.h	/^} stbtt__point;$/;"	t	typeref:struct:__anon0587e8011008
stbtt__position_trapezoid_area	includes/imstb_truetype.h	/^static float stbtt__position_trapezoid_area(float height, float tx0, float tx1, float bx0, float/;"	f	typeref:typename:float
stbtt__rasterize	includes/imstb_truetype.h	/^static void stbtt__rasterize(stbtt__bitmap *result, stbtt__point *pts, int *wcount, int windings/;"	f	typeref:typename:void
stbtt__rasterize_sorted_edges	includes/imstb_truetype.h	/^static void stbtt__rasterize_sorted_edges(stbtt__bitmap *result, stbtt__edge *e, int n, int vsub/;"	f	typeref:typename:void
stbtt__ray_intersect_bezier	includes/imstb_truetype.h	/^static int stbtt__ray_intersect_bezier(float orig[2], float ray[2], float q0[2], float q1[2], fl/;"	f	typeref:typename:int
stbtt__run_charstring	includes/imstb_truetype.h	/^static int stbtt__run_charstring(const stbtt_fontinfo *info, int glyph_index, stbtt__csctx *c)$/;"	f	typeref:typename:int
stbtt__sized_trapezoid_area	includes/imstb_truetype.h	/^static float stbtt__sized_trapezoid_area(float height, float top_width, float bottom_width)$/;"	f	typeref:typename:float
stbtt__sized_triangle_area	includes/imstb_truetype.h	/^static float stbtt__sized_triangle_area(float height, float width)$/;"	f	typeref:typename:float
stbtt__solve_cubic	includes/imstb_truetype.h	/^static int stbtt__solve_cubic(float a, float b, float c, float* r)$/;"	f	typeref:typename:int
stbtt__sort_edges	includes/imstb_truetype.h	/^static void stbtt__sort_edges(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__sort_edges_ins_sort	includes/imstb_truetype.h	/^static void stbtt__sort_edges_ins_sort(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__sort_edges_quicksort	includes/imstb_truetype.h	/^static void stbtt__sort_edges_quicksort(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__tesselate_cubic	includes/imstb_truetype.h	/^static void stbtt__tesselate_cubic(stbtt__point *points, int *num_points, float x0, float y0, fl/;"	f	typeref:typename:void
stbtt__tesselate_curve	includes/imstb_truetype.h	/^static int stbtt__tesselate_curve(stbtt__point *points, int *num_points, float x0, float y0, flo/;"	f	typeref:typename:int
stbtt__test_oversample_pow2	includes/imstb_truetype.h	/^typedef int stbtt__test_oversample_pow2[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1)) == 0 ?/;"	t	typeref:typename:int[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1))==0?1:-1]
stbtt__track_vertex	includes/imstb_truetype.h	/^static void stbtt__track_vertex(stbtt__csctx *c, stbtt_int32 x, stbtt_int32 y)$/;"	f	typeref:typename:void
stbtt__v_prefilter	includes/imstb_truetype.h	/^static void stbtt__v_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigne/;"	f	typeref:typename:void
stbtt_aligned_quad	includes/imstb_truetype.h	/^} stbtt_aligned_quad;$/;"	t	typeref:struct:__anon0587e8010308
stbtt_bakedchar	includes/imstb_truetype.h	/^} stbtt_bakedchar;$/;"	t	typeref:struct:__anon0587e8010208
stbtt_fontinfo	includes/imstb_truetype.h	/^struct stbtt_fontinfo$/;"	s
stbtt_fontinfo	includes/imstb_truetype.h	/^typedef struct stbtt_fontinfo stbtt_fontinfo;$/;"	t	typeref:struct:stbtt_fontinfo
stbtt_int16	includes/imstb_truetype.h	/^   typedef signed   short  stbtt_int16;$/;"	t	typeref:typename:signed short
stbtt_int32	includes/imstb_truetype.h	/^   typedef signed   int    stbtt_int32;$/;"	t	typeref:typename:signed int
stbtt_int8	includes/imstb_truetype.h	/^   typedef signed   char   stbtt_int8;$/;"	t	typeref:typename:signed char
stbtt_kerningentry	includes/imstb_truetype.h	/^typedef struct stbtt_kerningentry$/;"	s
stbtt_kerningentry	includes/imstb_truetype.h	/^} stbtt_kerningentry;$/;"	t	typeref:struct:stbtt_kerningentry
stbtt_pack_context	includes/imstb_truetype.h	/^struct stbtt_pack_context {$/;"	s
stbtt_pack_context	includes/imstb_truetype.h	/^typedef struct stbtt_pack_context stbtt_pack_context;$/;"	t	typeref:struct:stbtt_pack_context
stbtt_pack_range	includes/imstb_truetype.h	/^} stbtt_pack_range;$/;"	t	typeref:struct:__anon0587e8010508
stbtt_packedchar	includes/imstb_truetype.h	/^} stbtt_packedchar;$/;"	t	typeref:struct:__anon0587e8010408
stbtt_setvertex	includes/imstb_truetype.h	/^static void stbtt_setvertex(stbtt_vertex *v, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stb/;"	f	typeref:typename:void
stbtt_tag	includes/imstb_truetype.h	/^#define stbtt_tag(/;"	d
stbtt_tag4	includes/imstb_truetype.h	/^#define stbtt_tag4(/;"	d
stbtt_uint16	includes/imstb_truetype.h	/^   typedef unsigned short  stbtt_uint16;$/;"	t	typeref:typename:unsigned short
stbtt_uint32	includes/imstb_truetype.h	/^   typedef unsigned int    stbtt_uint32;$/;"	t	typeref:typename:unsigned int
stbtt_uint8	includes/imstb_truetype.h	/^   typedef unsigned char   stbtt_uint8;$/;"	t	typeref:typename:unsigned char
stbtt_vertex	includes/imstb_truetype.h	/^   } stbtt_vertex;$/;"	t	typeref:struct:__anon0587e8010708
stbtt_vertex_type	includes/imstb_truetype.h	/^   #define stbtt_vertex_type /;"	d
stereoRender	includes/rlgl.h	/^        bool stereoRender;                  \/\/ Stereo rendering flag$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:bool
stream	includes/raylib.h	/^    AudioStream stream;         \/\/ Audio stream$/;"	m	struct:Music	typeref:typename:AudioStream
stream	includes/raylib.h	/^    AudioStream stream;         \/\/ Audio stream$/;"	m	struct:Sound	typeref:typename:AudioStream
stride	includes/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon0587e8010808	typeref:typename:int
stride_in_bytes	includes/imstb_truetype.h	/^   int   stride_in_bytes;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
subrs	includes/imstb_truetype.h	/^   stbtt__buf subrs;                  \/\/ private charstring subroutines index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
svg	includes/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
swap	includes/imgui.h	/^    inline void         swap(ImVector<T>& rhs)              { int rhs_size = rhs.Size; rhs.Size /;"	f	struct:ImVector	typeref:typename:void
swap	includes/imgui_internal.h	/^    void    swap(ImChunkStream<T>& rhs) { rhs.Buf.swap(Buf); }$/;"	f	struct:ImChunkStream	typeref:typename:void
sy	includes/imstb_truetype.h	/^   float sy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
t0	includes/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon0587e8010308	typeref:typename:float
t1	includes/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon0587e8010308	typeref:typename:float
t_average	includes/classes/Boid.hpp	/^}				t_average;$/;"	t	typeref:struct:s_average
t_boid	includes/classes/Boid.hpp	/^}				t_boid;$/;"	t	typeref:struct:s_boid
t_boid_list	includes/classes/SpatialHashing.hpp	/^typedef struct t_boid_list$/;"	s
t_boid_list	includes/classes/SpatialHashing.hpp	/^}				t_boid_list;$/;"	t	typeref:struct:t_boid_list
t_check_box	includes/classes/Flock.hpp	/^}				t_check_box;$/;"	t	typeref:struct:s_check_box
t_game	includes/game.hpp	/^}					t_game;$/;"	t	typeref:struct:s_game
t_globaloptions	includes/classes/Flock.hpp	/^}				t_globaloptions;$/;"	t	typeref:struct:s_globaloptions
t_hash_table	includes/classes/SpatialHashing.hpp	/^}				t_hash_table;$/;"	t	typeref:struct:s_hash_table
t_player	includes/game.hpp	/^}	t_player;$/;"	t	typeref:struct:s_player
table	includes/classes/SpatialHashing.hpp	/^		t_hash_table	table[HASH_LEN];$/;"	m	class:SpatialHashing	typeref:typename:t_hash_table[]
tangents	includes/raylib.h	/^    float *tangents;        \/\/ Vertex tangents (XYZW - 4 components per vertex) (shader-locati/;"	m	struct:Mesh	typeref:typename:float *
target	includes/raylib.h	/^    Vector2 target;         \/\/ Camera target (rotation and zoom origin)$/;"	m	struct:Camera2D	typeref:typename:Vector2
target	includes/raylib.h	/^    Vector3 target;         \/\/ Camera target it looks-at$/;"	m	struct:Camera3D	typeref:typename:Vector3
texAnisoFilter	includes/rlgl.h	/^        bool texAnisoFilter;                \/\/ Anisotropic texture filtering support (GL_EXT_t/;"	m	struct:rlglData::__anon315aabf20e08	typeref:typename:bool
texCompASTC	includes/rlgl.h	/^        bool texCompASTC;                   \/\/ ASTC texture compression support (GL_KHR_textur/;"	m	struct:rlglData::__anon315aabf20e08	typeref:typename:bool
texCompDXT	includes/rlgl.h	/^        bool texCompDXT;                    \/\/ DDS texture compression support (GL_EXT_texture/;"	m	struct:rlglData::__anon315aabf20e08	typeref:typename:bool
texCompETC1	includes/rlgl.h	/^        bool texCompETC1;                   \/\/ ETC1 texture compression support (GL_OES_compre/;"	m	struct:rlglData::__anon315aabf20e08	typeref:typename:bool
texCompETC2	includes/rlgl.h	/^        bool texCompETC2;                   \/\/ ETC2\/EAC texture compression support (GL_ARB_E/;"	m	struct:rlglData::__anon315aabf20e08	typeref:typename:bool
texCompPVRT	includes/rlgl.h	/^        bool texCompPVRT;                   \/\/ PVR texture compression support (GL_IMG_texture/;"	m	struct:rlglData::__anon315aabf20e08	typeref:typename:bool
texDepth	includes/rlgl.h	/^        bool texDepth;                      \/\/ Depth textures supported (GL_ARB_depth_texture,/;"	m	struct:rlglData::__anon315aabf20e08	typeref:typename:bool
texDepthWebGL	includes/rlgl.h	/^        bool texDepthWebGL;                 \/\/ Depth textures supported WebGL specific (GL_WEB/;"	m	struct:rlglData::__anon315aabf20e08	typeref:typename:bool
texFloat16	includes/rlgl.h	/^        bool texFloat16;                    \/\/ half float textures support (16 bit per channel/;"	m	struct:rlglData::__anon315aabf20e08	typeref:typename:bool
texFloat32	includes/rlgl.h	/^        bool texFloat32;                    \/\/ float textures support (32 bit per channel) (GL/;"	m	struct:rlglData::__anon315aabf20e08	typeref:typename:bool
texMirrorClamp	includes/rlgl.h	/^        bool texMirrorClamp;                \/\/ Clamp mirror wrap mode supported (GL_EXT_textur/;"	m	struct:rlglData::__anon315aabf20e08	typeref:typename:bool
texNPOT	includes/rlgl.h	/^        bool texNPOT;                       \/\/ NPOT textures full support (GL_ARB_texture_non_/;"	m	struct:rlglData::__anon315aabf20e08	typeref:typename:bool
texcoords	includes/raylib.h	/^    float *texcoords;       \/\/ Vertex texture coordinates (UV - 2 components per vertex) (shad/;"	m	struct:Mesh	typeref:typename:float *
texcoords	includes/rlgl.h	/^    float *texcoords;           \/\/ Vertex texture coordinates (UV - 2 components per vertex) (/;"	m	struct:rlVertexBuffer	typeref:typename:float *
texcoords2	includes/raylib.h	/^    float *texcoords2;      \/\/ Vertex texture second coordinates (UV - 2 components per vertex/;"	m	struct:Mesh	typeref:typename:float *
texcoordx	includes/rlgl.h	/^        float texcoordx, texcoordy;         \/\/ Current active texture coordinate (added on glV/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:float
texcoordy	includes/rlgl.h	/^        float texcoordx, texcoordy;         \/\/ Current active texture coordinate (added on glV/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:float
texture	includes/raylib.h	/^    Texture texture;        \/\/ Color buffer attachment texture$/;"	m	struct:RenderTexture	typeref:typename:Texture
texture	includes/raylib.h	/^    Texture2D texture;      \/\/ Material map texture$/;"	m	struct:MaterialMap	typeref:typename:Texture2D
texture	includes/raylib.h	/^    Texture2D texture;      \/\/ Texture atlas containing the glyphs$/;"	m	struct:Font	typeref:typename:Texture2D
textureId	includes/rlgl.h	/^    unsigned int textureId;     \/\/ Texture id to be used on the draw -> Use to create new draw/;"	m	struct:rlDrawCall	typeref:typename:unsigned int
top	includes/raylib.h	/^    int top;                \/\/ Top border offset$/;"	m	struct:NPatchInfo	typeref:typename:int
transform	includes/raylib.h	/^    Matrix transform;       \/\/ Local transform matrix$/;"	m	struct:Model	typeref:typename:Matrix
transform	includes/rlgl.h	/^        Matrix transform;                   \/\/ Transform matrix to be used with rlTranslate, r/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:Matrix
transformRequired	includes/rlgl.h	/^        bool transformRequired;             \/\/ Require transform matrix application to current/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:bool
translation	includes/raylib.h	/^    Vector3 translation;    \/\/ Translation$/;"	m	struct:Transform	typeref:typename:Vector3
triangleCount	includes/raylib.h	/^    int triangleCount;      \/\/ Number of triangles stored (indexed or not)$/;"	m	struct:Mesh	typeref:typename:int
ttBYTE	includes/imstb_truetype.h	/^#define ttBYTE(/;"	d
ttCHAR	includes/imstb_truetype.h	/^#define ttCHAR(/;"	d
ttFixed	includes/imstb_truetype.h	/^#define ttFixed(/;"	d
ttLONG	includes/imstb_truetype.h	/^static stbtt_int32 ttLONG(stbtt_uint8 *p)    { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]/;"	f	typeref:typename:stbtt_int32
ttSHORT	includes/imstb_truetype.h	/^static stbtt_int16 ttSHORT(stbtt_uint8 *p)   { return p[0]*256 + p[1]; }$/;"	f	typeref:typename:stbtt_int16
ttULONG	includes/imstb_truetype.h	/^static stbtt_uint32 ttULONG(stbtt_uint8 *p)  { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]/;"	f	typeref:typename:stbtt_uint32
ttUSHORT	includes/imstb_truetype.h	/^static stbtt_uint16 ttUSHORT(stbtt_uint8 *p) { return p[0]*256 + p[1]; }$/;"	f	typeref:typename:stbtt_uint16
type	includes/imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon0587e8010708	typeref:typename:unsigned char
type	includes/raylib.h	/^    unsigned int type;              \/\/ Event type (AutomationEventType)$/;"	m	struct:AutomationEvent	typeref:typename:unsigned int
undo_char	includes/imstb_textedit.h	/^   IMSTB_TEXTEDIT_CHARTYPE  undo_char[IMSTB_TEXTEDIT_UNDOCHARCOUNT];$/;"	m	struct:__anon3e283e0a0208	typeref:typename:IMSTB_TEXTEDIT_CHARTYPE[]
undo_char_point	includes/imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anon3e283e0a0208	typeref:typename:int
undo_point	includes/imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anon3e283e0a0208	typeref:typename:short
undo_rec	includes/imstb_textedit.h	/^   StbUndoRecord          undo_rec [IMSTB_TEXTEDIT_UNDOSTATECOUNT];$/;"	m	struct:__anon3e283e0a0208	typeref:typename:StbUndoRecord[]
undostate	includes/imstb_textedit.h	/^   StbUndoState undostate;$/;"	m	struct:STB_TexteditState	typeref:typename:StbUndoState
up	includes/raylib.h	/^    Vector3 up;             \/\/ Camera up vector (rotation over its axis)$/;"	m	struct:Camera3D	typeref:typename:Vector3
update	srcs/classes/Boid.cpp	/^void Boid::update(float gamespeed)$/;"	f	class:Boid	typeref:typename:void
update	srcs/classes/Flock.cpp	/^void Flock::update(void)$/;"	f	class:Flock	typeref:typename:void
update_engine	srcs/main.cpp	/^void	update_engine(t_game *game)$/;"	f	typeref:typename:void
update_flock	srcs/main.cpp	/^void	update_flock(t_game *game)$/;"	f	typeref:typename:void
user_allocator_context	includes/imstb_truetype.h	/^   void *user_allocator_context;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
userdata	includes/imstb_truetype.h	/^   void           * userdata;$/;"	m	struct:stbtt_fontinfo	typeref:typename:void *
uv	includes/imgui.h	/^    ImVec2  uv;$/;"	m	struct:ImDrawVert	typeref:typename:ImVec2
v	includes/raymath.h	/^    float v[16];$/;"	m	struct:float16	typeref:typename:float[16]
v	includes/raymath.h	/^    float v[3];$/;"	m	struct:float3	typeref:typename:float[3]
v	includes/rlgl.h	/^    float v[16];$/;"	m	struct:rl_float16	typeref:typename:float[16]
vResolution	includes/raylib.h	/^    int vResolution;                \/\/ Vertical resolution in pixels$/;"	m	struct:VrDeviceInfo	typeref:typename:int
vScreenSize	includes/raylib.h	/^    float vScreenSize;              \/\/ Vertical size in meters$/;"	m	struct:VrDeviceInfo	typeref:typename:float
v_oversample	includes/imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anon0587e8010508	typeref:typename:unsigned char
v_oversample	includes/imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned int
va_copy	imgui.cpp	/^#define va_copy(/;"	d	file:
val_f	includes/imgui.h	/^    union       { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStoragePair::__anonaa3f135c010a	typeref:typename:float
val_i	includes/imgui.h	/^    union       { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStoragePair::__anonaa3f135c010a	typeref:typename:int
val_p	includes/imgui.h	/^    union       { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStoragePair::__anonaa3f135c010a	typeref:typename:void *
value	includes/raylib.h	/^    float value;            \/\/ Material map value$/;"	m	struct:MaterialMap	typeref:typename:float
value	includes/raylib.h	/^    int value;              \/\/ Character value (Unicode)$/;"	m	struct:GlyphInfo	typeref:typename:int
value_type	includes/imgui.h	/^    typedef T                   value_type;$/;"	t	struct:ImVector	typeref:typename:T
vao	includes/rlgl.h	/^        bool vao;                           \/\/ VAO support (OpenGL ES2 could not support VAO e/;"	m	struct:rlglData::__anon315aabf20e08	typeref:typename:bool
vaoId	includes/raylib.h	/^    unsigned int vaoId;     \/\/ OpenGL Vertex Array Object id$/;"	m	struct:Mesh	typeref:typename:unsigned int
vaoId	includes/rlgl.h	/^    unsigned int vaoId;         \/\/ OpenGL Vertex Array Object id$/;"	m	struct:rlVertexBuffer	typeref:typename:unsigned int
vboId	includes/raylib.h	/^    unsigned int *vboId;    \/\/ OpenGL Vertex Buffer Objects id (default vertex data)$/;"	m	struct:Mesh	typeref:typename:unsigned int *
vboId	includes/rlgl.h	/^    unsigned int vboId[5];      \/\/ OpenGL Vertex Buffer Objects id (5 types of vertex data)$/;"	m	struct:rlVertexBuffer	typeref:typename:unsigned int[5]
vel	includes/classes/Boid.hpp	/^		Vector2 vel;$/;"	m	class:Boid	typeref:typename:Vector2
vel	includes/classes/Boid.hpp	/^	Vector2		vel;$/;"	m	struct:s_average	typeref:typename:Vector2
version	.vscode/c_cpp_properties.json	/^    "version": 4$/;"	n
vertexAlignment	includes/rlgl.h	/^    int vertexAlignment;        \/\/ Number of vertex required for index alignment (LINES, TRIAN/;"	m	struct:rlDrawCall	typeref:typename:int
vertexBuffer	includes/rlgl.h	/^    rlVertexBuffer *vertexBuffer; \/\/ Dynamic buffer(s) for vertex data$/;"	m	struct:rlRenderBatch	typeref:typename:rlVertexBuffer *
vertexCount	includes/raylib.h	/^    int vertexCount;        \/\/ Number of vertices stored in arrays$/;"	m	struct:Mesh	typeref:typename:int
vertexCount	includes/rlgl.h	/^    int vertexCount;            \/\/ Number of vertex of the draw$/;"	m	struct:rlDrawCall	typeref:typename:int
vertexCounter	includes/rlgl.h	/^        int vertexCounter;                  \/\/ Current active render batch vertex counter (gen/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:int
vertices	includes/raylib.h	/^    float *vertices;        \/\/ Vertex position (XYZ - 3 components per vertex) (shader-locatio/;"	m	struct:Mesh	typeref:typename:float *
vertices	includes/rlgl.h	/^    float *vertices;            \/\/ Vertex position (XYZ - 3 components per vertex) (shader-loc/;"	m	struct:rlVertexBuffer	typeref:typename:float *
viewOffset	includes/raylib.h	/^    Matrix viewOffset[2];           \/\/ VR view offset matrices (per eye)$/;"	m	struct:VrStereoConfig	typeref:typename:Matrix[2]
viewOffsetStereo	includes/rlgl.h	/^        Matrix viewOffsetStereo[2];         \/\/ VR stereo rendering eyes view offset matrices$/;"	m	struct:rlglData::__anon315aabf20d08	typeref:typename:Matrix[2]
vsnprintf	imgui.cpp	/^#define vsnprintf /;"	d	file:
vsnprintf	imgui_demo.cpp	/^#define vsnprintf /;"	d	file:
w	includes/imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
w	includes/imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
w	includes/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
w	includes/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon0587e8010808	typeref:typename:int
w	includes/raylib.h	/^    float w;                \/\/ Vector w component$/;"	m	struct:Vector4	typeref:typename:float
w	includes/raymath.h	/^    float w;$/;"	m	struct:Vector4	typeref:typename:float
was_packed	includes/imstb_rectpack.h	/^   int            was_packed;  \/\/ non-zero if valid packing$/;"	m	struct:stbrp_rect	typeref:typename:int
was_packed	includes/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
where	includes/imstb_textedit.h	/^   IMSTB_TEXTEDIT_POSITIONTYPE  where;$/;"	m	struct:__anon3e283e0a0108	typeref:typename:IMSTB_TEXTEDIT_POSITIONTYPE
width	includes/imstb_rectpack.h	/^   int width;$/;"	m	struct:stbrp_context	typeref:typename:int
width	includes/imstb_truetype.h	/^   int   width;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
width	includes/imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anon0587e8011108	typeref:typename:int
width	includes/raylib.h	/^    float width;            \/\/ Rectangle width$/;"	m	struct:Rectangle	typeref:typename:float
width	includes/raylib.h	/^    int width;              \/\/ Image base width$/;"	m	struct:Image	typeref:typename:int
width	includes/raylib.h	/^    int width;              \/\/ Texture base width$/;"	m	struct:Texture	typeref:typename:int
x	includes/imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
x	includes/imgui.h	/^    float                                   x, y;$/;"	m	struct:ImVec2	typeref:typename:float
x	includes/imgui_internal.h	/^    float   x;$/;"	m	struct:ImVec1	typeref:typename:float
x	includes/imgui_internal.h	/^    short   x, y;$/;"	m	struct:ImVec2ih	typeref:typename:short
x	includes/imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anonee1baa2c0308	typeref:typename:int
x	includes/imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
x	includes/imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_coord
x	includes/imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anon3e283e0a0408	typeref:typename:float
x	includes/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon0587e8010708	typeref:typename:stbtt_vertex_type
x	includes/imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anon0587e8010f08	typeref:typename:float
x	includes/imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anon0587e8011008	typeref:typename:float
x	includes/imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
x	includes/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon0587e8011108	typeref:typename:int
x	includes/imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
x	includes/imstb_truetype.h	/^   unsigned char x;$/;"	m	struct:__anon0587e8011208	typeref:typename:unsigned char
x	includes/raylib.h	/^    float x;                \/\/ Rectangle top-left corner position x$/;"	m	struct:Rectangle	typeref:typename:float
x	includes/raylib.h	/^    float x;                \/\/ Vector x component$/;"	m	struct:Vector2	typeref:typename:float
x	includes/raylib.h	/^    float x;                \/\/ Vector x component$/;"	m	struct:Vector3	typeref:typename:float
x	includes/raylib.h	/^    float x;                \/\/ Vector x component$/;"	m	struct:Vector4	typeref:typename:float
x	includes/raymath.h	/^    float x;$/;"	m	struct:Vector2	typeref:typename:float
x	includes/raymath.h	/^    float x;$/;"	m	struct:Vector3	typeref:typename:float
x	includes/raymath.h	/^    float x;$/;"	m	struct:Vector4	typeref:typename:float
x0	includes/imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, et/;"	m	struct:__anon3e283e0a0308	typeref:typename:float
x0	includes/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
x0	includes/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon0587e8010308	typeref:typename:float
x0	includes/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon0587e8010208	typeref:typename:unsigned short
x0	includes/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon0587e8010408	typeref:typename:unsigned short
x1	includes/imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, et/;"	m	struct:__anon3e283e0a0308	typeref:typename:float
x1	includes/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
x1	includes/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon0587e8010308	typeref:typename:float
x1	includes/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon0587e8010208	typeref:typename:unsigned short
x1	includes/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon0587e8010408	typeref:typename:unsigned short
xadvance	includes/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon0587e8010208	typeref:typename:float
xadvance	includes/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon0587e8010408	typeref:typename:float
xoff	includes/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon0587e8010208	typeref:typename:float
xoff	includes/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon0587e8010408	typeref:typename:float
xoff2	includes/imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anon0587e8010408	typeref:typename:float
y	includes/imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
y	includes/imgui.h	/^    float                                   x, y;$/;"	m	struct:ImVec2	typeref:typename:float
y	includes/imgui_internal.h	/^    short   x, y;$/;"	m	struct:ImVec2ih	typeref:typename:short
y	includes/imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anonee1baa2c0308	typeref:typename:int
y	includes/imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
y	includes/imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_coord
y	includes/imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anon3e283e0a0408	typeref:typename:float
y	includes/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon0587e8010708	typeref:typename:stbtt_vertex_type
y	includes/imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anon0587e8010f08	typeref:typename:float
y	includes/imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anon0587e8011008	typeref:typename:float
y	includes/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon0587e8011108	typeref:typename:int
y	includes/imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
y	includes/raylib.h	/^    float y;                \/\/ Rectangle top-left corner position y$/;"	m	struct:Rectangle	typeref:typename:float
y	includes/raylib.h	/^    float y;                \/\/ Vector y component$/;"	m	struct:Vector2	typeref:typename:float
y	includes/raylib.h	/^    float y;                \/\/ Vector y component$/;"	m	struct:Vector3	typeref:typename:float
y	includes/raylib.h	/^    float y;                \/\/ Vector y component$/;"	m	struct:Vector4	typeref:typename:float
y	includes/raymath.h	/^    float y;$/;"	m	struct:Vector2	typeref:typename:float
y	includes/raymath.h	/^    float y;$/;"	m	struct:Vector3	typeref:typename:float
y	includes/raymath.h	/^    float y;$/;"	m	struct:Vector4	typeref:typename:float
y0	includes/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
y0	includes/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon0587e8010308	typeref:typename:float
y0	includes/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon0587e8010208	typeref:typename:unsigned short
y0	includes/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon0587e8010408	typeref:typename:unsigned short
y1	includes/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
y1	includes/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon0587e8010308	typeref:typename:float
y1	includes/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon0587e8010208	typeref:typename:unsigned short
y1	includes/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon0587e8010408	typeref:typename:unsigned short
ymax	includes/imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anon3e283e0a0308	typeref:typename:float
ymin	includes/imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anon3e283e0a0308	typeref:typename:float
yoff	includes/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon0587e8010208	typeref:typename:float
yoff	includes/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon0587e8010408	typeref:typename:float
yoff2	includes/imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anon0587e8010408	typeref:typename:float
z	includes/imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
z	includes/raylib.h	/^    float z;                \/\/ Vector z component$/;"	m	struct:Vector3	typeref:typename:float
z	includes/raylib.h	/^    float z;                \/\/ Vector z component$/;"	m	struct:Vector4	typeref:typename:float
z	includes/raymath.h	/^    float z;$/;"	m	struct:Vector3	typeref:typename:float
z	includes/raymath.h	/^    float z;$/;"	m	struct:Vector4	typeref:typename:float
zoom	includes/raylib.h	/^    float zoom;             \/\/ Camera zoom (scaling), should be 1.0f by default$/;"	m	struct:Camera2D	typeref:typename:float
~Boid	srcs/classes/Boid.cpp	/^Boid::~Boid(void)$/;"	f	class:Boid
~ExampleAppConsole	imgui_demo.cpp	/^    ~ExampleAppConsole()$/;"	f	struct:ExampleAppConsole	file:
~Flock	srcs/classes/Flock.cpp	/^Flock::~Flock()$/;"	f	class:Flock
~ImDrawList	imgui_draw.cpp	/^ImDrawList::~ImDrawList()$/;"	f	class:ImDrawList
~ImDrawListSplitter	includes/imgui.h	/^    inline ~ImDrawListSplitter() { ClearFreeMemory(); }$/;"	f	struct:ImDrawListSplitter
~ImFont	imgui_draw.cpp	/^ImFont::~ImFont()$/;"	f	class:ImFont
~ImFontAtlas	imgui_draw.cpp	/^ImFontAtlas::~ImFontAtlas()$/;"	f	class:ImFontAtlas
~ImGuiDemoWindowData	imgui_demo.cpp	/^    ~ImGuiDemoWindowData() { if (DemoTree) ExampleTree_DestroyNode(DemoTree); }$/;"	f	struct:ImGuiDemoWindowData	file:
~ImGuiInputTextState	imgui_widgets.cpp	/^ImGuiInputTextState::~ImGuiInputTextState()$/;"	f	class:ImGuiInputTextState
~ImGuiListClipper	imgui.cpp	/^ImGuiListClipper::~ImGuiListClipper()$/;"	f	class:ImGuiListClipper
~ImGuiTable	includes/imgui_internal.h	/^    ~ImGuiTable()               { IM_FREE(RawData); }$/;"	f	struct:ImGuiTable
~ImGuiViewportP	includes/imgui_internal.h	/^    ~ImGuiViewportP()   { if (BgFgDrawLists[0]) IM_DELETE(BgFgDrawLists[0]); if (BgFgDrawLists[1/;"	f	struct:ImGuiViewportP
~ImGuiWindow	imgui.cpp	/^ImGuiWindow::~ImGuiWindow()$/;"	f	class:ImGuiWindow
~ImPool	includes/imgui_internal.h	/^    ~ImPool()   { Clear(); }$/;"	f	struct:ImPool
~ImVector	includes/imgui.h	/^    inline ~ImVector()                                      { if (Data) IM_FREE(Data); } \/\/ Im/;"	f	struct:ImVector
~SpatialHashing	srcs/classes/SpatialHashing.cpp	/^SpatialHashing::~SpatialHashing(void)$/;"	f	class:SpatialHashing
